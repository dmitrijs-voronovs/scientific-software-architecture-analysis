quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,"/// Diagnose a lookup that found results in an enclosing class during error; /// recovery. This usually indicates that the results were found in a dependent; /// base class that could not be searched as part of a template definition.; /// Always issues a diagnostic (though this may be only a warning in MS; /// compatibility mode).; ///; /// Return \c true if the error is unrecoverable, or \c false if the caller; /// should attempt to recover using these lookup results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:147,depend,dependent,147,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['depend'],['dependent']
Integrability,"/// Diagnose unused comparisons, both builtin and overloaded operators.; /// For '==' and '!=', suggest fixits for '=' or '|='.; ///; /// Adding a cast to void (or other expression wrappers) will prevent the; /// warning from firing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:181,wrap,wrappers,181,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['wrap'],['wrappers']
Integrability,"/// DiagnoseSentinelCalls - This routine checks whether a call or; /// message-send is to a declaration with the sentinel attribute, and; /// if so, it checks that the requirements of the sentinel are; /// satisfied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:33,rout,routine,33,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,"['message', 'rout']","['message-send', 'routine']"
Integrability,/// DiagnoseUnimplementedProperties - This routine warns on those properties; /// which must be implemented by this implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:43,rout,routine,43,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['rout'],['routine']
Integrability,"/// Diagnostic handler that's installed for all google tests.; /// It will generate a test failure when a diagnostic message is issued.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx:117,message,message,117,core/testsupport/src/TestSupport.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx,1,['message'],['message']
Integrability,/// Diagnostic information for inline asm reporting.; /// This is basically a message and an optional location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:78,message,message,78,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['message'],['message']
Integrability,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if the; /// files match, 1 if they are different, and 2 if there is a file error. This; /// function differs from DiffFiles in that you can specify an absolute and; /// relative FP error that is allowed to exist. If you specify a string to fill; /// in for the error option, it will set the string to an error message if an; /// error occurs, allowing the caller to distinguish between a failed diff and a; /// file system error.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:384,message,message,384,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,1,['message'],['message']
Integrability,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if; /// the files match, 1 if they are different, and 2 if there is a file error.; /// This function allows you to specify an absolute and relative FP error that; /// is allowed to exist. If you specify a string to fill in for the error; /// option, it will set the string to an error message if an error occurs, or; /// if the files are different.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:359,message,message,359,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,1,['message'],['message']
Integrability,/// Different ways to wrap braces after control statements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:22,wrap,wrap,22,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrap']
Integrability,/// Direct and transitive modular dependencies of the main source file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:34,depend,dependencies,34,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependencies']
Integrability,"/// Direct function to compute a \c ModuleSummaryIndex from a given module.; ///; /// If operating within a pass manager which has defined ways to compute the \c; /// BlockFrequencyInfo for a given function, that can be provided via; /// a std::function callback. Otherwise, this routine will manually construct; /// that information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ModuleSummaryAnalysis.h:280,rout,routine,280,interpreter/llvm-project/llvm/include/llvm/Analysis/ModuleSummaryAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ModuleSummaryAnalysis.h,1,['rout'],['routine']
Integrability,/// Direct modular dependencies that have already been built.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:19,depend,dependencies,19,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependencies']
Integrability,/// Directly reports a diagnostic message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h:34,message,message,34,interpreter/llvm-project/clang/lib/AST/Interp/State.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h,1,['message'],['message']
Integrability,"/// Disable all caches for sub-branches in an expression tree.; /// This is helpful when an expression with cached sub-branches needs to be integrated numerically.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h:140,integrat,integrated,140,roofit/roofitcore/res/RooFitImplHelpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h,1,['integrat'],['integrated']
Integrability,/// Disable shrink wrap as tBfar/BL will be used to adjust for long jumps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb1FrameLowering.h:19,wrap,wrap,19,interpreter/llvm-project/llvm/lib/Target/ARM/Thumb1FrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb1FrameLowering.h,1,['wrap'],['wrap']
Integrability,/// Disable the integrated assembler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:16,integrat,integrated,16,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,1,['integrat'],['integrated']
Integrability,/// Disable validation for a precompiled header and the modules it depends on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:67,depend,depends,67,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,1,['depend'],['depends']
Integrability,"/// Disabled because the integrator doesn't reach the asked precision. If this; /// behavior gets changed, this can be enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:25,integrat,integrator,25,roofit/roofitcore/test/testRooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx,2,['integrat'],['integrator']
Integrability,/// Disambiguates between the different kinds of things that can happen; /// after 'if (' or 'switch ('. This could be one of two different kinds of; /// declaration (depending on whether there is a ';' later) or an expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:167,depend,depending,167,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['depend'],['depending']
Integrability,/// DiscoverDependentGlobals - Return a set of GlobalVariables on which \p V; /// depends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:82,depend,depends,82,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['depend'],['depends']
Integrability,/// Dispatch the valid relocation finding logic to the; /// appropriate handler depending on the object file format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp:80,depend,depending,80,interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp,1,['depend'],['depending']
Integrability,/// Dispatching routine to lower various 128-bit x86 vector shuffles.; ///; /// This routine breaks down the specific type of 128-bit shuffle and; /// dispatches to the lowering routines accordingly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:16,rout,routine,16,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['rout'],"['routine', 'routines']"
Integrability,"/// DistributeEnsureUpperBound - used when composing 'omp distribute'; /// with 'omp for' in a same construct, EUB depends on DistUB",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:115,depend,depends,115,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['depend'],['depends']
Integrability,"/// Dithering mass distributer.; ///; /// This class splits up a single mass into portions by weight, dithering to; /// spread out error. No mass is lost. The dithering precision depends on the; /// precision of the product of \a BlockMass and \a BranchProbability.; ///; /// The distribution algorithm follows.; ///; /// 1. Initialize by saving the sum of the weights in \a RemWeight and the; /// mass to distribute in \a RemMass.; ///; /// 2. For each portion:; ///; /// 1. Construct a branch probability, P, as the portion's weight divided; /// by the current value of \a RemWeight.; /// 2. Calculate the portion's mass as \a RemMass times P.; /// 3. Update \a RemWeight and \a RemMass at each portion by subtracting; /// the current portion's weight and mass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp:179,depend,depends,179,interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp,1,['depend'],['depends']
Integrability,/// Do not align operands of binary and ternary expressions.; /// The wrapped lines are indented ``ContinuationIndentWidth`` spaces from; /// the start of the line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:70,wrap,wrapped,70,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapped']
Integrability,/// Do we have to disable shrink-wrapping? This has to be set if we emit any; /// instructions that clobber LR in the entry block because discovering this; /// in PEI is too late (happens after shrink-wrapping);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h:33,wrap,wrapping,33,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,2,['wrap'],['wrapping']
Integrability,"/// Does our value or shape depend on any other arg? Always false for RooCategory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:28,depend,depend,28,roofit/roofitcore/inc/RooCategory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h,1,['depend'],['depend']
Integrability,"/// Does this runtime provide ARC entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector?; ///; /// The ARC entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// retain/release behavior; if that's dynamically a large proportion of all; /// retained objects, using the entrypoint will also be faster than using a; /// message send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the correspond entrypoint:; /// retain => objc_retain; /// release => objc_release; /// autorelease => objc_autorelease",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:97,message,message,97,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,5,['message'],['message']
Integrability,"/// Does this runtime provide entrypoints that are likely to be faster; /// than an ordinary message send of the ""alloc"" selector?; ///; /// The ""alloc"" entrypoint is guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// alloc behavior; if that's dynamically a large proportion of all; /// objects, using the entrypoint will also be faster than using a message; /// send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the corresponding entrypoint:; /// alloc => objc_alloc; /// allocWithZone:nil => objc_allocWithZone",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:93,message,message,93,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,5,['message'],['message']
Integrability,"/// Does this runtime provide the objc_alloc_init entrypoint? This can apply; /// the same optimization as objc_alloc, but also sends an -init message,; /// reducing code size on the caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:143,message,message,143,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,1,['message'],['message']
Integrability,"/// Drive the analysis of memory accesses in the loop; ///; /// This class is responsible for analyzing the memory accesses of a loop. It; /// collects the accesses and then its main helper the AccessAnalysis class; /// finds and categorizes the dependences in buildDependenceSets.; ///; /// For memory dependences that can be analyzed at compile time, it determines; /// whether the dependence is part of cycle inhibiting vectorization. This work; /// is delegated to the MemoryDepChecker class.; ///; /// For memory dependences that cannot be determined at compile time, it; /// generates run-time checks to prove independence. This is done by; /// AccessAnalysis::canCheckPtrAtRT and the checks are maintained by the; /// RuntimePointerCheck class.; ///; /// If pointers can wrap or can't be expressed as affine AddRec expressions by; /// ScalarEvolution, we will generate run-time checks by emitting a; /// SCEVUnionPredicate.; ///; /// Checks for both memory dependences and the SCEV predicates contained in the; /// PSE must be emitted in order for the results of this analysis to be valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:246,depend,dependences,246,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,6,"['depend', 'wrap']","['dependence', 'dependences', 'wrap']"
Integrability,"/// Driver function to run the new pass manager over a module.; ///; /// This function only exists factored away from opt.cpp in order to prevent; /// inclusion of the new pass manager headers and the old headers into the same; /// file. It's interface is consequentially somewhat ad-hoc, but will go away; /// when the transition finishes.; ///; /// ThinLTOLinkOut is only used when OK is OK_OutputThinLTOBitcode, and can be; /// nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h:243,interface,interface,243,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h,1,['interface'],['interface']
Integrability,"/// Dual division/remainder interface.; ///; /// Sometimes it is convenient to divide two APInt values and obtain both the; /// quotient and remainder. This function does both operations in the same; /// computation making it a little more efficient. The pair of input arguments; /// may overlap with the pair of output arguments. It is safe to call; /// udivrem(X, Y, X, Y), for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:28,interface,interface,28,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['interface'],['interface']
Integrability,/// Dump the dependent variable set:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:13,depend,dependent,13,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['depend'],['dependent']
Integrability,/// DwarfEmitter presents interface to generate all debug info tables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:26,interface,interface,26,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,1,['interface'],['interface']
Integrability,"/// ECValue - The EquivalenceClasses data structure is just a set of these.; /// Each of these represents a relation for a value. First it stores the; /// value itself, which provides the ordering that the set queries. Next, it; /// provides a ""next pointer"", which is used to enumerate all of the elements; /// in the unioned set. Finally, it defines either a ""end of list pointer"" or; /// ""leader pointer"" depending on whether the value itself is a leader. A; /// ""leader pointer"" points to the node that is the leader for this element,; /// if the node is not a leader. A ""end of list pointer"" points to the last; /// node in the list of members of this list. Whether or not a node is a; /// leader is determined by a bit stolen from one of the pointers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:408,depend,depending,408,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,1,['depend'],['depending']
Integrability,/// ELF specific e_header flags; // It would be good if there were an MCELFAssembler class to hold this.; // ELF header flags are used both by the integrated and standalone assemblers.; // Access to the flags is necessary in cases where assembler directives affect; // which flags to be set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:147,integrat,integrated,147,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,1,['integrat'],['integrated']
Integrability,/// Each concrete expr subclass is expected to compute its dependence and call; /// this in the constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:59,depend,dependence,59,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependence']
Integrability,/// Earliest issue cycle as determined by data dependencies and instruction; /// latencies from the beginning of the trace. Data dependencies from; /// before the trace are not included.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:47,depend,dependencies,47,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,2,['depend'],['dependencies']
Integrability,"/// Either const T& or T, depending on whether it's cheap enough to take; /// parameters by value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:26,depend,depending,26,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,1,['depend'],['depending']
Integrability,"/// Either the type source information or the name of the type, if; /// it couldn't be resolved due to type-dependence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:108,depend,dependence,108,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['dependence']
Integrability,/// Emit 32- or 64-bit value depending on the DWARF format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h:29,depend,depending,29,interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,1,['depend'],['depending']
Integrability,/// Emit ORE message based in cost (default heuristic).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h:13,message,message,13,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,1,['message'],['message']
Integrability,/// Emit ORE message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h:13,message,message,13,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,1,['message'],['message']
Integrability,"/// Emit __kmpc_error call for error directive; /// extern void __kmpc_error(ident_t *loc, int severity, const char *message);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:117,message,message,117,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['message'],['message']
Integrability,"/// Emit a ""vtable"" message send. We emit a weak hidden-visibility; /// struct, initially containing the selector pointer and a pointer to; /// a ""fixup"" variant of the appropriate objc_msgSend. To call, we; /// load and call the function pointer, passing the address of the; /// struct as the second parameter. The runtime determines whether; /// the selector is currently emitted using vtable dispatch; if so, it; /// substitutes a stub function which simply tail-calls through the; /// appropriate vtable slot, and if not, it substitues a stub function; /// which tail-calls objc_msgSend. Both stubs adjust the selector; /// argument to correctly point to the selector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:20,message,message,20,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['message'],['message']
Integrability,"/// Emit a call to llvm.{sadd,uadd,ssub,usub,smul,umul}.with.overflow.*; /// depending on IntrinsicID.; ///; /// \arg CGF The current codegen function.; /// \arg IntrinsicID The ID for the Intrinsic we wish to generate.; /// \arg X The first argument to the llvm.*.with.overflow.*.; /// \arg Y The second argument to the llvm.*.with.overflow.*.; /// \arg Carry The carry returned by the llvm.*.with.overflow.*.; /// \returns The result (i.e. sum/product) returned by the intrinsic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:77,depend,depending,77,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['depend'],['depending']
Integrability,"/// Emit a call to the binary function DoubleFn, FloatFn or LongDoubleFn,; /// depending of the type of Op1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:79,depend,depending,79,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,1,['depend'],['depending']
Integrability,"/// Emit a call to the unary function DoubleFn, FloatFn or LongDoubleFn,; /// depending of the type of Op.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:78,depend,depending,78,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,1,['depend'],['depending']
Integrability,/// Emit a code snippet and caret line.; ///; /// This routine emits a single line's code snippet and caret line..; ///; /// \param Loc The location for the caret.; /// \param Ranges The underlined ranges for this code snippet.; /// \param Hints The FixIt hints active for this diagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp:55,rout,routine,55,interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,1,['rout'],['routine']
Integrability,"/// Emit a diagnostic that describes an effect on the run-time behavior; /// of the program being compiled.; ///; /// This routine emits the given diagnostic when the code currently being; /// type-checked is ""potentially evaluated"", meaning that there is a; /// possibility that the code will actually be executable. Code in sizeof(); /// expressions, code used only during overload resolution, etc., are not; /// potentially evaluated. This routine will suppress such diagnostics or,; /// in the absolutely nutty case of potentially potentially evaluated; /// expressions (C++ typeid), queue the diagnostic to potentially emit it; /// later.; ///; /// This routine should be used for all diagnostics that describe the run-time; /// behavior of a program, such as passing a non-POD value through an ellipsis.; /// Failure to do so will likely result in spurious diagnostics or failures; /// during overload resolution or within sizeof/alignof/typeof/typeid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:123,rout,routine,123,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,3,['rout'],['routine']
Integrability,/// Emit a diagnostic.; ///; /// This is the primary entry point for emitting diagnostic messages.; /// It handles formatting and rendering the message as well as any ancillary; /// information needed based on macros whose expansions impact the; /// diagnostic.; ///; /// \param Loc The location for this caret.; /// \param Level The level of the diagnostic to be emitted.; /// \param Message The diagnostic message to emit.; /// \param Ranges The underlined ranges for this code snippet.; /// \param FixItHints The FixIt hints active for this diagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h:89,message,messages,89,interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DiagnosticRenderer.h,4,"['Message', 'message']","['Message', 'message', 'messages']"
Integrability,"/// Emit a list of group names.; ///; /// This creates a long string which by itself contains a list of pascal style; /// strings, which consist of a length byte directly followed by the string.; ///; /// \code; /// static const char DiagGroupNames[] = {; /// \000\020#pragma-messages\t#warnings\020CFString-literal""; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp:276,message,messages,276,interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp,1,['message'],['messages']
Integrability,/// Emit a message about the specified location with the specified string.; ///; /// \param ShowColors Display colored messages if output is a terminal and; /// the default error handler is used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:11,message,message,11,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,2,['message'],"['message', 'messages']"
Integrability,"/// Emit a note at the location \p L, with the message \p Msg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:47,message,message,47,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,1,['message'],['message']
Integrability,"/// Emit a series of CopyToReg nodes that copies the specified value into the; /// registers specified by this object. This uses Chain/Flag as the input and; /// updates them for the output Chain/Flag. If the Flag pointer is nullptr, no; /// flag is used. If V is not nullptr, then it is used in printing better; /// diagnostic messages on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:328,message,messages,328,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,1,['message'],['messages']
Integrability,"/// Emit a warning at the location \p L, with the message \p Msg.; ///; /// \return The return value is true, if warnings are fatal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:50,message,message,50,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,1,['message'],['message']
Integrability,/// Emit an Objective-C interface type standalone debug info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:24,interface,interface,24,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['interface'],['interface']
Integrability,"/// Emit an error at the location \p L, with the message \p Msg.; ///; /// \return The return value is always true, as an idiomatic convenience to; /// clients.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:49,message,message,49,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,1,['message'],['message']
Integrability,/// Emit code for doacross ordered directive with 'depend' clause.; /// \param C 'depend' clause with 'sink|source' dependency kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:51,depend,depend,51,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,6,['depend'],"['depend', 'dependency']"
Integrability,/// Emit code for doacross ordered directive with 'doacross' clause.; /// \param C 'doacross' clause with 'sink|source' dependence type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:120,depend,dependence,120,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['depend'],['dependence']
Integrability,"/// Emit diagnostics for the diagnose_if attributes on Function, ignoring any; /// non-ArgDependent DiagnoseIfAttrs.; ///; /// Argument-dependent diagnose_if attributes should be checked each time a; /// function is used as a direct callee of a function call.; ///; /// Returns true if any errors were emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:136,depend,dependent,136,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['dependent']
Integrability,/// Emit function which wraps the outline parallel region; /// and controls the arguments which are passed to this function.; /// The wrapper ensures that the outlined function is called; /// with the correct arguments when data is shared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:24,wrap,wraps,24,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,2,['wrap'],"['wrapper', 'wraps']"
Integrability,/// Emit function which wraps the outline parallel region; /// and controls the parameters which are passed to this function.; /// The wrapper ensures that the outlined function is called; /// with the correct arguments when data is shared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:24,wrap,wraps,24,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,2,['wrap'],"['wrapper', 'wraps']"
Integrability,"/// Emit something like "".long Label + Offset"" or "".quad Label + Offset""; /// depending on the DWARF format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h:78,depend,depending,78,interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,1,['depend'],['depending']
Integrability,"/// Emit the 4- or 8-byte offset of a string from the start of its section.; ///; /// When possible, emit a DwarfStringPool section offset without any; /// relocations, and without using the symbol. Otherwise, defers to \a; /// emitDwarfSymbolReference().; ///; /// The length of the emitted value depends on the DWARF format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h:298,depend,depends,298,interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,1,['depend'],['depends']
Integrability,"/// Emit the build attributes that only depend on the hardware that we expect; // /to be available, and not on the ABI, or any source-language choices.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMTargetStreamer.cpp:40,depend,depend,40,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMTargetStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMTargetStreamer.cpp,1,['depend'],['depend']
Integrability,"/// Emit the code to return the named protocol as an object, as in a; /// \@protocol expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:38,protocol,protocol,38,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,2,['protocol'],['protocol']
Integrability,/// Emit the target dependent code to load a value of; /// \arg Ty from the \c __builtin_ms_va_list pointed to by \arg VAListAddr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:20,depend,dependent,20,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,1,['depend'],['dependent']
Integrability,"/// EmitAutoVarDecl - Emit code and set up an entry in LocalDeclMap for a; /// variable declaration with auto, register, or no storage class specifier.; /// These turn into simple stack objects, or GlobalValues depending on target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:211,depend,depending,211,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['depend'],['depending']
Integrability,/// EmitCtorPrologue - This routine generates necessary code to initialize; /// base classes and non-static data members belonging to this constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:28,rout,routine,28,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['rout'],['routine']
Integrability,"/// EmitIvarList - Emit the ivar list for the given; /// implementation. If ForClass is true the list of class ivars; /// (i.e. metaclass ivars) is emitted, otherwise the list of; /// interface ivars will be emitted. The return value has type; /// IvarListPtrTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:184,interface,interface,184,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['interface'],['interface']
Integrability,"/// EmitIvarList - Emit the ivar list for the given; /// implementation. If ForClass is true the list of class ivars; /// (i.e. metaclass ivars) is emitted, otherwise the list of; /// interface ivars will be emitted. The return value has type; /// IvarListnfABIPtrTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:184,interface,interface,184,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['interface'],['interface']
Integrability,/// EmitMachineNode - Generate machine code for a target-specific node and; /// needed dependencies.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:87,depend,dependencies,87,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,1,['depend'],['dependencies']
Integrability,/// EmitMetaClass - Emit a forward reference to the class structure; /// for the metaclass of the given interface. The return value has; /// type ClassPtrTy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:104,interface,interface,104,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['interface'],['interface']
Integrability,/// EmitNode - Generate machine code for a node and needed dependencies.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h:59,depend,dependencies,59,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,1,['depend'],['dependencies']
Integrability,"/// EmitObjCBoxedExpr - This routine generates code to call; /// the appropriate expression boxing method. This will either be; /// one of +[NSNumber numberWith<Type>:], or +[NSString stringWithUTF8String:],; /// or [NSValue valueWithBytes:objCType:].; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:29,rout,routine,29,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['rout'],['routine']
Integrability,"/// EmitProtocolExtension - Generate the protocol extension; /// structure used to store optional instance and class methods, and; /// protocol properties. The return value has type; /// ProtocolExtensionPtrTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:41,protocol,protocol,41,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,3,"['Protocol', 'protocol']","['ProtocolExtensionPtrTy', 'protocol']"
Integrability,"/// EmitProtocolList - Generate protocol list meta-data:; /// @code; /// struct _protocol_list_t {; /// long protocol_count; // Note, this is 32/64 bit; /// struct _protocol_t[protocol_count];; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:32,protocol,protocol,32,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['protocol'],['protocol']
Integrability,/// EmitProtocolList - Generate the list of referenced; /// protocols. The return value has type ProtocolListPtrTy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:60,protocol,protocols,60,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,4,"['Protocol', 'protocol']","['ProtocolListPtrTy', 'protocols']"
Integrability,"/// EmitRecordWithBlob - Emit the specified record to the stream, using an; /// abbrev that includes a blob at the end. The blob data to emit is; /// specified by the pointer and length specified at the end. In contrast to; /// EmitRecord, this routine expects that the first entry in Vals is the code; /// of the record.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamWriter.h:245,rout,routine,245,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamWriter.h,1,['rout'],['routine']
Integrability,/// EmitSpecialNode - Generate machine code for a target-independent node and; /// needed dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:90,depend,dependencies,90,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,1,['depend'],['dependencies']
Integrability,"/// EmitVAArg - Emit the target dependent code to load a value of; /// \arg Ty from the va_list pointed to by \arg VAListAddr.; // FIXME: This is a gaping layering violation if we wanted to drop; // the ABI information any lower than CodeGen. Of course, for; // VAArg handling it has to be at this level; there is no way to; // abstract this out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:32,depend,dependent,32,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,1,['depend'],['dependent']
Integrability,"/// Emits a call or invoke instruction to the given function, depending; /// on the current state of the EH stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:62,depend,depending,62,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['depend'],['depending']
Integrability,/// Emits a manually-constructed diagnostic to the given output stream.; ///; /// \param ShowColors Display colored messages if output is a terminal and; /// the default error handler is used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:116,message,messages,116,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,1,['message'],['messages']
Integrability,"/// Emits an \@synchronize() statement, using the \p syncEnterFn and; /// \p syncExitFn arguments as the functions called to lock and unlock; /// the object. This function can be called by subclasses that use; /// zero-cost exception handling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:15,synchroniz,synchronize,15,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,1,['synchroniz'],['synchronize']
Integrability,/// Emits an empty protocol. This is used for \@protocol() where no protocol; /// is found. The runtime will (hopefully) fix up the pointer to refer to the; /// real protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:19,protocol,protocol,19,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,4,['protocol'],['protocol']
Integrability,"/// Emits list of dependecies based on the provided data (array of; /// dependence/expression pairs) for depobj construct. In this case, the; /// variable is allocated in dynamically. \returns Pointer to the first; /// element of the array casted to VoidPtr type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:18,depend,dependecies,18,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['depend'],"['dependecies', 'dependence']"
Integrability,/// Emits list of dependecies based on the provided data (array of; /// dependence/expression pairs).; /// \returns Pointer to the first element of the array casted to VoidPtr type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:18,depend,dependecies,18,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['depend'],"['dependecies', 'dependence']"
Integrability,"/// Emits minimal diagnostics (report message + notes) for the 'none' output; /// type to the standard error, or to complement many others. Emits detailed; /// diagnostics in textual format for the 'text' output type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/TextDiagnostics.cpp:38,message,message,38,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/TextDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/TextDiagnostics.cpp,1,['message'],['message']
Integrability,/// Emits pending conditional assignments that depend on \p Symbol; /// being emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:47,depend,depend,47,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,1,['depend'],['depend']
Integrability,/// Emits the code to destroy the dependency object provided in depobj; /// directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:34,depend,dependency,34,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['depend'],['dependency']
Integrability,"/// Emitted to memory, but waiting on transitive dependencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:49,depend,dependencies,49,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['depend'],['dependencies']
Integrability,/// Enable migration to add conforming protocols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:39,protocol,protocols,39,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['protocol'],['protocols']
Integrability,/// Enable source-range based diagnostic messages.; ///; /// If diagnostic messages with source-range information are to be expected; /// and AST comes not from file (e.g. after LoadFromCompilerInvocation) this; /// function has to be called.; /// The function is to be called only once and the AST should be associated; /// with the same source file afterwards.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:41,message,messages,41,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,2,['message'],['messages']
Integrability,/// Encapsulate some common data and functionality needed for different; /// variations of data dependence graphs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h:96,depend,dependence,96,interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h,1,['depend'],['dependence']
Integrability,"/// Ensure that the type T is a complete type.; ///; /// This routine checks whether the type @p T is complete in any; /// context where a complete type is required. If @p T is a complete; /// type, returns false. If @p T is a class template specialization,; /// this routine then attempts to perform class template; /// instantiation. If instantiation fails, or if @p T is incomplete; /// and cannot be completed, issues the diagnostic @p diag (giving it; /// the type @p T) and returns true.; ///; /// @param Loc The location in the source that the incomplete type; /// diagnostic should refer to.; ///; /// @param T The type that this routine is examining for completeness.; ///; /// @param Kind Selects which completeness rules should be applied.; ///; /// @returns @c true if @p T is incomplete and a diagnostic was emitted,; /// @c false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:62,rout,routine,62,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,3,['rout'],['routine']
Integrability,"/// Ensure that the type T is a literal type.; ///; /// This routine checks whether the type @p T is a literal type. If @p T is an; /// incomplete type, an attempt is made to complete it. If @p T is a literal; /// type, or @p AllowIncompleteType is true and @p T is an incomplete type,; /// returns false. Otherwise, this routine issues the diagnostic @p PD (giving; /// it the type @p T), along with notes explaining why the type is not a; /// literal type, and returns true.; ///; /// @param Loc The location in the source that the non-literal type; /// diagnostic should refer to.; ///; /// @param T The type that this routine is examining for literalness.; ///; /// @param Diagnoser Emits a diagnostic if T is not a literal type.; ///; /// @returns @c true if @p T is not a literal type and a diagnostic was emitted,; /// @c false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:61,rout,routine,61,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,3,['rout'],['routine']
Integrability,"/// Ensure that the type of the given expression is complete.; ///; /// This routine checks whether the expression \p E has a complete type. If the; /// expression refers to an instantiable construct, that instantiation is; /// performed as needed to complete its type. Furthermore; /// Sema::RequireCompleteType is called for the expression's type (or in the; /// case of a reference type, the referred-to type).; ///; /// \param E The expression whose type is required to be complete.; /// \param Kind Selects which completeness rules should be applied.; /// \param Diagnoser The object that will emit a diagnostic if the type is; /// incomplete.; ///; /// \returns \c true if the type of \p E is incomplete and diagnosed, \c false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:77,rout,routine,77,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['rout'],['routine']
Integrability,"/// Ensures LCSSA form for every instruction from the Worklist in the scope of; /// innermost containing loop.; ///; /// For the given instruction which have uses outside of the loop, an LCSSA PHI; /// node is inserted and the uses outside the loop are rewritten to use this; /// node.; ///; /// LoopInfo and DominatorTree are required and, since the routine makes no; /// changes to CFG, preserved.; ///; /// Returns true if any modifications are made.; ///; /// This function may introduce unused PHI nodes. If \p PHIsToRemove is not; /// nullptr, those are added to it (before removing, the caller has to check if; /// they still do not have any uses). Otherwise the PHIs are directly removed.; ///; /// If \p InsertedPHIs is not nullptr, inserted phis will be added to this; /// vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:351,rout,routine,351,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,1,['rout'],['routine']
Integrability,"/// Ensures executor memory is synchronized with working copy memory, sends; /// functions to be called after initilization and before deinitialization and; /// applies memory protections; /// Returns a unique address identifying the allocation. This address should; /// be passed to deinitialize to run deallocation actions (and reset; /// permissions where possible).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MemoryMapper.h:31,synchroniz,synchronized,31,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MemoryMapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MemoryMapper.h,1,['synchroniz'],['synchronized']
Integrability,/// Enumeration used to describe how \c isNullPointerConstant(); /// should cope with value-dependent expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:92,depend,dependent,92,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependent']
Integrability,"/// Estimate the latency of the new and original instruction sequence by summing; /// up the latencies of the inserted and deleted instructions. This assumes; /// that the inserted and deleted instructions are dependent instruction chains,; /// which might not hold in all cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp:210,depend,dependent,210,interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,1,['depend'],['dependent']
Integrability,/// Estimate the overhead of scalarizing an instruction. This is a; /// convenience wrapper for the type-based getScalarizationOverhead API.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:84,wrap,wrapper,84,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['wrap'],['wrapper']
Integrability,"/// Estimates change in reg pressure from this SU.; /// It is achieved by trivial tracking of defined; /// and used vregs in dependent instructions.; /// The RawPressure flag makes this function to ignore; /// existing reg file sizes, and report raw def/use; /// balance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:125,depend,dependent,125,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,1,['depend'],['dependent']
Integrability,"/// Evaluate the result of an add between (conceptually) two MCValues.; ///; /// This routine conceptually attempts to construct an MCValue:; /// Result = (Result_A - Result_B + Result_Cst); /// from two MCValue's LHS and RHS where; /// Result = LHS + RHS; /// and; /// Result = (LHS_A - LHS_B + LHS_Cst) + (RHS_A - RHS_B + RHS_Cst).; ///; /// This routine attempts to aggressively fold the operands such that the result; /// is representable in an MCValue, but may not always succeed.; ///; /// \returns True on success, false if the result is not representable in an; /// MCValue.; /// NOTE: It is really important to have both the Asm and Layout arguments.; /// They might look redundant, but this function can be used before layout; /// is done (see the object streamer for example) and having the Asm argument; /// lets us avoid relaxations early.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCExpr.cpp:86,rout,routine,86,interpreter/llvm-project/llvm/lib/MC/MCExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCExpr.cpp,2,['rout'],['routine']
Integrability,"/// ExactSIVtest - Tests the SIV subscript pair; /// (Src and Dst) for dependence.; /// Things of the form [c1 + a1*i] and [c2 + a2*i],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a1 and a2 are constant.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction entry.; /// Set consistent to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:71,depend,dependence,71,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,3,['depend'],['dependence']
Integrability,"/// Examines the FunctionScopeInfo stack to determine the nearest; /// enclosing lambda (to the current lambda) that is 'capture-capable' for; /// the variable referenced in the current lambda (i.e. \p VarToCapture).; /// If successful, returns the index into Sema's FunctionScopeInfo stack; /// of the capture-capable lambda's LambdaScopeInfo.; ///; /// Given the current stack of lambdas being processed by Sema and; /// the variable of interest, to identify the nearest enclosing lambda (to the; /// current lambda at the top of the stack) that can truly capture; /// a variable, it has to have the following two properties:; /// a) 'capture-ready' - be the innermost lambda that is 'capture-ready':; /// - climb down the stack (i.e. starting from the innermost and examining; /// each outer lambda step by step) checking if each enclosing; /// lambda can either implicitly or explicitly capture the variable.; /// Record the first such lambda that is enclosed in a non-dependent; /// context. If no such lambda currently exists return failure.; /// b) 'capture-capable' - make sure the 'capture-ready' lambda can truly; /// capture the variable by checking all its enclosing lambdas:; /// - check if all outer lambdas enclosing the 'capture-ready' lambda; /// identified above in 'a' can also capture the variable (this is done; /// via tryCaptureVariable for variables and CheckCXXThisCapture for; /// 'this' by passing in the index of the Lambda identified in step 'a'); ///; /// \param FunctionScopes - Sema's stack of nested FunctionScopeInfo's (which a; /// LambdaScopeInfo inherits from). The current/deepest/innermost lambda; /// is at the top of the stack.; ///; /// \param VarToCapture - the variable to capture. If NULL, capture 'this'.; ///; ///; /// \returns An std::optional<unsigned> Index that if evaluates to 'true'; /// contains the index (into Sema's FunctionScopeInfo stack) of the innermost; /// lambda which is capture-capable. If the return value evaluates to 'false'; /// th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:973,depend,dependent,973,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,1,['depend'],['dependent']
Integrability,"/// Examines the FunctionScopeInfo stack to determine the nearest; /// enclosing lambda (to the current lambda) that is 'capture-ready' for; /// the variable referenced in the current lambda (i.e. \p VarToCapture).; /// If successful, returns the index into Sema's FunctionScopeInfo stack; /// of the capture-ready lambda's LambdaScopeInfo.; ///; /// Climbs down the stack of lambdas (deepest nested lambda - i.e. current; /// lambda - is on top) to determine the index of the nearest enclosing/outer; /// lambda that is ready to capture the \p VarToCapture being referenced in; /// the current lambda.; /// As we climb down the stack, we want the index of the first such lambda -; /// that is the lambda with the highest index that is 'capture-ready'.; ///; /// A lambda 'L' is capture-ready for 'V' (var or this) if:; /// - its enclosing context is non-dependent; /// - and if the chain of lambdas between L and the lambda in which; /// V is potentially used (i.e. the lambda at the top of the scope info; /// stack), can all capture or have already captured V.; /// If \p VarToCapture is 'null' then we are trying to capture 'this'.; ///; /// Note that a lambda that is deemed 'capture-ready' still needs to be checked; /// for whether it is 'capture-capable' (see; /// getStackIndexOfNearestEnclosingCaptureCapableLambda), before it can truly; /// capture.; ///; /// \param FunctionScopes - Sema's stack of nested FunctionScopeInfo's (which a; /// LambdaScopeInfo inherits from). The current/deepest/innermost lambda; /// is at the top of the stack and has the highest index.; /// \param VarToCapture - the variable to capture. If NULL, capture 'this'.; ///; /// \returns An std::optional<unsigned> Index that if evaluates to 'true'; /// contains the index (into Sema's FunctionScopeInfo stack) of the innermost; /// lambda which is capture-ready. If the return value evaluates to 'false'; /// then no lambda is capture-ready for \p VarToCapture.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:855,depend,dependent,855,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,1,['depend'],['dependent']
Integrability,/// Exchange the two operands to this instruction in such a way that it does; /// not modify the semantics of the instruction. The predicate value may be; /// changed to retain the same result if the predicate is order dependent; /// (e.g. ult).; /// Swap operands and adjust predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:219,depend,dependent,219,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['depend'],['dependent']
Integrability,/// Execute the work specified in \a Work on each dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:50,depend,dependence,50,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependence']
Integrability,/// Execute the work specified in \a Work on each device dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:57,depend,dependence,57,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependence']
Integrability,"/// Execute the work specified in \a Work on each host or device dependence if; /// \a IsHostDependenceto is true or false, respectively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:65,depend,dependence,65,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependence']
Integrability,/// Execute the work specified in \a Work on the host dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:54,depend,dependence,54,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependence']
Integrability,"/// ExecuteCompilation - Execute the compilation according to the command line; /// arguments and return an appropriate exit code.; ///; /// This routine handles additional processing that must be done in addition; /// to just running the subprocesses, for example reporting errors, setting; /// up response files, removing temporary files, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:146,rout,routine,146,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['rout'],['routine']
Integrability,/// Existing protocol references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:13,protocol,protocol,13,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['protocol'],['protocol']
Integrability,/// Expands MEMCPY to either LDMIA/STMIA or LDMIA_UPD/STMID_UPD; /// depending on whether the result is used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:69,depend,depending,69,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['depend'],['depending']
Integrability,"/// Explicitly record a dependence from \p FromAA to \p ToAA, that is if; /// \p FromAA changes \p ToAA should be updated as well.; ///; /// This method should be used in conjunction with the `getAAFor` method and; /// with the DepClass enum passed to the method set to None. This can; /// be beneficial to avoid false dependences but it requires the users of; /// `getAAFor` to explicitly record true dependences through this method.; /// The \p DepClass flag indicates if the dependence is striclty necessary.; /// That means for required dependences, if \p FromAA changes to an invalid; /// state, \p ToAA can be moved to a pessimistic fixpoint because it required; /// information from \p FromAA but none are available anymore.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,depend,dependence,24,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,5,['depend'],"['dependence', 'dependences']"
Integrability,"/// Extra source ranges associated with the note, in addition to the location; /// of the Message itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h:90,Message,Message,90,interpreter/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h,1,['Message'],['Message']
Integrability,/// ExtraDepKind - The kind of extra dependency file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:37,depend,dependency,37,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,1,['depend'],['dependency']
Integrability,/// Extract architecture slice from Interface.; ///; /// \param Arch architecture to extract from.; /// \return New InterfaceFile with extracted architecture slice.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:36,Interface,Interface,36,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,2,['Interface'],"['Interface', 'InterfaceFile']"
Integrability,/// Extract only the syntactic portions of this type's dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:55,depend,dependence,55,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,1,['depend'],['dependence']
Integrability,"/// Extract sentinel tracking option.; ///; /// Look through \p Options for the \a ilist_sentinel_tracking option, with the; /// default depending on LLVM_ENABLE_ABI_BREAKING_CHECKS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h:137,depend,depending,137,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,1,['depend'],['depending']
Integrability,/// Extract the semantic portions of this type's dependence that apply even; /// to uses where the type does not appear syntactically.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:49,depend,dependence,49,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,1,['depend'],['dependence']
Integrability,"/// FGR32, FGR64, AFGR64 (depending on context and; /// isFP64bit())",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:26,depend,depending,26,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['depend'],['depending']
Integrability,/// FIXME: This specialization should be moved into TargetProcessControlTypes.h; /// (or wherever those types get merged to) once ORC depends on JITLink.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h:134,depend,depends,134,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h,1,['depend'],['depends']
Integrability,/// FIXME: Type hierarchies in Objective-C can be deep. We could most likely; /// improve the efficiency of selector lookups and type checking by associating; /// with each protocol / interface / category the flattened instance tables. If; /// we used an immutable set to keep the table then it wouldn't add significant; /// memory cost and it would be handy for lookups.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:173,protocol,protocol,173,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,2,"['interface', 'protocol']","['interface', 'protocol']"
Integrability,/// FIXME: Wrap this in an elaborated-type-specifier?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:11,Wrap,Wrap,11,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['Wrap'],['Wrap']
Integrability,"/// FP16_TO_FP, FP_TO_FP16 - These operators are used to perform promotions; /// and truncation for half-precision (16 bit) floating numbers. These nodes; /// form a semi-softened interface for dealing with f16 (as an i16), which; /// is often a storage-only type but has native conversions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:180,interface,interface,180,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['interface'],['interface']
Integrability,/// FactManager manages the memory for all facts that are created during; /// the analysis of a single routine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:103,rout,routine,103,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['rout'],['routine']
Integrability,"/// Factory interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:12,interface,interface,12,roofit/roofitcore/src/RooCustomizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx,1,['interface'],['interface']
Integrability,"/// Fast multiset implementation for objects that can be identified by small; /// unsigned keys.; ///; /// SparseMultiSet allocates memory proportional to the size of the key; /// universe, so it is not recommended for building composite data structures.; /// It is useful for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseMultiSet provides constant-time; /// fast clear() as fast as a vector. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:604,depend,depend,604,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,2,['depend'],"['depend', 'depends']"
Integrability,/// Fetch a protocol by index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:12,protocol,protocol,12,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocol']
Integrability,"/// Figure out the rules for calling a function with the given formal; /// type using the given arguments. The arguments are necessary; /// because the function might be unprototyped, in which case it's; /// target-dependent in crazy ways.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:215,depend,dependent,215,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['depend'],['dependent']
Integrability,"/// FileOutputBuffer - This interface provides simple way to create an in-memory; /// buffer which will be written to a file. During the lifetime of these; /// objects, the content or existence of the specified file is undefined. That; /// is, creating an OutputBuffer for a file may immediately remove the file.; /// If the FileOutputBuffer is committed, the target file's content will become; /// the buffer content at the time of the commit. If the FileOutputBuffer is; /// not committed, the file will be deleted in the FileOutputBuffer destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h:28,interface,interface,28,interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h,1,['interface'],['interface']
Integrability,/// Fill up the array \a DA with all the device dependences that should be; /// added to the provided host action \a HostAction. By default it is; /// inactive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:48,depend,dependences,48,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['depend'],['dependences']
Integrability,"/// Filter out potentially dead comdat functions where other entries keep the; /// entire comdat group alive.; ///; /// This is designed for cases where functions appear to become dead but remain; /// alive due to other live entries in their comdat group.; ///; /// The \p DeadComdatFunctions container should only have pointers to; /// `Function`s which are members of a comdat group and are believed to be; /// dead.; ///; /// After this routine finishes, the only remaining `Function`s in \p; /// DeadComdatFunctions are those where every member of the comdat is listed; /// and thus removing them is safe (provided *all* are removed).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:440,rout,routine,440,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,1,['rout'],['routine']
Integrability,"/// Find a class template partial specialization with the given; /// type T.; ///; /// \param T a dependent type that names a specialization of this class; /// template.; ///; /// \returns the class template partial specialization that exactly matches; /// the type \p T, or nullptr if no such partial specialization exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:98,depend,dependent,98,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['depend'],['dependent']
Integrability,/// Find a dependent retain that precedes the given autorelease for which there; /// is nothing in between the two instructions that can affect the ref count of; /// Arg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:11,depend,dependent,11,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,1,['depend'],['dependent']
Integrability,"/// Find all of the methods that reside in the given container; /// (and its superclasses, protocols, etc.) that meet the given; /// criteria. Insert those methods into the map of known methods,; /// indexed by selector so they can be easily found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:91,protocol,protocols,91,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['protocol'],['protocols']
Integrability,"/// Find appropriate logging stream for message from given object with given topic and message level.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:40,message,message,40,roofit/roofitcore/inc/RooMsgService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h,2,['message'],['message']
Integrability,"/// Find dependent instructions. If there is exactly one dependent instruction,; /// return it. Otherwise, return null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.h:9,depend,dependent,9,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.h,2,['depend'],['dependent']
Integrability,/// Find dependent variables within child patterns,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:9,depend,dependent,9,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['depend'],['dependent']
Integrability,/// Find the associated classes and namespaces for; /// argument-dependent lookup for a call with the given set of; /// arguments.; ///; /// This routine computes the sets of associated classes and associated; /// namespaces searched by argument-dependent lookup; /// (C++ [basic.lookup.argdep]) for a given set of arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:65,depend,dependent,65,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,3,"['depend', 'rout']","['dependent', 'routine']"
Integrability,/// Find the best loop exiting block for layout.; ///; /// This routine implements the logic to analyze the loop looking for the best; /// block to layout at the top of the loop. Typically this is done to maximize; /// fallthrough opportunities.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:64,rout,routine,64,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['rout'],['routine']
Integrability,"/// Find the instantiation of the given declaration within the; /// current instantiation.; ///; /// This routine is intended to be used when \p D is a declaration; /// referenced from within a template, that needs to mapped into the; /// corresponding declaration within an instantiation. For example,; /// given:; ///; /// \code; /// template<typename T>; /// struct X {; /// enum Kind {; /// KnownValue = sizeof(T); /// };; ///; /// bool getKind() const { return KnownValue; }; /// };; ///; /// template struct X<int>;; /// \endcode; ///; /// In the instantiation of X<int>::getKind(), we need to map the \p; /// EnumConstantDecl for \p KnownValue (which refers to; /// X<T>::<Kind>::KnownValue) to its instantiation (X<int>::<Kind>::KnownValue).; /// \p FindInstantiatedDecl performs this mapping from within the instantiation; /// of X<int>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:106,rout,routine,106,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['rout'],['routine']
Integrability,"/// Find the parent class with dependent bases of the innermost enclosing method; /// context. Do not look for enclosing CXXRecordDecls directly, or we will end; /// up allowing unqualified dependent type names at class-level, which MSVC; /// correctly rejects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:31,depend,dependent,31,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['depend'],['dependent']
Integrability,/// Find the pressure set with the most change beyond its pressure limit after; /// traversing this instruction either upward or downward depending on the; /// closed end of the current region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:138,depend,depending,138,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,1,['depend'],['depending']
Integrability,"/// Find the protocol with the given name, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:13,protocol,protocol,13,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['protocol'],['protocol']
Integrability,"/// Find the region from which this symbol originates.; ///; /// Whenever the symbol was constructed to denote an unknown value of; /// a certain memory region, return this region. This method; /// allows checkers to make decisions depending on the origin of the symbol.; /// Symbol classes for which the origin region is known include; /// SymbolRegionValue which denotes the value of the region before; /// the beginning of the analysis, and SymbolDerived which denotes the value; /// of a certain memory region after its super region (a memory space or; /// a larger record region) is default-bound with a certain symbol.; /// It might return null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h:232,depend,depending,232,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h,1,['depend'],['depending']
Integrability,/// Find the set of allocas whose life ranges are contained within the; /// outlined region.; ///; /// Allocas which have life_time markers contained in the outlined region; /// should be pushed to the outlined function. The address bitcasts that; /// are used by the lifetime markers are also candidates for shrink-; /// wrapping. The instructions that need to be sunk are collected in; /// 'Allocas'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:322,wrap,wrapping,322,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,1,['wrap'],['wrapping']
Integrability,/// FindPropertyVisibleInPrimaryClass - Finds declaration of the property; /// with name 'PropertyId' in the primary class; including those in protocols; /// (direct or indirect) used by the primary class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp:143,protocol,protocols,143,interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,1,['protocol'],['protocols']
Integrability,/// FindProtocolDeclaration - This routine looks up protocols and; /// issues an error if they are not declared. It returns list of; /// protocol declarations in its 'Protocols' argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:35,rout,routine,35,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,4,"['Protocol', 'protocol', 'rout']","['Protocols', 'protocol', 'protocols', 'routine']"
Integrability,"/// Finds the corresponding file in this trie.; ///; /// Returns file name stored in this trie that is equivalent to 'FileName'; /// according to 'Comparator', if it can be uniquely identified. If there; /// are no matches an empty \c StringRef is returned. If there are ambiguous; /// matches, an empty \c StringRef is returned and a corresponding message; /// written to 'Error'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h:349,message,message,349,interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h,1,['message'],['message']
Integrability,"/// Finish parsing a C++ unqualified-id that is a template-id of; /// some form.; ///; /// This routine is invoked when a '<' is encountered after an identifier or; /// operator-function-id is parsed by \c ParseUnqualifiedId() to determine; /// whether the unqualified-id is actually a template-id. This routine will; /// then parse the template arguments and form the appropriate template-id to; /// return to the caller.; ///; /// \param SS the nested-name-specifier that precedes this template-id, if; /// we're actually parsing a qualified-id.; ///; /// \param ObjectType if this unqualified-id occurs within a member access; /// expression, the type of the base object whose member is being accessed.; ///; /// \param ObjectHadErrors this unqualified-id occurs within a member access; /// expression, indicates whether the original subexpressions had any errors.; ///; /// \param Name for constructor and destructor names, this is the actual; /// identifier that may be a template-name.; ///; /// \param NameLoc the location of the class-name in a constructor or; /// destructor.; ///; /// \param EnteringContext whether we're entering the scope of the; /// nested-name-specifier.; ///; /// \param Id as input, describes the template-name or operator-function-id; /// that precedes the '<'. If template arguments were parsed successfully,; /// will be updated with the template-id.; ///; /// \param AssumeTemplateId When true, this routine will assume that the name; /// refers to a template without performing name lookup to verify.; ///; /// \returns true if a parse error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:96,rout,routine,96,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,3,['rout'],['routine']
Integrability,/// First remove all the instructions of DelBB and then make sure DelBB has a; /// valid terminator instruction which is necessary to have when DelBB still; /// has to be inside of its parent Function while awaiting deletion under Lazy; /// UpdateStrategy to prevent other routines from asserting the state of the; /// IR is inconsistent. Assert if DelBB is nullptr or has predecessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h:273,rout,routines,273,interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,1,['rout'],['routines']
Integrability,/// Fixpoint iteration update function. Will be called every time a dependence; /// changed its state (and in the beginning).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:68,depend,dependence,68,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['depend'],['dependence']
Integrability,"/// Fixup the wrapped LCSSA phi node in the unique exit block. This simply; /// means we need to add the appropriate incoming value from the middle; /// block as exiting edges from the scalar epilogue loop (if present) are; /// already in place, and we exit the vector loop exclusively to the middle; /// block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:14,wrap,wrapped,14,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['wrap'],['wrapped']
Integrability,/// Flag for keeping track of weather a device routine has been emitted.; /// Device routines are specific to the,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:47,rout,routine,47,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['rout'],"['routine', 'routines']"
Integrability,/// Flag is set as the result of a message send to another; /// invalidation method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IvarInvalidationChecker.cpp:35,message,message,35,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IvarInvalidationChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IvarInvalidationChecker.cpp,1,['message'],['message']
Integrability,"/// Flag that is set to true if this action can be collapsed with others; /// actions that depend on it. This is true by default and set to false when; /// the action is used by two different tool chains, which is enabled by the; /// offloading support implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:91,depend,depend,91,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['depend']
Integrability,/// Flag to add inline messages as callsite attributes 'inline-remark'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineAdvisor.cpp:23,message,messages,23,interpreter/llvm-project/llvm/lib/Analysis/InlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineAdvisor.cpp,1,['message'],['messages']
Integrability,/// Flag to check if the wrapper front end action's consumer is; /// craeted or not,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h:25,wrap,wrapper,25,interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h,1,['wrap'],['wrapper']
Integrability,/// Flag to indicate that (optimal) NOPs should be emitted instead; /// of using the provided value. The exact interpretation of this flag is; /// target dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:154,depend,dependent,154,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,1,['depend'],['dependent']
Integrability,"/// For Data, Anti, and Output dependencies, the associated register. For; /// Data dependencies that don't currently have a register/ assigned, this; /// is set to zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:31,depend,dependencies,31,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,2,['depend'],['dependencies']
Integrability,"/// For a given MBB, create a wrapper block for it. Stores it in the; /// LDVSSAUpdater block map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:30,wrap,wrapper,30,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['wrap'],['wrapper']
Integrability,"/// For an inline function definition in C, or for a gnu_inline function; /// in C++, determine whether the definition will be externally visible.; ///; /// Inline function definitions are always available for inlining optimizations.; /// However, depending on the language dialect, declaration specifiers, and; /// attributes, the definition of an inline function may or may not be; /// ""externally"" visible to other translation units in the program.; ///; /// In C99, inline definitions are not externally visible by default. However,; /// if even one of the global-scope declarations is marked ""extern inline"", the; /// inline definition becomes externally visible (C99 6.7.4p6).; ///; /// In GNU89 mode, or if the gnu_inline attribute is attached to the function; /// definition, we use the GNU semantics for inline, which are nearly the; /// opposite of C99 semantics. In particular, ""inline"" by itself will create; /// an externally visible symbol, but ""extern inline"" will not create an; /// externally visible symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:248,depend,depending,248,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['depend'],['depending']
Integrability,"/// For an integer comparison, return 1 if the comparison is a signed operation; /// and 2 if the result is an unsigned comparison. Return zero if the operation; /// does not depend on the sign of the input (setne and seteq).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:175,depend,depend,175,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['depend'],['depend']
Integrability,"/// For an interface unit, this is the implicitly imported interface unit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:11,interface,interface,11,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['interface'],['interface']
Integrability,"/// For communication with wrappers, an instance of this struct must be shared between them and MinuitFcnGrad. It keeps; /// track of what has been evaluated for the current parameter set provided by Minuit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h:27,wrap,wrappers,27,roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h,1,['wrap'],['wrappers']
Integrability,"/// For each memory instruction, this class maintains difference of the; /// number of unsafe dependences that start out from this instruction minus; /// those that end here.; ///; /// By traversing the memory instructions in program order and accumulating this; /// number, we know whether any unsafe dependence crosses over a program point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp:94,depend,dependences,94,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,2,['depend'],"['dependence', 'dependences']"
Integrability,"/// For each object containing debug info, installs JITLink passes to synthesize; /// a debug object and then register it via the GDB JIT-registration interface.; ///; /// Currently MachO only. For ELF use DebugObjectManagerPlugin. These two; /// plugins will be merged in the near future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h:151,interface,interface,151,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h,1,['interface'],['interface']
Integrability,/// For given feature return dependent ones.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:29,depend,dependent,29,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['depend'],['dependent']
Integrability,"/// For simple use cases, survives without libRIO dependency",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx:50,depend,dependency,50,tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,1,['depend'],['dependency']
Integrability,"/// Force RooRealIntegral to offer all observables for internal integration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:64,integrat,integration,64,roofit/roofitcore/inc/RooAddPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h,1,['integrat'],['integration']
Integrability,"/// Force use of a given normalisation range.; /// Needed for functions or PDFs (e.g. RooAddPdf) whose shape depends on the choice of normalisation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBernstein.cxx:109,depend,depends,109,roofit/roofit/src/RooBernstein.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBernstein.cxx,1,['depend'],['depends']
Integrability,"/// Form a reference to the specialization of the given variable template; /// corresponding to the specified argument list, or a null-but-valid result; /// if the arguments are dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:178,depend,dependent,178,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['dependent']
Integrability,"/// Form a template name from a name that is syntactically required to name a; /// template, either due to use of the 'template' keyword or because a name in; /// this syntactic context is assumed to name a template (C++ [temp.names]p2-4).; ///; /// This action forms a template name given the name of the template and its; /// optional scope specifier. This is used when the 'template' keyword is used; /// or when the parsing context unambiguously treats a following '<' as; /// introducing a template argument list. Note that this may produce a; /// non-dependent template name if we can perform the lookup now and identify; /// the named template.; ///; /// For example, given ""x.MetaFun::template apply"", the scope specifier; /// \p SS will be ""MetaFun::"", \p TemplateKWLoc contains the location; /// of the ""template"" keyword, and ""apply"" is the \p Name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:557,depend,dependent,557,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['depend'],['dependent']
Integrability,"/// Format a dignostics report, e.g. for an exception message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx:54,message,message,54,core/foundation/v7/inc/ROOT/RError.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx,1,['message'],['message']
Integrability,"/// Forward determination of analytical integration capabilities to input p.d.f",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h:40,integrat,integration,40,roofit/roofitcore/inc/RooExtendPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h,2,['integrat'],['integration']
Integrability,/// Forwards the gatherered dependencies to the consumer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp:28,depend,dependencies,28,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,1,['depend'],['dependencies']
Integrability,/// FrameIndex with dependencies,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:20,depend,dependencies,20,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['depend'],['dependencies']
Integrability,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:632,depend,dependence-bits,632,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,7,"['Depend', 'depend']","['DependentDecltypeType', 'dependence-bits', 'dependent']"
Integrability,"/// Full match routine; ///; /// Fast implementation for the simple case of a named declaration at; /// namespace or RecordDecl scope.; /// It is slower than matchesNodeUnqualified, but faster than; /// matchesNodeFullSlow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:15,rout,routine,15,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['rout'],['routine']
Integrability,/// Full match routine; ///; /// It generates the fully qualified name of the declaration (which is; /// expensive) before trying to match.; /// It is slower but simple and works on all cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:15,rout,routine,15,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['rout'],['routine']
Integrability,"/// FullDependence - This class represents a dependence between two memory; /// references in a function. It contains detailed information about the; /// dependence (direction vectors, etc.) and is used when the compiler is; /// able to accurately analyze the interaction of the references; that is,; /// it is not a confused dependence (see Dependence). In most cases; /// (for output, flow, and anti dependences), the dependence implies an; /// ordering, where the source must precede the destination; in contrast,; /// input dependences are unordered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:45,depend,dependence,45,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,7,"['Depend', 'depend']","['Dependence', 'dependence', 'dependences']"
Integrability,"/// Function called from send and receive template functions in debug builds; /// used to monitor the messages that are going to be sent or are received.; /// By defining this in the implementation file, compilation is a lot faster; /// during debugging of Messenger or communication protocols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Messenger.cxx:102,message,messages,102,roofit/multiprocess/src/Messenger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Messenger.cxx,2,"['message', 'protocol']","['messages', 'protocols']"
Integrability,/// Function called when entering an \@synchronize block. Acquires the lock.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:39,synchroniz,synchronize,39,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['synchroniz'],['synchronize']
Integrability,/// Function called when exiting an \@synchronize block. Releases the lock.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:38,synchroniz,synchronize,38,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['synchroniz'],['synchronize']
Integrability,/// Function for getting the dependency preprocessor directives of a file.; ///; /// These are directives derived from a special form of lexing where the; /// source input is scanned for the preprocessor directives that might have an; /// effect on the dependencies for a compilation unit.; ///; /// Enables a client to cache the directives for a file and provide them; /// across multiple compiler invocations.; /// FIXME: Allow returning an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:29,depend,dependency,29,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,2,['depend'],"['dependencies', 'dependency']"
Integrability,/// Function that will perform the actual internalization. The reason for a; /// callback is that the linker cannot call internalizeModule without; /// creating a circular dependency between IPO and the linker.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/LinkModules.cpp:172,depend,dependency,172,interpreter/llvm-project/llvm/lib/Linker/LinkModules.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/LinkModules.cpp,1,['depend'],['dependency']
Integrability,"/// Function used for rethrowing exceptions, used at the end of \@finally or; /// \@synchronize blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:84,synchroniz,synchronize,84,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['synchroniz'],['synchronize']
Integrability,"/// FunctionParamTypesAreEqual - This routine checks two function proto types; /// for equality of their parameter types. Caller has already checked that; /// they have same number of parameters. If the parameters are different,; /// ArgPos will have the parameter index of the first different parameter.; /// If `Reversed` is true, the parameters of `NewType` will be compared in; /// reverse order. That's useful if one of the functions is being used as a C++20; /// synthesized operator overload with a reversed parameter order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:38,rout,routine,38,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['rout'],['routine']
Integrability,"/// Fuse two fusion candidates, creating a new fused loop.; ///; /// This method contains the mechanics of fusing two loops, represented by \p; /// FC0 and \p FC1. It is assumed that \p FC0 dominates \p FC1 and \p FC1; /// postdominates \p FC0 (making them control flow equivalent). It also; /// assumes that the other conditions for fusion have been met: adjacent,; /// identical trip counts, and no negative distance dependencies exist that; /// would prevent fusion. Thus, there is no checking for these conditions in; /// this method.; ///; /// Fusion is performed by rewiring the CFG to update successor blocks of the; /// components of tho loop. Specifically, the following changes are done:; ///; /// 1. The preheader of \p FC1 is removed as it is no longer necessary; /// (because it is currently only a single statement block).; /// 2. The latch of \p FC0 is modified to jump to the header of \p FC1.; /// 3. The latch of \p FC1 i modified to jump to the header of \p FC0.; /// 4. All blocks from \p FC1 are removed from FC1 and added to FC0.; ///; /// All of these modifications are done with dominator tree updates, thus; /// keeping the dominator (and post dominator) information up-to-date.; ///; /// This can be improved in the future by actually merging blocks during; /// fusion. For example, the preheader of \p FC1 can be merged with the; /// preheader of \p FC0. This would allow loops with more than a single; /// statement in the preheader to be fused. Similarly, the latch blocks of the; /// two loops could also be fused into a single block. This will require; /// analysis to prove it is safe to move the contents of the block past; /// existing code, which currently has not been implemented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:419,depend,dependencies,419,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['depend'],['dependencies']
Integrability,/// Fuzzer friendly interface for the llvm bitcode parser.; ///; /// \param Data Bitcode we are going to parse; /// \param Size Size of the 'Data' in bytes; /// \return New module or nullptr in case of error,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:20,interface,interface,20,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,1,['interface'],['interface']
Integrability,/// Fuzzer friendly interface for the llvm bitcode printer.; ///; /// \param M Module to print; /// \param Dest Location to store serialized module; /// \param MaxSize Size of the destination buffer; /// \return Number of bytes that were written. When module size exceeds MaxSize; /// returns 0 and leaves Dest unchanged.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:20,interface,interface,20,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,1,['interface'],['interface']
Integrability,/// GPR32 and GPR64 (depending on isGP64bit()),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:21,depend,depending,21,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['depend'],['depending']
Integrability,/// Generate Interface Stub Files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:13,Interface,Interface,13,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['Interface'],['Interface']
Integrability,/// Generate a USR for an Objective-C protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/USRGeneration.cpp:38,protocol,protocol,38,interpreter/llvm-project/clang/lib/Index/USRGeneration.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/USRGeneration.cpp,1,['protocol'],['protocol']
Integrability,/// Generate a USR fragment for an Objective-C protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:47,protocol,protocol,47,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,1,['protocol'],['protocol']
Integrability,/// Generate a category. A category contains a list of methods (and; /// accompanying metadata) and a list of protocols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:110,protocol,protocols,110,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,1,['protocol'],['protocols']
Integrability,/// Generate a message for BugReporterVisitor if the stored symbol is; /// marked as interesting by the actual bug report.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:15,message,message,15,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,1,['message'],['message']
Integrability,"/// Generate an Objective-C message send operation to the super; /// class initiated in a method for Class and with the given Self; /// object.; ///; /// \param Method - The method being called, this may be null if synthesizing; /// a property setter or getter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:28,message,message,28,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,1,['message'],['message']
Integrability,/// Generate an Objective-C message send operation.; ///; /// This variant allows for the call to be substituted with an optimized; /// variant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:28,message,message,28,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,1,['message'],['message']
Integrability,"/// Generate an Objective-C message send operation.; ///; /// \param Method - The method being called, this may be null if synthesizing; /// a property setter or getter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:28,message,message,28,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,1,['message'],['message']
Integrability,/// Generate an action that adds a host dependence to a device action. The; /// results will be kept in this action builder. Return true if an error was; /// found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:40,depend,dependence,40,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['depend'],['dependence']
Integrability,"/// Generate an action that adds device dependences (if any) to a host action.; /// If no device dependence actions exist, just return the host action \a; /// HostAction. If an error is found or if no builder requires the host action; /// to be generated, return nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:40,depend,dependences,40,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,2,['depend'],"['dependence', 'dependences']"
Integrability,"/// Generate cc1-compatible command line arguments from this instance,; /// wrapping the result as a std::vector<std::string>.; ///; /// This is a (less-efficient) wrapper over generateCC1CommandLine().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:76,wrap,wrapping,76,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,2,['wrap'],"['wrapper', 'wrapping']"
Integrability,/// Generate code for a message send expression in the nonfragile abi.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:24,message,message,24,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['message'],['message']
Integrability,/// Generate code for a message send expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:24,message,message,24,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,2,['message'],['message']
Integrability,"/// Generate code to compute the remainder of two integers of bitwidth up to; /// 32 bits. Uses the above routines and extends the inputs/truncates the; /// outputs to operate in 32 bits; that is, these routines are good for targets; /// that have no or very little suppport for smaller than 32 bit integer; /// arithmetic.; ///; /// Replace Rem with emulation code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:106,rout,routines,106,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,2,['rout'],['routines']
Integrability,/// Generate code to compute the remainder of two integers of bitwidth up to; /// 64 bits. Uses the above routines and extends the inputs/truncates the; /// outputs to operate in 64 bits.; ///; /// Replace Rem with emulation code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:106,rout,routines,106,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,1,['rout'],['routines']
Integrability,"/// Generate code to divide two integers of bitwidth up to 32 bits. Uses the; /// above routines and extends the inputs/truncates the outputs to operate; /// in 32 bits; that is, these routines are good for targets that have no; /// or very little support for smaller than 32 bit integer arithmetic.; ///; /// Replace Div with emulation code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:88,rout,routines,88,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,2,['rout'],['routines']
Integrability,/// Generate code to divide two integers of bitwidth up to 64 bits. Uses the; /// above routines and extends the inputs/truncates the outputs to operate; /// in 64 bits.; ///; /// Replace Div with emulation code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:88,rout,routines,88,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,1,['rout'],['routines']
Integrability,"/// Generate diagnostics for an invalid function redeclaration.; ///; /// This routine handles generating the diagnostic messages for an invalid; /// function redeclaration, including finding possible similar declarations; /// or performing typo correction if there are no previous declarations with; /// the same name.; ///; /// Returns a NamedDecl iff typo correction was performed and substituting in; /// the new declaration name does not cause new errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:79,rout,routine,79,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,"['message', 'rout']","['messages', 'routine']"
Integrability,"/// Generate gradient computation routine with respect to the parameters.; /// \returns true if a gradient was generated and GradientPar can be called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:34,rout,routine,34,hist/hist/inc/TFormula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h,1,['rout'],['routine']
Integrability,"/// Generate hessian computation routine with respect to the parameters.; /// \returns true if a hessian was generated and HessianPar can be called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:33,rout,routine,33,hist/hist/inc/TFormula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h,1,['rout'],['routine']
Integrability,/// Generate pre-compiled module from a C++ module interface file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:51,interface,interface,51,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['interface'],['interface']
Integrability,/// Generate the named protocol. Protocols contain method metadata but no; /// implementations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:23,protocol,protocol,23,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,2,"['Protocol', 'protocol']","['Protocols', 'protocol']"
Integrability,/// GenerateCategory - Build metadata for a category implementation.; /// struct _category_t {; /// const char * const name;; /// struct _class_t *const cls;; /// const struct _method_list_t * const instance_methods;; /// const struct _method_list_t * const class_methods;; /// const struct _protocol_list_t * const protocols;; /// const struct _prop_list_t * const properties;; /// const struct _prop_list_t * const class_properties;; /// const uint32_t size;; /// }; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:316,protocol,protocols,316,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['protocol'],['protocols']
Integrability,/// GenerateProtocolRef - This routine is called to generate code for; /// a protocol reference expression; as in:; /// @code; /// @protocol(Proto1);; /// @endcode; /// It generates a weak reference to l_OBJC_PROTOCOL_REFERENCE_$_Proto1; /// which will hold address of the protocol meta-data.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:31,rout,routine,31,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,4,"['protocol', 'rout']","['protocol', 'routine']"
Integrability,"/// Generates a list of referenced protocols. Classes, categories, and; /// protocols all use this structure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:35,protocol,protocols,35,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,2,['protocol'],['protocols']
Integrability,/// Generates a message send where the super is the receiver. This is; /// a message send to self with special delivery semantics indicating; /// which class's method should be called.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:16,message,message,16,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,4,['message'],['message']
Integrability,/// Generates a method list. This is used by protocols to define the required; /// and optional methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:45,protocol,protocols,45,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['protocol'],['protocols']
Integrability,"/// Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue; /// connected to the field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:46,wrap,wraps,46,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['wrap'],['wraps']
Integrability,"/// Generates an on disk hash table.; ///; /// This needs an \c Info that handles storing values into the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleInfo {; /// public:; /// typedef ExampleKey key_type; // Must be copy constructible; /// typedef ExampleKey &key_type_ref;; /// typedef ExampleData data_type; // Must be copy constructible; /// typedef ExampleData &data_type_ref;; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Calculate the hash for Key; /// static hash_value_type ComputeHash(key_type_ref Key);; /// /// Return the lengths, in bytes, of the given Key/Data pair.; /// static std::pair<offset_type, offset_type>; /// EmitKeyDataLength(raw_ostream &Out, key_type_ref Key, data_type_ref Data);; /// /// Write Key to Out. KeyLen is the length from EmitKeyDataLength.; /// static void EmitKey(raw_ostream &Out, key_type_ref Key,; /// offset_type KeyLen);; /// /// Write Data to Out. DataLen is the length from EmitKeyDataLength.; /// static void EmitData(raw_ostream &Out, key_type_ref Key,; /// data_type_ref Data, offset_type DataLen);; /// /// Determine if two keys are equal. Optional, only needed by contains.; /// static bool EqualKey(key_type_ref Key1, key_type_ref Key2);; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:210,interface,interface,210,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['interface'],['interface']
Integrability,"/// Generates the TargetMachine.; /// Leaves TM unchanged if it is unable to create the target machine.; /// Some of our clang tests specify triples which are not built; /// into clang. This is okay because these tests check the generated; /// IR, and they require DataLayout which depends on the triple.; /// In this case, we allow this method to fail and not report an error.; /// When MustCreateTM is used, we print an error if we are unable to load; /// the requested target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:282,depend,depends,282,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,1,['depend'],['depends']
Integrability,"/// Generator for '#omp ordered depend (source | sink)'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param NumLoops The number of loops in depend clause.; /// \param StoreValues The value will be stored in vector address.; /// \param Name The name of alloca instruction.; /// \param IsDependSource If true, depend source; otherwise, depend sink.; ///; /// \return The insertion position *after* the ordered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:32,depend,depend,32,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,4,['depend'],['depend']
Integrability,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// Instead of a logical iteration space, this allows specifying user-defined; /// loop counter values using increment, upper- and lower bounds. To; /// disambiguate the terminology when counting downwards, instead of lower; /// bounds we use \p Start for the loop counter value in the first body; /// iteration.; ///; /// Consider the following limitations:; ///; /// * A loop counter space over all integer values of its bit-width cannot be; /// represented. E.g using uint8_t, its loop trip count of 256 cannot be; /// stored into an 8 bit integer):; ///; /// DO I = 0, 255, 1; ///; /// * Unsigned wrapping is only supported when wrapping only ""once""; E.g.; /// effectively counting downwards:; ///; /// for (uint8_t i = 100u; i > 0; i += 127u); ///; ///; /// TODO: May need to add additional parameters to represent:; ///; /// * Allow representing downcounting with unsigned integers.; ///; /// * Sign of the step and the comparison operator might disagree:; ///; /// for (int i = 0; i < 42; i -= 1u); ///; //; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param Start Value of the loop counter for the first iterations.; /// \param Stop Loop counter values past this will stop the loop.; /// \param Step Loop counter increment after each iteration; negative; /// means counting down.; /// \param IsSigned Whether Start, Stop and Step are signed integers.; /// \param InclusiveStop Whether \p Stop itself is a valid value for the loop; /// counter.; /// \param ComputeIP Insertion point for instructions computing the trip; /// count. Can be used to ensure the trip count is available; /// at the outermost loop of a loop nest. If not set,; /// defaults to the preheader of the generated loop.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:681,wrap,wrapping,681,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,2,['wrap'],['wrapping']
Integrability,"/// Generic IR Platform Support; ///; /// Scrapes llvm.global_ctors and llvm.global_dtors and replaces them with; /// specially named 'init' and 'deinit'. Injects definitions / interposes for; /// some runtime API, including __cxa_atexit, dlopen, and dlclose.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp:155,Inject,Injects,155,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,1,['Inject'],['Injects']
Integrability,/// Generic IR-printing helper that unpacks a pointer to IRUnit wrapped into; /// Any and does actual print job.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:64,wrap,wrapped,64,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,1,['wrap'],['wrapped']
Integrability,"/// Generic assembler lexer interface, for use by target specific assembly; /// lexers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h:28,interface,interface,28,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,1,['interface'],['interface']
Integrability,"/// Generic assembler parser interface, for use by target specific; /// assembly parsers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:29,interface,interface,29,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,1,['interface'],['interface']
Integrability,"/// Generic base class for SMT Solvers; ///; /// This class is responsible for wrapping all sorts and expression generation,; /// through the mk* methods. It also provides methods to create SMT expressions; /// straight from clang's AST, through the from* methods.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h:79,wrap,wrapping,79,interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,1,['wrap'],['wrapping']
Integrability,/// Generic binary error.; ///; /// For errors that don't require their own specific sub-error (most errors); /// this class can be used to describe the error via a string message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:172,message,message,172,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h,1,['message'],['message']
Integrability,/// Generic file handler interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:25,interface,interface,25,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,1,['interface'],['interface']
Integrability,"/// Generic helper that updates a postorder sequence of SCCs for a potentially; /// cycle-introducing edge insertion.; ///; /// A postorder sequence of SCCs of a directed graph has one fundamental; /// property: all deges in the DAG of SCCs point ""up"" the sequence. That is,; /// all edges in the SCC DAG point to prior SCCs in the sequence.; ///; /// This routine both updates a postorder sequence and uses that sequence to; /// compute the set of SCCs connected into a cycle. It should only be called to; /// insert a ""downward"" edge which will require changing the sequence to; /// restore it to a postorder.; ///; /// When inserting an edge from an earlier SCC to a later SCC in some postorder; /// sequence, all of the SCCs which may be impacted are in the closed range of; /// those two within the postorder sequence. The algorithm used here to restore; /// the state is as follows:; ///; /// 1) Starting from the source SCC, construct a set of SCCs which reach the; /// source SCC consisting of just the source SCC. Then scan toward the; /// target SCC in postorder and for each SCC, if it has an edge to an SCC; /// in the set, add it to the set. Otherwise, the source SCC is not; /// a successor, move it in the postorder sequence to immediately before; /// the source SCC, shifting the source SCC and all SCCs in the set one; /// position toward the target SCC. Stop scanning after processing the; /// target SCC.; /// 2) If the source SCC is now past the target SCC in the postorder sequence,; /// and thus the new edge will flow toward the start, we are done.; /// 3) Otherwise, starting from the target SCC, walk all edges which reach an; /// SCC between the source and the target, and add them to the set of; /// connected SCCs, then recurse through them. Once a complete set of the; /// SCCs the target connects to is known, hoist the remaining SCCs between; /// the source and the target to be above the target. Note that there is no; /// need to process the source SCC, it is already ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp:357,rout,routine,357,interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,1,['rout'],['routine']
Integrability,"/// Generic information about the physical location of data. Values depend on the concrete storage type. E.g.,; /// for a local file `fPosition` might be a 64bit file offset. Referenced objects on storage can be compressed; /// and therefore we need to store their actual size.; /// TODO(jblomer): consider moving this to `RNTupleDescriptor`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:68,depend,depend,68,tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,1,['depend'],['depend']
Integrability,"/// Generic interface for all matchers.; ///; /// Used by the implementation of Matcher<T> and DynTypedMatcher.; /// In general, implement MatcherInterface<T> or SingleNodeMatcherInterface<T>; /// instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:12,interface,interface,12,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['interface'],['interface']
Integrability,"/// Generic interface for extending the MCAsmParser,; /// which is implemented by target and object file assembly parser; /// implementations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h:12,interface,interface,12,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,1,['interface'],['interface']
Integrability,"/// Generic interface for matchers on an AST node of type T.; ///; /// Implement this if your matcher may need to inspect the children or; /// descendants of the node or bind matched nodes to names. If you are; /// writing a simple matcher that only inspects properties of the; /// current node and doesn't care about its children or descendants,; /// implement SingleNodeMatcherInterface instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:12,interface,interface,12,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['interface'],['interface']
Integrability,/// Generic interface to target specific assembler backends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:12,interface,interface,12,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,1,['interface'],['interface']
Integrability,/// Generic iterator that wraps a T::TreeTy::iterator and exposes; /// iterator::getValue() on dereference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:26,wrap,wraps,26,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['wrap'],['wraps']
Integrability,"/// Generic lowering of 8-lane i16 shuffles.; ///; /// This handles both single-input shuffles and combined shuffle/blends with; /// two inputs. The single input shuffles are immediately delegated to; /// a dedicated lowering routine.; ///; /// The blends are lowered in one of three fundamental ways. If there are few; /// enough inputs, it delegates to a basic UNPCK-based strategy. If the shuffle; /// of the input is significantly cheaper when lowered as an interleaving of; /// the two inputs, try to interleave them. Otherwise, blend the low and high; /// halves of the inputs separately (making them have relatively few inputs); /// and then concatenate them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:226,rout,routine,226,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// Generic recursive split emission routine.; ///; /// This method recursively splits an aggregate op (load or store) into; /// scalar or vector ops. It splits recursively until it hits a single value; /// and emits that single value operation via the template argument.; ///; /// The logic of this routine relies on GEPs and insertvalue and; /// extractvalue all operating with the same fundamental index list, merely; /// formatted differently (GEPs need actual values).; ///; /// \param Ty The type being split recursively into smaller ops.; /// \param Agg The aggregate value being built up or stored, depending on; /// whether this is splitting a load or a store respectively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:37,rout,routine,37,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,3,"['depend', 'rout']","['depending', 'routine']"
Integrability,"/// Generic routine to convert an SSA value to a value of a different; /// type.; ///; /// This will try various different casting techniques, such as bitcasts,; /// inttoptr, and ptrtoint casts. Use the \c canConvertValue predicate to test; /// two types for viability with this routine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:12,rout,routine,12,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,['rout'],['routine']
Integrability,/// Generic routine to decompose a shuffle and blend into independent; /// blends and permutes.; ///; /// This matches the extremely common pattern for handling combined; /// shuffle+blend operations on newer X86 ISAs where we have very fast blend; /// operations. It will try to pick the best arrangement of shuffles and; /// blends. For vXi8/vXi16 shuffles we may use unpack instead of blend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:12,rout,routine,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// Generic routine to split vector shuffle into half-sized shuffles.; ///; /// This routine just extracts two subvectors, shuffles them independently, and; /// then concatenates them back together. This should work effectively with all; /// AVX vector shuffle types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:12,rout,routine,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['rout'],['routine']
Integrability,"/// Get B histo integration extremes to obtain the requested area fraction; /// call delete [] res to release memory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:16,integrat,integration,16,roofit/roostats/inc/RooStats/HybridPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h,1,['integrat'],['integration']
Integrability,/// Get Objective-C interface type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:20,interface,interface,20,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['interface'],['interface']
Integrability,"/// Get SB histo integration extremes to obtain the requested area fraction; /// call delete [] res to release memory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:17,integrat,integration,17,roofit/roostats/inc/RooStats/HybridPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h,1,['integrat'],['integration']
Integrability,/// Get a Clang invocation adjusted to build the given modular dependency.; /// This excludes paths that are yet-to-be-provided by the build system.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:63,depend,dependency,63,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependency']
Integrability,"/// Get a global palette by name. Returns an empty palette if no palette with that name is known.; /// This function is not thread safe; any concurrent call to global Palette manipulation must be synchronized!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RPalette.hxx:196,synchroniz,synchronized,196,graf2d/gpadv7/inc/ROOT/RPalette.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RPalette.hxx,1,['synchroniz'],['synchronized']
Integrability,"/// Get a pointer to a protocol object for the given declaration, emitting it if; /// it hasn't already been emitted in this translation unit. Note that the ABI; /// for emitting a protocol reference in code (e.g. for a protocol expression); /// in most runtimes is not as simple as just materializing a pointer to this; /// object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:23,protocol,protocol,23,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,3,['protocol'],['protocol']
Integrability,"/// Get a pointer to an object of type T from the underlying stream, as if by; /// memcpy, and store the result into \p Dest. It is up to the caller to; /// ensure that objects of type T can be safely treated in this manner.; /// Updates the stream's offset to point after the newly read object. Whether; /// a copy occurs depends upon the implementation of the underlying; /// stream.; ///; /// \returns a success error code if the data was successfully read, otherwise; /// returns an appropriate error code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h:323,depend,depends,323,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,1,['depend'],['depends']
Integrability,"/// Get a reference to a \p NumElements element array of objects of type T; /// from the underlying stream as if by memcpy, and store the resulting array; /// slice into \p array. It is up to the caller to ensure that objects of; /// type T can be safely treated in this manner. Updates the stream's offset; /// to point after the newly read object. Whether a copy occurs depends upon; /// the implementation of the underlying stream.; ///; /// \returns a success error code if the data was successfully read, otherwise; /// returns an appropriate error code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h:372,depend,depends,372,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,1,['depend'],['depends']
Integrability,"/// Get a reference to the bin corresponding to `binidx` of the correct bin; /// content array (non-const); /// i.e. depending if `binidx` is a regular bin or an under- / overflow bin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:117,depend,depending,117,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,2,['depend'],['depending']
Integrability,"/// Get a reference to the bin corresponding to `binidx` of the correct bin; /// content array; /// i.e. depending if `binidx` is a regular bin or an under- / overflow bin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:105,depend,depending,105,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,2,['depend'],['depending']
Integrability,"/// Get a short ""name"" for the module.; ///; /// This is useful for debugging or logging. It is essentially a convenience; /// wrapper around getModuleIdentifier().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:127,wrap,wrapper,127,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['wrap'],['wrapper']
Integrability,"/// Get a template argument list with one argument per template parameter; /// in a template parameter list, such as for the injected class name of; /// a class template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:125,inject,injected,125,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['inject'],['injected']
Integrability,"/// Get an allocated IRInstructionData struct using the InstDataAllocator.; ///; /// \param I - The Instruction to wrap with IRInstructionData.; /// \param Legality - A boolean value that is true if the instruction is to; /// be considered for similarity, and false if not.; /// \param IDL - The InstructionDataList that the IRInstructionData is; /// inserted into.; /// \returns An allocated IRInstructionData struct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:115,wrap,wrap,115,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wrap']
Integrability,"/// Get an edge's probability, relative to other out-edges of the Src.; ///; /// This routine provides access to the fractional probability between zero; /// (0%) and one (100%) of this edge executing, relative to other edges; /// leaving the 'Src' block. The returned probability is never zero, and can; /// only be one if the source block has only one successor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h:86,rout,routine,86,interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,1,['rout'],['routine']
Integrability,/// Get barrier to synchronize all threads in a block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:19,synchroniz,synchronize,19,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['synchroniz'],['synchronize']
Integrability,/// Get dependence type location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,depend,dependence,8,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependence']
Integrability,/// Get dependence type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,depend,dependence,8,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependence']
Integrability,/// Get dependency type location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,depend,dependency,8,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependency']
Integrability,/// Get dependency type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,depend,dependency,8,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependency']
Integrability,/// Get diagnostic %select index for tag kind for; /// field padding diagnostic message.; /// WARNING: Indexes apply to particular diagnostics only!; ///; /// \returns diagnostic %select index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:80,message,message,80,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['message'],['message']
Integrability,/// Get diagnostic %select index for tag kind for; /// literal type diagnostic message.; /// WARNING: Indexes apply to particular diagnostics only!; ///; /// \returns diagnostic %select index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:79,message,message,79,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['message'],['message']
Integrability,/// Get diagnostic %select index for tag kind for; /// record diagnostic message.; /// WARNING: Indexes apply to particular diagnostics only!; ///; /// \returns diagnostic %select index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:73,message,message,73,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['message'],['message']
Integrability,/// Get diagnostic %select index for tag kind for; /// redeclaration diagnostic message.; /// WARNING: Indexes apply to particular diagnostics only!; ///; /// \returns diagnostic %select index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:80,message,message,80,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['message'],['message']
Integrability,"/// Get error message, or """" if there is no error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:14,message,message,14,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,1,['message'],['message']
Integrability,"/// Get extra data associated with this derived type.; ///; /// Class type for pointer-to-members, objective-c property node for ivars,; /// global constant wrapper for static members, or virtual base pointer offset; /// for inheritance.; ///; /// TODO: Separate out types that need this extra operand: pointer-to-member; /// types and member fields (static members and ivars).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:157,wrap,wrapper,157,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['wrap'],['wrapper']
Integrability,/// Get or compute information about the layout of the specified; /// Objective-C implementation.; ///; /// This may differ from the interface if synthesized ivars are present.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:133,interface,interface,133,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['interface'],['interface']
Integrability,/// Get or compute information about the layout of the specified; /// Objective-C interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:82,interface,interface,82,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['interface'],['interface']
Integrability,"/// Get or create a VPValue that corresponds to the expansion of \p Expr. If \p; /// Expr is a SCEVConstant or SCEVUnknown, return a VPValue wrapping the live-in; /// value. Otherwise return a VPExpandSCEVRecipe to expand \p Expr. If \p Plan's; /// pre-header already contains a recipe expanding \p Expr, return it. If not,; /// create a new one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:141,wrap,wrapping,141,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['wrap'],['wrapping']
Integrability,"/// Get previous dependent action or null if that does not exist. If; /// \a CanBeCollapsed is false, that action must be legal to collapse or; /// null will be returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:17,depend,dependent,17,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['depend'],['dependent']
Integrability,"/// Get rounding mode to use in evaluation of the specified expression.; ///; /// If rounding mode is unknown at compile time, still try to evaluate the; /// expression. If the result is exact, it does not depend on rounding mode.; /// So return ""tonearest"" mode instead of ""dynamic"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:206,depend,depend,206,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['depend'],['depend']
Integrability,/// Get target-dependent integer value for null pointer which is used for; /// constant folding.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:15,depend,dependent,15,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['depend'],['dependent']
Integrability,/// Get the FP contractability status of this operator. Only meaningful for; /// operations on floating point types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:15,contract,contractability,15,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,2,['contract'],['contractability']
Integrability,/// Get the PSHUF-style mask from PSHUF node.; ///; /// This is a very minor wrapper around getTargetShuffleMask to easy forming v4; /// PSHUF-style masks that can be reused with such instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:77,wrap,wrapper,77,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['wrap'],['wrapper']
Integrability,"/// Get the SignMask for a specific bit width.; ///; /// This is just a wrapper function of getSignedMinValue(), and it helps code; /// readability when we want to get a SignMask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:72,wrap,wrapper,72,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['wrap'],['wrapper']
Integrability,"/// Get the appropriate linkage for the wrapper function. This is essentially; /// the weak form of the variable's linkage; every translation unit which needs; /// the wrapper emits a copy, and we want the linker to merge them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:40,wrap,wrapper,40,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,2,['wrap'],['wrapper']
Integrability,/// Get the bug report message that will be output upon a crash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h:23,message,message,23,interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h,1,['message'],['message']
Integrability,/// Get the byte size of the unit length field depending on the DWARF format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h:47,depend,depending,47,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,1,['depend'],['depending']
Integrability,/// Get the callee name that the call instruction is using for hashing the; /// instruction. The IRInstructionData must be wrapping a CallInst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:123,wrap,wrapping,123,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wrapping']
Integrability,"/// Get the de-sugared statements after the loop transformation.; ///; /// Might be nullptr if either the directive generates no loops and is handled; /// directly in CodeGen, or resolving a template-dependence context is; /// required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:200,depend,dependence,200,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['depend'],['dependence']
Integrability,/// Get the declaration of this interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:32,interface,interface,32,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['interface'],['interface']
Integrability,/// Get the dependent counters storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:12,depend,dependent,12,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['depend'],['dependent']
Integrability,/// Get the dependent inits storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:12,depend,dependent,12,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['depend'],['dependent']
Integrability,"/// Get the duplicate declaration of a ObjCMethod in the same; /// interface, or null if none exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:67,interface,interface,67,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['interface'],['interface']
Integrability,"/// Get the expression to which this declaration is bound. This may be null; /// in two different cases: while parsing the initializer for the; /// decomposition declaration, and when the initializer is type-dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:208,depend,dependent,208,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['depend'],['dependent']
Integrability,"/// Get the interface for the receiver.; ///; /// This works whether this is an instance message or a class message.; /// However, it currently just uses the static type of the receiver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:12,interface,interface,12,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,3,"['interface', 'message']","['interface', 'message']"
Integrability,/// Get the language name string for interface language references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:37,interface,interface,37,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['interface'],['interface']
Integrability,/// Get the libcall routine name for the specified libcall.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,rout,routine,20,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['rout'],['routine']
Integrability,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:97,Depend,Depending,97,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,3,['Depend'],['Depending']
Integrability,/// Get the main file name for use in error messages and debug; /// info. This can be set to ensure we've got the correct file name; /// after preprocessing or for -save-temps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:44,message,messages,44,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,1,['message'],['messages']
Integrability,"/// Get the module map file that (along with the module name) uniquely; /// identifies this module.; ///; /// The particular module that \c Name refers to may depend on how the module; /// was found in header search. However, the combination of \c Name and; /// this module map will be globally unique for top-level modules. In the case; /// of inferred modules, returns the module map that allowed the inference; /// (e.g. contained 'module *'). Otherwise, returns; /// getContainingModuleMapFile().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:159,depend,depend,159,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['depend'],['depend']
Integrability,/// Get the name of the class associated with this interface.; //; // FIXME: Move to StringRef API.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:51,interface,interface,51,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,"/// Get the number of line breaks after chomping.; ///; /// Return the number of trailing line breaks to emit, depending on; /// \p ChompingIndicator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:111,depend,depending,111,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['depend'],['depending']
Integrability,/// Get the predicate that the compare instruction is using for hashing the; /// instruction. the IRInstructionData must be wrapping a CmpInst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:124,wrap,wrapping,124,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wrapping']
Integrability,/// Get the primary module interface name from a partition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:27,interface,interface,27,interpreter/llvm-project/clang/include/clang/Basic/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h,1,['interface'],['interface']
Integrability,"/// Get the set of Intrinsics that this intrinsic calls.; /// this is the set of immediate dependencies, NOT the; /// transitive closure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:91,depend,dependencies,91,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['depend'],['dependencies']
Integrability,/// Get the set of all protocols implied by this protocols inheritance; /// hierarchy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:23,protocol,protocols,23,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['protocol'],['protocols']
Integrability,/// Get the size of a range. This is a wrapper function around std::distance; /// which is only enabled when the operation is O(1).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:39,wrap,wrapper,39,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrapper']
Integrability,"/// Get the specialization of the given variable template corresponding to; /// the specified argument list, or a null-but-valid result if the arguments; /// are dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:162,depend,dependent,162,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['dependent']
Integrability,"/// Get the toolchain's aux triple, if it has one.; ///; /// Exactly what the aux triple represents depends on the toolchain, but for; /// example when compiling CUDA code for the GPU, the triple might be NVPTX,; /// while the aux triple is the host (CPU) toolchain, e.g. x86-linux-gnu.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:100,depend,depends,100,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['depend'],['depends']
Integrability,/// Get the type for which this source info wrapper provides; /// information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:44,wrap,wrapper,44,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['wrap'],['wrapper']
Integrability,/// Get the upper bound on bit size for this Value \p Op as a signed integer.; /// i.e. x == sext(trunc(x to MaxSignedBits) to bitwidth(x)).; /// Similar to the APInt::getSignificantBits function.; /// Helper wrapper to ComputeNumSignBits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:209,wrap,wrapper,209,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,2,['wrap'],['wrapper']
Integrability,/// GetClass - Return a reference to the class for the given interface; /// decl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:61,interface,interface,61,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,2,['interface'],['interface']
Integrability,/// GetClass - Return a reference to the class for the given; /// interface decl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:66,interface,interface,66,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,1,['interface'],['interface']
Integrability,/// GetClassName - Return a unique constant for the given selector's; /// runtime name (which may change via use of objc_runtime_name attribute on; /// class or protocol definition. The return value has type char *.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:161,protocol,protocol,161,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['protocol'],['protocol']
Integrability,"/// GetDependentSplitDestVTs - Compute the VTs needed for the low/hi parts of a; /// type, dependent on an enveloping VT that has been split into two identical; /// pieces. Sets the HiIsEmpty flag when hi type has zero storage size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:91,depend,dependent,91,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['depend'],['dependent']
Integrability,"/// GetINTEGERTypeAtOffset - The ABI specifies that a value should be passed in; /// an 8-byte GPR. This means that we either have a scalar or we are talking; /// about the high or low part of an up-to-16-byte struct. This routine picks; /// the best LLVM IR type to represent this, which may be i64 or may be anything; /// else that the backend will pass in a GPR that works better (e.g. i8, %foo*,; /// etc).; ///; /// PrefType is an LLVM IR type that corresponds to (part of) the IR type for; /// the source type. IROffset is an offset in bytes into the LLVM IR type that; /// the 8-byte value references. PrefType may be null.; ///; /// SourceTy is the source-level type for the entire argument. SourceOffset is; /// an offset into this that we're processing (which is always either 0 or 8).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:223,rout,routine,223,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['rout'],['routine']
Integrability,/// GetInterfaceEHType - Get the cached ehtype for the given Objective-C; /// interface. The return value has type EHTypePtrTy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:78,interface,interface,78,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['interface'],['interface']
Integrability,/// GetOrEmitProtocol - Generate the protocol meta-data:; /// @code; /// struct _protocol_t {; /// id isa; // NULL; /// const char * const protocol_name;; /// const struct _protocol_list_t * protocol_list; // super protocols; /// const struct method_list_t * const instance_methods;; /// const struct method_list_t * const class_methods;; /// const struct method_list_t *optionalInstanceMethods;; /// const struct method_list_t *optionalClassMethods;; /// const struct _prop_list_t * properties;; /// const uint32_t size; // sizeof(struct _protocol_t); /// const uint32_t flags; // = 0; /// const char ** extendedMethodTypes;; /// const char *demangledName;; /// const struct _prop_list_t * class_properties;; /// }; /// @endcode; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:37,protocol,protocol,37,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,2,['protocol'],"['protocol', 'protocols']"
Integrability,"/// GetOrEmitProtocol - Get the protocol object for the given; /// declaration, emitting it if necessary. The return value has type; /// ProtocolPtrTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:32,protocol,protocol,32,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,6,"['Protocol', 'protocol']","['ProtocolPtrTy', 'protocol']"
Integrability,"/// GetOrEmitProtocolRef - Get a forward reference to the protocol; /// object for the given declaration, emitting it if needed. These; /// forward references will be filled in with empty bodies if no; /// definition is seen. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:58,protocol,protocol,58,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,6,"['Protocol', 'protocol']","['ProtocolPtrTy', 'protocol']"
Integrability,"/// GetProtocolRef - Return a reference to the internal protocol; /// description, creating an empty one if it has not been; /// defined. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:56,protocol,protocol,56,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,2,"['Protocol', 'protocol']","['ProtocolPtrTy', 'protocol']"
Integrability,"/// GetReturnType - Used to get the return type of a message expression or; /// function call with the intention of affixing that type to a tracked symbol.; /// While the return type can be queried directly from RetEx, when; /// invoking class methods we augment to the return type to be that of; /// a pointer to the class (as opposed it just being id).; // FIXME: We may be able to do this with related result types instead.; // This function is probably overestimating.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp:53,message,message,53,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,1,['message'],['message']
Integrability,"/// GetScratchRegister - Get a temp register for performing work in the; /// segmented stack and the Erlang/HiPE stack prologue. Depending on platform; /// and the properties of the function either one or two registers will be; /// needed. Set primary to true for the first register, false for the second.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:129,Depend,Depending,129,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['Depend'],['Depending']
Integrability,/// GetVLDSTAlign - Get the alignment (in bytes) for the alignment operand; /// of a NEON VLD or VST instruction. The supported values depend on the; /// number of registers being loaded.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp:135,depend,depend,135,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,1,['depend'],['depend']
Integrability,/// Gets Address Access SCEV after verifying that the access pattern; /// is loop invariant except the induction variable dependence.; ///; /// This SCEV can be sent to the Target in order to estimate the address; /// calculation cost.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:122,depend,dependence,122,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['depend'],['dependence']
Integrability,/// Gets an argument adjuster which removes dependency-file; /// related command line arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/ArgumentsAdjusters.h:44,depend,dependency-file,44,interpreter/llvm-project/clang/include/clang/Tooling/ArgumentsAdjusters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/ArgumentsAdjusters.h,1,['depend'],['dependency-file']
Integrability,/// Gets the dependence kind in clause for 'depobj' directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:13,depend,dependence,13,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependence']
Integrability,"/// Gets the interface declaration for this object type, if the base type; /// really is an interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:13,interface,interface,13,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['interface'],['interface']
Integrability,/// Gets the linker options necessary to link a dependent library on this; /// platform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:48,depend,dependent,48,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,1,['depend'],['dependent']
Integrability,"/// Gets the number of positions a character is likely to occupy when output; /// on a terminal (""character width""). This depends on the implementation of the; /// terminal, and there's no standard definition of character width.; /// The implementation defines it in a way that is expected to be compatible; /// with a generic Unicode-capable terminal.; /// \return Character width:; /// * ErrorNonPrintableCharacter (-1) for non-printable characters (as; /// identified by isPrintable);; /// * 0 for non-spacing and enclosing combining marks;; /// * 2 for CJK characters excluding halfwidth forms;; /// * 1 for all remaining characters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unicode.cpp:122,depend,depends,122,interpreter/llvm-project/llvm/lib/Support/Unicode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unicode.cpp,1,['depend'],['depends']
Integrability,"/// Gets the number of positions the UTF8-encoded \p Text is likely to occupy; /// when output on a terminal (""character width""). This depends on the; /// implementation of the terminal, and there's no standard definition of; /// character width.; ///; /// The implementation defines it in a way that is expected to be compatible; /// with a generic Unicode-capable terminal.; ///; /// \return Character width:; /// * ErrorNonPrintableCharacter (-1) if \p Text contains non-printable; /// characters (as identified by isPrintable);; /// * 0 for each non-spacing and enclosing combining mark;; /// * 2 for each CJK character excluding halfwidth forms;; /// * 1 for each of the remaining characters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h:135,depend,depends,135,interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h,1,['depend'],['depends']
Integrability,"/// Gets the type of the wrapped symbol.; /// This type might not be accurate at all times - it's just our best guess.; /// Consider these cases:; /// void foo(void *data, char *str, base *obj) {...}; /// The type of the pointee of `data` is of course not `void`, yet that's our; /// best guess. `str` might point to any object and `obj` might point to some; /// derived instance. `TypedRegions` other hand are representing the cases; /// when we actually know their types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:25,wrap,wrapped,25,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,1,['wrap'],['wrapped']
Integrability,"/// Gets the type pointed to by this ObjC pointer. Always returns non-null.; ///; /// This method is equivalent to getPointeeType() except that; /// it discards any typedefs (or other sugar) between this; /// type and the ""outermost"" object type. So for:; /// \code; /// \@class A; \@protocol P; \@protocol Q;; /// typedef A<P> AP;; /// typedef A A1;; /// typedef A1<P> A1P;; /// typedef A1P<Q> A1PQ;; /// \endcode; /// For 'A*', getObjectType() will return 'A'.; /// For 'A<P>*', getObjectType() will return 'A<P>'.; /// For 'AP*', getObjectType() will return 'A<P>'.; /// For 'A1*', getObjectType() will return 'A'.; /// For 'A1<P>*', getObjectType() will return 'A1<P>'.; /// For 'A1P*', getObjectType() will return 'A1<P>'.; /// For 'A1PQ*', getObjectType() will return 'A1<Q>', because; /// adding protocols to a protocol-qualified base discards the; /// old qualifiers (for now). But if it didn't, getObjectType(); /// would return 'A1P<Q>' (and we'd have to make iterating over; /// qualifiers more complicated).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:284,protocol,protocol,284,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,4,['protocol'],"['protocol', 'protocol-qualified', 'protocols']"
Integrability,"/// Getter function without integration set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:28,integrat,integration,28,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['integrat'],['integration']
Integrability,"/// GitHub issue #8307.; /// A likelihood with a model wrapped in a RooSimultaneous in one category; /// should give the same results as the likelihood with the model directly. We; /// also test that things go well if you wrap the simultaneous NLL again in; /// another class, which can happen in user frameworks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:55,wrap,wrapped,55,roofit/roofitcore/test/testRooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx,2,['wrap'],"['wrap', 'wrapped']"
Integrability,"/// Given \p Loc, if it is a macro location return the expansion; /// location or the spelling location, depending on if it comes from a; /// macro argument or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:105,depend,depending,105,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['depend'],['depending']
Integrability,"/// Given a Clang driver command-line for a translation unit, gather the; /// modular dependencies and return the information needed for explicit build.; ///; /// \param AlreadySeen This stores modules which have previously been; /// reported. Use the same instance for all calls to this; /// function for a single \c DependencyScanningTool in a; /// single build. Use a different one for different tools,; /// and clear it between builds.; /// \param LookupModuleOutput This function is called to fill in; /// ""-fmodule-file="", ""-o"" and other output; /// arguments for dependencies.; ///; /// \returns a \c StringError with the diagnostic output if clang errors; /// occurred, \c TranslationUnitDeps otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:86,depend,dependencies,86,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,3,"['Depend', 'depend']","['DependencyScanningTool', 'dependencies']"
Integrability,"/// Given a compilation context specified via the Clang driver command-line,; /// gather modular dependencies of module with the given name, and return the; /// information needed for explicit build.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:97,depend,dependencies,97,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,1,['depend'],['dependencies']
Integrability,"/// Given a constrained FP intrinsic call, tries to compute its simplified; /// version. Returns a simplified result or null.; ///; /// This function provides an additional contract: it guarantees that if; /// simplification succeeds that the intrinsic is side effect free. As a result,; /// successful simplification can be used to delete the intrinsic not just; /// replace its result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h:173,contract,contract,173,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,1,['contract'],['contract']
Integrability,"/// Given a dependence-distance \p Dist between two; /// memory accesses, that have the same stride whose absolute value is given; /// in \p Stride, and that have the same type size \p TypeByteSize,; /// in a loop whose takenCount is \p BackedgeTakenCount, check if it is; /// possible to prove statically that the dependence distance is larger; /// than the range that the accesses will travel through the execution of; /// the loop. If so, return true; false otherwise. This is useful for; /// example in loops such as the following (PR31098):; /// for (i = 0; i < D; ++i) {; /// = out[i];; /// out[i+D] =; /// }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:12,depend,dependence-distance,12,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['depend'],"['dependence', 'dependence-distance']"
Integrability,"/// Given a disjoint set of type identifiers and functions, build the bit sets; /// and lower the llvm.type.test calls, architecture dependently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:133,depend,dependently,133,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['depend'],['dependently']
Integrability,"/// Given a list of SCEV objects, order them by their complexity, and group; /// objects of the same complexity together by value. When this routine is; /// finished, we know that any duplicates in the vector are consecutive and that; /// complexity is monotonically increasing.; ///; /// Note that we go take special precautions to ensure that we get deterministic; /// results from this routine. In other words, we don't want the results of; /// this to depend on where the addresses of various SCEV objects happened to; /// land in memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:141,rout,routine,141,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,3,"['depend', 'rout']","['depend', 'routine']"
Integrability,"/// Given a list of identifiers (and their locations), resolve the; /// names to either Objective-C protocol qualifiers or type; /// arguments, as appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:100,protocol,protocol,100,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['protocol'],['protocol']
Integrability,"/// Given a list of non-local dependencies, determine if a value is; /// available for the load in each specified block. If it is, add it to; /// ValuesPerBlock. If not, add it to UnavailableBlocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:30,depend,dependencies,30,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,1,['depend'],['dependencies']
Integrability,/// Given a local dependency (Def or Clobber) determine if a value is; /// available for the load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:18,depend,dependency,18,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,1,['depend'],['dependency']
Integrability,"/// Given a set of code-completion results for the argument of a message; /// send, determine the preferred type (if any) for that argument expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:65,message,message,65,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['message'],['message']
Integrability,"/// Given a set of possible observables, return the observables that this PDF depends on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:78,depend,depends,78,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['depend'],['depends']
Integrability,"/// Given an EH pad, find where it unwinds. If it unwinds to an EH pad,; /// return that pad instruction. If it unwinds to caller, return; /// ConstantTokenNone. If it does not have a definitive unwind destination,; /// return nullptr.; ///; /// This routine gets invoked for calls in funclets in inlinees when inlining; /// an invoke. Since many funclets don't have calls inside them, it's queried; /// on-demand rather than building a map of pads to unwind dests up front.; /// Determining a funclet's unwind dest may require recursively searching its; /// descendants, and also ancestors and cousins if the descendants don't provide; /// an answer. Since most funclets will have their unwind dest immediately; /// available as the unwind dest of a catchswitch or cleanupret, this routine; /// searches top-down from the given pad and then up. To avoid worst-case; /// quadratic run-time given that approach, it uses a memo map to avoid; /// re-processing funclet trees. The callers that rewrite the IR as they go; /// take advantage of this, for correctness, by checking/forcing rewritten; /// pads' entries to match the original callee view.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:251,rout,routine,251,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,2,['rout'],['routine']
Integrability,"/// Given an ObjC interface, goes through the modules and links to the; /// interface all the categories for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:18,interface,interface,18,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,2,['interface'],['interface']
Integrability,"/// Given an associative binary expression, return the leaf; /// nodes in Ops along with their weights (how many times the leaf occurs). The; /// original expression is the same as; /// (Ops[0].first op Ops[0].first op ... Ops[0].first) <- Ops[0].second times; /// op; /// (Ops[1].first op Ops[1].first op ... Ops[1].first) <- Ops[1].second times; /// op; /// ...; /// op; /// (Ops[N].first op Ops[N].first op ... Ops[N].first) <- Ops[N].second times; ///; /// Note that the values Ops[0].first, ..., Ops[N].first are all distinct.; ///; /// This routine may modify the function, in which case it returns 'true'. The; /// changes it makes may well be destructive, changing the value computed by 'I'; /// to something completely different. Thus if the routine returns 'true' then; /// you MUST either replace I with a new expression computed from the Ops array,; /// or use RewriteExprTree to put the values back in.; ///; /// A leaf node is either not a binary operation of the same kind as the root; /// node 'I' (i.e. is not a binary operator at all, or is, but with a different; /// opcode), or is the same kind of binary operator but has a use which either; /// does not belong to the expression, or does belong to the expression but is; /// a leaf node. Every leaf node has at least one use that is a non-leaf node; /// of the expression, while for non-leaf nodes (except for the root 'I') every; /// use is a non-leaf node of the expression.; ///; /// For example:; /// expression graph node names; ///; /// + | I; /// / \ |; /// + + | A, B; /// / \ / \ |; /// * + * | C, D, E; /// / \ / \ / \ |; /// + * | F, G; ///; /// The leaf nodes are C, E, F and G. The Ops array will contain (maybe not in; /// that order) (C, 1), (E, 1), (F, 2), (G, 2).; ///; /// The expression is maximal: if some instruction is a binary operator of the; /// same kind as 'I', and all of its uses are non-leaf nodes of the expression,; /// then the instruction also belongs to the expression, is not a leaf node of; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp:547,rout,routine,547,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,2,['rout'],['routine']
Integrability,"/// Given an expression that refers to an overloaded function, try to; /// resolve that function to a single function that can have its address taken.; /// This will modify `Pair` iff it returns non-null.; ///; /// This routine can only succeed if from all of the candidates in the overload; /// set for SrcExpr that can have their addresses taken, there is one candidate; /// that is more constrained than the rest.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:220,rout,routine,220,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['rout'],['routine']
Integrability,"/// Given an expression that refers to an overloaded function, try to; /// resolve that overloaded function expression down to a single function.; ///; /// This routine can only resolve template-ids that refer to a single function; /// template, where that template-id refers to a single template whose template; /// arguments are either provided by the template-id or have defaults,; /// as described in C++0x [temp.arg.explicit]p3.; ///; /// If no template-ids are found, no diagnostics are emitted and NULL is; /// returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:161,rout,routine,161,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['rout'],['routine']
Integrability,"/// Given an expression which invokes a copy constructor --- i.e. a; /// CXXConstructExpr, possibly wrapped in an ExprWithCleanups ---; /// find the OpaqueValueExpr that's the source of the construction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:100,wrap,wrapped,100,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['wrap'],['wrapped']
Integrability,"/// Given an initial flag set, this function modifies it to contain; /// the passed in MemberOfFlag generated from the getMemberOfFlag; /// function. The results are dependent on the existing flag bits; /// set in the original flag set.; /// \param Flags - The original set of flags to be modified with the; /// passed in MemberOfFlag.; /// \param MemberOfFlag - A modified OMP_MAP_MEMBER_OF flag, adjusted; /// slightly based on the getMemberOfFlag which adjusts the flag bits; /// based on the members position in its parent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:166,depend,dependent,166,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['depend'],['dependent']
Integrability,"/// Given chain of loop branch conditions looking like:; /// br (Variant < Invariant1); /// br (Variant < Invariant2); /// br (Variant < Invariant3); /// ...; /// collect set of invariant conditions on which we want to unswitch, which; /// look like:; /// Invariant1 <= Invariant2; /// Invariant2 <= Invariant3; /// ...; /// Though they might not immediately exist in the IR, we can still inject them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:389,inject,inject,389,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['inject']
Integrability,"/// Given that this builder was created by beginning an array or struct; /// directly on a ConstantInitBuilder, finish the array/struct and; /// return a future which can be used to install the initializer in; /// a global later.; ///; /// This is useful for allowing a finished initializer to passed to; /// an API which will build the global. However, the ""future"" preserves; /// a dependency on the original builder; it is an error to pass it aside.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:384,depend,dependency,384,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,1,['depend'],['dependency']
Integrability,"/// Gives the external AST source an opportunity to complete an; /// incomplete Objective-C class.; ///; /// This routine will only be invoked if the ""externally completed"" bit is; /// set on the ObjCInterfaceDecl via the function; /// \c ObjCInterfaceDecl::setExternallyCompleted().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:114,rout,routine,114,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,2,['rout'],['routine']
Integrability,/// Global access point for the JIT debugging interface designed for use with a; /// singleton toolbox. Handles thread-safe registration and deregistration of; /// object files that are in executable memory managed by the client of this; /// class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp:46,interface,interface,46,interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp,1,['interface'],['interface']
Integrability,"/// GlobalNumberState assigns an integer to each global value in the program,; /// which is used by the comparison routine to order references to globals. This; /// state must be preserved throughout the pass, because Functions and other; /// globals need to maintain their relative order. Globals are assigned a number; /// when they are first visited. This order is deterministic, and so the; /// assigned numbers are as well. When two functions are merged, neither number; /// is updated. If the symbols are weak, this would be incorrect. If they are; /// strong, then one will be replaced at all references to the other, and so; /// direct callsites will now see one or the other symbol, and no update is; /// necessary. Note that if we were guaranteed unique names, we could just; /// compare those, but this would not work for stripped bitcodes or for those; /// few symbols without a name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:115,rout,routine,115,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,1,['rout'],['routine']
Integrability,/// Go over all memory access and check whether runtime pointer checks; /// are needed and build sets of dependency check candidates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:105,depend,dependency,105,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['depend'],['dependency']
Integrability,"/// Goes over all memory accesses, checks whether a RT check is needed; /// and builds sets of dependent accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:95,depend,dependent,95,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['depend'],['dependent']
Integrability,/// Graph of modular dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:21,depend,dependencies,21,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,1,['depend'],['dependencies']
Integrability,"/// Groups pointers such that a single memcheck is required; /// between two different groups. This will clear the CheckingGroups vector; /// and re-compute it. We will only group dependecies if \p UseDependencies; /// is true, otherwise we will create a separate group for each pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:180,depend,dependecies,180,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependecies']
Integrability,"/// Growing stack that can be used for BVH traversal. Its performance may be lower than a small,; /// fixed-size stack, depending on the architecture.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stack.h:120,depend,depending,120,geom/geom/inc/bvh/v2/stack.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stack.h,1,['depend'],['depending']
Integrability,"/// HI32DSP, LO32DSP, and ACC64DSP (depending on; /// context).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:36,depend,depending,36,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['depend'],['depending']
Integrability,/// Handle a call to a wrapper function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:23,wrap,wrapper,23,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,1,['wrap'],['wrapper']
Integrability,/// Handle a call to an async wrapper function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:30,wrap,wrapper,30,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,1,['wrap'],['wrapper']
Integrability,"/// Handle a disconnection from the underlying transport. No further messages; /// should be sent to handleMessage after this is called.; /// Err may contain an Error value indicating unexpected disconnection. This; /// allows clients to log such errors, but no attempt should be made at; /// recovery (which should be handled inside the transport class, if it is; /// supported at all).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:69,message,messages,69,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,1,['message'],['messages']
Integrability,/// Handle a new assumed value \p Value. Subtype dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:49,depend,dependent,49,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['depend'],['dependent']
Integrability,/// Handle a new known value \p Value. Subtype dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:47,depend,dependent,47,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['dependent']
Integrability,/// Handle a value \p Value. Subtype dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:37,depend,dependent,37,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['dependent']
Integrability,/// Handle cases when f64 is split into 2 32-bit GPRs. This is a custom; /// assignment because generic code assumes getNumRegistersForCallingConv is; /// accurate. In this case it is not because the type/number are context; /// dependent on other arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsCallLowering.cpp:229,depend,dependent,229,interpreter/llvm-project/llvm/lib/Target/Mips/MipsCallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsCallLowering.cpp,1,['depend'],['dependent']
Integrability,"/// Handle collisions after \a Value::replaceAllUsesWith().; ///; /// RAUW isn't supported directly for \a ValueAsMetadata, but if the wrapped; /// \a Value gets RAUW'ed and the target already exists, this is used to; /// merge the two metadata nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:135,wrap,wrapped,135,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['wrap'],['wrapped']
Integrability,/// Handle lowering of 16-lane 16-bit integer shuffles.; ///; /// This routine is only called when we have AVX2 and thus a reasonable; /// instruction set for v16i16 shuffling..,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:71,rout,routine,71,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,/// Handle lowering of 32-lane 8-bit integer shuffles.; ///; /// This routine is only called when we have AVX2 and thus a reasonable; /// instruction set for v32i8 shuffling..,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:70,rout,routine,70,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,/// Handle lowering of 4-lane 64-bit integer shuffles.; ///; /// This routine is only called when we have AVX2 and thus a reasonable; /// instruction set for v4i64 shuffling..,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:70,rout,routine,70,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,/// Handle lowering of 8-lane 32-bit integer shuffles.; ///; /// This routine is only called when we have AVX2 and thus a reasonable; /// instruction set for v8i32 shuffling..,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:70,rout,routine,70,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// Handle receipt of a message.; ///; /// Returns an Error if the message cannot be handled, 'EndSession' if the; /// client will not accept any further messages, and 'ContinueSession'; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:24,message,message,24,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,3,['message'],"['message', 'messages']"
Integrability,/// Handle to alloca instruction to simplify method interfaces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:52,interface,interfaces,52,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['interface'],['interfaces']
Integrability,/// HandleExprPropertyRefExpr - Handle foo.bar where foo is a pointer to an; /// objective C interface. This is a property reference expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:93,interface,interface,93,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['interface'],['interface']
Integrability,"/// HandleIncludeDirective - The ""\#include"" tokens have just been read, read; /// the file to be included from the lexer, then include it! This is a common; /// routine with functionality shared between \#include, \#include_next and; /// \#import. LookupFrom is set when this is a \#include_next directive, it; /// specifies the file to start searching from.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:162,rout,routine,162,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['rout'],['routine']
Integrability,"/// HandlePragmaDependency - Handle \#pragma GCC dependency ""foo"" blah.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp:49,depend,dependency,49,interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,1,['depend'],['dependency']
Integrability,"/// HandleVectorSizeAttribute - this attribute is only applicable to integral; /// and float scalars, although arrays, pointers, and function return values are; /// allowed in conjunction with this construct. Aggregates with this attribute; /// are invalid, even if they are of the same size as a corresponding scalar.; /// The raw attribute should contain precisely 1 argument, the vector size for; /// the variable, measured in bytes. If curType and rawAttr are well formed,; /// this routine will return a new vector type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:487,rout,routine,487,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['rout'],['routine']
Integrability,"/// Harden a value in a register.; ///; /// This is the low-level logic to fully harden a value sitting in a register; /// against leaking during speculative execution.; ///; /// Unlike hardening an address that is used by a load, this routine is required; /// to hide *all* incoming bits in the register.; ///; /// `Reg` must be a virtual register. Currently, it is required to be a GPR no; /// larger than the predicate state register. FIXME: We should support vector; /// registers here by broadcasting the predicate state.; ///; /// The new, hardened virtual register is returned. It will have the same; /// register class as `Reg`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:236,rout,routine,236,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['rout'],['routine']
Integrability,"/// HasSideEffects - This routine returns true for all those expressions; /// which have any effect other than producing a value. Example is a function; /// call, volatile variable read, or throwing an exception. If; /// IncludePossibleEffects is false, this call treats certain expressions with; /// potential side effects (such as function call-like expressions,; /// instantiation-dependent expressions, or invocations from a macro) as not; /// having side effects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:26,rout,routine,26,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,2,"['depend', 'rout']","['dependent', 'routine']"
Integrability,"/// Have a worker ask for a task-message from the queue; ///; /// \param[out] job_task JobTask reference to put the Job ID and the task index into.; /// \return true if a task was popped from the queue successfully, false if the queue was empty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/Queue.h:33,message,message,33,roofit/multiprocess/res/RooFit/MultiProcess/Queue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/Queue.h,1,['message'],['message']
Integrability,"/// Helper class for folding sign/zero extensions.; /// In particular, this class is used for the following combines:; /// add | add_vl -> vwadd(u) | vwadd(u)_w; /// sub | sub_vl -> vwsub(u) | vwsub(u)_w; /// mul | mul_vl -> vwmul(u) | vwmul_su; ///; /// An object of this class represents an operand of the operation we want to; /// combine.; /// E.g., when trying to combine `mul_vl a, b`, we will have one instance of; /// NodeExtensionHelper for `a` and one for `b`.; ///; /// This class abstracts away how the extension is materialized and; /// how its Mask, VL, number of users affect the combines.; ///; /// In particular:; /// - VWADD_W is conceptually == add(op0, sext(op1)); /// - VWADDU_W == add(op0, zext(op1)); /// - VWSUB_W == sub(op0, sext(op1)); /// - VWSUBU_W == sub(op0, zext(op1)); ///; /// And VMV_V_X_VL, depending on the value, is conceptually equivalent to; /// zext|sext(smaller_value).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:826,depend,depending,826,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['depend'],['depending']
Integrability,"/// Helper class that creates diagnostics with optional; /// template instantiation stacks.; ///; /// This class provides a wrapper around the basic DiagnosticBuilder; /// class that emits diagnostics. ImmediateDiagBuilder is; /// responsible for emitting the diagnostic (as DiagnosticBuilder; /// does) and, if the diagnostic comes from inside a template; /// instantiation, printing the template instantiation stack as; /// well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:124,wrap,wrapper,124,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['wrap'],['wrapper']
Integrability,"/// Helper class that emits deferred diagnostic messages if an entity directly; /// or indirectly using the function that causes the deferred diagnostic; /// messages is known to be emitted.; ///; /// During parsing of AST, certain diagnostic messages are recorded as deferred; /// diagnostics since it is unknown whether the functions containing such; /// diagnostics will be emitted. A list of potentially emitted functions and; /// variables that may potentially trigger emission of functions are also; /// recorded. DeferredDiagnosticsEmitter recursively visits used functions; /// by each function to emit deferred diagnostics.; ///; /// During the visit, certain OpenMP directives or initializer of variables; /// with certain OpenMP attributes will cause subsequent visiting of any; /// functions enter a state which is called OpenMP device context in this; /// implementation. The state is exited when the directive or initializer is; /// exited. This state can change the emission states of subsequent uses; /// of functions.; ///; /// Conceptually the functions or variables to be visited form a use graph; /// where the parent node uses the child node. At any point of the visit,; /// the tree nodes traversed from the tree root to the current node form a use; /// stack. The emission state of the current node depends on two factors:; /// 1. the emission state of the root node; /// 2. whether the current node is in OpenMP device context; /// If the function is decided to be emitted, its contained deferred diagnostics; /// are emitted, together with the information about the use stack.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:48,message,messages,48,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,4,"['depend', 'message']","['depends', 'messages']"
Integrability,/// Helper class to manage error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:33,message,messages,33,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,1,['message'],['messages']
Integrability,/// Helper entry wrapper to combineX86ShufflesRecursively.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:17,wrap,wrapper,17,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['wrap'],['wrapper']
Integrability,/// Helper for client passes to initialize dependent passes for LBFI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h:43,depend,dependent,43,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h,1,['depend'],['dependent']
Integrability,/// Helper for client passes to initialize dependent passes for LBPI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h:43,depend,dependent,43,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h,1,['depend'],['dependent']
Integrability,"/// Helper for mapping JSON objects onto protocol structs.; ///; /// Example:; /// \code; /// bool fromJSON(const Value &E, MyStruct &R, Path P) {; /// ObjectMapper O(E, P);; /// // When returning false, error details were already reported.; /// return O && O.map(""mandatory_field"", R.MandatoryField) &&; /// O.mapOptional(""optional_field"", R.OptionalField);; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:41,protocol,protocol,41,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['protocol'],['protocol']
Integrability,"/// Helper for tryEvaluateBuiltinObjectSize -- Given an LValue, this will; /// determine how many bytes exist from the beginning of the object to either; /// the end of the current subobject, or the end of the object itself, depending; /// on what the LValue looks like + the value of Type.; ///; /// If this returns false, the value of Result is undefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:225,depend,depending,225,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['depend'],['depending']
Integrability,"/// Helper function for \c computeDependence. Return true if \p A; /// and \p B do not have any dependences between them, and can be; /// re-ordered without changing program semantics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:96,depend,dependences,96,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['depend'],['dependences']
Integrability,/// Helper function for adjusting address spaces for the pointer or reference; /// operands of builtin operators depending on the argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:113,depend,depending,113,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['depend'],['depending']
Integrability,/// Helper function for building either a vector or scalar select instruction; /// depending on the expected \p ResultType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp:83,depend,depending,83,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,1,['depend'],['depending']
Integrability,/// Helper function for mergeConsecutiveStores. Checks if candidate stores; /// have indirect dependency through their operands. RootNode is the; /// predecessor to all stores calculated by getStoreMergeCandidates and is; /// used to prune the dependency check. \return True if safe to merge.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:94,depend,dependency,94,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['depend'],['dependency']
Integrability,/// Helper function to inject a JSON array \p Array into object \p Paren at; /// position \p Key.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:23,inject,inject,23,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['inject'],['inject']
Integrability,/// Helper function to inject a JSON object \p Obj into another object \p Paren; /// at position \p Key.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:23,inject,inject,23,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['inject'],['inject']
Integrability,/// Helper function to inject a StringRef \p String into an object \p Paren at; /// position \p Key,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:23,inject,inject,23,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['inject'],['inject']
Integrability,/// Helper function to let the emitter report skip reason error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:64,message,messages,64,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,1,['message'],['messages']
Integrability,/// Helper functions for getOrCreateType.; /// @{; /// Currently the checksum of an interface includes the number of; /// ivars and property accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:84,interface,interface,84,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['interface'],['interface']
Integrability,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:546,message,message,546,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,1,['message'],['message']
Integrability,/// Helper object to determine if an Objective-C message expression; /// implicitly never returns.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:49,message,message,49,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['message'],['message']
Integrability,"/// Helper routine of SimplifyDemandedUseBits. It computes Known; /// bits. It also tries to handle simplifications that can be done based on; /// DemandedMask, but without modifying the Instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:11,rout,routine,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['rout'],['routine']
Integrability,"/// Helper routine of SimplifyDemandedUseBits. It computes KnownZero/KnownOne; /// bits. It also tries to handle simplifications that can be done based on; /// DemandedMask, but without modifying the Instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:11,rout,routine,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['rout'],['routine']
Integrability,"/// Helper routine of SimplifyDemandedUseBits. It tries to simplify demanded; /// bit for ""r1 = shr x, c1; r2 = shl r1, c2"" instruction sequence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:11,rout,routine,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['rout'],['routine']
Integrability,"/// Helper routine of SimplifyDemandedUseBits. It tries to simplify; /// ""E1 = (X lsr C1) << C2"", where the C1 and C2 are constant, into; /// ""E2 = X << (C2 - C1)"" or ""E2 = X >> (C1 - C2)"", depending on the sign; /// of ""C2-C1"".; ///; /// Suppose E1 and E2 are generally different in bits S={bm, bm+1,; /// ..., bn}, without considering the specific value X is holding.; /// This transformation is legal iff one of following conditions is hold:; /// 1) All the bit in S are 0, in this case E1 == E2.; /// 2) We don't care those bits in S, per the input DemandedMask.; /// 3) Combination of 1) and 2). Some bits in S are 0, and we don't care the; /// rest bits.; ///; /// Currently we only test condition 2).; ///; /// As with SimplifyDemandedUseBits, it returns NULL if the simplification was; /// not successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:11,rout,routine,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,2,"['depend', 'rout']","['depending', 'routine']"
Integrability,"/// Helper struct for converting the Instructions in a Module into a vector of; /// unsigned integers. This vector of unsigned integers can be thought of as a; /// ""numeric string"". This numeric string can then be queried by, for example,; /// data structures that find repeated substrings.; ///; /// This hashing is done per BasicBlock in the module. To hash Instructions; /// based off of their operations, each Instruction is wrapped in an; /// IRInstructionData struct. The unsigned integer for an IRInstructionData; /// depends on:; /// - The hash provided by the IRInstructionData.; /// - Which member of InstrType the IRInstructionData is classified as.; // See InstrType for more details on the possible classifications, and how they; // manifest in the numeric string.; ///; /// The numeric string for an individual BasicBlock is terminated by an unique; /// unsigned integer. This prevents data structures which rely on repetition; /// from matching across BasicBlocks. (For example, the SuffixTree.); /// As a concrete example, if we have the following two BasicBlocks:; /// \code; /// bb0:; /// %add1 = add i32 %a, %b; /// %add2 = add i32 %c, %d; /// %add3 = add i64 %e, %f; /// bb1:; /// %sub = sub i32 %c, %d; /// \endcode; /// We may hash the Instructions like this (via IRInstructionData):; /// \code; /// bb0:; /// %add1 = add i32 %a, %b ; Hash: 1; /// %add2 = add i32 %c, %d; Hash: 1; /// %add3 = add i64 %e, %f; Hash: 2; /// bb1:; /// %sub = sub i32 %c, %d; Hash: 3; /// %add4 = add i32 %c, %d ; Hash: 1; /// \endcode; /// And produce a ""numeric string representation"" like so:; /// 1, 1, 2, unique_integer_1, 3, 1, unique_integer_2; ///; /// TODO: This is very similar to the MachineOutliner, and should be; /// consolidated into the same interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:429,wrap,wrapped,429,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,3,"['depend', 'interface', 'wrap']","['depends', 'interface', 'wrapped']"
Integrability,/// Helper struct return a Expression with an optional extra dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:61,depend,dependency,61,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['depend'],['dependency']
Integrability,/// Helper that updates the completeness of the current DIE based on the; /// completeness of one of its children. It depends on the incompleteness of; /// the children already being computed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:118,depend,depends,118,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,1,['depend'],['depends']
Integrability,/// Helper that updates the completeness of the current DIE based on the; /// completeness of the DIEs it references. It depends on the incompleteness of; /// the referenced DIE already being computed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:121,depend,depends,121,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,1,['depend'],['depends']
Integrability,/// Helper to get the language options from the ASTContext.; /// Defined out of line to avoid depending on ASTContext.h.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:94,depend,depending,94,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['depend'],['depending']
Integrability,"/// Helper to store data from a value into a buffer and advance the; /// pointer into that buffer.; ///; /// This routine first checks whether there is enough space in the provided; /// buffer, and if not immediately returns false. If there is space, it; /// copies the underlying bytes of value into the buffer, advances the; /// buffer_ptr past the copied bytes, and returns true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:114,rout,routine,114,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['rout'],['routine']
Integrability,/// Helper to update the call graph after running a CGSCC pass.; ///; /// CGSCC passes can only mutate the call graph in specific ways. This; /// routine provides a helper that updates the call graph in those ways; /// including returning whether any changes were made and populating a CG; /// update result struct for the overall CGSCC walk.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:146,rout,routine,146,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['rout'],['routine']
Integrability,/// Helper to update the call graph after running a function pass.; ///; /// Function passes can only mutate the call graph in specific ways. This; /// routine provides a helper that updates the call graph in those ways; /// including returning whether any changes were made and populating a CG; /// update result struct for the overall CGSCC walk.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:152,rout,routine,152,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['rout'],['routine']
Integrability,"/// Helper wrapper around ShrinkDemandedConstant, demanding all elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['wrap'],['wrapper']
Integrability,"/// Helper wrapper around SimplifyDemandedBits, demanding all elements.; /// Adds Op back to the worklist upon success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['wrap'],['wrapper']
Integrability,/// Helper wrapper around SimplifyDemandedBits.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['wrap'],['wrapper']
Integrability,/// Helper wrapper around SimplifyDemandedVectorElts.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['wrap'],['wrapper']
Integrability,"/// Helper wrapper around SimplifyMultipleUseDemandedBits, demanding all; /// bits from only some vector elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['wrap'],['wrapper']
Integrability,"/// Helper wrapper around SimplifyMultipleUseDemandedBits, demanding all; /// elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['wrap'],['wrapper']
Integrability,/// Helper wrapper for the DemandedElts variant of getScalarizationOverhead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['wrap'],['wrapper']
Integrability,/// Helper wrapper to main isSplatValue function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:11,wrap,wrapper,11,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['wrap'],['wrapper']
Integrability,/// Helpers to create a promise and a callable wrapper of \p Task that sets; /// the result of the promise. Returns the callable and a future to access the; /// result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:47,wrap,wrapper,47,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,1,['wrap'],['wrapper']
Integrability,"/// Helps avoid false dependencies on undef registers by updating the; /// machine instructions' undef operand to use a register that the instruction; /// is truly dependent on, or use a register with clearance higher than Pref.; /// Returns true if it was able to find a true dependency, thus not requiring; /// a dependency breaking instruction regardless of clearance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp:22,depend,dependencies,22,interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,4,['depend'],"['dependencies', 'dependency', 'dependent']"
Integrability,"/// Here we are integrating a function that has shape servers to verify that; /// they are correctly propagated as shape servers to the integral.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:16,integrat,integrating,16,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,1,['integrat'],['integrating']
Integrability,/// Heuristically determine the best-performant unroll factor for \p CLI. This; /// depends on the target processor. We are re-using the same heuristics as the; /// LoopUnrollPass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:84,depend,depends,84,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['depend'],['depends']
Integrability,"/// Hides a using shadow declaration. This is required by the current; /// using-decl implementation when a resolvable using declaration in a; /// class is followed by a declaration which would hide or override; /// one or more of the using decl's targets; for example:; ///; /// struct Base { void foo(int); };; /// struct Derived : Base {; /// using Base::foo;; /// void foo(int);; /// };; ///; /// The governing language is C++03 [namespace.udecl]p12:; ///; /// When a using-declaration brings names from a base class into a; /// derived class scope, member functions in the derived class; /// override and/or hide member functions with the same name and; /// parameter types in a base class (rather than conflicting).; ///; /// There are two ways to implement this:; /// (1) optimistically create shadow decls when they're not hidden; /// by existing declarations, or; /// (2) don't create any shadow decls (or at least don't make them; /// visible) until we've fully parsed/instantiated the class.; /// The problem with (1) is that we might have to retroactively remove; /// a shadow decl, which requires several O(n) operations because the; /// decl structures are (very reasonably) not designed for removal.; /// (2) avoids this but is very fiddly and phase-dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:1265,depend,dependent,1265,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['depend'],['dependent']
Integrability,/// High-level routine to lower various 256-bit x86 vector shuffles.; ///; /// This routine either breaks down the specific type of a 256-bit x86 vector; /// shuffle or splits it into two 128-bit shuffles and fuses the results back; /// together based on the available instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:15,rout,routine,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['rout'],['routine']
Integrability,/// High-level routine to lower various 512-bit x86 vector shuffles.; ///; /// This routine either breaks down the specific type of a 512-bit x86 vector; /// shuffle or splits it into two 256-bit shuffles and fuses the results back; /// together based on the available instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:15,rout,routine,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['rout'],['routine']
Integrability,"/// Hijack all messages with given level and topics while this object is alive.; /// \param[in] level Minimum level to hijack. Higher levels also get captured.; /// \param[in] topics Topics to hijack. Use `|` to combine different topics, and cast to `RooFit::MsgTopic` if; /// necessary. \param[in] objectName Only hijack messages from an object with the given name. Defaults to any object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHelpers.cxx:15,message,messages,15,roofit/roofitcore/src/RooHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHelpers.cxx,2,['message'],['messages']
Integrability,"/// Hijacks all messages with given level and topic (and optionally object name) while alive.; /// Use this like an ostringstream afterwards. The messages can e.g. be retrieved using `str()`.; /// Useful for unit tests / debugging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:16,message,messages,16,roofit/roofitcore/inc/RooHelpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h,2,['message'],['messages']
Integrability,"/// Hold the information about the DAG/NOT strings in the program, which are; /// not explicitly stored otherwise. This allows for better and more accurate; /// diagnostic messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:172,message,messages,172,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['message'],['messages']
Integrability,/// Holds dependences among the memory accesses in the loop. It maps a source; /// access to a set of dependent sink accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:10,depend,dependences,10,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,2,['depend'],"['dependences', 'dependent']"
Integrability,/// Holds the Module and ModuleSummaryIndex returned by the interfaces; /// that parse both.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:60,interface,interfaces,60,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['interface'],['interfaces']
Integrability,/// Holds the id of the set of pointers that could be dependent because of a; /// shared underlying object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:54,depend,dependent,54,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependent']
Integrability,"/// HonorSignDependentRoundingFPMath - This returns true when the; /// -enable-sign-dependent-rounding-fp-math is specified. If this returns; /// false (the default), the code generator is allowed to assume that the; /// rounding behavior is the default (round-to-zero for all floating point; /// to integer conversions, and round-to-nearest for all other arithmetic; /// truncations). If this is enabled (set to true), the code generator must; /// assume that the rounding mode may dynamically change.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:84,depend,dependent-rounding-fp-math,84,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,1,['depend'],['dependent-rounding-fp-math']
Integrability,/// Hook for users to check if an ISA trait matches. The trait is described as; /// the string that got parsed and it depends on the target and context if; /// this matches or not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPContext.h:118,depend,depends,118,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPContext.h,1,['depend'],['depends']
Integrability,"/// Hook interface function to execute code upon insertion into a RooAbsRealLValue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h:9,interface,interface,9,roofit/roofitcore/inc/RooAbsBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h,1,['interface'],['interface']
Integrability,"/// Hook interface function to execute code upon removal from a RooAbsRealLValue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h:9,interface,interface,9,roofit/roofitcore/inc/RooAbsBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h,1,['interface'],['interface']
Integrability,"/// Horizontally align operands of binary and ternary expressions.; ///; /// Specifically, this aligns operands of a single expression that needs; /// to be split over multiple lines, e.g.:; /// \code; /// int aaa = bbbbbbbbbbbbbbb +; /// ccccccccccccccc;; /// \endcode; ///; /// When ``BreakBeforeBinaryOperators`` is set, the wrapped operator is; /// aligned with the operand on the first line.; /// \code; /// int aaa = bbbbbbbbbbbbbbb; /// + ccccccccccccccc;; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:328,wrap,wrapped,328,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapped']
Integrability,"/// Horizontally align operands of binary and ternary expressions.; ///; /// This is similar to ``AO_Align``, except when; /// ``BreakBeforeBinaryOperators`` is set, the operator is un-indented so; /// that the wrapped operand is aligned with the operand on the first line.; /// \code; /// int aaa = bbbbbbbbbbbbbbb; /// + ccccccccccccccc;; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:211,wrap,wrapped,211,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapped']
Integrability,/// IPDBDataStream defines an interface used to represent a stream consisting; /// of a name and a series of records whose formats depend on the particular; /// stream type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h:30,interface,interface,30,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBDataStream.h,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,/// IPDBFrameData defines an interface used to represent a frame data of some; /// code block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBFrameData.h:29,interface,interface,29,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBFrameData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBFrameData.h,1,['interface'],['interface']
Integrability,"/// IPDBInjectedSource defines an interface used to represent source files; /// which were injected directly into the PDB file during the compilation; /// process. This is used, for example, to add natvis files to a PDB, but; /// in theory could be used to add arbitrary source code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h:34,interface,interface,34,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,2,"['inject', 'interface']","['injected', 'interface']"
Integrability,/// IPDBRawSymbol defines an interface used to represent an arbitrary symbol.; /// It exposes a monolithic interface consisting of accessors for the union of; /// all properties that are valid for any symbol type. This interface is then; /// wrapped by a concrete class which exposes only those set of methods valid; /// for this particular symbol type. See PDBSymbol.h for more details.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:29,interface,interface,29,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,4,"['interface', 'wrap']","['interface', 'wrapped']"
Integrability,/// IPDBSectionContrib defines an interface used to represent section; /// contributions whose information are stored in the PDB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSectionContrib.h:34,interface,interface,34,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSectionContrib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSectionContrib.h,1,['interface'],['interface']
Integrability,"/// IPDBSession defines an interface used to provide a context for querying; /// debug information from a debug data source (for example, a PDB).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSession.h:27,interface,interface,27,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSession.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSession.h,1,['interface'],['interface']
Integrability,/// IPDBSourceFile defines an interface used to represent source files whose; /// information are stored in the PDB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSourceFile.h:30,interface,interface,30,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSourceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBSourceFile.h,1,['interface'],['interface']
Integrability,/// IRBuilderFolder - Interface for constant folding in IRBuilder.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h:22,Interface,Interface,22,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilderFolder.h,1,['Interface'],['Interface']
Integrability,"/// IRMaterializationUnit is a convenient base class for MaterializationUnits; /// wrapping LLVM IR. Represents materialization responsibility for all symbols; /// in the given module. If symbols are overridden by other definitions, then; /// their linkage is changed to available-externally.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:83,wrap,wrapping,83,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,1,['wrap'],['wrapping']
Integrability,/// ISR - Whether the function is an Interrupt Service Routine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsMachineFunction.h:55,Rout,Routine,55,interpreter/llvm-project/llvm/lib/Target/Mips/MipsMachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsMachineFunction.h,1,['Rout'],['Routine']
Integrability,"/// IVChain logic must consistently peek base TruncInst operands, so wrap it in; /// a convenient helper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:69,wrap,wrap,69,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['wrap'],['wrap']
Integrability,"/// Identifier for ""message"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:20,message,message,20,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['message'],['message']
Integrability,/// Identifiy anti-dependencies along the critical path; /// of the ScheduleDAG and break them by renaming registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AggressiveAntiDepBreaker.h:19,depend,dependencies,19,interpreter/llvm-project/llvm/lib/CodeGen/AggressiveAntiDepBreaker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AggressiveAntiDepBreaker.h,2,['depend'],['dependencies']
Integrability,/// Identifiy anti-dependencies within a basic-block region and break them by; /// renaming registers. Return the number of anti-dependencies broken.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h:19,depend,dependencies,19,interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h,2,['depend'],['dependencies']
Integrability,"/// Identify a debugger for ""tuning"" the debug info.; ///; /// The ""debugger tuning"" concept allows us to present a more intuitive; /// interface that unpacks into different sets of defaults for the various; /// individual feature-flag settings, that suit the preferences of the; /// various debuggers. However, it's worth remembering that debuggers are; /// not the only consumers of debug info, and some variations in DWARF might; /// better be treated as target/platform issues. Fundamentally,; /// o if the feature is useful (or not) to a particular debugger, regardless; /// of the target, that's a tuning decision;; /// o if the feature is useful (or not) on a particular platform, regardless; /// of the debugger, that's a target decision.; /// It's not impossible to see both factors in some specific case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:136,interface,interface,136,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,1,['interface'],['interface']
Integrability,/// Identify all the elementary circuits in the dependence graph using; /// Johnson's circuit algorithm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:48,depend,dependence,48,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['depend'],['dependence']
Integrability,/// Identify an elementary circuit in the dependence graph starting at the; /// specified node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:42,depend,dependence,42,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['depend'],['dependence']
Integrability,"/// If RHS is zero LHS and REMAINDER are left unchanged, return one.; /// Otherwise set LHS to LHS / RHS with the fractional part discarded, set; /// REMAINDER to the remainder, return zero. i.e.; ///; /// OLD_LHS = RHS * LHS + REMAINDER; ///; /// SCRATCH is a bignum of the same size as the operands and result for use by; /// the routine; its contents need not be initialized and are destroyed. LHS,; /// REMAINDER and SCRATCH must be distinct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:332,rout,routine,332,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['rout'],['routine']
Integrability,"/// If Type is a reference type (e.g., const; /// int&), returns the type that the reference refers to (""const; /// int""). Otherwise, returns the type itself. This routine is used; /// throughout Sema to implement C++ 5p6:; ///; /// If an expression initially has the type ""reference to T"" (8.3.2,; /// 8.5.3), the type is adjusted to ""T"" prior to any further; /// analysis, the expression designates the object or function; /// denoted by the reference, and the expression is an lvalue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:164,rout,routine,164,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['rout'],['routine']
Integrability,"/// If \p ExprId is not a pointer type, constructs an expression that; /// idiomatically takes the address of the expression bound to \p ExprId,; /// including wrapping \p ExprId in parentheses, if needed. Otherwise, generates; /// the original expression source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h:160,wrap,wrapping,160,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h,1,['wrap'],['wrapping']
Integrability,"/// If \p ExprId is of pointer type, constructs an idiomatic dereferencing of; /// the expression bound to \p ExprId, including wrapping it in parentheses, if; /// needed. Otherwise, generates the original expression source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h:128,wrap,wrapping,128,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h,1,['wrap'],['wrapping']
Integrability,"/// If \p Pass is a loop-nest pass, \p Pass will first be wrapped into a; /// \c LoopPassManager and the returned adaptor will be in loop-nest mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:58,wrap,wrapped,58,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,1,['wrap'],['wrapped']
Integrability,"/// If \p V is assumed simplified, return it, if it is unclear yet,; /// return std::nullopt, otherwise return `nullptr`. Same as the public; /// version except that it can be used without recording dependences on any \p; /// AA.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:199,depend,dependences,199,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['dependences']
Integrability,"/// If ``false``, empty function body can be put on a single line.; /// This option is used only if the opening brace of the function has; /// already been wrapped, i.e. the ``AfterFunction`` brace wrapping mode is; /// set, and the function could/should not be put on a single line (as per; /// ``AllowShortFunctionsOnASingleLine`` and constructor formatting; /// options).; /// \code; /// false: true:; /// int f() vs. int f(); /// {} {; /// }; /// \endcode; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:156,wrap,wrapped,156,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['wrap'],"['wrapped', 'wrapping']"
Integrability,"/// If ``false``, empty namespace body can be put on a single line.; /// This option is used only if the opening brace of the namespace has; /// already been wrapped, i.e. the ``AfterNamespace`` brace wrapping mode is; /// set.; /// \code; /// false: true:; /// namespace Foo vs. namespace Foo; /// {} {; /// }; /// \endcode; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:158,wrap,wrapped,158,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['wrap'],"['wrapped', 'wrapping']"
Integrability,"/// If ``false``, empty record (e.g. class, struct or union) body; /// can be put on a single line. This option is used only if the opening; /// brace of the record has already been wrapped, i.e. the ``AfterClass``; /// (for classes) brace wrapping mode is set.; /// \code; /// false: true:; /// class Foo vs. class Foo; /// {} {; /// }; /// \endcode; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:182,wrap,wrapped,182,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['wrap'],"['wrapped', 'wrapping']"
Integrability,"/// If ``true``, always break before multiline string literals.; ///; /// This flag is mean to make cases where there are multiple multiline strings; /// in a file look more consistent. Thus, it will only take effect if wrapping; /// the string at that point leads to it being indented; /// ``ContinuationIndentWidth`` spaces from the start of the line.; /// \code; /// true: false:; /// aaaa = vs. aaaa = ""bbbb""; /// ""bbbb"" ""cccc"";; /// ""cccc"";; /// \endcode; /// \version 3.4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:220,wrap,wrapping,220,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapping']
Integrability,"/// If ``true``, consecutive namespace declarations will be on the same; /// line. If ``false``, each namespace is declared on a new line.; /// \code; /// true:; /// namespace Foo { namespace Bar {; /// }}; ///; /// false:; /// namespace Foo {; /// namespace Bar {; /// }; /// }; /// \endcode; ///; /// If it does not fit on a single line, the overflowing namespaces get; /// wrapped:; /// \code; /// namespace Foo { namespace Bar {; /// namespace Extra {; /// }}}; /// \endcode; /// \version 5",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:376,wrap,wrapped,376,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapped']
Integrability,"/// If ``true``, short case labels will be contracted to a single line.; /// \code; /// true: false:; /// switch (a) { vs. switch (a) {; /// case 1: x = 1; break; case 1:; /// case 2: return; x = 1;; /// } break;; /// case 2:; /// return;; /// }; /// \endcode; /// \version 3.6",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:43,contract,contracted,43,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['contract'],['contracted']
Integrability,"/// If a block relative to this parenthesis level gets wrapped, indent; /// it this much.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h:55,wrap,wrapped,55,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,1,['wrap'],['wrapped']
Integrability,"/// If a category depends on the shape of others, i.e.\ its state numbers or names depend; /// on the states of other categories, this function has to be implemented to recompute; /// _stateNames and _insertionOrder.; /// If one of these two changes, setShapeDirty() has to be called to propagate this information; /// to possible users of this category.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:18,depend,depends,18,roofit/roofitcore/inc/RooAbsCategory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h,2,['depend'],"['depend', 'depends']"
Integrability,"/// If a crash happens while one of these objects are live, the message; /// is printed out along with the specified source location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PrettyStackTrace.h:64,message,message,64,interpreter/llvm-project/clang/include/clang/Basic/PrettyStackTrace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PrettyStackTrace.h,1,['message'],['message']
Integrability,"/// If a load has multiple candidates associated (i.e. different; /// stores), it means that it could be forwarding from multiple stores; /// depending on control flow. Remove these candidates.; ///; /// Here, we rely on LAA to include the relevant loop-independent dependences.; /// LAA is known to omit these in the very simple case when the read and the; /// write within an alias set always takes place using the *same* pointer.; ///; /// However, we know that this is not the case here, i.e. we can rely on LAA; /// to provide us with loop-independent dependences for the cases we're; /// interested. Consider the case for example where a loop-independent; /// dependece S1->S2 invalidates the forwarding S3->S2.; ///; /// A[i] = ... (S1); /// ... = A[i] (S2); /// A[i+1] = ... (S3); ///; /// LAA will perform dependence analysis here because there are two; /// *different* pointers involved in the same alias set (&A[i] and &A[i+1]).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp:142,depend,depending,142,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,5,['depend'],"['dependece', 'dependence', 'dependences', 'depending']"
Integrability,"/// If an SVal wraps a region that should be tracked, it will return a pointer; /// to the wrapped region. Otherwise it will return a nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:15,wrap,wraps,15,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,2,['wrap'],"['wrapped', 'wraps']"
Integrability,"/// If an event occurs in a different frame than the final diagnostic,; /// supply a message that will be used to construct an extra hint on the; /// returns from all the calls on the stack from this event to the final; /// diagnostic.; // FIXME: Allow shared_ptr keys in DenseMap?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:85,message,message,85,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,1,['message'],['message']
Integrability,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:265,depend,dependency,265,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,2,['depend'],['dependency']
Integrability,"/// If represented precisely, the result of some range operations may consist; /// of multiple disjoint ranges. As only a single range may be returned, any; /// range covering these disjoint ranges constitutes a valid result, but some; /// may be more useful than others depending on context. The preferred range; /// type specifies whether a range that is non-wrapping in the unsigned or; /// signed domain, or has the smallest size, is preferred. If a signedness is; /// preferred but all ranges are non-wrapping or all wrapping, then the; /// smallest set size is preferred. If there are multiple smallest sets, any; /// one of them may be returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:271,depend,depending,271,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,4,"['depend', 'wrap']","['depending', 'wrapping']"
Integrability,"/// If set to ``TCS_Wrapped`` will insert trailing commas in container; /// literals (arrays and objects) that wrap across multiple lines.; /// It is currently only available for JavaScript; /// and disabled by default ``TCS_None``.; /// ``InsertTrailingCommas`` cannot be used together with ``BinPackArguments``; /// as inserting the comma disables bin-packing.; /// \code; /// TSC_Wrapped:; /// const someArray = [; /// aaaaaaaaaaaaaaaaaaaaaaaaaa,; /// aaaaaaaaaaaaaaaaaaaaaaaaaa,; /// aaaaaaaaaaaaaaaaaaaaaaaaaa,; /// // ^ inserted; /// ]; /// \endcode; /// \version 11",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:111,wrap,wrap,111,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrap']
Integrability,"/// If set, this ObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:741,depend,depend,741,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,1,['depend'],['depend']
Integrability,"/// If set, this RTDyldObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:747,depend,depend,747,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,1,['depend'],['depend']
Integrability,"/// If the direction vector is negative, normalize the direction; /// vector to make it non-negative. Normalization is done by reversing; /// Src and Dst, plus reversing the dependence directions and distances; /// in the vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:174,depend,dependence,174,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,"/// If the format string is not within the function call, emit a note; /// so that the function call and string are in diagnostic messages.; ///; /// \param InFunctionCall if true, the format string is within the function; /// call and only one diagnostic message will be produced. Otherwise, an; /// extra note will be emitted pointing to location of the format string.; ///; /// \param ArgumentExpr the expression that is passed as the format string; /// argument in the function call. Used for getting locations when two; /// diagnostics are emitted.; ///; /// \param PDiag the callee should already have provided any strings for the; /// diagnostic message. This function only adds locations and fixits; /// to diagnostics.; ///; /// \param Loc primary location for diagnostic. If two diagnostics are; /// required, one will be at Loc and a new SourceLocation will be created for; /// the other one.; ///; /// \param IsStringLocation if true, Loc points to the format string should be; /// used for the note. Otherwise, Loc points to the argument list and will; /// be used with PDiag.; ///; /// \param StringRange some or all of the string to highlight. This is; /// templated so it can accept either a CharSourceRange or a SourceRange.; ///; /// \param FixIt optional fix it hint for the format string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:130,message,messages,130,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,3,['message'],"['message', 'messages']"
Integrability,"/// If the given expression involves a message send to a method; /// with a related result type, emit a note describing what happened.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,message,message,39,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['message'],['message']
Integrability,"/// If the given nested name specifier refers to the current; /// instantiation, return the declaration that corresponds to that; /// current instantiation (C++0x [temp.dep.type]p1).; ///; /// \param NNS a dependent nested name specifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:206,depend,dependent,206,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,1,['depend'],['dependent']
Integrability,"/// If the identifier refers to a type name within this scope,; /// return the declaration of that type.; ///; /// This routine performs ordinary name lookup of the identifier II; /// within the given scope, with optional C++ scope specifier SS, to; /// determine whether the name refers to a type. If so, returns an; /// opaque pointer (actually a QualType) corresponding to that; /// type. Otherwise, returns NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:120,rout,routine,120,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['rout'],['routine']
Integrability,"/// If the loop has memory dependence involving an invariant address, i.e. two; /// stores or a store and a load, then return true, else return false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:27,depend,dependence,27,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,"/// If the message was a call to '[super dealloc]', diagnose any missing; /// releases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:11,message,message,11,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['message'],['message']
Integrability,"/// If the operand is a vector that needs to be scalarized then the; /// result must be v1i1, so just convert to a scalar SETCC and wrap; /// with a scalar_to_vector since the res type is legal if we got here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:132,wrap,wrap,132,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['wrap'],['wrap']
Integrability,"/// If the pointer has a constant stride return it in units of the access type; /// size. Otherwise return std::nullopt.; ///; /// Ensure that it does not wrap in the address space, assuming the predicate; /// associated with \p PSE is true.; ///; /// If necessary this method will version the stride of the pointer according; /// to \p PtrToStride and therefore add further predicates to \p PSE.; /// The \p Assume parameter indicates if we are allowed to make additional; /// run-time assumptions.; ///; /// Note that the analysis results are defined if-and-only-if the original; /// memory access was defined. If that access was dead, or UB, then the; /// result of this function is undefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:155,wrap,wrap,155,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['wrap'],['wrap']
Integrability,"/// If the specific machine instruction is a instruction that moves/copies; /// value from one register to another register return destination and source; /// registers as machine operands.; /// For COPY-instruction the method naturally returns destination and source; /// registers as machine operands, for all other instructions the method calls; /// target-dependent implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:360,depend,dependent,360,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['depend'],['dependent']
Integrability,"/// If the statement is a message send expression with nil receiver, returns; /// the receiver expression. Returns NULL otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:26,message,message,26,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,1,['message'],['message']
Integrability,"/// If there are any field references that refer to fields that have been; /// filled in, we can propagate the values now.; ///; /// This is a final resolve: any error messages, e.g. due to undefined !cast; /// references, are generated now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:168,message,messages,168,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['message'],['messages']
Integrability,"/// If this SVal is a location (subclasses Loc) and wraps a symbol,; /// return that SymbolRef. Otherwise return 0.; ///; /// Implicit casts (ex: void* -> char*) can turn Symbolic region into Element; /// region. If that is the case, gets the underlining region.; /// When IncludeBaseRegions is set to true and the SubRegion is non-symbolic,; /// the first symbolic parent region is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SVals.cpp:52,wrap,wraps,52,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SVals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SVals.cpp,1,['wrap'],['wraps']
Integrability,"/// If this SVal is a location and wraps a symbol, return that; /// SymbolRef. Otherwise return 0.; ///; /// Casts are ignored during lookup.; /// \param IncludeBaseRegions The boolean that controls whether the search; /// should continue to the base regions if the region is not symbolic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:35,wrap,wraps,35,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,1,['wrap'],['wraps']
Integrability,"/// If this SVal wraps a symbol return that SymbolRef.; /// Otherwise, return 0.; ///; /// Casts are ignored during lookup.; /// \param IncludeBaseRegions The boolean that controls whether the search; /// should continue to the base regions if the region is not symbolic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:17,wrap,wraps,17,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,2,['wrap'],['wraps']
Integrability,"/// If this \p Lexer is \p isDependencyDirectivesLexer(), it represents the; /// next token to use from the current dependency directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:116,depend,dependency,116,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,1,['depend'],['dependency']
Integrability,"/// If this expression is not value-dependent, this indicates whether; /// the trait evaluated true or false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:36,depend,dependent,36,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['depend'],['dependent']
Integrability,"/// If this friend declaration names a templated type (or; /// a dependent member type of a templated type), return that; /// type; otherwise return null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:65,depend,dependent,65,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['depend'],['dependent']
Integrability,"/// If this friend declaration names an (untemplated but possibly; /// dependent) type, return the type; otherwise return null. This; /// is used for elaborated-type-specifiers and, in C++0x, for; /// arbitrary friend type declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h:71,depend,dependent,71,interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h,1,['depend'],['dependent']
Integrability,"/// If this function is an instantiation of a member function; /// of a class template specialization, retrieves the function from; /// which it was instantiated.; ///; /// This routine will return non-NULL for (non-templated) member; /// functions of class templates and for instantiations of function; /// templates. For example, given:; ///; /// \code; /// template<typename T>; /// struct X {; /// void f(T);; /// };; /// \endcode; ///; /// The declaration for X<int>::f is a (non-templated) FunctionDecl; /// whose parent is the class template specialization X<int>. For; /// this declaration, getInstantiatedFromFunction() will return; /// the FunctionDecl X<T>::A. When a complete definition of; /// X<int>::A is required, it will be instantiated from the; /// declaration returned by getInstantiatedFromMemberFunction().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:178,rout,routine,178,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['rout'],['routine']
Integrability,"/// If this is a function that the ABI specifies returns 'this', initialize; /// the return slot to 'this' at the start of the function.; ///; /// Unlike the setting of return types, this is done within the ABI; /// implementation instead of by clients of CGCXXABI because:; /// 1) getThisValue is currently protected; /// 2) in theory, an ABI could implement 'this' returns some other way;; /// HasThisReturn only specifies a contract, not the implementation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:427,contract,contract,427,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['contract'],['contract']
Integrability,"/// If this is a normal dependency, returns the instruction that is depended; /// on. Otherwise, returns null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:24,depend,dependency,24,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,2,['depend'],"['depended', 'dependency']"
Integrability,"/// If this is an 'if constexpr', determine which substatement will be taken.; /// Otherwise, or if the condition is value-dependent, returns std::nullopt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:123,depend,dependent,123,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['depend'],['dependent']
Integrability,"/// If this is true, assume it's preferably to leave memory intrinsic calls; /// for replacement with a library call later. Otherwise this depends on; /// TargetLoweringInfo availability of the corresponding function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PreISelIntrinsicLowering.cpp:139,depend,depends,139,interpreter/llvm-project/llvm/lib/CodeGen/PreISelIntrinsicLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PreISelIntrinsicLowering.cpp,1,['depend'],['depends']
Integrability,/// If this module is a standard c++ interface unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:37,interface,interface,37,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['interface'],['interface']
Integrability,"/// If this pointer points to an Objective C; /// \@interface type, gets the type for that interface. Any protocol; /// qualifiers on the interface are ignored.; ///; /// \return null if the base type for this pointer is 'id' or 'Class'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:52,interface,interface,52,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,4,"['interface', 'protocol']","['interface', 'protocol']"
Integrability,"/// If this pointer points to an Objective \@interface; /// type, gets the declaration for that interface.; ///; /// \return null if the base type for this pointer is 'id' or 'Class'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:45,interface,interface,45,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['interface'],['interface']
Integrability,"/// If this record is an instantiation of a member class,; /// retrieves the member class from which it was instantiated.; ///; /// This routine will return non-null for (non-templated) member; /// classes of class templates. For example, given:; ///; /// \code; /// template<typename T>; /// struct X {; /// struct A { };; /// };; /// \endcode; ///; /// The declaration for X<int>::A is a (non-templated) CXXRecordDecl; /// whose parent is the class template specialization X<int>. For; /// this declaration, getInstantiatedFromMemberClass() will return; /// the CXXRecordDecl X<T>::A. When a complete definition of; /// X<int>::A is required, it will be instantiated from the; /// declaration returned by getInstantiatedFromMemberClass().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:137,rout,routine,137,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['rout'],['routine']
Integrability,"/// If this value is an out-of-band error then this returns the error message,; /// otherwise returns nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:70,message,message,70,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,1,['message'],['message']
Integrability,"/// If true verbose message in the generation step is requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:20,message,message,20,roofit/roofitcore/inc/RooAbsMCStudyModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h,1,['message'],['message']
Integrability,/// If we are proprocessing a named interface unit.; /// Note that a module implementation partition is not considered as an; /// named interface unit here although it is importable; /// to ease the parsing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:36,interface,interface,36,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,2,['interface'],['interface']
Integrability,"/// If we have a masked merge, in the canonical form of:; /// (assuming that A only has one use.); /// | A | |B|; /// ((x ^ y) & M) ^ y; /// | D |; /// * If M is inverted:; /// | D |; /// ((x ^ y) & ~M) ^ y; /// We can canonicalize by swapping the final xor operand; /// to eliminate the 'not' of the mask.; /// ((x ^ y) & M) ^ x; /// * If M is a constant, and D has one use, we transform to 'and' / 'or' ops; /// because that shortens the dependency chain and improves analysis:; /// (x & M) | (y & ~M)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:440,depend,dependency,440,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['depend'],['dependency']
Integrability,"/// If we have a select with an equality comparison, then we know the value in; /// one of the arms of the select. See if substituting this value into an arm; /// and simplifying the result yields the same value as the other arm.; ///; /// To make this transform safe, we must drop poison-generating flags; /// (nsw, etc) if we simplified to a binop because the select may be guarding; /// that poison from propagating. If the existing binop already had no; /// poison-generating flags, then this transform can be done by instsimplify.; ///; /// Consider:; /// %cmp = icmp eq i32 %x, 2147483647; /// %add = add nsw i32 %x, 1; /// %sel = select i1 %cmp, i32 -2147483648, i32 %add; ///; /// We can't replace %sel with %add unless we strip away the flags.; /// TODO: Wrapping flags could be preserved in some cases with better analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:764,Wrap,Wrapping,764,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['Wrap'],['Wrapping']
Integrability,"/// If we have a shift-by-constant of a bin op (bitwise logic op or add/sub w/; /// shl) that itself has a shift-by-constant operand with identical opcode, we; /// may be able to convert that into 2 independent shifts followed by the logic; /// op. This eliminates a use of an intermediate value (reduces dependency; /// chain).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:305,depend,dependency,305,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['depend'],['dependency']
Integrability,/// If we see a non-constant dependence distance we can still try to; /// vectorize this loop with runtime checks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:29,depend,dependence,29,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,/// If we're generating dependency output in P1689 format; /// for standard C++ modules.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:24,depend,dependency,24,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependency']
Integrability,"/// If you add components where each component only depends on a subset of the; /// union set of the observables, the RooAddPdf should understand that the; /// component is uniform in the missing observables. This is validated in the; /// following test for both the getVal() interface and evaluation with the; /// RooFit::Evaluator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx:52,depend,depends,52,roofit/roofitcore/test/testRooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx,2,"['depend', 'interface']","['depends', 'interface']"
Integrability,"/// ImaginaryLiteral - We support imaginary integer and floating point literals,; /// like ""1.0i"". We represent these as a wrapper around FloatingLiteral and; /// IntegerLiteral classes. Instances of this class always have a Complex type; /// whose element type matches the subexpression.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:123,wrap,wrapper,123,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['wrap'],['wrapper']
Integrability,"/// ImmutableAnalysis abstraction for fetching the Eviction Advisor. We model it; /// as an analysis to decouple the user from the implementation insofar as; /// dependencies on other analyses goes. The motivation for it being an; /// immutable pass is twofold:; /// - in the ML implementation case, the evaluator is stateless but (especially; /// in the development mode) expensive to set up. With an immutable pass, we set; /// it up once.; /// - in the 'development' mode ML case, we want to capture the training log; /// during allocation (this is a log of features encountered and decisions; /// made), and then measure a score, potentially a few steps after allocation; /// completes. So we need the properties of an immutable pass to keep the logger; /// state around until we can make that measurement.; ///; /// Because we need to offer additional services in 'development' mode, the; /// implementations of this analysis need to implement RTTI support.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h:162,depend,dependencies,162,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,1,['depend'],['dependencies']
Integrability,"/// ImmutableList - This class represents an immutable (functional) list.; /// It is implemented as a smart pointer (wraps ImmutableListImpl), so it; /// it is intended to always be copied by value as if it were a pointer.; /// This interface matches ImmutableSet and ImmutableMap. ImmutableList; /// objects should almost never be created directly, and instead should; /// be created by ImmutableListFactory objects that manage the lifetime; /// of a group of lists. When the factory object is reclaimed, all lists; /// created by that factory are released as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h:117,wrap,wraps,117,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableList.h,2,"['interface', 'wrap']","['interface', 'wraps']"
Integrability,/// ImplMethodsVsClassMethods - This is main routine to warn if any method; /// remains unimplemented in the class or category \@implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:45,rout,routine,45,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['rout'],['routine']
Integrability,/// Implement MachineSchedStrategy interface.; /// -----------------------------------------,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:35,interface,interface,35,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['interface'],['interface']
Integrability,/// Implement MachineSchedStrategy interface.; /// -----------------------------------------; /// Callback to select the highest priority node from the ready Q.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:35,interface,interface,35,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['interface'],['interface']
Integrability,/// Implement ScheduleDAGInstrs interface for scheduling a sequence of; /// reorderable instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:32,interface,interface,32,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,2,['interface'],['interface']
Integrability,/// Implement expand-based legalization of vector operations.; ///; /// This is just a high-level routine to dispatch to specific code paths for; /// operations to legalize them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:98,rout,routine,98,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['rout'],['routine']
Integrability,/// Implement the ExecuteAction interface by running Sema on; /// the already-initialized AST consumer.; ///; /// This will also take care of instantiating a code completion consumer if; /// the user requested it and the action supports it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:32,interface,interface,32,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,1,['interface'],['interface']
Integrability,"/// Implement the ScheduleDAGInstrs interface for handling the next scheduling; /// region. This covers all instructions in a block, while schedule() may only; /// cover a subset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:36,interface,interface,36,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,2,['interface'],['interface']
Integrability,"/// Implement the combining of integral values into a hash_code.; ///; /// This overload is selected when the value type of the iterator is integral; /// and when the input iterator is actually a pointer. Rather than computing; /// a hash_code for each object and then combining them, this (as an; /// optimization) directly combines the integers. Also, because the integers; /// are stored in contiguous memory, this routine avoids copying each value; /// and directly reads from the underlying memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:418,rout,routine,418,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['rout'],['routine']
Integrability,/// Implementation for \a HeaderMap that doesn't depend on \a FileManager.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h:49,depend,depend,49,interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderMap.h,1,['depend'],['depend']
Integrability,"/// Implementation for an ilist node.; ///; /// Templated on an appropriate \a ilist_detail::node_options, usually computed; /// by \a ilist_detail::compute_node_options.; ///; /// This is a wrapper around \a ilist_node_base whose main purpose is to; /// provide type safety: you can't insert nodes of \a ilist_node_impl into the; /// wrong \a simple_ilist or \a iplist.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:191,wrap,wrapper,191,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,1,['wrap'],['wrapper']
Integrability,"/// Implementation of format_provider<T> for ranges.; ///; /// This will print an arbitrary range as a delimited sequence of items.; ///; /// The options string of a range type has the grammar:; ///; /// range_style ::= [separator] [element_style]; /// separator ::= ""$"" delimeted_expr; /// element_style ::= ""@"" delimeted_expr; /// delimeted_expr ::= ""["" expr ""]"" | ""("" expr "")"" | ""<"" expr "">""; /// expr ::= <any string not containing delimeter>; ///; /// where the separator expression is the string to insert between consecutive; /// items in the range and the argument expression is the Style specification to; /// be used when formatting the underlying type. The default separator if; /// unspecified is ' ' (space). The syntax of the argument expression follows; /// whatever grammar is dictated by the format provider or format adapter used; /// to format the value type.; ///; /// Note that attempting to format an `iterator_range<T>` where no format; /// provider can be found for T will result in a compile error.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h:835,adapter,adapter,835,interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h,1,['adapter'],['adapter']
Integrability,/// Implementation of non-dependent functionality for \c PtrUseVisitor.; ///; /// See \c PtrUseVisitor for the public interface and detailed comments about; /// usage. This class is just a helper base class which is not templated and; /// contains all common code to be shared between different instantiations of; /// PtrUseVisitor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h:26,depend,dependent,26,interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,2,"['depend', 'interface']","['dependent', 'interface']"
Integrability,"/// Implementation of recursive simplification through an instruction's; /// uses.; ///; /// This is the common implementation of the recursive simplification routines.; /// If we have a pre-simplified value in 'SimpleV', that is forcibly used to; /// replace the instruction 'I'. Otherwise, we simply add 'I' to the list of; /// instructions to process and attempt to simplify it using; /// InstructionSimplify. Recursively visited users which could not be; /// simplified themselves are to the optional UnsimplifiedUsers set for; /// further processing by the caller.; ///; /// This routine returns 'true' only when *it* simplifies something. The passed; /// in simplified value does not count toward this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:159,rout,routines,159,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['rout'],"['routine', 'routines']"
Integrability,/// Implementation of the SCEVPredicate interface,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:40,interface,interface,40,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,3,['interface'],['interface']
Integrability,"/// Implementation of the target library information.; ///; /// This class constructs tables that hold the target library information and; /// make it available. However, it is somewhat expensive to compute and only; /// depends on the triple. So users typically interact with the \c; /// TargetLibraryInfo wrapper below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetLibraryInfo.h:221,depend,depends,221,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetLibraryInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetLibraryInfo.h,2,"['depend', 'wrap']","['depends', 'wrapper']"
Integrability,"/// Implementations may enforce limits on the use of vector reads. These limits can depend on the server or; /// the specific file opened and can be queried per RRawFile object through GetReadVLimits().; /// Note that due to such limits, a vector read with a single request can behave differently from a Read() call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/ROOT/RRawFile.hxx:84,depend,depend,84,io/io/inc/ROOT/RRawFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/ROOT/RRawFile.hxx,1,['depend'],['depend']
Integrability,/// Implementations of this interface are used by SectionMemoryManager to; /// request pages from the operating system.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:28,interface,interface,28,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,1,['interface'],['interface']
Integrability,"/// Implements a set of CFGBlocks using a BitVector.; ///; /// This class contains a minimal interface, primarily dictated by the SetType; /// template parameter of the llvm::po_iterator template, as used with; /// external storage. We also use this set to keep track of which CFGBlocks we; /// visit during the analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/PostOrderCFGView.h:93,interface,interface,93,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/PostOrderCFGView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/PostOrderCFGView.h,1,['interface'],['interface']
Integrability,"/// Implements shrink-wrapping of the stack frame. By default, stack frame; /// is created in the function entry block, and is cleaned up in every block; /// that returns. This function finds alternate blocks: one for the frame; /// setup (prolog) and one for the cleanup (epilog).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:22,wrap,wrapping,22,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['wrap'],['wrapping']
Integrability,/// Implements the ASTImporter interface for tracking back a declaration; /// to its original declaration it came from.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExternalASTMerger.cpp:31,interface,interface,31,interpreter/llvm-project/clang/lib/AST/ExternalASTMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExternalASTMerger.cpp,1,['interface'],['interface']
Integrability,/// Implements the interface for creating a vectorized skeleton using the; /// *epilogue loop* strategy (ie the second pass of vplan execution).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:19,interface,interface,19,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['interface'],['interface']
Integrability,/// Implements the interface for creating a vectorized skeleton using the; /// *main loop* strategy (ie the first pass of vplan execution).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:19,interface,interface,19,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['interface'],['interface']
Integrability,"/// In AMDGPU target synchronization scopes are inclusive, meaning a; /// larger synchronization scope is inclusive of a smaller synchronization; /// scope.; ///; /// \returns True if synchronization scope \p A is larger than or equal to; /// synchronization scope \p B, false if synchronization scope \p A is smaller; /// than synchronization scope \p B, or ""std::nullopt"" if either; /// synchronization scope \p A or \p B is not supported by the AMDGPU target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:21,synchroniz,synchronization,21,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,8,['synchroniz'],['synchronization']
Integrability,"/// In AMDGPU target synchronization scopes are inclusive, meaning a; /// larger synchronization scope is inclusive of a smaller synchronization; /// scope.; ///; /// \returns \p SSID's inclusion ordering, or ""std::nullopt"" if \p SSID is not; /// supported by the AMDGPU target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:21,synchroniz,synchronization,21,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,3,['synchroniz'],['synchronization']
Integrability,"/// In Microsoft mode, if we are inside a template class whose parent class has; /// dependent base classes, and we can't resolve an unqualified identifier, then; /// assume the identifier is a member of a dependent base class. We can only; /// recover successfully in static methods, instance methods, and other contexts; /// where 'this' is available. This doesn't precisely match MSVC's; /// instantiation model, but it's close enough.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:85,depend,dependent,85,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['depend'],['dependent']
Integrability,"/// In a dependent pseudo-destructor expression for which we do not; /// have full type information on the destroyed type, provides the name; /// of the destroyed type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:9,depend,dependent,9,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['dependent']
Integrability,/// In same cases when the dependency check fails we can still; /// vectorize the loop with a dynamic array access check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:27,depend,dependency,27,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependency']
Integrability,"/// In some situations a few uninteresting nodes depend on nearly all other; /// nodes in the graph, provide a cutoff to hide them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:49,depend,depend,49,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['depend'],['depend']
Integrability,/// Inactive Platform Support; ///; /// Explicitly disables platform support. JITDylibs are not scanned for special; /// init/deinit symbols. No runtime API interposes are injected.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp:172,inject,injected,172,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,1,['inject'],['injected']
Integrability,"/// IncompatibleObjCQualifiedId - The assignment is between a qualified; /// id type and something else (that is incompatible with it). For example,; /// ""id <XXX>"" = ""Foo *"", where ""Foo *"" doesn't implement the XXX protocol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:216,protocol,protocol,216,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['protocol'],['protocol']
Integrability,"/// Increment the number of samples for this record by \p S.; /// Optionally scale sample count \p S by \p Weight.; ///; /// Sample counts accumulate using saturating arithmetic, to avoid wrapping; /// around unsigned integers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:188,wrap,wrapping,188,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,1,['wrap'],['wrapping']
Integrability,/// Indent if a function definition or declaration is wrapped after the; /// type.; /// \code; /// true:; /// LoooooooooooooooooooooooooooooooooooooooongReturnType; /// LoooooooooooooooooooooooooooooooongFunctionDeclaration();; ///; /// false:; /// LoooooooooooooooooooooooooooooooooooooooongReturnType; /// LoooooooooooooooooooooooooooooooongFunctionDeclaration();; /// \endcode; /// \version 3.7,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:54,wrap,wrapped,54,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapped']
Integrability,/// Indent the wrapped braces themselves.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:15,wrap,wrapped,15,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapped']
Integrability,/// Index of the destination of the dependence in the InstMap vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:36,depend,dependence,36,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,/// Index of the loop this loop depends on and forms non-rectangular loop; /// nest.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:32,depend,depends,32,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['depend'],['depends']
Integrability,/// Index of the source of the dependence in the InstMap vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:31,depend,dependence,31,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,"/// Indicate if the file has an ""indeterminate file position indicator"".; /// This can be set at a failing read or write or seek operation.; /// If it is set no more read or write is allowed.; /// This value is not dependent on the stream error flags:; /// The error flag may be cleared with `clearerr` but the file position; /// remains still indeterminate.; /// This value applies to all error states in ErrorState except FEOF.; /// An EOF+indeterminate state is the same as EOF state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:215,depend,dependent,215,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,1,['depend'],['dependent']
Integrability,"/// Indicate that it is potentially unsafe to automatically vectorize; /// floating-point operations because the semantics of vector and scalar; /// floating-point semantics may differ. For example, ARM NEON v7 SIMD math; /// does not support IEEE-754 denormal numbers, while depending on the; /// platform, scalar floating-point math does.; /// This applies to floating-point math operations and calls, not memory; /// operations, shuffles, or casts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:276,depend,depending,276,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['depend'],['depending']
Integrability,/// Indicate that this interface decl contains at least one initializer; /// marked with the 'objc_designated_initializer' attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:23,interface,interface,23,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// Indicate we are linking with an allocator that supports hot/cold operator; /// new interfaces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:87,interface,interfaces,87,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['interface'],['interfaces']
Integrability,/// Indicates that summary-based DSOLocal propagation has run and the flag in; /// every summary of a GV is synchronized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:108,synchroniz,synchronized,108,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['synchroniz'],['synchronized']
Integrability,/// Indicates that this interface decl contains at least one initializer; /// marked with the 'objc_designated_initializer' attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:24,interface,interface,24,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,"/// Indicates whether the message send was implicitly; /// generated by the implementation. If false, it was written explicitly; /// in the source code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:26,message,message,26,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,"/// Indicates whether the property reference will result in a message; /// to the getter, the setter, or both.; /// This applies to both implicit and explicit property references.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:62,message,message,62,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,/// IndirectLex - An indirect call to 'Lex' that can be invoked via; /// the PreprocessorLexer interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:95,interface,interface,95,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,1,['interface'],['interface']
Integrability,/// Information about a dependence. If FromAA is changed ToAA needs to be; /// updated as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,depend,dependence,24,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['dependence']
Integrability,"/// Information about a module that has been loaded by the ASTReader.; ///; /// Each instance of the Module class corresponds to a single AST file, which; /// may be a precompiled header, precompiled preamble, a module, or an AST file; /// of some sort loaded as the main file, all of which are specific formulations; /// of the general notion of a ""module"". A module may depend on any number of; /// other modules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:372,depend,depend,372,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,1,['depend'],['depend']
Integrability,"/// Information about contexts (Objective-C classes or protocols or C++; /// namespaces).; ///; /// Indexed by the parent context ID, context kind and the identifier ID of; /// this context and provides both the context ID and information describing; /// the context within that module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:55,protocol,protocols,55,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['protocol'],['protocols']
Integrability,/// Information about the plugin required to load its passes; ///; /// This struct defines the core interface for pass plugins and is supposed to; /// be filled out by plugin implementors. LLVM-side users of a plugin are; /// expected to use the \c PassPlugin class below to interface with it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:100,interface,interface,100,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,2,['interface'],['interface']
Integrability,/// Information discovered by the sync dependence analysis for each; /// divergent branch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:39,depend,dependence,39,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,1,['depend'],['dependence']
Integrability,"/// InheritanceHierarchyWriter - Helper class that writes out a; /// GraphViz file that diagrams the inheritance hierarchy starting at; /// a given C++ class type. Note that we do not use LLVM's; /// GraphWriter, because the interface does not permit us to properly; /// differentiate between uses of types as virtual bases; /// vs. non-virtual bases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/InheritViz.cpp:225,interface,interface,225,interpreter/llvm-project/clang/lib/AST/InheritViz.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/InheritViz.cpp,1,['interface'],['interface']
Integrability,"/// Initial processing of memory accesses determined that we may need; /// to add memchecks. Perform the analysis to determine the necessary checks.; ///; /// Note that, this is different from isDependencyCheckNeeded. When we retry; /// memcheck analysis without dependency checking; /// (i.e. FoundNonConstantDistanceDependence), isDependencyCheckNeeded is; /// cleared while this remains set if we have potentially dependent accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:263,depend,dependency,263,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['depend'],"['dependency', 'dependent']"
Integrability,/// Initial processing of memory accesses determined that we need to; /// perform dependency checking.; ///; /// Note that this can later be cleared if we retry memcheck analysis without; /// dependency checking (i.e. FoundNonConstantDistanceDependence).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:82,depend,dependency,82,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['depend'],['dependency']
Integrability,"/// Initialize MCInstrInfo, called by TableGen auto-generated routines.; /// *DO NOT USE*.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrInfo.h:62,rout,routines,62,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrInfo.h,1,['rout'],['routines']
Integrability,"/// Initialize MCRegisterInfo, called by TableGen; /// auto-generated routines. *DO NOT USE*.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:70,rout,routines,70,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['rout'],['routines']
Integrability,/// Initialize a range based on a known bits constraint. The IsSigned flag; /// indicates whether the constant range should not wrap in the signed or; /// unsigned domain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:128,wrap,wrap,128,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['wrap'],['wrap']
Integrability,"/// Initialize all nodes of the functional graph before running the event loop.; /// This method is called once per event-loop and performs generic initialization; /// operations that do not depend on the specific processing slot (i.e. operations; /// that are common for all threads).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx:191,depend,depend,191,tree/dataframe/src/RLoopManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx,1,['depend'],['depend']
Integrability,/// Initialize built-in types.; ///; /// This routine may only be invoked once for a given ASTContext object.; /// It is normally invoked after ASTContext construction.; ///; /// \param Target The target,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:46,rout,routine,46,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['rout'],['routine']
Integrability,/// Initialize the extension for parsing using the given \p Parser.; /// The extension should use the AsmParser interfaces to register its; /// parsing routines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h:112,interface,interfaces,112,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,2,"['interface', 'rout']","['interfaces', 'routines']"
Integrability,/// Initialize the full set of dependencies so we can use an initializer; /// list for X86Subtarget.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.h:31,depend,dependencies,31,interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.h,1,['depend'],['dependencies']
Integrability,/// Initialize the function information cache \p FI for the function \p F.; ///; /// This method needs to be called for all function that might be looked at; /// through the information cache interface *prior* to looking at them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:192,interface,interface,192,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['interface'],['interface']
Integrability,"/// Initialize the part of the minimizer that is dependent on the function to be minimized",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:49,depend,dependent,49,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['depend'],['dependent']
Integrability,"/// Initializes this RooCollection proxy from another proxy. Should not be; /// considered part of the public interface, only to be used by IO.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h:110,interface,interface,110,roofit/roofitcore/inc/RooCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h,1,['interface'],['interface']
Integrability,"/// Inject a symbol with a known address. Name is not linker mangled, i.e.; /// as known by the IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:4,Inject,Inject,4,interpreter/cling/lib/Interpreter/IncrementalJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.h,1,['Inject'],['Inject']
Integrability,"/// InjectAnonymousStructOrUnionMembers - Inject the members of the; /// anonymous struct or union AnonRecord into the owning context Owner; /// and scope S. This routine will be invoked just after we realize; /// that an unnamed union or struct is actually an anonymous union or; /// struct, e.g.,; ///; /// @code; /// union {; /// int i;; /// float f;; /// }; // InjectAnonymousStructOrUnionMembers called here to inject i and; /// // f into the surrounding scope.x; /// @endcode; ///; /// This routine is recursive, injecting the names of nested anonymous; /// structs/unions into the owning context and scope as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:4,Inject,InjectAnonymousStructOrUnionMembers,4,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,7,"['Inject', 'inject', 'rout']","['Inject', 'InjectAnonymousStructOrUnionMembers', 'inject', 'injecting', 'routine']"
Integrability,/// Inline reexported library into Interface.; ///; /// \param Library Interface of reexported library.; /// \param Overwrite Whether to overwrite preexisting inlined library.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:35,Interface,Interface,35,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,2,['Interface'],['Interface']
Integrability,"/// InlineLayoutInstruction - This routine produce an inline instruction for the; /// block variable layout if it can. If not, it returns 0. Rules are as follow:; /// If ((uintptr_t) layout) < (1 << 12), the layout is inline. In the 64bit world,; /// an inline layout of value 0x0000000000000xyz is interpreted as follows:; /// x captured object pointers of BLOCK_LAYOUT_STRONG. Followed by; /// y captured object of BLOCK_LAYOUT_BYREF. Followed by; /// z captured object of BLOCK_LAYOUT_WEAK. If any of the above is missing, zero; /// replaces it. For example, 0x00000x00 means x BLOCK_LAYOUT_STRONG and no; /// BLOCK_LAYOUT_BYREF and no BLOCK_LAYOUT_WEAK objects are captured.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:35,rout,routine,35,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['rout'],['routine']
Integrability,/// InlineResult is basically true or false. For false results the message; /// describes a reason.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h:67,message,message,67,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,1,['message'],['message']
Integrability,/// InputInfo - Wrapper for information about an input source.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/InputInfo.h:16,Wrap,Wrapper,16,interpreter/llvm-project/clang/include/clang/Driver/InputInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/InputInfo.h,1,['Wrap'],['Wrapper']
Integrability,"/// Insert a dependency-breaking instruction; /// before MI to eliminate an unwanted dependency on OpNum.; ///; /// If it wasn't possible to avoid a def in the last N instructions before MI; /// (see getPartialRegUpdateClearance), this hook will be called to break the; /// unwanted dependency.; ///; /// On x86, an xorps instruction can be used as a dependency breaker:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// xorps %xmm0, %xmm0; /// cvtsi2ss %rbx, %xmm0; ///; /// An <imp-kill> operand should be added to MI if an instruction was; /// inserted. This ties the instructions together in the post-ra scheduler.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:13,depend,dependency-breaking,13,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,4,['depend'],"['dependency', 'dependency-breaking']"
Integrability,"/// Insert a ref edge from one node in this RefSCC to another in this; /// RefSCC.; ///; /// This is always a trivial operation as it doesn't change any part of the; /// graph structure besides connecting the two nodes.; ///; /// Note that we don't support directly inserting internal *call* edges; /// because that could change the graph structure and requires returning; /// information about what became invalid. As a consequence, the pattern; /// should be to first insert the necessary ref edge, and then to switch it; /// to a call edge if needed and handle any invalidation that results. See; /// the \c switchInternalEdgeToCall routine for details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:636,rout,routine,636,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['rout'],['routine']
Integrability,"/// Insert an edge whose source is in a descendant RefSCC and target is in; /// this RefSCC.; ///; /// There must be an existing path from the target to the source in this; /// case.; ///; /// NB! This is has the potential to be a very expensive function. It; /// inherently forms a cycle in the prior RefSCC DAG and we have to merge; /// RefSCCs to resolve that cycle. But finding all of the RefSCCs which; /// participate in the cycle can in the worst case require traversing every; /// RefSCC in the graph. Every attempt is made to avoid that, but passes; /// must still exercise caution calling this routine repeatedly.; ///; /// Also note that this can only insert ref edges. In order to insert; /// a call edge, first insert a ref edge and then switch it to a call edge.; /// These are intentionally kept as separate interfaces because each step; /// of the operation invalidates a different set of data structures.; ///; /// This returns all the RefSCCs which were merged into the this RefSCC; /// (the target's). This allows callers to invalidate any cached; /// information.; ///; /// FIXME: We could possibly optimize this quite a bit for cases where the; /// caller and callee are very nearby in the graph. See comments in the; /// implementation for details, but that use case might impact users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:604,rout,routine,604,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,2,"['interface', 'rout']","['interfaces', 'routine']"
Integrability,"/// Insert trailing commas in container literals that were wrapped over; /// multiple lines. Note that this is conceptually incompatible with; /// bin-packing, because the trailing comma is used as an indicator; /// that a container should be formatted one-per-line (i.e. not bin-packed).; /// So inserting a trailing comma counteracts bin-packing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:59,wrap,wrapped,59,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapped']
Integrability,"/// Insert whitespace before emitting the next token.; ///; /// @param Tok Next token to be emitted.; /// @param RequireSpace Ensure at least one whitespace is emitted. Useful; /// if non-tokens have been emitted to the stream.; /// @param RequireSameLine Never emit newlines. Useful when semantics depend; /// on being on the same line, such as directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp:299,depend,depend,299,interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,1,['depend'],['depend']
Integrability,"/// Inserts programmed event record into the LWP event ring buffer; /// and advances the ring buffer pointer.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> LWPINS </c> instruction.; ///; /// \param DATA2; /// A 32-bit value is zero-extended and inserted into the 64-bit Data2 field.; /// \param DATA1; /// A 32-bit value is inserted into the 32-bit Data1 field.; /// \param FLAGS; /// A 32-bit immediate value is inserted into the 32-bit Flags field.; /// \returns If the ring buffer is full and LWP is running in Synchronized Mode,; /// the event record overwrites the last record in the buffer, the MissedEvents; /// counter in the LWPCB is incremented, the head pointer is not advanced, and; /// 1 is returned. Otherwise 0 is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/lwpintrin.h:552,Synchroniz,Synchronized,552,interpreter/llvm-project/clang/lib/Headers/lwpintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/lwpintrin.h,1,['Synchroniz'],['Synchronized']
Integrability,"/// Inserts programmed event record into the LWP event ring buffer; /// and advances the ring buffer pointer.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> LWPINS </c> instruction.; ///; /// \param DATA2; /// A 64-bit value is inserted into the 64-bit Data2 field.; /// \param DATA1; /// A 32-bit value is inserted into the 32-bit Data1 field.; /// \param FLAGS; /// A 32-bit immediate value is inserted into the 32-bit Flags field.; /// \returns If the ring buffer is full and LWP is running in Synchronized Mode,; /// the event record overwrites the last record in the buffer, the MissedEvents; /// counter in the LWPCB is incremented, the head pointer is not advanced, and; /// 1 is returned. Otherwise 0 is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/lwpintrin.h:534,Synchroniz,Synchronized,534,interpreter/llvm-project/clang/lib/Headers/lwpintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/lwpintrin.h,1,['Synchroniz'],['Synchronized']
Integrability,/// Inserts trailing commas in [] and {} initializers if they wrap over; /// multiple lines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:62,wrap,wrap,62,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,1,['wrap'],['wrap']
Integrability,"/// Inspects the target synchronization scope \p SSID and determines; /// the SI atomic scope it corresponds to, the address spaces it; /// covers, and whether the memory ordering applies between address; /// spaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:24,synchroniz,synchronization,24,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,1,['synchroniz'],['synchronization']
Integrability,"/// Install a ROOT diagnostic handler to analyse diagnostics.; /// It will record all diagnostics during its lifetime, and analyse them at destruction.; /// Required and/or optional diagnostics need to be predefined with expected location and message.; /// Unexpected or missing diagnostics will lead to gtest failures.; ///; /// Example:; /// ```c++; /// CheckDiagsRAII diagRAII{CheckDiagsRAII::EDK_Error, ""TFile::TFile"", ""<Expected message>""};; /// diagRAII.optionalDiag(kInfo, ""TFile::TFile"", ""Message that is issued only sometimes"");; /// <test code>; ///; /// ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx:243,message,message,243,core/testsupport/inc/ROOT/TestSupport.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx,3,"['Message', 'message']","['Message', 'message']"
Integrability,/// Install the standard preprocessor pragmas:; /// \#pragma GCC poison/system_header/dependency and \#pragma once.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:86,depend,dependency,86,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['depend'],['dependency']
Integrability,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:454,message,message,454,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,2,['message'],['message']
Integrability,"/// Instead of calling the function, a custom wrapper __dfsw_F is called,; /// where F is the name of the function. This function may wrap the; /// original function or provide its own implementation. WK_Custom uses an; /// extra pointer argument to return the shadow. This allows the wrapped; /// form of the function type to be expressed in C.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:46,wrap,wrapper,46,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,3,['wrap'],"['wrap', 'wrapped', 'wrapper']"
Integrability,"/// InstrInfoQuery provides an interface to query additional information for; /// instructions like metadata or keywords like nsw, which provides conservative; /// results if the users specified it is safe to use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SimplifyQuery.h:31,interface,interface,31,interpreter/llvm-project/llvm/include/llvm/Analysis/SimplifyQuery.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SimplifyQuery.h,1,['interface'],['interface']
Integrability,/// Integrate an invoked expression into the collected data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Integrat,Integrate,4,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Integrat'],['Integrate']
Integrability,/// Integrate an invoked statement into the collected data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Integrat,Integrate,4,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Integrat'],['Integrate']
Integrability,/// Integrate another called method into the collected data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Integrat,Integrate,4,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Integrat'],['Integrate']
Integrability,"/// Integrate other statistical data into the current data.; ///; /// The implementation assumes that the other statistics were recorded with; /// the same binning configuration, and that the statistics of `OtherData`; /// are a superset of those recorded by the active `RHistData` instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:4,Integrat,Integrate,4,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,1,['Integrat'],['Integrate']
Integrability,"/// Integrate the PDF over bins. Improves accuracy for binned fits. Switch off using `0.` as argument. \see; /// RooAbsPdf::fitTo().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGlobalFunc.cxx:4,Integrat,Integrate,4,roofit/roofitcore/src/RooGlobalFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGlobalFunc.cxx,1,['Integrat'],['Integrate']
Integrability,/// Interface belonging to this category,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['Interface'],['Interface']
Integrability,/// Interface class for filling custom fields of a block literal for OpenCL.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:4,Interface,Interface,4,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,1,['Interface'],['Interface']
Integrability,/// Interface for Layers that accept object files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,1,['Interface'],['Interface']
Integrability,"/// Interface for RooFIter-compatible iterators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooLinkedListIter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h,1,['Interface'],['Interface']
Integrability,"/// Interface for changes of operation mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCacheElement.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooAbsCacheElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCacheElement.h,1,['Interface'],['Interface']
Integrability,/// Interface for classes constructing Stack hints.; ///; /// If a PathDiagnosticEvent occurs in a different frame than the final; /// diagnostic the hints can be used to summarize the effect of the call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,1,['Interface'],['Interface']
Integrability,/// Interface for classes which map locations to sources.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Source.h:4,Interface,Interface,4,interpreter/llvm-project/clang/lib/AST/Interp/Source.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Source.h,1,['Interface'],['Interface']
Integrability,"/// Interface for compilation database plugins.; ///; /// A compilation database plugin allows the user to register custom compilation; /// databases that are picked up as compilation database if the corresponding; /// library is linked in. To register a plugin, declare a static variable like:; ///; /// \code; /// static CompilationDatabasePluginRegistry::Add<MyDatabasePlugin>; /// X(""my-compilation-database"", ""Reads my own compilation database"");; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabasePluginRegistry.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabasePluginRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabasePluginRegistry.h,1,['Interface'],['Interface']
Integrability,"/// Interface for compilation databases.; ///; /// A compilation database allows the user to retrieve compile command lines; /// for the files in a project.; ///; /// Many implementations are enumerable, allowing all command lines to be; /// retrieved. These can be used to run clang tools over a subset of the files; /// in a project.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,1,['Interface'],['Interface']
Integrability,"/// Interface for constant term node finding calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooAbsCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h,1,['Interface'],['Interface']
Integrability,/// Interface for custom diagnostic printing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticPrinter.h,1,['Interface'],['Interface']
Integrability,/// Interface for deciding whether to inline a call site or not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,1,['Interface'],['Interface']
Integrability,"/// Interface for executing clang frontend actions.; ///; /// This can be extended to support running tool actions in different; /// execution mode, e.g. on a specific set of TUs or many TUs in parallel.; ///; /// New executors can be registered as ToolExecutorPlugins via the; /// `ToolExecutorPluginRegistry`. CLI tools can use; /// `createExecutorFromCommandLineArgs` to create a specific registered; /// executor according to the command-line arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,1,['Interface'],['Interface']
Integrability,/// Interface for factories that create specific executors. This is also; /// used as a plugin to be registered into ToolExecutorPluginRegistry.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,1,['Interface'],['Interface']
Integrability,/// Interface for layers that accept LLVM IR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,1,['Interface'],['Interface']
Integrability,/// Interface for matchers that only evaluate properties on a single; /// node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['Interface'],['Interface']
Integrability,"/// Interface for operation mode changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooAbsCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h,1,['Interface'],['Interface']
Integrability,"/// Interface for printing of cache guts in tree mode printing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooAbsCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h,1,['Interface'],['Interface']
Integrability,"/// Interface for processing of cache mode optimization calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooAbsCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h,1,['Interface'],['Interface']
Integrability,"/// Interface for returning an optional hint for initial sampling points when constructing a curve; /// projected on observable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooAbsFunc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h,1,['Interface'],['Interface']
Integrability,"/// Interface for server redirect calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooAbsCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCache.h,1,['Interface'],['Interface']
Integrability,/// Interface for setting the file search paths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,1,['Interface'],['Interface']
Integrability,/// Interface for the VM to interact with the AST walker's context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h:4,Interface,Interface,4,interpreter/llvm-project/clang/lib/AST/Interp/State.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h,1,['Interface'],['Interface']
Integrability,"/// Interface for the proposal function used with Markov Chain Monte Carlo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalFunction.h:4,Interface,Interface,4,roofit/roostats/inc/RooStats/ProposalFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalFunction.h,1,['Interface'],['Interface']
Integrability,"/// Interface for tools setting limits (producing confidence intervals)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h:4,Interface,Interface,4,roofit/roostats/inc/RooStats/PdfProposal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h,1,['Interface'],['Interface']
Integrability,"/// Interface for users of the UnwrappedLineParser to receive the parsed lines.; /// Parsing a single snippet of code can lead to multiple runs, where each; /// run is a coherent view of the file.; ///; /// For example, different runs are generated:; /// - for different combinations of #if blocks; /// - when macros are involved, for the expanded code and the as-written code; ///; /// Some tokens will only be visible in a subset of the runs.; /// For each run, \c UnwrappedLineParser will call \c consumeUnwrappedLine; /// for each parsed unwrapped line, and then \c finishRun to indicate; /// that the set of unwrapped lines before is one coherent view of the; /// code snippet to be formatted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.h:4,Interface,Interface,4,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.h,1,['Interface'],['Interface']
Integrability,/// Interface for visiting interesting IV users that are recognized but not; /// simplified by this utility.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,1,['Interface'],['Interface']
Integrability,"/// Interface function to cache add contents to output in tree printing mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['Interface'],['Interface']
Integrability,"/// Interface function to check if given value is a valid value for this object. Returns true unless overridden.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,1,['Interface'],['Interface']
Integrability,"/// Interface function to fill a vector or array of coordinates with; /// corresponding weights.; /// \note the size of `xN` and `weightN` must be the same!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:4,Interface,Interface,4,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['Interface'],['Interface']
Integrability,"/// Interface function to fill a vector or array of coordinates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:4,Interface,Interface,4,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['Interface'],['Interface']
Integrability,"/// Interface function to intercept cache operation mode changes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['Interface'],['Interface']
Integrability,"/// Interface function to intercept server redirects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['Interface'],['Interface']
Integrability,"/// Interface function to perform post-insert operations on cached object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['Interface'],['Interface']
Integrability,"/// Interface function. If true, min/max of binning is parameterized by external RooAbsReals.; /// Default to `false`, unless overridden by a sub class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h:4,Interface,Interface,4,roofit/roofitcore/inc/RooAbsBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h,1,['Interface'],['Interface']
Integrability,/// Interface implemented by fragments that contain encoded instructions and/or; /// data and also have fixups registered.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,1,['Interface'],['Interface']
Integrability,/// Interface implemented by fragments that contain encoded instructions and/or; /// data.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFragment.h,2,['Interface'],['Interface']
Integrability,"/// Interface that allows matchers to traverse the AST.; /// FIXME: Find a better name.; ///; /// This provides three entry methods for each base node type in the AST:; /// - \c matchesChildOf:; /// Matches a matcher on every child node of the given node. Returns true; /// if at least one child node could be matched.; /// - \c matchesDescendantOf:; /// Matches a matcher on all descendant nodes of the given node. Returns true; /// if at least one descendant matched.; /// - \c matchesAncestorOf:; /// Matches a matcher on all ancestors of the given node. Returns true if; /// at least one ancestor matched.; ///; /// FIXME: Currently we only allow Stmt and Decl nodes to start a traversal.; /// In the future, we want to implement this for all nodes for which it makes; /// sense. In the case of matchesAncestorOf, we'll want to implement it for; /// all nodes, as all nodes have ancestors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['Interface'],['Interface']
Integrability,/// Interface to access stack safety analysis results for single function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,1,['Interface'],['Interface']
Integrability,"/// Interface to connect the parser with the registry and more.; ///; /// The parser uses the Sema instance passed into; /// parseMatcherExpression() to handle all matcher tokens. The simplest; /// processor implementation would simply call into the registry to create; /// the matchers.; /// However, a more complex processor might decide to intercept the matcher; /// creation and do some extra work. For example, it could apply some; /// transformation to the matcher by adding some id() nodes, or could detect; /// specific matcher nodes for more efficient lookup.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,1,['Interface'],['Interface']
Integrability,/// Interface to emit optimization remarks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,7,['Interface'],['Interface']
Integrability,"/// Interface to generate clang::FrontendActions.; ///; /// Having a factory interface allows, for example, a new FrontendAction to be; /// created for each translation unit processed by ClangTool. This class is; /// also a ToolAction which uses the FrontendActions created by create() to; /// process each translation unit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,2,"['Interface', 'interface']","['Interface', 'interface']"
Integrability,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,2,"['Interface', 'interface']","['Interface', 'interface']"
Integrability,"/// Interface to process a clang::CompilerInvocation.; ///; /// If your tool is based on FrontendAction, you should be deriving from; /// FrontendActionFactory instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h:4,Interface,Interface,4,interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,1,['Interface'],['Interface']
Integrability,/// Interface to query instructions amenable to copy rewriting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:4,Interface,Interface,4,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['Interface'],['Interface']
Integrability,"/// Interface to the eviction advisor, which is responsible for making a; /// decision as to which live ranges should be evicted (if any).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,1,['Interface'],['Interface']
Integrability,"/// Interface to the priority advisor, which is responsible for prioritizing; /// live ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocPriorityAdvisor.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocPriorityAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocPriorityAdvisor.h,1,['Interface'],['Interface']
Integrability,/// Interface to the target lowering info related; /// to register banks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,1,['Interface'],['Interface']
Integrability,/// Interface used to lower the everything related to calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,1,['Interface'],['Interface']
Integrability,/// Interface which the different types of accelerator table data have to; /// conform. It serves as a base class for different values of the template; /// argument of the AccelTable class template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:4,Interface,Interface,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['Interface'],['Interface']
Integrability,/// InterfaceInputOrder determines from which file the diff attribute belongs; /// to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h:4,Interface,InterfaceInputOrder,4,interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h,1,['Interface'],['InterfaceInputOrder']
Integrability,"/// Interfaces are the core concept in Objective-C for object oriented design.; /// They basically correspond to C++ classes. There are two kinds of interface; /// types: normal interfaces like `NSString`, and qualified interfaces, which; /// are qualified with a protocol list like `NSString<NSCopyable, NSAmazing>`.; ///; /// ObjCInterfaceType guarantees the following properties when considered; /// as a subtype of its superclass, ObjCObjectType:; /// - There are no protocol qualifiers. To reinforce this, code which; /// tries to invoke the protocol methods via an ObjCInterfaceType will; /// fail to compile.; /// - It is its own base type. That is, if T is an ObjCInterfaceType*,; /// T->getBaseType() == QualType(T, 0).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Interface,Interfaces,4,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,7,"['Interface', 'interface', 'protocol']","['Interfaces', 'interface', 'interfaces', 'protocol']"
Integrability,"/// Internal Utility routine to correctly release the memory for an object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:21,rout,routine,21,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['rout'],['routine']
Integrability,"/// Internal function to synchronize TMinimizer with current; /// information in RooAbsReal function parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:25,synchroniz,synchronize,25,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,1,['synchroniz'],['synchronize']
Integrability,"/// Internal representation of canonical, dependent; /// __underlying_type(type) types.; ///; /// This class is used internally by the ASTContext to manage; /// canonical, dependent types, only. Clients will only see instances; /// of this class via UnaryTransformType nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:42,depend,dependent,42,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['depend'],['dependent']
Integrability,"/// Internal representation of canonical, dependent; /// `typeof(expr)` types.; ///; /// This class is used internally by the ASTContext to manage; /// canonical, dependent types, only. Clients will only see instances; /// of this class via TypeOfExprType nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:42,depend,dependent,42,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['depend'],['dependent']
Integrability,"/// Internal representation of canonical, dependent; /// decltype(expr) types.; ///; /// This class is used internally by the ASTContext to manage; /// canonical, dependent types, only. Clients will only see instances; /// of this class via DecltypeType nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:42,depend,dependent,42,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['depend'],['dependent']
Integrability,/// Internal wrapper for RAUW that is the default implementation.; ///; /// Other users may provide an alternate function with this signature instead; /// of this one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:13,wrap,wrapper,13,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,1,['wrap'],['wrapper']
Integrability,/// Internal wrapper for eraseFromParent that is the default implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:13,wrap,wrapper,13,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,1,['wrap'],['wrapper']
Integrability,/// Interoperability with the ObjectiveC runtime,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Interoperab,Interoperability,4,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['Interoperab'],['Interoperability']
Integrability,/// Interoperability with the Swift 4.1 runtime,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Interoperab,Interoperability,4,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['Interoperab'],['Interoperability']
Integrability,/// Interoperability with the Swift 4.2 runtime,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Interoperab,Interoperability,4,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['Interoperab'],['Interoperability']
Integrability,/// Interoperability with the Swift 5.0 runtime,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Interoperab,Interoperability,4,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['Interoperab'],['Interoperability']
Integrability,/// Interoperability with the latest known version of the Swift runtime,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Interoperab,Interoperability,4,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['Interoperab'],['Interoperability']
Integrability,/// Intersect the given range with the given point.; ///; /// The result can be either an empty set or a set containing the given; /// point depending on whether the point is in the range set.; ///; /// Complexity: O(logN); /// where N = size(What),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:141,depend,depending,141,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,1,['depend'],['depending']
Integrability,"/// Intersect the given set with the closed range [Lower, Upper].; ///; /// Unlike the Range type, this range uses modular arithmetic, corresponding; /// to the common treatment of C integer overflow. Thus, if the Lower bound; /// is greater than the Upper bound, the range is taken to wrap around. This; /// is equivalent to taking the intersection with the two ranges [Min,; /// Upper] and [Lower, Max], or, alternatively, /removing/ all integers; /// between Upper and Lower.; ///; /// Complexity: O(N); /// where N = size(What)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:286,wrap,wrap,286,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,1,['wrap'],['wrap']
Integrability,"/// Is integrator in valid state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h:7,integrat,integrator,7,roofit/roofitcore/inc/RooAbsIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h,1,['integrat'],['integrator']
Integrability,/// Is redeclared in the same interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:30,interface,interface,30,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['interface'],['interface']
Integrability,"/// Is the assembler allowed to insert padding automatically? For; /// correctness reasons, we sometimes need to ensure instructions aren't; /// separated in unexpected ways. At the moment, this feature is only; /// useable from an integrated assembler, but assembly syntax is under; /// discussion for future inclusion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:232,integrat,integrated,232,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,1,['integrat'],['integrated']
Integrability,/// Is the integrated assembler required for this streamer to function; /// correctly?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:11,integrat,integrated,11,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,1,['integrat'],['integrated']
Integrability,/// Is there an llvm.stacksave or llvm.stackrestore in the scheduling; /// region? Used to optimize the dependence calculation for the; /// common case where there isn't.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:104,depend,dependence,104,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['depend'],['dependence']
Integrability,"/// Is this an implicit map type?; /// We have to capture 'IsMapTypeImplicit' from the parser for more; /// informative error messages. It helps distinguish map(r) from; /// map(tofrom: r), which is important to print more helpful error; /// messages for some target directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:126,message,messages,126,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['message'],['messages']
Integrability,"/// IsAcceptableNonMemberOperatorCandidate - Determine whether Fn is; /// an acceptable non-member overloaded operator for a call whose; /// arguments have types T1 (and, if non-empty, T2). This routine; /// implements the check in C++ [over.match.oper]p3b2 concerning; /// enumeration types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:195,rout,routine,195,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['rout'],['routine']
Integrability,/// IsChainDependent - Test if Outer is reachable from Inner through; /// chain dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:80,depend,dependencies,80,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['depend'],['dependencies']
Integrability,"/// IsEqualExpr - Returns true if the expressions are the same in regards to; /// template arguments. These expressions are dependent, so profile them; /// instead of trying to evaluate them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDiagnostic.cpp:124,depend,dependent,124,interpreter/llvm-project/clang/lib/AST/ASTDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDiagnostic.cpp,1,['depend'],['dependent']
Integrability,/// IsIntegratedAssemblerDefault - Does this tool chain enable -integrated-as; /// by default.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:64,integrat,integrated-as,64,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['integrat'],['integrated-as']
Integrability,/// IsNonIntegratedBackendSupported - Does this tool chain support; /// -fno-integrated-objemitter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:77,integrat,integrated-objemitter,77,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['integrat'],['integrated-objemitter']
Integrability,"/// IsPointerConversion - Determines whether the conversion of the; /// expression From, which has the (possibly adjusted) type FromType,; /// can be converted to the type ToType via a pointer conversion (C++; /// 4.10). If so, returns true and places the converted type (that; /// might differ from ToType in its cv-qualifiers at some level) into; /// ConvertedType.; ///; /// This routine also supports conversions to and from block pointers; /// and conversions with Objective-C's 'id', 'id<protocols...>', and; /// pointers to interfaces. FIXME: Once we've determined the; /// appropriate overloading rules for Objective-C, we may want to; /// split the Objective-C checks into a different routine; however,; /// GCC seems to consider all of these conversions to be pointer; /// conversions, so for now they live here. IncompatibleObjC will be; /// set if the conversion is an allowed Objective-C conversion that; /// should result in a warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:383,rout,routine,383,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,4,"['interface', 'protocol', 'rout']","['interfaces', 'protocols', 'routine']"
Integrability,"/// IsStandardConversion - Determines whether there is a standard; /// conversion sequence (C++ [conv], C++ [over.ics.scs]) from the; /// expression From to the type ToType. Standard conversion sequences; /// only consider non-class types; for conversions that involve class; /// types, use TryImplicitConversion. If a conversion exists, SCS will; /// contain the standard conversion sequence required to perform this; /// conversion and this routine will return true. Otherwise, this; /// routine will return false and the value of SCS is unspecified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:443,rout,routine,443,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,2,['rout'],['routine']
Integrability,"/// IsTagDefinedInsideClass - This routine checks that a named tagged type; /// is defined inside an objective-c class. If so, it returns true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:35,rout,routine,35,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,1,['rout'],['routine']
Integrability,"/// IsUndef - True if this register operand reads an ""undef"" value, i.e. the; /// read value doesn't matter. This flag can be set on both use and def; /// operands. On a sub-register def operand, it refers to the part of the; /// register that isn't written. On a full-register def operand, it is a; /// noop. See readsReg().; ///; /// This is only valid on registers.; ///; /// Note that an instruction may have multiple <undef> operands referring to; /// the same register. In that case, the instruction may depend on those; /// operands reading the same dont-care value. For example:; ///; /// %1 = XOR undef %2, undef %2; ///; /// Any register can be used for %2, and its value doesn't matter, but; /// the two operands must be the same register.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:510,depend,depend,510,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['depend'],['depend']
Integrability,/// Issue lookups for all init symbols required to initialize JD (and any; /// JITDylibs that it depends on).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp:97,depend,depends,97,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,1,['depend'],['depends']
Integrability,"/// Issue the message to the client.; ///; /// This actually returns an instance of DiagnosticBuilder which emits the; /// diagnostics (through @c ProcessDiag) when it is destroyed.; ///; /// \param DiagID A member of the @c diag::kind enum.; /// \param Loc Represents the source location associated with the diagnostic,; /// which can be an invalid location if no position information is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:14,message,message,14,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['message'],['message']
Integrability,/// It accepts a '&&' expr that is inside a '||' one.; /// Emit a diagnostic together with a fixit hint that wraps the '&&' expression; /// in parentheses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:109,wrap,wraps,109,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['wrap'],['wraps']
Integrability,"/// It wraps the AnalysisDeclContext to represent both the call stack with; /// the help of StackFrameContext and inside the function calls the; /// BlockInvocationContext. It is needed for context sensitive analysis to; /// model entering, leaving or inlining function calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/AnalysisDeclContext.h:7,wrap,wraps,7,interpreter/llvm-project/clang/include/clang/Analysis/AnalysisDeclContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/AnalysisDeclContext.h,1,['wrap'],['wraps']
Integrability,/// It's very easy to introduce bugs by passing the wrong string pool.; /// By using strong types the interface enforces that the right; /// kind of pool is used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h:102,interface,interface,102,interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h,1,['interface'],['interface']
Integrability,/// Iterate over each DAG node and see if we can change any dependences; /// in order to reduce the recurrence MII.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:60,depend,dependences,60,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['depend'],['dependences']
Integrability,"/// Iterates over a filtered subrange of declarations stored; /// in a DeclContext.; ///; /// This iterator visits only those declarations that are of type; /// SpecificDecl (or a class derived from it) and that meet some; /// additional run-time criteria. This iterator is used, for; /// example, to provide access to the instance methods within an; /// Objective-C interface (with SpecificDecl = ObjCMethodDecl and; /// Acceptable = ObjCMethodDecl::isInstanceMethod).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:367,interface,interface,367,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['interface'],['interface']
Integrability,/// Iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:14,adapter,adapter,14,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,2,['adapter'],['adapter']
Integrability,"/// Iteration over the elements in the vector.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate elements; /// loaded from the external source while non-negative values are used to; /// indicate elements added via \c push_back().; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic integer; /// arithmetic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:746,wrap,wrapping,746,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,1,['wrap'],['wrapping']
Integrability,"/// Iteration over the preprocessed entities.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate preprocessed entities; /// loaded from the external source while non-negative values are used to; /// indicate preprocessed entities introduced by the current preprocessor.; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic; /// integer arithmetic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h:785,wrap,wrapping,785,interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessingRecord.h,1,['wrap'],['wrapping']
Integrability,"/// Iterator over symbols that the current symbol depends on.; ///; /// For SymbolData, it's the symbol itself; for expressions, it's the; /// expression symbol and all the operands in it. Note, SymbolDerived is; /// treated as SymbolData - the iterator will NOT visit the parent region.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h:50,depend,depends,50,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h,1,['depend'],['depends']
Integrability,"/// Iterator wrapper that concatenates sequences together.; ///; /// This can concatenate different iterators, even with different types, into; /// a single iterator provided the value types of all the concatenated; /// iterators expose `reference` and `pointer` types that can be converted to; /// `ValueT &` and `ValueT *` respectively. It doesn't support more; /// interesting/customized pointer or reference types.; ///; /// Currently this only supports forward or higher iterator categories as; /// inputs and always exposes a forward iterator interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:13,wrap,wrapper,13,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,/// Iterator-based interface. \see MustBeExecutedIterator.; ///{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MustExecute.h:19,interface,interface,19,interpreter/llvm-project/llvm/include/llvm/Analysis/MustExecute.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MustExecute.h,1,['interface'],['interface']
Integrability,/// Iterators to the parts of the SmallSet containing the data. They are set; /// depending on isSmall.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h:82,depend,depending,82,interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,1,['depend'],['depending']
Integrability,/// IvarBacksCurrentMethodAccessor - This routine returns 'true' if 'IV' is; /// an ivar synthesized for 'Method' and 'Method' is a property accessor; /// declared in class 'IFace'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:42,rout,routine,42,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['rout'],['routine']
Integrability,"/// Jit code in the interpreter with TInterpreter::Calc, throw in case of errors.; /// The optional `context` parameter, if present, is mentioned in the error message.; /// The pointer returned by the call to TInterpreter::Calc is returned in case of success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/Utils.hxx:159,message,message,159,tree/dataframe/inc/ROOT/RDF/Utils.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/Utils.hxx,1,['message'],['message']
Integrability,/// Kind of device clause for declare target variables; /// and functions; /// NOTE: Currently not used as a part of a variable entry; /// used for Flang and Clang to interface with the variable; /// related registration functions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:167,interface,interface,167,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['interface'],['interface']
Integrability,"/// Known synchronization scope IDs, which always have the same value. All; /// synchronization scope IDs that LLVM has special knowledge of are listed; /// here. Additionally, this scheme allows LLVM to efficiently check for; /// specific synchronization scope ID without comparing strings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:10,synchroniz,synchronization,10,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,3,['synchroniz'],['synchronization']
Integrability,/// LLVM thread following std::thread interface with added constructor to; /// specify stack size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h:38,interface,interface,38,interpreter/llvm-project/llvm/include/llvm/Support/thread.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h,1,['interface'],['interface']
Integrability,/// Last error message that can come from the YAML parser diagnostics.; /// We need this for catching errors in the constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:15,message,message,15,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,1,['message'],['message']
Integrability,"/// Legacy interface.; /// \p PassName is the name of the pass emitting this diagnostic.; /// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:11,interface,interface,11,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,3,"['interface', 'message']","['interface', 'message']"
Integrability,/// Legacy interface: cannot provide type arguments or __kindof.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:11,interface,interface,11,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['interface'],['interface']
Integrability,/// Legacy symbol resolution interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:29,interface,interface,29,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,1,['interface'],['interface']
Integrability,/// Legacy wrapper pass to provide the AMDGPUAAResult object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.h,1,['wrap'],['wrapper']
Integrability,/// Legacy wrapper pass to provide the BasicAAResult object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h,1,['wrap'],['wrapper']
Integrability,/// Legacy wrapper pass to provide the GlobalsAAResult object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h,1,['wrap'],['wrapper']
Integrability,/// Legacy wrapper pass to provide the ModuleSummaryIndex object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ModuleSummaryAnalysis.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/Analysis/ModuleSummaryAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ModuleSummaryAnalysis.h,2,['wrap'],['wrapper']
Integrability,/// Legacy wrapper pass to provide the NVPTXAAResult object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAliasAnalysis.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAliasAnalysis.h,1,['wrap'],['wrapper']
Integrability,/// Legacy wrapper pass to provide the SCEVAAResult object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionAliasAnalysis.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionAliasAnalysis.h,1,['wrap'],['wrapper']
Integrability,/// Legacy wrapper pass to provide the ScopedNoAliasAAResult object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScopedNoAliasAA.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/Analysis/ScopedNoAliasAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScopedNoAliasAA.h,1,['wrap'],['wrapper']
Integrability,/// Legacy wrapper pass to provide the TypeBasedAAResult object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TypeBasedAliasAnalysis.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/Analysis/TypeBasedAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TypeBasedAliasAnalysis.h,1,['wrap'],['wrapper']
Integrability,"/// Length may either correspond to depth or height, depending on direction,; /// and cycles or nodes depending on context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:53,depend,depending,53,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,2,['depend'],['depending']
Integrability,"/// LexTokenInternal - This implements a simple C family lexer. It is an; /// extremely performance critical piece of code. This assumes that the buffer; /// has a null character at the end of the file. This returns a preprocessing; /// token, not a normal token, as such, it is an internal interface. It assumes; /// that the Flags of result have been cleared before calling this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:291,interface,interface,291,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,1,['interface'],['interface']
Integrability,"/// Lexer - This provides a simple interface that turns a text buffer into a; /// stream of tokens. This provides no support for file reading or buffering,; /// or buffering/seeking of tokens, only forward lexing is supported. It relies; /// on the specified Preprocessor object to handle preprocessor directives, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:35,interface,interface,35,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,1,['interface'],['interface']
Integrability,/// Lexically backward dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:23,depend,dependence,23,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,/// Lexically forward dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:22,depend,dependence,22,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,"/// Lightweight class that wraps the location operand metadata of a debug; /// intrinsic. The raw location may be a ValueAsMetadata, an empty MDTuple,; /// or a DIArgList.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:27,wrap,wraps,27,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['wrap'],['wraps']
Integrability,"/// Lightweight error class with error context and mandatory checking.; ///; /// Instances of this class wrap a ErrorInfoBase pointer. Failure states; /// are represented by setting the pointer to a ErrorInfoBase subclass; /// instance containing information describing the failure. Success is; /// represented by a null pointer value.; ///; /// Instances of Error also contains a 'Checked' flag, which must be set; /// before the destructor is called, otherwise the destructor will trigger a; /// runtime error. This enforces at runtime the requirement that all Error; /// instances be checked or returned to the caller.; ///; /// There are two ways to set the checked flag, depending on what state the; /// Error instance is in. For Error instances indicating success, it; /// is sufficient to invoke the boolean conversion operator. E.g.:; ///; /// @code{.cpp}; /// Error foo(<...>);; ///; /// if (auto E = foo(<...>)); /// return E; // <- Return E if it is in the error state.; /// // We have verified that E was in the success state. It can now be safely; /// // destroyed.; /// @endcode; ///; /// A success value *can not* be dropped. For example, just calling 'foo(<...>)'; /// without testing the return value will raise a runtime error, even if foo; /// returns success.; ///; /// For Error instances representing failure, you must use either the; /// handleErrors or handleAllErrors function with a typed handler. E.g.:; ///; /// @code{.cpp}; /// class MyErrorInfo : public ErrorInfo<MyErrorInfo> {; /// // Custom error info.; /// };; ///; /// Error foo(<...>) { return make_error<MyErrorInfo>(...); }; ///; /// auto E = foo(<...>); // <- foo returns failure with MyErrorInfo.; /// auto NewE =; /// handleErrors(std::move(E),; /// [](const MyErrorInfo &M) {; /// // Deal with the error.; /// },; /// [](std::unique_ptr<OtherError> M) -> Error {; /// if (canHandle(*M)) {; /// // handle error.; /// return Error::success();; /// }; /// // Couldn't handle this error instance. Pass it up the s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:105,wrap,wrap,105,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,"['depend', 'wrap']","['depending', 'wrap']"
Integrability,"/// Like InstantiatedFromUsingDecl, but for using-enum-declarations. Maps; /// from the instantiated using-enum to the templated decl from whence it; /// came.; /// Note that using-enum-declarations cannot be dependent and; /// thus will never be instantiated from an ""unresolved""; /// version thereof (as with using-declarations), so each mapping is from; /// a (resolved) UsingEnumDecl to a (resolved) UsingEnumDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:209,depend,dependent,209,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['depend'],['dependent']
Integrability,"/// Like System, but headers are implicitly wrapped in extern ""C"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:44,wrap,wrapped,44,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['wrap'],['wrapped']
Integrability,"/// Like synchronizeParameterSettings, Synchronize informs Minuit through; /// its parameter_settings vector of RooFit parameter properties, but; /// Synchronize can be overridden to e.g. also include gradient strategy; /// synchronization in subclasses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:9,synchroniz,synchronizeParameterSettings,9,roofit/roofitcore/src/RooAbsMinimizerFcn.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h,4,"['Synchroniz', 'synchroniz']","['Synchronize', 'synchronization', 'synchronizeParameterSettings']"
Integrability,"/// Line number where the diagnostic occurred. If 0, no line number will; /// be emitted in the message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:96,message,message,96,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['message'],['message']
Integrability,/// Linker redefined version of the symbol which appeared in -wrap or -defsym; /// linker option.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:62,wrap,wrap,62,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,1,['wrap'],['wrap']
Integrability,/// Linker wrapper tool.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h:11,wrap,wrapper,11,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h,1,['wrap'],['wrapper']
Integrability,/// List of accesses that need a further dependence check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:41,depend,dependence,41,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['depend'],['dependence']
Integrability,"/// List of argument strings used by the contained Args.; ///; /// This is mutable since we treat the ArgList as being the list; /// of Args, and allow routines to add new strings (to have a; /// convenient place to store the memory) via MakeIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:152,rout,routines,152,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,1,['rout'],['routines']
Integrability,"/// List of categories and class extensions defined for this class.; ///; /// Categories are stored as a linked list in the AST, since the categories; /// and class extensions come long after the initial interface declaration,; /// and we avoid dynamically-resized arrays in the AST wherever possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:204,interface,interface,204,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// List of entries dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h:20,depend,dependencies,20,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,1,['depend'],['dependencies']
Integrability,"/// List of gather nodes, depending on other gather/vector nodes, which should; /// be emitted after the vector instruction emission process to correctly; /// handle order of the vector instructions and shuffles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:26,depend,depending,26,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['depend'],['depending']
Integrability,/// List of instructions which this instruction could be control dependent; /// on. Allowing such nodes to be scheduled below this one could introduce; /// a runtime fault which didn't exist in the original program.; /// ex: this is a load or udiv following a readonly call which inf loops,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:65,depend,dependent,65,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['depend'],['dependent']
Integrability,/// List of interfaces we want to keep even if orphaned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:12,interface,interfaces,12,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['interface'],['interfaces']
Integrability,/// List of modules which depend on this module,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:26,depend,depend,26,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,1,['depend'],['depend']
Integrability,/// List of modules which this module depends on,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:38,depend,depends,38,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,1,['depend'],['depends']
Integrability,/// LiveIn - Work list of blocks where the live-in value has yet to be; /// determined. This list is typically computed by findReachingDefs() and; /// used as a work list by updateSSA(). The low-level interface may also be; /// used to add entries directly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeCalc.h:201,interface,interface,201,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeCalc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeCalc.h,1,['interface'],['interface']
Integrability,"/// Load internal wrapping key from __intkey, __enkey_lo and __enkey_hi. __ctl; /// will assigned to EAX, whch specifies the KeySource and whether backing up; /// the key is permitted. The 256-bit encryption key is loaded from the two; /// explicit operands (__enkey_lo and __enkey_hi). The 128-bit integrity key is; /// loaded from the implicit operand XMM0 which assigned by __intkey.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> LOADIWKEY </c> instructions.; ///; /// \code{.operation}; /// IF CPL > 0 // LOADKWKEY only allowed at ring 0 (supervisor mode); /// GP (0); /// FI; /// IF “LOADIWKEY exiting” VM execution control set; /// VMexit; /// FI; /// IF __ctl[4:1] > 1 // Reserved KeySource encoding used; /// GP (0); /// FI; /// IF __ctl[31:5] != 0 // Reserved bit in __ctl is set; /// GP (0); /// FI; /// IF __ctl[0] AND (CPUID.19H.ECX[0] == 0) // NoBackup is not supported on this part; /// GP (0); /// FI; /// IF (__ctl[4:1] == 1) AND (CPUID.19H.ECX[1] == 0) // KeySource of 1 is not supported on this part; /// GP (0); /// FI; /// IF (__ctl[4:1] == 0) // KeySource of 0.; /// IWKey.Encryption Key[127:0] := __enkey_hi[127:0]:; /// IWKey.Encryption Key[255:128] := __enkey_lo[127:0]; /// IWKey.IntegrityKey[127:0] := __intkey[127:0]; /// IWKey.NoBackup := __ctl[0]; /// IWKey.KeySource := __ctl[4:1]; /// ZF := 0; /// ELSE // KeySource of 1. See RDSEED definition for details of randomness; /// IF HW_NRND_GEN.ready == 1 // Full-entropy random data from RDSEED was received; /// IWKey.Encryption Key[127:0] := __enkey_hi[127:0] XOR HW_NRND_GEN.data[127:0]; /// IWKey.Encryption Key[255:128] := __enkey_lo[127:0] XOR HW_NRND_GEN.data[255:128]; /// IWKey.Encryption Key[255:0] := __enkey_hi[127:0]:__enkey_lo[127:0] XOR HW_NRND_GEN.data[255:0]; /// IWKey.IntegrityKey[127:0] := __intkey[127:0] XOR HW_NRND_GEN.data[383:256]; /// IWKey.NoBackup := __ctl[0]; /// IWKey.KeySource := __ctl[4:1]; /// ZF := 0; /// ELSE // Random data was not returned from RDS",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:18,wrap,wrapping,18,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,1,['wrap'],['wrapping']
Integrability,"/// Load, create, or return global module.; /// This function returns an existing global module index, if one; /// had already been loaded or created, or loads one if it; /// exists, or creates one if it doesn't exist.; /// Also, importantly, if the index doesn't cover all the modules; /// in the module map, it will be update to do so here, because; /// of its use in searching for needed module imports and; /// associated fixit messages.; /// \param TriggerLoc The location for what triggered the load.; /// \returns Returns null if load failed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:432,message,messages,432,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,1,['message'],['messages']
Integrability,"/// Loads a C++ Module with a given name by synthesizing an Import decl.; /// This routine checks if there is a modulemap in the current directory; /// and loads it.; ///; /// This is useful when we start up the interpreter and programatically,; /// later generate a modulemap.; ///; ///\returns true if the module was loaded.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h:83,rout,routine,83,interpreter/cling/include/cling/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h,1,['rout'],['routine']
Integrability,"/// Loads a C++ Module with a given name by synthesizing an Import decl.; /// This routine checks if there is a modulemap in the current directory; /// and loads it.; ///; ///\returns true if the module was loaded or already visible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h:83,rout,routine,83,interpreter/cling/include/cling/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h,1,['rout'],['routine']
Integrability,/// Loads a memory sequence containing the specified memory address into; /// the L1 data cache and sets the cache-coherency to modified. This; /// provides a hint to the processor that the cache line will be modified.; /// It is intended for use when the cache line will be written to shortly; /// after the prefetch is performed.; ///; /// Note that the effect of this intrinsic is dependent on the processor; /// implementation.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c PREFETCHW instruction.; ///; /// \param __P; /// A pointer specifying the memory address to be prefetched.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/prfchwintrin.h:384,depend,dependent,384,interpreter/llvm-project/clang/lib/Headers/prfchwintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/prfchwintrin.h,1,['depend'],['dependent']
Integrability,/// Loads an ASTUnit for a function.; ///; /// \param FunctionName USR name of the function.; /// \param CrossTUDir Path to the directory used to store CTU related files.; /// \param IndexName Name of the file inside \p CrossTUDir which maps; /// function USR names to file paths. These files contain the corresponding; /// AST-dumps.; /// \param DisplayCTUProgress Display a message about loading new ASTs.; ///; /// \return An Expected instance which contains the ASTUnit pointer or the; /// error occurred during the load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:376,message,message,376,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,1,['message'],['message']
Integrability,/// Loads an instruction sequence containing the specified memory address into; /// all but the first-level cache.; ///; /// Note that the effect of this intrinsic is dependent on the processor; /// implementation.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c PREFETCHIT1 instruction.; ///; /// \param __P; /// A pointer specifying the memory address to be prefetched.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/prfchiintrin.h:167,depend,dependent,167,interpreter/llvm-project/clang/lib/Headers/prfchiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/prfchiintrin.h,1,['depend'],['dependent']
Integrability,/// Loads an instruction sequence containing the specified memory address into; /// all level cache.; ///; /// Note that the effect of this intrinsic is dependent on the processor; /// implementation.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c PREFETCHIT0 instruction.; ///; /// \param __P; /// A pointer specifying the memory address to be prefetched.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/prfchiintrin.h:153,depend,dependent,153,interpreter/llvm-project/clang/lib/Headers/prfchiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/prfchiintrin.h,1,['depend'],['dependent']
Integrability,"/// Localized helper to make a type dependent, thwarting template argument; /// deduction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:36,depend,dependent,36,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['depend'],['dependent']
Integrability,/// Location wrapper for a TemplateArgument. TemplateArgument is to; /// TemplateArgumentLoc as Type is to TypeLoc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:13,wrap,wrapper,13,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,1,['wrap'],['wrapper']
Integrability,"/// Logical 'and' of any supported wrapping, exact, and fast-math flags of; /// V and this instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:35,wrap,wrapping,35,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['wrap'],['wrapping']
Integrability,"/// Look for a value that might be wrapped as metadata, e.g. a value in a; /// metadata operand. Returns the input value as-is if it is not wrapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:35,wrap,wrapped,35,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,2,['wrap'],['wrapped']
Integrability,"/// Look for an Objective-C class in the translation unit.; ///; /// \param Id The name of the Objective-C class we're looking for. If; /// typo-correction fixes this name, the Id will be updated; /// to the fixed name.; ///; /// \param IdLoc The location of the name in the translation unit.; ///; /// \param DoTypoCorrection If true, this routine will attempt typo correction; /// if there is no class with the given name.; ///; /// \returns The declaration of the named Objective-C class, or NULL if the; /// class could not be found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:341,rout,routine,341,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['rout'],['routine']
Integrability,/// Look for an ``autorelease'' instruction dependent on Arg such that there are; /// no instructions dependent on Arg that need a positive ref count in between; /// the autorelease and the ret.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:44,depend,dependent,44,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,2,['depend'],['dependent']
Integrability,/// Look for bitwise op in the left or right hand of a bitwise op with; /// lower precedence and emit a diagnostic together with a fixit hint that wraps; /// the '&' expression in parentheses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:147,wrap,wraps,147,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['wrap'],['wraps']
Integrability,"/// Look for entities within the base classes of this C++ class,; /// transitively searching all base class subobjects.; ///; /// This routine uses the callback function \p BaseMatches to find base; /// classes meeting some search criteria, walking all base class subobjects; /// and populating the given \p Paths structure with the paths through the; /// inheritance hierarchy that resulted in a match. On a successful search,; /// the \p Paths structure can be queried to retrieve the matching paths and; /// to determine if there were any ambiguities.; ///; /// \param BaseMatches callback function used to determine whether a given; /// base matches the user-defined search criteria.; ///; /// \param Paths used to record the paths from this class to its base class; /// subobjects that match the search criteria.; ///; /// \param LookupInDependent can be set to true to extend the search to; /// dependent base classes.; ///; /// \returns true if there exists any path from this class to a base class; /// subobject that matches the search criteria.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:135,rout,routine,135,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,2,"['depend', 'rout']","['dependent', 'routine']"
Integrability,"/// Look for information regarding the given Objective-C protocol.; ///; /// \param Name The name of the protocol we're looking for.; ///; /// \returns The information about the protocol, if known.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesReader.h:57,protocol,protocol,57,interpreter/llvm-project/clang/include/clang/APINotes/APINotesReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesReader.h,3,['protocol'],['protocol']
Integrability,"/// Look for the context ID of the given Objective-C protocol.; ///; /// \param Name The name of the protocol we're looking for.; ///; /// \returns The ID of the protocol, if known.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesReader.h:53,protocol,protocol,53,interpreter/llvm-project/clang/include/clang/APINotes/APINotesReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesReader.h,3,['protocol'],['protocol']
Integrability,"/// Look for the destructor of the given class.; ///; /// During semantic analysis, this routine should be used in lieu of; /// CXXRecordDecl::getDestructor().; ///; /// \returns The destructor for this class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:89,rout,routine,89,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['rout'],['routine']
Integrability,"/// Look through the loop-carried and loop-independent dependences in; /// this loop and find store->load dependences.; ///; /// Note that no candidate is returned if LAA has failed to analyze the loop; /// (e.g. if it's not bottom-tested, contains volatile memops, etc.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp:55,depend,dependences,55,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,2,['depend'],['dependences']
Integrability,"/// Look up or compute a value in the value map.; ///; /// Return a mapped value for a function-local value (Argument, Instruction,; /// BasicBlock), or compute and memoize a value for a Constant.; ///; /// 1. If \c V is in VM, return the result.; /// 2. Else if \c V can be materialized with \c Materializer, do so, memoize; /// it in \c VM, and return it.; /// 3. Else if \c V is a function-local value, return nullptr.; /// 4. Else if \c V is a \a GlobalValue, return \c nullptr or \c V depending; /// on \a RF_NullMapMissingGlobalValues.; /// 5. Else if \c V is a \a MetadataAsValue wrapping a LocalAsMetadata,; /// recurse on the local SSA value, and return nullptr or ""metadata !{}"" on; /// missing depending on RF_IgnoreMissingValues.; /// 6. Else if \c V is a \a MetadataAsValue, rewrap the return of \a; /// MapMetadata().; /// 7. Else, compute the equivalent constant, and return it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h:490,depend,depending,490,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h,3,"['depend', 'wrap']","['depending', 'wrapping']"
Integrability,"/// Look up the completed type for a self pointer in the TypeCache and; /// create a copy of it with the ObjectPointer and Artificial flags; /// set. If the type is not cached, a new one is created. This should; /// never happen though, since creating a type for the implicit self; /// argument implies that we already parsed the interface definition; /// and the ivar declarations in the implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:330,interface,interface,330,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['interface'],['interface']
Integrability,"/// Look up the given member of the given non-type-dependent; /// expression. This can return in one of two ways:; /// * If it returns a sentinel null-but-valid result, the caller will; /// assume that lookup was performed and the results written into; /// the provided structure. It will take over from there.; /// * Otherwise, the returned expression will be produced in place of; /// an ordinary member expression.; ///; /// The ObjCImpDecl bit is a gross hack that will need to be properly; /// fixed for ObjC++.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:51,depend,dependent,51,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['depend'],['dependent']
Integrability,/// Look up the name of an Objective-C protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,protocol,protocol,39,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['protocol'],['protocol']
Integrability,"/// Looks up the method for sending a message to a superclass. This; /// mechanism differs between the GCC and GNU runtimes, so this method must; /// be overridden in subclasses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:38,message,message,38,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['message'],['message']
Integrability,"/// Looks up the method for sending a message to the specified object. This; /// mechanism differs between the GCC and GNU runtimes, so this method must be; /// overridden in subclasses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:38,message,message,38,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['message'],['message']
Integrability,"/// Lookup an abstract attribute of type \p AAType at position \p IRP. While; /// no abstract attribute is found equivalent positions are checked, see; /// SubsumingPositionIterator. Thus, the returned abstract attribute; /// might be anchored at a different position, e.g., the callee if \p IRP is a; /// call base.; ///; /// This method is the only (supported) way an abstract attribute can retrieve; /// information from another abstract attribute. As an example, take an; /// abstract attribute that determines the memory access behavior for a; /// argument (readnone, readonly, ...). It should use `getAAFor` to get the; /// most optimistic information for other abstract attributes in-flight, e.g.; /// the one reasoning about the ""captured"" state for the argument or the one; /// reasoning on the memory access behavior of the function as a whole.; ///; /// If the DepClass enum is set to `DepClassTy::None` the dependence from; /// \p QueryingAA to the return abstract attribute is not automatically; /// recorded. This should only be used if the caller will record the; /// dependence explicitly if necessary, thus if it the returned abstract; /// attribute is used for reasoning. To record the dependences explicitly use; /// the `Attributor::recordDependence` method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:919,depend,dependence,919,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,3,['depend'],"['dependence', 'dependences']"
Integrability,"/// Lookup flags that apply to each dylib in the search order for a lookup.; ///; /// If MatchHiddenSymbolsOnly is used (the default) for a given dylib, then; /// only symbols in that Dylib's interface will be searched. If; /// MatchHiddenSymbols is used then symbols with hidden visibility will match; /// as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:192,interface,interface,192,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['interface'],['interface']
Integrability,"/// Lookup or compute a mapping for a piece of metadata.; ///; /// Compute and memoize a mapping for \c MD.; ///; /// 1. If \c MD is mapped, return it.; /// 2. Else if \a RF_NoModuleLevelChanges or \c MD is an \a MDString, return; /// \c MD.; /// 3. Else if \c MD is a \a ConstantAsMetadata, call \a MapValue() and; /// re-wrap its return (returning nullptr on nullptr).; /// 4. Else, \c MD is an \a MDNode. These are remapped, along with their; /// transitive operands. Distinct nodes are duplicated or moved depending; /// on \a RF_MoveDistinctNodes. Uniqued nodes are remapped like constants.; ///; /// \note \a LocalAsMetadata is completely unsupported by \a MapMetadata.; /// Instead, use \a MapValue() with its wrapping \a MetadataAsValue instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h:323,wrap,wrap,323,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ValueMapper.h,3,"['depend', 'wrap']","['depending', 'wrap', 'wrapping']"
Integrability,/// LookupMethodInQualifiedType - Lookups up a method in protocol qualifier; /// list of a qualified objective pointer type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:57,protocol,protocol,57,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['protocol'],['protocol']
Integrability,"/// Loop passes should use this method to indicate they have deleted a loop; /// from the nest.; ///; /// Note that this loop must either be the current loop or a subloop of the; /// current loop. This routine must be called prior to removing the loop from; /// the loop nest.; ///; /// If this is called for the current loop, in addition to clearing any; /// state, this routine will mark that the current loop should be skipped by; /// the rest of the pass management infrastructure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:202,rout,routine,202,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,2,['rout'],['routine']
Integrability,/// Lower VECTOR_SHUFFLE into one of a number of instructions; /// depending on the indices in the shuffle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.h:67,depend,depending,67,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.h,1,['depend'],['depending']
Integrability,"/// Lower a vector shuffle using the SHUFPS instruction.; ///; /// This is a helper routine dedicated to lowering vector shuffles using SHUFPS.; /// It makes no assumptions about whether this is the *best* lowering, it simply; /// uses it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:84,rout,routine,84,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// Lower the call to 'memset' intrinsic function into a series of store; /// operations.; ///; /// \param DAG Selection DAG where lowered code is placed.; /// \param dl Link to corresponding IR location.; /// \param Chain Control flow dependency.; /// \param Dst Pointer to destination memory location.; /// \param Src Value of byte to write into the memory.; /// \param Size Number of bytes to write.; /// \param Alignment Alignment of the destination in bytes.; /// \param isVol True if destination is volatile.; /// \param AlwaysInline Makes sure no function call is generated.; /// \param DstPtrInfo IR information on the memory pointer.; /// \returns New head in the control flow, if lowering was successful, empty; /// SDValue otherwise.; ///; /// The function tries to replace 'llvm.memset' intrinsic with several store; /// operations and value calculation code. This is usually profitable for small; /// memory size or when the semantic requires inlining.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:236,depend,dependency,236,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['depend'],['dependency']
Integrability,"/// Lowering of single-input v8i16 shuffles is the cornerstone of SSE2; /// shuffle lowering, and the most complex part.; ///; /// The lowering strategy is to try to form pairs of input lanes which are; /// targeted at the same half of the final vector, and then use a dword shuffle; /// to place them onto the right half, and finally unpack the paired lanes into; /// their final position.; ///; /// The exact breakdown of how to form these dword pairs and align them on the; /// correct sides is really tricky. See the comments within the function for; /// more of the details.; ///; /// This code also handles repeated 128-bit lanes of v8i16 shuffles, but each; /// lane must shuffle the *exact* same way. In fact, you must pass a v8 Mask to; /// this routine for it to work correctly. To shuffle a 256-bit or 512-bit i16; /// vector, form the analogous 128-bit 8-element Mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:755,rout,routine,755,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// MB: label observables x,y,z, depending on histogram dimensionality; /// GHL: Give it the first sample's nominal histogram as a template; /// since the data histogram may not be present",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:33,depend,depending,33,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['depend'],['depending']
Integrability,/// MCCodeEmitter - Generic instruction encoding interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeEmitter.h:49,interface,interface,49,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeEmitter.h,1,['interface'],['interface']
Integrability,/// MCParsedAsmOperand - This abstract class represents a source-level assembly; /// instruction operand. It should be subclassed by target-specific code. This; /// base class is used by target-independent clients and is the interface; /// between parsing an asm instruction and recognizing it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h:225,interface,interface,225,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCParsedAsmOperand.h,1,['interface'],['interface']
Integrability,"/// MCRegisterInfo base class - We assume that the target defines a static; /// array of MCRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///; /// Note this class is designed to be a base class of TargetRegisterInfo, which; /// is the interface used by codegen. However, specific targets *should never*; /// specialize this class. MCRegisterInfo should only contain getters to access; /// TableGen generated physical register data. It must not be extended with; /// virtual methods.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:411,interface,interface,411,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['interface'],['interface']
Integrability,/// MCTargetAsmParser - Generic interface to target specific assembly parsers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:32,interface,interface,32,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['interface'],['interface']
Integrability,/// MIRFormater - Interface to format MIR operand based on target,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRFormatter.h:18,Interface,Interface,18,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRFormatter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRFormatter.h,1,['Interface'],['Interface']
Integrability,"/// MLModelRunner interface: abstraction of a mechanism for evaluating a; /// ML model. More abstractly, evaluating a function that has as tensors as; /// arguments, described via TensorSpecs, and returns a tensor. Currently, the; /// latter is assumed to be a scalar, in absence of more elaborate scenarios.; /// NOTE: feature indices are expected to be consistent all accross; /// MLModelRunners (pertaining to the same model), and also Loggers (see; /// TFUtils.h)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MLModelRunner.h:18,interface,interface,18,interpreter/llvm-project/llvm/include/llvm/Analysis/MLModelRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MLModelRunner.h,1,['interface'],['interface']
Integrability,/// MO is an operand of SU's instruction that defines a physical register. Adds; /// data dependencies from SU to any uses of the physical register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp:90,depend,dependencies,90,interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,1,['depend'],['dependencies']
Integrability,/// MO_GOTPCREL_NORELAX - Same as MO_GOTPCREL except that R_X86_64_GOTPCREL; /// relocations are guaranteed to be emitted by the integrated assembler; /// instead of the relaxable R_X86_64[_REX]_GOTPCRELX relocations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:129,integrat,integrated,129,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['integrat'],['integrated']
Integrability,/// MachOBuilder load command wrapper type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h:30,wrap,wrapper,30,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOBuilder.h,1,['wrap'],['wrapper']
Integrability,"/// Machine model for scheduling, bundling, and heuristics.; ///; /// The machine model directly provides basic information about the; /// microarchitecture to the scheduler in the form of properties. It also; /// optionally refers to scheduler resource tables and itinerary; /// tables. Scheduler resource tables model the latency and cost for each; /// instruction type. Itinerary tables are an independent mechanism that; /// provides a detailed reservation table describing each cycle of instruction; /// execution. Subtargets may define any or all of the above categories of data; /// depending on the type of CPU and selected scheduler.; ///; /// The machine independent properties defined here are used by the scheduler as; /// an abstract machine model. A real micro-architecture has a number of; /// buffers, queues, and stages. Declaring that a given machine-independent; /// abstract property corresponds to a specific physical property across all; /// subtargets can't be done. Nonetheless, the abstract model is; /// useful. Futhermore, subtargets typically extend this model with processor; /// specific resources to model any hardware features that can be exploited by; /// scheduling heuristics and aren't sufficiently represented in the abstract.; ///; /// The abstract pipeline is built around the notion of an ""issue point"". This; /// is merely a reference point for counting machine cycles. The physical; /// machine will have pipeline stages that delay execution. The scheduler does; /// not model those delays because they are irrelevant as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: O",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:590,depend,depending,590,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,1,['depend'],['depending']
Integrability,/// MachineBasicBlock::ReplaceUsesOfBlockWith doesn't serve the purpose; /// because the AMDGPU instruction is not recognized as terminator fix this; /// and retire this routine,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp:170,rout,routine,170,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,1,['rout'],['routine']
Integrability,"/// MachineFunctionPass - This class adapts the FunctionPass interface to; /// allow convenient creation of passes that operate on the MachineFunction; /// representation. Instead of overriding runOnFunction, subclasses; /// override runOnMachineFunction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunctionPass.h:61,interface,interface,61,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunctionPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunctionPass.h,1,['interface'],['interface']
Integrability,"/// MachineFunctionPassManager adds/removes below features to/from the base; /// PassManager template instantiation.; ///; /// - Support passes that implement doInitialization/doFinalization. This is for; /// machine function passes to work on module level constructs. One such pass; /// is AsmPrinter.; ///; /// - Support machine module pass which runs over the module (for example,; /// MachineOutliner). A machine module pass needs to define the method:; ///; /// ```Error run(Module &, MachineFunctionAnalysisManager &)```; ///; /// FIXME: machine module passes still need to define the usual machine; /// function pass interface, namely,; /// `PreservedAnalyses run(MachineFunction &,; /// MachineFunctionAnalysisManager &)`; /// But this interface wouldn't be executed. It is just a placeholder; /// to satisfy the pass manager type-erased inteface. This; /// special-casing of machine module pass is due to its limited use; /// cases and the unnecessary complexity it may bring to the machine; /// pass manager.; ///; /// - The base class `run` method is replaced by an alternative `run` method.; /// See details below.; ///; /// - Support codegening in the SCC order. Users include interprocedural; /// register allocation (IPRA).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:624,interface,interface,624,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,2,['interface'],['interface']
Integrability,"/// MachineInstrSpan provides an interface to get an iteration range; /// containing the instruction it was initialized with, along with all; /// those instructions inserted prior to or following that instruction; /// at some point after the MachineInstrSpan is constructed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:33,interface,interface,33,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,1,['interface'],['interface']
Integrability,"/// MachineOperand class - Representation of each machine instruction operand.; ///; /// This class isn't a POD type because it has a private constructor, but its; /// destructor must be trivial. Functions like MachineInstr::addOperand(),; /// MachineRegisterInfo::moveOperands(), and MF::DeleteMachineInstr() depend on; /// not having to call the MachineOperand destructor.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:310,depend,depend,310,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['depend'],['depend']
Integrability,/// MachineSchedStrategy - Interface to the scheduling algorithm used by; /// ScheduleDAGMI.; ///; /// Initialization sequence:; /// initPolicy -> shouldTrackPressure -> initialize(DAG) -> registerRoots,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:27,Interface,Interface,27,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['Interface'],['Interface']
Integrability,/// Macro for generating in-class operand accessor declarations.; /// It should only be called in the public section of the interface.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:124,interface,interface,124,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,1,['interface'],['interface']
Integrability,"/// Macro that optionally prepends an ""@"" to the string literal passed in via; /// Keyword, depending on whether NeedAt is true or false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:92,depend,depending,92,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['depend'],['depending']
Integrability,"/// Main generic intersect function.; /// It intersects all of the given range sets. If some of the given arguments; /// don't hold a range set (nullptr or std::nullopt), the function will skip; /// them.; ///; /// Available representations for the arguments are:; /// * RangeSet; /// * std::optional<RangeSet>; /// * RangeSet *; /// Pointer to a RangeSet is automatically assumed to be nullable and will get; /// checked as well as the optional version. If this behaviour is undesired,; /// please dereference the pointer in the call.; ///; /// Return type depends on the arguments' types. If we can be sure in compile; /// time that there will be a range set as a result, the returning type is; /// simply RangeSet, in other cases we have to back off to; /// std::optional<RangeSet>.; ///; /// Please, prefer optional range sets to raw pointers. If the last argument is; /// a raw pointer and all previous arguments are std::nullopt, it will cost one; /// additional check to convert RangeSet * into std::optional<RangeSet>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:558,depend,depends,558,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['depend'],['depends']
Integrability,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:9,interface,interface,9,roofit/roostats/inc/RooStats/DebuggingSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h,5,['interface'],['interface']
Integrability,"/// Main interface to evaluate the test statistic on a dataset given the; /// values for the Null Parameters Of Interest.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:9,interface,interface,9,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,1,['interface'],['interface']
Integrability,"/// Main interface to get a ConfInterval",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:9,interface,interface,9,roofit/roostats/inc/RooStats/MCMCCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h,1,['interface'],['interface']
Integrability,"/// Main interface to get a ConfInterval (will be a PointSetInterval)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:9,interface,interface,9,roofit/roostats/inc/RooStats/FeldmanCousins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h,2,['interface'],['interface']
Integrability,"/// Main interface to get a ConfInterval, pure virtual",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:9,interface,interface,9,roofit/roostats/inc/RooStats/CombinedCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h,4,['interface'],['interface']
Integrability,/// Main interface to parsing a bitcode buffer.; /// \returns true if an error occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:9,interface,interface,9,interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,1,['interface'],['interface']
Integrability,/// Main run interface method. We override here to avoid calling skipSCC().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AlwaysInliner.cpp:13,interface,interface,13,interpreter/llvm-project/llvm/lib/Transforms/IPO/AlwaysInliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AlwaysInliner.cpp,1,['interface'],['interface']
Integrability,/// Maintains a set of replacements that are conflict-free.; /// Two replacements are considered conflicts if they overlap or have the same; /// offset (i.e. order-dependent).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h:164,depend,dependent,164,interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,1,['depend'],['dependent']
Integrability,"/// Make a RHistImpl-derived object reflecting the RAxisConfig array.; ///; /// Delegate to the appropriate MakeNextAxis instantiation, depending on the; /// axis type selected in the RAxisConfig.; /// \param title - title of the derived object.; /// \param axes - `RAxisConfig` objects describing the axis of the resulting; /// RHistImpl.; /// \param processedAxisArgs - the RAxisBase-derived axis objects describing the; /// axes of the resulting RHistImpl. There are `IDIM` of those; in the end; /// (`IDIM` == `GetNDim()`), all `axes` have been converted to; /// `processedAxisArgs` and the RHistImpl constructor can be invoked, passing; /// the `processedAxisArgs`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHist.hxx:136,depend,depending,136,hist/histv7/inc/ROOT/RHist.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHist.hxx,1,['depend'],['depending']
Integrability,"/// Make a new nested-name-specifier from incomplete source-location; /// information.; ///; /// FIXME: This routine should be used very, very rarely, in cases where we; /// need to synthesize a nested-name-specifier. Most code should instead use; /// \c Adopt() with a proper \c NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:109,rout,routine,109,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['rout'],['routine']
Integrability,"/// Make a new nested-name-specifier from incomplete source-location; /// information.; ///; /// This routine should be used very, very rarely, in cases where we; /// need to synthesize a nested-name-specifier. Most code should instead use; /// \c Adopt() with a proper \c NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:102,rout,routine,102,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,1,['rout'],['routine']
Integrability,/// Make an SVal that represents the given symbol. This follows the convention; /// of representing Loc-type symbols (symbolic pointers and references); /// as Loc values wrapping the symbol rather than as plain symbol values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h:171,wrap,wrapping,171,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h,1,['wrap'],['wrapping']
Integrability,"/// Make an existing internal call edge within a single SCC into a ref; /// edge.; ///; /// Since SourceN and TargetN are part of a single SCC, this SCC may be; /// split up due to breaking a cycle in the call edges that formed it. If; /// that happens, then this routine will insert new SCCs into the postorder; /// list *before* the SCC of TargetN (previously the SCC of both). This; /// preserves postorder as the TargetN can reach all of the other nodes by; /// definition of previously being in a single SCC formed by the cycle from; /// SourceN to TargetN.; ///; /// The newly added SCCs are added *immediately* and contiguously; /// prior to the TargetN SCC and return the range covering the new SCCs in; /// the RefSCC's postorder sequence. You can directly iterate the returned; /// range to observe all of the new SCCs in postorder.; ///; /// Note that if SourceN and TargetN are in separate SCCs, the simpler; /// routine `switchTrivialInternalEdgeToRef` should be used instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:264,rout,routine,264,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,2,['rout'],['routine']
Integrability,"/// Make another copy of the function \p F such that the copied version has; /// internal linkage afterwards and can be analysed. Then we replace all uses; /// of the original function to the copied one; ///; /// Only non-locally linked functions that have `linkonce_odr` or `weak_odr`; /// linkage can be internalized because these linkages guarantee that other; /// definitions with the same name have the same semantics as this one.; ///; /// This will only be run if the `attributor-allow-deep-wrappers` option is; /// set, or if the function is called with \p Force set to true.; ///; /// If the function \p F failed to be internalized the return value will be a; /// null pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:498,wrap,wrappers,498,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['wrap'],['wrappers']
Integrability,/// Make module to use export_as as the link dependency name if enough; /// information is available or add it to a pending list otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:45,depend,dependency,45,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['depend'],['dependency']
Integrability,"/// Make sure that the normalization set for a RooAddPdf is always defined when; /// numerically integrating a RooProdPdf where the RooAddPdf is one of the; /// factors. Covers GitHub #11476 and JIRA issue ROOT-9436.; ///; /// Disabled for now because the fix to the bug that is covered by this unit; /// test caused a severe performance problem and was reverted. The performance; /// regression is covered by another unit test in this file, called; /// ""ProjectConditional"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:97,integrat,integrating,97,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,1,['integrat'],['integrating']
Integrability,"/// Make sure the offsets are up to date; ///; /// If the offsets need to be updated, this function triggers a likelihood evaluation.; /// The likelihood will make sure the offset is set correctly in their shared_ptr; /// offsets object, that is also shared with possible other LikelihoodWrapper members; /// of MinuitFcnGrad and also the LikelihoodGradientWrapper member. Other necessary; /// synchronization steps are also performed from the Wrapper child classes (e.g.; /// sending the values to workers from MultiProcess::Jobs).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx:394,synchroniz,synchronization,394,roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx,2,"['Wrap', 'synchroniz']","['Wrapper', 'synchronization']"
Integrability,"/// Make sure the value of 'this' is actually available in the current; /// context, if it is a potentially evaluated context.; ///; /// \param Loc The location at which the capture of 'this' occurs.; ///; /// \param Explicit Whether 'this' is explicitly captured in a lambda; /// capture list.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// 'this' that may or may not be used in certain specializations of; /// a nested generic lambda (depending on whether the name resolves to; /// a non-static member function or a static function).; /// \return returns 'true' if failed, 'false' if success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:624,depend,depending,624,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['depending']
Integrability,"/// Makes a declaration visible within this context.; ///; /// This routine makes the declaration D visible to name lookup; /// within this context and, if this is a transparent context,; /// within its parent contexts up to the first enclosing; /// non-transparent context. Making a declaration visible within a; /// context does not transfer ownership of a declaration, and a; /// declaration can be visible in many contexts that aren't its; /// lexical context.; ///; /// If D is a redeclaration of an existing declaration that is; /// visible from this context, as determined by; /// NamedDecl::declarationReplaces, the previous declaration will be; /// replaced with D.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:68,rout,routine,68,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['rout'],['routine']
Integrability,/// Makes the checker with the full name \p fullName depend on the checker; /// called \p dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:53,depend,depend,53,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,2,['depend'],"['depend', 'dependency']"
Integrability,/// Makes the checker with the full name \p fullName weak depend on the; /// checker called \p dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:58,depend,depend,58,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,2,['depend'],"['depend', 'dependency']"
Integrability,"/// Manage lifetime of a slot tracker for printing IR.; ///; /// Wrapper around the \a SlotTracker used internally by \a AsmWriter. This; /// class allows callers to share the cost of incorporating the metadata in a; /// module or a function.; ///; /// If the IR changes from underneath \a ModuleSlotTracker, strings like; /// ""<badref>"" will be printed, or, worse, the wrong slots entirely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h:65,Wrap,Wrapper,65,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h,1,['Wrap'],['Wrapper']
Integrability,"/// Manages a sequence of passes over a particular unit of IR.; ///; /// A pass manager contains a sequence of passes to run over a particular unit; /// of IR (e.g. Functions, Modules). It is itself a valid pass over that unit of; /// IR, and when run over some given IR will run each of its contained passes in; /// sequence. Pass managers are the primary and most basic building block of a; /// pass pipeline.; ///; /// When you run a pass manager, you provide an \c AnalysisManager<IRUnitT>; /// argument. The pass manager will propagate that analysis manager to each; /// pass it runs, and will call the analysis manager's invalidation routine with; /// the PreservedAnalyses of each pass it runs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:640,rout,routine,640,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['rout'],['routine']
Integrability,/// Manages allocations of JIT memory.; ///; /// Instances of this class may be accessed concurrently from multiple threads; /// and their implemetations should include any necessary synchronization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:183,synchroniz,synchronization,183,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,1,['synchroniz'],['synchronization']
Integrability,"/// Manually defined generic ""LoopPass"" dependency initialization. This is used; /// to initialize the exact set of passes from above in \c; /// getLoopAnalysisUsage. It can be used within a loop pass's initialization; /// with:; ///; /// INITIALIZE_PASS_DEPENDENCY(LoopPass); ///; /// As-if ""LoopPass"" were a pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:40,depend,dependency,40,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['depend'],['dependency']
Integrability,/// Map Instructions to unsigned integers and wraps the Instruction in an; /// instance of IRInstructionData.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:46,wrap,wraps,46,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wraps']
Integrability,/// Map a function address to its name's MD5 hash. This interface; /// is only used by the raw profiler reader.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:56,interface,interface,56,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['interface'],['interface']
Integrability,"/// Map a metadata node (and its transitive operands).; ///; /// Map all the (unmapped) nodes in the subgraph under \c N. The iterative; /// algorithm handles distinct nodes and uniqued node subgraphs using; /// different strategies.; ///; /// Distinct nodes are immediately mapped and added to \a DistinctWorklist; /// using \a mapDistinctNode(). Their mapping can always be computed; /// immediately without visiting operands, even if their operands change.; ///; /// The mapping for uniqued nodes depends on whether their operands change.; /// \a mapTopLevelUniquedNode() traverses the transitive uniqued subgraph of; /// a node to calculate uniqued node mappings in bulk. Distinct leafs are; /// added to \a DistinctWorklist with \a mapDistinctNode().; ///; /// After mapping \c N itself, this function remaps the operands of the; /// distinct nodes in \a DistinctWorklist until the entire subgraph under \c; /// N has been mapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp:500,depend,depends,500,interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,1,['depend'],['depends']
Integrability,"/// Map all the nodes in the given uniqued graph.; ///; /// This visits all the nodes in \c G in post-order, using the identity; /// mapping or creating a new node depending on \a Data::HasChanged.; ///; /// \pre \a getMappedOp() returns std::nullopt for nodes in \c G, but not for; /// any of their operands outside of \c G. \pre \a Data::HasChanged is true; /// for a node in \c G iff any of its operands have changed. \post \a; /// getMappedOp() returns the mapped node for every node in \c G.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp:164,depend,depending,164,interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,1,['depend'],['depending']
Integrability,/// Map between an outlined function and its wrapper.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:45,wrap,wrapper,45,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['wrap'],['wrapper']
Integrability,"/// Map from candidate StoreNode to the pair of RootNode and count.; /// The count is used to track how many times we have seen the StoreNode; /// with the same RootNode bail out in dependence check. If we have seen; /// the bail out for the same pair many times over a limit, we won't; /// consider the StoreNode with the same RootNode as store merging; /// candidate again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:182,depend,dependence,182,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['depend'],['dependence']
Integrability,/// Mapping from ObjCMethod to its duplicate declaration in the same; /// interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:74,interface,interface,74,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['interface'],['interface']
Integrability,"/// Mapping from the module files that this module file depends on; /// to the base declaration ID for that module as it is understood within this; /// module.; ///; /// This is effectively a reverse global-to-local mapping for declaration; /// IDs, so that we can interpret a true global ID (for this translation unit); /// as a local ID (for this module file).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:56,depend,depends,56,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,1,['depend'],['depends']
Integrability,"/// Mark a chain's successors as having one fewer preds.; ///; /// When a chain is being merged into the ""placed"" chain, this routine will; /// quickly walk the successors of each block in the chain and mark them as; /// having one fewer active predecessor. It also adds any successors of this; /// chain which reach the zero-predecessor state to the appropriate worklist.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:126,rout,routine,126,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['rout'],['routine']
Integrability,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:199,depend,dependent,199,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,2,['depend'],['dependent']
Integrability,/// Mark all of the declarations referenced within a particular AST node as; /// referenced. Used when template instantiation instantiates a non-dependent; /// type -- entities referenced by the type are now referenced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:145,depend,dependent,145,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['dependent']
Integrability,"/// Mark the \p Child node with a corresponding \p Role. All marked children; /// should be consumed by foldNode.; /// When called on expressions (clang::Expr is derived from clang::Stmt),; /// wraps expressions into expression statement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp:194,wrap,wraps,194,interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,1,['wrap'],['wraps']
Integrability,/// Mark the symbols dependent on the input symbol as live.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:21,depend,dependent,21,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,1,['depend'],['dependent']
Integrability,"/// Marks a region as interesting. Different kinds of interestingness will; /// be processed differently by visitors (e.g. if the tracking kind is; /// condition, will append ""will be used as a condition"" to the message).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:212,message,message,212,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,1,['message'],['message']
Integrability,"/// Marks a symbol as interesting. Different kinds of interestingness will; /// be processed differently by visitors (e.g. if the tracking kind is; /// condition, will append ""will be used as a condition"" to the message).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:212,message,message,212,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,1,['message'],['message']
Integrability,"/// Marks a symbolic value as interesting. Different kinds of interestingness; /// will be processed differently by visitors (e.g. if the tracking kind is; /// condition, will append ""will be used as a condition"" to the message).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:220,message,message,220,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,1,['message'],['message']
Integrability,/// Marks an instruction as scheduled and puts all dependent ready; /// instructions into the ready-list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:51,depend,dependent,51,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['depend'],['dependent']
Integrability,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:104,message,message,104,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,3,['message'],['message']
Integrability,"/// Marks the liveness of RA depending on L. If L is MaybeLive, it also takes; /// all uses in MaybeLiveUses and records them in Uses, such that RA will be; /// marked live if any use in MaybeLiveUses gets marked live later on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp:29,depend,depending,29,interpreter/llvm-project/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp,1,['depend'],['depending']
Integrability,"/// Mask of bits used to identify ""Fix"" variants in MessagePack.; ///; /// For example, FixStr objects encode their size in the five least significant; /// bits of their first byte, which is identified by the bit pattern ""101"" in; /// the three most significant bits. So FixBitsMask::String contains; /// 0b11100000.; ///; /// The corresponding bit pattern to mask for is found in FixBits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h:52,Message,MessagePack,52,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h,1,['Message'],['MessagePack']
Integrability,/// MatchAllMethodDeclarations - Check methods declaraed in interface or; /// or protocol against those declared in their implementations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:60,interface,interface,60,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,"['interface', 'protocol']","['interface', 'protocol']"
Integrability,/// MatchAllMethodDeclarations - Check methods declared in interface; /// or protocol against those declared in their implementations.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:59,interface,interface,59,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,2,"['interface', 'protocol']","['interface', 'protocol']"
Integrability,"/// MatchTwoMethodDeclarations - Checks that two methods have matching type and; /// returns true, or false, accordingly.; /// TODO: Handle protocol list; such as id<p1,p2> in type comparisons",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:140,protocol,protocol,140,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['protocol'],['protocol']
Integrability,"/// MatchWrapper - Try to match MSP430ISD::Wrapper node into an addressing mode.; /// These wrap things that will resolve down into a symbol reference. If no; /// match is possible, this returns true, otherwise it returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelDAGToDAG.cpp:43,Wrap,Wrapper,43,interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelDAGToDAG.cpp,2,"['Wrap', 'wrap']","['Wrapper', 'wrap']"
Integrability,"/// Matcher descriptor for variadic functions.; ///; /// This class simply wraps a VariadicFunction with the right signature to export; /// it as a MatcherDescriptor.; /// This allows us to have one implementation of the interface for as many free; /// functions as we want, reducing the number of symbols and size of the; /// object file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:75,wrap,wraps,75,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,2,"['interface', 'wrap']","['interface', 'wraps']"
Integrability,"/// Matcher descriptor interface.; ///; /// Provides a \c create() method that constructs the matcher from the provided; /// arguments, and various other methods for type introspection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:23,interface,interface,23,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,1,['interface'],['interface']
Integrability,"/// MatcherDescriptor that wraps multiple ""overloads"" of the same; /// matcher.; ///; /// It will try every overload and generate appropriate errors for when none or; /// more than one overloads match the arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:27,wrap,wraps,27,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,1,['wrap'],['wraps']
Integrability,"/// Matches 1) if the call expression's callee's declaration matches the; /// given matcher; or 2) if the Obj-C message expression's callee's method; /// declaration matches the given matcher.; ///; /// Example matches y.x() (matcher = callExpr(callee(; /// cxxMethodDecl(hasName(""x""))))); /// \code; /// class Y { public: void x(); };; /// void z() { Y y; y.x(); }; /// \endcode; ///; /// Example 2. Matches [I foo] with; /// objcMessageExpr(callee(objcMethodDecl(hasName(""foo"")))); ///; /// \code; /// @interface I: NSObject; /// +(void)foo;; /// @end; /// ...; /// [I foo]; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:112,message,message,112,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,"['interface', 'message']","['interface', 'message']"
Integrability,"/// Matches AST nodes that have descendant AST nodes that match the; /// provided matcher.; ///; /// Example matches X, A, A::X, B, B::C, B::C::X; /// (matcher = cxxRecordDecl(forEachDescendant(cxxRecordDecl(hasName(""X""))))); /// \code; /// class X {};; /// class A { class X {}; }; // Matches A, because A::X is a class of name; /// // X inside A.; /// class B { class C { class X {}; }; };; /// \endcode; ///; /// DescendantT must be an AST base type.; ///; /// As opposed to 'hasDescendant', 'forEachDescendant' will cause a match for; /// each result that matches instead of only on the first one.; ///; /// Note: Recursively combined ForEachDescendant can cause many matches:; /// cxxRecordDecl(forEachDescendant(cxxRecordDecl(; /// forEachDescendant(cxxRecordDecl()); /// ))); /// will match 10 times (plus injected class name matches) on:; /// \code; /// class A { class B { class C { class D { class E {}; }; }; }; };; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:813,inject,injected,813,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['inject'],['injected']
Integrability,"/// Matches C++ arrays whose size is a value-dependent expression.; ///; /// Given; /// \code; /// template<typename T, int Size>; /// class array {; /// T data[Size];; /// };; /// \endcode; /// dependentSizedArrayType(); /// matches ""T data[Size]""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:45,depend,dependent,45,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['depend'],"['dependent', 'dependentSizedArrayType']"
Integrability,"/// Matches C++ classes that are directly or indirectly derived from a class; /// matching \c Base, or Objective-C classes that directly or indirectly; /// subclass a class matching \c Base.; ///; /// Note that a class is not considered to be derived from itself.; ///; /// Example matches Y, Z, C (Base == hasName(""X"")); /// \code; /// class X;; /// class Y : public X {}; // directly derived; /// class Z : public Y {}; // indirectly derived; /// typedef X A;; /// typedef A B;; /// class C : public B {}; // derived from a typedef of X; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""X"")):; /// \code; /// class Foo;; /// typedef Foo X;; /// class Bar : public Foo {}; // derived from a type that X is a typedef of; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""NSObject"")); /// \code; /// @interface NSObject @end; /// @interface Bar : NSObject @end; /// \endcode; ///; /// Usable as: Matcher<CXXRecordDecl>, Matcher<ObjCInterfaceDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:869,interface,interface,869,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['interface'],['interface']
Integrability,"/// Matches C++ extended vector type where either the type or size is; /// dependent.; ///; /// Given; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((ext_vector_type(Size))) type;; /// };; /// \endcode; /// dependentSizedExtVectorType(); /// matches ""T __attribute__((ext_vector_type(Size)))""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:75,depend,dependent,75,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['depend'],"['dependent', 'dependentSizedExtVectorType']"
Integrability,"/// Matches ObjC selectors whose name contains; /// a substring matched by the given RegExp.; /// matcher = objCMessageExpr(matchesSelector(""loadHTMLString\:baseURL?""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:193,message,message,193,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['message'],['message']
Integrability,/// Matches Objective-C category declarations.; ///; /// Example matches Foo (Additions); /// \code; /// @interface Foo (Additions); /// @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:106,interface,interface,106,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['interface'],['interface']
Integrability,/// Matches Objective-C interface declarations.; ///; /// Example matches Foo; /// \code; /// @interface Foo; /// @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:24,interface,interface,24,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['interface'],['interface']
Integrability,/// Matches Objective-C method declarations.; ///; /// Example matches both declaration and definition of -[Foo method]; /// \code; /// @interface Foo; /// - (void)method;; /// @end; ///; /// @implementation Foo; /// - (void)method {}; /// @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:137,interface,interface,137,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['interface'],['interface']
Integrability,/// Matches Objective-C property declarations.; ///; /// Example matches enabled; /// \code; /// @interface Foo; /// @property BOOL enabled;; /// @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:98,interface,interface,98,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['interface'],['interface']
Integrability,/// Matches Objective-C protocol declarations.; ///; /// Example matches FooDelegate; /// \code; /// @protocol FooDelegate; /// @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:24,protocol,protocol,24,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['protocol'],['protocol']
Integrability,"/// Matches ObjectiveC Message invocation expressions.; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". This matcher should match both message sends.; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:23,Message,Message,23,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,4,"['Message', 'message']","['Message', 'message']"
Integrability,"/// Matches QualType nodes that are of any pointer type; this includes; /// the Objective-C object pointer type, which is different despite being; /// syntactically similar.; ///; /// Given; /// \code; /// int *i = nullptr;; ///; /// @interface Foo; /// @end; /// Foo *f;; ///; /// int j;; /// \endcode; /// varDecl(hasType(isAnyPointer())); /// matches ""int *i"" and ""Foo *f"", but not ""int j"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:235,interface,interface,235,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['interface'],['interface']
Integrability,/// Matches a constant expression wrapper.; ///; /// Example matches the constant in the case statement:; /// (matcher = constantExpr()); /// \code; /// switch (a) {; /// case 37: break;; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:34,wrap,wrapper,34,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['wrap'],['wrapper']
Integrability,"/// Matches a node if the declaration associated with that node; /// matches the given matcher.; ///; /// The associated declaration is:; /// - for type nodes, the declaration of the underlying type; /// - for CallExpr, the declaration of the callee; /// - for MemberExpr, the declaration of the referenced member; /// - for CXXConstructExpr, the declaration of the constructor; /// - for CXXNewExpr, the declaration of the operator new; /// - for ObjCIvarExpr, the declaration of the ivar; ///; /// For type nodes, hasDeclaration will generally match the declaration of the; /// sugared type. Given; /// \code; /// class X {};; /// typedef X Y;; /// Y y;; /// \endcode; /// in varDecl(hasType(hasDeclaration(decl()))) the decl will match the; /// typedefDecl. A common use case is to match the underlying, desugared type.; /// This can be achieved by using the hasUnqualifiedDesugaredType matcher:; /// \code; /// varDecl(hasType(hasUnqualifiedDesugaredType(; /// recordType(hasDeclaration(decl()))))); /// \endcode; /// In this matcher, the decl will match the CXXRecordDecl of class X.; ///; /// Usable as: Matcher<AddrLabelExpr>, Matcher<CallExpr>,; /// Matcher<CXXConstructExpr>, Matcher<CXXNewExpr>, Matcher<DeclRefExpr>,; /// Matcher<EnumType>, Matcher<InjectedClassNameType>, Matcher<LabelStmt>,; /// Matcher<MemberExpr>, Matcher<QualType>, Matcher<RecordType>,; /// Matcher<TagType>, Matcher<TemplateSpecializationType>,; /// Matcher<TemplateTypeParmType>, Matcher<TypedefType>,; /// Matcher<UnresolvedUsingType>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:1260,Inject,InjectedClassNameType,1260,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Inject'],['InjectedClassNameType']
Integrability,"/// Matches an Objective-C object pointer type, which is different from; /// a pointer type, despite being syntactically similar.; ///; /// Given; /// \code; /// int *a;; ///; /// @interface Foo; /// @end; /// Foo *f;; /// \endcode; /// pointerType(); /// matches ""Foo *f"", but does not match ""int *a"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:181,interface,interface,181,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['interface'],['interface']
Integrability,"/// Matches any argument of a call expression or a constructor call; /// expression, or an ObjC-message-send expression.; ///; /// Given; /// \code; /// void x(int, int, int) { int y; x(1, y, 42); }; /// \endcode; /// callExpr(hasAnyArgument(declRefExpr())); /// matches x(1, y, 42); /// with hasAnyArgument(...); /// matching y; ///; /// For ObjectiveC, given; /// \code; /// @interface I - (void) f:(int) y; @end; /// void foo(I *i) { [i f:12]; }; /// \endcode; /// objcMessageExpr(hasAnyArgument(integerLiteral(equals(12)))); /// matches [i f:12]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:96,message,message-send,96,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,"['interface', 'message']","['interface', 'message-send']"
Integrability,"/// Matches any parameter of a function or an ObjC method declaration or a; /// block.; ///; /// Does not match the 'this' parameter of a method.; ///; /// Given; /// \code; /// class X { void f(int x, int y, int z) {} };; /// \endcode; /// cxxMethodDecl(hasAnyParameter(hasName(""y""))); /// matches f(int x, int y, int z) {}; /// with hasAnyParameter(...); /// matching int y; ///; /// For ObjectiveC, given; /// \code; /// @interface I - (void) f:(int) y; @end; /// \endcode; //; /// the matcher objcMethodDecl(hasAnyParameter(hasName(""y""))); /// matches the declaration of method f with hasParameter; /// matching y.; ///; /// For blocks, given; /// \code; /// b = ^(int y) { printf(""%d"", y) };; /// \endcode; ///; /// the matcher blockDecl(hasAnyParameter(hasName(""y""))); /// matches the declaration of the block b with hasParameter; /// matching y.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:425,interface,interface,425,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['interface'],['interface']
Integrability,/// Matches co_await expressions where the type of the promise is dependent,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:66,depend,dependent,66,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['depend'],['dependent']
Integrability,"/// Matches expression that are value-dependent because they contain a; /// non-type template parameter.; ///; /// For example, the array bound of ""Chars"" in the following example is; /// value-dependent.; /// \code; /// template<int Size> int f() { return Size; }; /// \endcode; /// expr(isValueDependent()) matches return Size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:38,depend,dependent,38,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['depend'],['dependent']
Integrability,"/// Matches expressions that are instantiation-dependent even if it is; /// neither type- nor value-dependent.; ///; /// In the following example, the expression sizeof(sizeof(T() + T())); /// is instantiation-dependent (since it involves a template parameter T),; /// but is neither type- nor value-dependent, since the type of the inner; /// sizeof is known (std::size_t) and therefore the size of the outer; /// sizeof is known.; /// \code; /// template<typename T>; /// void f(T x, T y) { sizeof(sizeof(T() + T()); }; /// \endcode; /// expr(isInstantiationDependent()) matches sizeof(sizeof(T() + T())",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:47,depend,dependent,47,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,4,['depend'],['dependent']
Integrability,"/// Matches expressions that are type-dependent because the template type; /// is not yet instantiated.; ///; /// For example, the expressions ""x"" and ""x + y"" are type-dependent in; /// the following code, but ""y"" is not type-dependent:; /// \code; /// template<typename T>; /// void add(T x, int y) {; /// x + y;; /// }; /// \endcode; /// expr(isTypeDependent()) matches x + y",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:38,depend,dependent,38,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,3,['depend'],['dependent']
Integrability,"/// Matches expressions that match InnerMatcher that are possibly wrapped in an; /// elidable constructor and other corresponding bookkeeping nodes.; ///; /// In C++17, elidable copy constructors are no longer being generated in the; /// AST as it is not permitted by the standard. They are, however, part of the; /// AST in C++14 and earlier. So, a matcher must abstract over these differences; /// to work in all language modes. This matcher skips elidable constructor-call; /// AST nodes, `ExprWithCleanups` nodes wrapping elidable constructor-calls and; /// various implicit nodes inside the constructor calls, all of which will not; /// appear in the C++17 AST.; ///; /// Given; ///; /// \code; /// struct H {};; /// H G();; /// void f() {; /// H D = G();; /// }; /// \endcode; ///; /// ``varDecl(hasInitializer(ignoringElidableConstructorCall(callExpr())))``; /// matches ``H D = G()`` in C++11 through C++17 (and beyond).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:66,wrap,wrapped,66,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['wrap'],"['wrapped', 'wrapping']"
Integrability,"/// Matches if a declaration has a body attached.; ///; /// Example matches A, va, fa; /// \code; /// class A {};; /// class B; // Doesn't match, as it has no body.; /// int va;; /// extern int vb; // Doesn't match, as it doesn't define the variable.; /// void fa() {}; /// void fb(); // Doesn't match, as it has no body.; /// @interface X; /// - (void)ma; // Doesn't match, interface is declaration.; /// @end; /// @implementation X; /// - (void)ma {}; /// @end; /// \endcode; ///; /// Usable as: Matcher<TagDecl>, Matcher<VarDecl>, Matcher<FunctionDecl>,; /// Matcher<ObjCMethodDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:328,interface,interface,328,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['interface'],['interface']
Integrability,"/// Matches if the Objective-C message is sent to an instance,; /// and the inner matcher matches on that instance.; ///; /// For example the method call in; /// \code; /// NSString *x = @""hello"";; /// [x containsString:@""h""];; /// \endcode; /// is matched by; /// objcMessageExpr(hasReceiver(declRefExpr(to(varDecl(hasName(""x""))))))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:31,message,message,31,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['message'],['message']
Integrability,"/// Matches injected class name types.; ///; /// Example matches S s, but not S<T> s.; /// (matcher = parmVarDecl(hasType(injectedClassNameType()))); /// \code; /// template <typename T> struct S {; /// void f(S s);; /// void g(S<T> s);; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:12,inject,injected,12,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['inject'],"['injected', 'injectedClassNameType']"
Integrability,/// Matches member expressions where the actual member referenced could not be; /// resolved because the base expression or the member name was dependent.; ///; /// Given; /// \code; /// template <class T> void f() { T t; t.g(); }; /// \endcode; /// cxxDependentScopeMemberExpr(); /// matches t.g,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:144,depend,dependent,144,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['depend'],['dependent']
Integrability,"/// Matches nodes that do not match the provided matcher.; ///; /// Uses the variadic matcher interface, but fails if; /// InnerMatchers.size() != 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:94,interface,interface,94,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['interface'],['interface']
Integrability,"/// Matches nodes which can be used with binary operators.; ///; /// The code; /// \code; /// var1 != var2;; /// \endcode; /// might be represented in the clang AST as a binaryOperator, a; /// cxxOperatorCallExpr or a cxxRewrittenBinaryOperator, depending on; ///; /// * whether the types of var1 and var2 are fundamental (binaryOperator) or at; /// least one is a class type (cxxOperatorCallExpr); /// * whether the code appears in a template declaration, if at least one of the; /// vars is a dependent-type (binaryOperator); /// * whether the code relies on a rewritten binary operator, such as a; /// spaceship operator or an inverted equality operator; /// (cxxRewrittenBinaryOperator); ///; /// This matcher elides details in places where the matchers for the nodes are; /// compatible.; ///; /// Given; /// \code; /// binaryOperation(; /// hasOperatorName(""!=""),; /// hasLHS(expr().bind(""lhs"")),; /// hasRHS(expr().bind(""rhs"")); /// ); /// \endcode; /// matches each use of ""!="" in:; /// \code; /// struct S{; /// bool operator!=(const S&) const;; /// };; ///; /// void foo(); /// {; /// 1 != 2;; /// S() != S();; /// }; ///; /// template<typename T>; /// void templ(); /// {; /// 1 != 2;; /// T() != S();; /// }; /// struct HasOpEq; /// {; /// bool operator==(const HasOpEq &) const;; /// };; ///; /// void inverse(); /// {; /// HasOpEq s1;; /// HasOpEq s2;; /// if (s1 != s2); /// return;; /// }; ///; /// struct HasSpaceship; /// {; /// bool operator<=>(const HasOpEq &) const;; /// };; ///; /// void use_spaceship(); /// {; /// HasSpaceship s1;; /// HasSpaceship s2;; /// if (s1 != s2); /// return;; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:246,depend,depending,246,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['depend'],"['dependent-type', 'depending']"
Integrability,"/// Matches on the receiver of an ObjectiveC Message expression.; ///; /// Example; /// matcher = objCMessageExpr(hasReceiverType(asString(""UIWebView *"")));; /// matches the [webView ...] message invocation.; /// \code; /// NSString *webViewJavaScript = ...; /// UIWebView *webView = ...; /// [webView stringByEvaluatingJavaScriptFromString:webViewJavascript];; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:45,Message,Message,45,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,"['Message', 'message']","['Message', 'message']"
Integrability,"/// Matches pointer types, but does not match Objective-C object pointer; /// types.; ///; /// Given; /// \code; /// int *a;; /// int &b = *a;; /// int c = 5;; ///; /// @interface Foo; /// @end; /// Foo *f;; /// \endcode; /// pointerType(); /// matches ""int *a"", but does not match ""Foo *f"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:170,interface,interface,170,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['interface'],['interface']
Integrability,"/// Matches template-dependent, but known, member names against an already-bound; /// node; ///; /// In template declarations, dependent members are not resolved and so can; /// not be matched to particular named declarations.; ///; /// This matcher allows to match on the name of already-bound VarDecl, FieldDecl; /// and CXXMethodDecl nodes.; ///; /// Given; /// \code; /// template <typename T>; /// struct S {; /// void mem();; /// };; /// template <typename T>; /// void x() {; /// S<T> s;; /// s.mem();; /// }; /// \endcode; /// The matcher; /// @code; /// \c cxxDependentScopeMemberExpr(; /// hasObjectExpression(declRefExpr(hasType(templateSpecializationType(; /// hasDeclaration(classTemplateDecl(has(cxxRecordDecl(has(; /// cxxMethodDecl(hasName(""mem"")).bind(""templMem""); /// ))))); /// )))),; /// memberHasSameNameAsBoundNode(""templMem""); /// ); /// @endcode; /// first matches and binds the @c mem member of the @c S template, then; /// compares its name to the usage in @c s.mem() in the @c x function template",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:21,depend,dependent,21,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['depend'],['dependent']
Integrability,"/// Matches template-dependent, but known, member names.; ///; /// In template declarations, dependent members are not resolved and so can; /// not be matched to particular named declarations.; ///; /// This matcher allows to match on the known name of members.; ///; /// Given; /// \code; /// template <typename T>; /// struct S {; /// void mem();; /// };; /// template <typename T>; /// void x() {; /// S<T> s;; /// s.mem();; /// }; /// \endcode; /// \c cxxDependentScopeMemberExpr(hasMemberName(""mem"")) matches `s.mem()`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:21,depend,dependent,21,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['depend'],['dependent']
Integrability,"/// Matches the n'th parameter of a function or an ObjC method; /// declaration or a block.; ///; /// Given; /// \code; /// class X { void f(int x) {} };; /// \endcode; /// cxxMethodDecl(hasParameter(0, hasType(varDecl()))); /// matches f(int x) {}; /// with hasParameter(...); /// matching int x; ///; /// For ObjectiveC, given; /// \code; /// @interface I - (void) f:(int) y; @end; /// \endcode; //; /// the matcher objcMethodDecl(hasParameter(0, hasName(""y""))); /// matches the declaration of method f with hasParameter; /// matching y.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:346,interface,interface,346,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['interface'],['interface']
Integrability,"/// Matches when BaseName == Selector.getAsString(); ///; /// matcher = objCMessageExpr(hasSelector(""loadHTMLString:baseURL:""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:152,message,message,152,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['message'],['message']
Integrability,"/// Matches when the selector is a Unary Selector; ///; /// matcher = objCMessageExpr(matchesSelector(hasUnarySelector());; /// matches self.bodyView in the code below, but NOT the outer message; /// invocation of ""loadHTMLString:baseURL:"".; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:187,message,message,187,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['message'],['message']
Integrability,/// Matches when the selector is a keyword selector; ///; /// objCMessageExpr(hasKeywordSelector()) matches the generated setFrame; /// message expression in; ///; /// \code; /// UIWebView *webView = ...;; /// CGRect bodyFrame = webView.frame;; /// bodyFrame.size.height = self.bodyContentHeight;; /// webView.frame = bodyFrame;; /// // ^---- matches here; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:136,message,message,136,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['message'],['message']
Integrability,"/// Materialize a VReg containing the address of the specified; /// stack-based object. This is either based on a FrameIndex or; /// direct SP manipulation, depending on the context. \p MPO; /// should be initialized to an appropriate description of the; /// address created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:157,depend,depending,157,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,1,['depend'],['depending']
Integrability,"/// Materialize pending invariant condition of the given candidate into IR. The; /// injected loop-invariant condition implies the original loop-variant branch; /// condition, so the materialization turns; ///; /// loop_block:; /// ...; /// br i1 %variant_cond, label InLoopSucc, label OutOfLoopSucc; ///; /// into; ///; /// preheader:; /// %invariant_cond = LHS pred RHS; /// ...; /// loop_block:; /// br i1 %invariant_cond, label InLoopSucc, label OriginalCheck; /// OriginalCheck:; /// br i1 %variant_cond, label InLoopSucc, label OutOfLoopSucc; /// ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:85,inject,injected,85,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['injected']
Integrability,"/// May add implicit CUDAConstantAttr attribute to VD, depending on VD; /// and current compilation settings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:55,depend,depending,55,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['depending']
Integrability,"/// May add implicit CUDAHostAttr and CUDADeviceAttr attributes to FD,; /// depending on FD and the current compilation settings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:76,depend,depending,76,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['depending']
Integrability,/// May be a lexically backward dependence type (includes Unknown).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:32,depend,dependence,32,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,/// Mediates between COFF initialization and ExecutionSession state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h:4,Mediat,Mediates,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFPlatform.h,1,['Mediat'],['Mediates']
Integrability,/// Mediates between ELFNix initialization and ExecutionSession state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h:4,Mediat,Mediates,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,1,['Mediat'],['Mediates']
Integrability,/// Mediates between MachO initialization and ExecutionSession state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:4,Mediat,Mediates,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,1,['Mediat'],['Mediates']
Integrability,"/// Mediates the link between the signal and the slot. It decouples the setting of; /// arguments and sending a signal.; ///; /// There are three different modes in argument setting required by TQObject's Emit/EmitVA:; /// setting integral types, setting array types and setting const char*.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualQConnection.h:4,Mediat,Mediates,4,core/base/inc/TVirtualQConnection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualQConnection.h,1,['Mediat'],['Mediates']
Integrability,/// Memory access instruction may be vectorized in more than one way.; /// Form of instruction after vectorization depends on cost.; /// This function takes cost-based decisions for Load/Store instructions; /// and collects them in a map. This decisions map is used for building; /// the lists of loop-uniform and loop-scalar instructions.; /// The calculated cost is saved with widening decision in order to; /// avoid redundant calculations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:115,depend,depends,115,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['depend'],['depends']
Integrability,/// Memory dependences collected during the analysis. Only valid if; /// RecordDependences is true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:11,depend,dependences,11,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependences']
Integrability,"/// Merge Interfaces for the same library. The following library attributes; /// must match.; /// * Install name, Current & Compatibility version,; /// * Two-level namespace enablement, and App extension enablement.; ///; /// \param O The Interface to merge.; /// \return New Interface File that was merged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:10,Interface,Interfaces,10,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,3,['Interface'],"['Interface', 'Interfaces']"
Integrability,"/// Merge a block chain into this one.; ///; /// This routine merges a block chain into this one. It takes care of forming; /// a contiguous sequence of basic blocks, updating the edge list, and; /// updating the block -> chain mapping. It does not free or tear down the; /// old chain, but the old chain's block list is no longer valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:54,rout,routine,54,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['rout'],['routine']
Integrability,"/// Merge all the thread private objects. Can be called many times. It; /// does create a new instance of class T to represent the ""Sum"" object.; /// This method is not thread safe: correct or acceptable behaviours; /// depend on the nature of T and of the merging function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TThreadedObject.hxx:220,depend,depend,220,core/thread/inc/ROOT/TThreadedObject.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TThreadedObject.hxx,1,['depend'],['depend']
Integrability,/// Merge availability attributes for an implementation of; /// a protocol requirement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:66,protocol,protocol,66,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['protocol'],['protocol']
Integrability,/// Merge availability attributes for an implementation of; /// an optional protocol requirement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:76,protocol,protocol,76,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['protocol'],['protocol']
Integrability,/// Merge bits known from context-dependent facts into Known.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:34,depend,dependent,34,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['depend'],['dependent']
Integrability,/// Merge information from the declaration of a method in the \@interface; /// (or a category/extension) into the corresponding method in the; /// @implementation (for a class or category).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:64,interface,interface,64,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['interface'],['interface']
Integrability,/// Merges partitions in order to ensure that no loads are duplicated.; ///; /// We can't duplicate loads because that could potentially reorder them.; /// LoopAccessAnalysis provides dependency information with the context that; /// the order of memory operation is preserved.; ///; /// Return if any partitions were merged.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp:184,depend,dependency,184,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,1,['depend'],['dependency']
Integrability,/// Message associated to the diagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h:4,Message,Message,4,interpreter/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h,1,['Message'],['Message']
Integrability,"/// Message handler that hands over all diagnostics to the currently active instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx:4,Message,Message,4,core/testsupport/inc/ROOT/TestSupport.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx,1,['Message'],['Message']
Integrability,/// Message to be reported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:4,Message,Message,4,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['Message'],['Message']
Integrability,/// Message to report.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:4,Message,Message,4,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,3,['Message'],['Message']
Integrability,/// Message to use when this entity is unavailable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:4,Message,Message,4,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['Message'],['Message']
Integrability,"/// MessagePack object, represented as a tagged union of C++ types.; ///; /// All types except \c Type::Nil (which has only one value, and so is; /// completely represented by the \c Kind itself) map to a exactly one union; /// member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h:4,Message,MessagePack,4,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h,1,['Message'],['MessagePack']
Integrability,"/// MessagePack types as defined in the standard, with the exception of Integer; /// being divided into a signed Int and unsigned UInt variant in order to map; /// directly to C++ types.; ///; /// The types map onto corresponding union members of the \c Object struct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h:4,Message,MessagePack,4,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h,1,['Message'],['MessagePack']
Integrability,/// Metadata kind used to tie method lookups to message sends. The GNUstep; /// runtime provides some LLVM passes that can use this to do things like; /// automatic IMP caching and speculative inlining.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:48,message,message,48,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['message'],['message']
Integrability,"/// Metadata wrapper in the Value hierarchy.; ///; /// A member of the \a Value hierarchy to represent a reference to metadata.; /// This allows, e.g., intrinsics to have metadata as operands.; ///; /// Notably, this is the only thing in either hierarchy that is allowed to; /// reference \a LocalAsMetadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:13,wrap,wrapper,13,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['wrap'],['wrapper']
Integrability,"/// Method Pool - allows efficient lookup when typechecking messages to ""id"".; /// We need to maintain a list, since selectors can have differing signatures; /// across classes. In Cocoa, this happens to be extremely uncommon (only 1%; /// of selectors are ""overloaded"").; /// At the head of the list it is recorded whether there were 0, 1, or >= 2; /// methods inside categories with a particular selector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:60,message,messages,60,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['message'],['messages']
Integrability,/// Method redeclaration in the same interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:37,interface,interface,37,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['interface'],['interface']
Integrability,"/// Method to try and mark a result as invalid.; ///; /// When the outer analysis manager detects a change in some underlying; /// unit of the IR, it will call this method on all of the results cached.; ///; /// \p PA is a set of preserved analyses which can be used to avoid; /// invalidation because the pass which changed the underlying IR took care; /// to update or preserve the analysis result in some way.; ///; /// \p Inv is typically a \c AnalysisManager::Invalidator object that can be; /// used by a particular analysis result to discover if other analyses; /// results are also invalidated in the event that this result depends on; /// them. See the documentation in the \c AnalysisManager for more details.; ///; /// \returns true if the result is indeed invalid (the default).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:632,depend,depends,632,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,1,['depend'],['depends']
Integrability,"/// Method used by Sema::CorrectTypo to assign an ""edit distance"" rank; /// to a candidate (where a lower value represents a better candidate), or; /// returning InvalidDistance if the candidate is not at all viable. For; /// validation callbacks that only need to determine if a candidate is viable,; /// the default RankCandidate returns either 0 or InvalidDistance depending; /// whether ValidateCandidate returns true or false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:368,depend,depending,368,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,1,['depend'],['depending']
Integrability,/// Methods that depend on T from hasTypedMatcher/getTypedMatcher.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:17,depend,depend,17,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,1,['depend'],['depend']
Integrability,/// Methods used by shrink wrapping to determine if MBB can be used for the; /// function prologue/epilogue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.h:27,wrap,wrapping,27,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.h,1,['wrap'],['wrapping']
Integrability,/// Minimal vector-like interface.; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h:24,interface,interface,24,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h,1,['interface'],['interface']
Integrability,"/// Minimum number of cycles from this instruction is issued to the of the; /// trace, as determined by data dependencies and instruction latencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:109,depend,dependencies,109,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,1,['depend'],['dependencies']
Integrability,"/// Minuit calls (via FcnAdapters etc) DoEval or Gradient with a set of parameters x.; /// This function syncs these values to the proper places in RooFit.; ///; /// The first twist, and reason this function is more complicated than one may imagine, is that Minuit internally uses a; /// transformed parameter space to account for parameter boundaries. Whether we receive these Minuit ""internal""; /// parameter values or ""regular""/untransformed RooFit parameter space values depends on the situation.; /// - The values that arrive here via DoEval are always ""normal"" parameter values, since Minuit transforms these; /// back into regular space before passing to DoEval (see MnUserFcn::operator() which wraps the Fcn(Gradient)Base; /// in ModularFunctionMinimizer::Minimize and is used for direct function calls from that point on in the minimizer).; /// These can thus always be safely synced with this function's RooFit parameters using SetPdfParamVal.; /// - The values that arrive here via Gradient will be in internal coordinates if that is; /// what this class expects, and indeed this is the case for MinuitFcnGrad's current implementation. This is; /// communicated to Minuit via MinuitFcnGrad::returnsInMinuit2ParameterSpace. Inside Minuit, that function determines; /// whether this class's gradient calculator is wrapped inside a AnalyticalGradientCalculator, to which Minuit passes; /// ""external"" parameter values, or as an ExternalInternalGradientCalculator, which gets ""internal"" parameter values.; /// Long story short: when MinuitFcnGrad::returnsInMinuit2ParameterSpace() returns true, Minuit will pass ""internal""; /// values to Gradient. These cannot be synced with this function's RooFit parameters using; /// SetPdfParamVal, unless a manual transformation step is performed in advance. However, they do need to be passed; /// on to the gradient calculator, since indeed we expect values there to be in ""internal"" space. However, this is; /// calculator dependent. Note that in the c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx:475,depend,depends,475,roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx,2,"['depend', 'wrap']","['depends', 'wraps']"
Integrability,"/// Models a value of `struct` or `class` type.; /// In C++, prvalues of class type serve only a limited purpose: They can only; /// be used to initialize a result object. It is not possible to access member; /// variables or call member functions on a prvalue of class type.; /// Correspondingly, `RecordValue` also serves only a limited purpose: It; /// conveys a prvalue of class type from the place where the object is; /// constructed to the result object that it initializes.; ///; /// When creating a prvalue of class type, we already need a storage location; /// for `this`, even though prvalues are otherwise not associated with storage; /// locations. `RecordValue` is therefore essentially a wrapper for a storage; /// location, which is then used to set the storage location for the result; /// object when we process the AST node for that result object.; ///; /// For example:; /// MyStruct S = MyStruct(3);; ///; /// In this example, `MyStruct(3) is a prvalue, which is modeled as a; /// `RecordValue` that wraps a `RecordStorageLocation`. This; /// `RecordStorageLocation` is then used as the storage location for `S`.; ///; /// Over time, we may eliminate `RecordValue` entirely. See also the discussion; /// here: https://reviews.llvm.org/D155204#inline-1503204",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Value.h:703,wrap,wrapper,703,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Value.h,2,['wrap'],"['wrapper', 'wraps']"
Integrability,"/// Modifies the canonical loop to be a workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// The concrete transformation is done by applyStaticWorkshareLoop,; /// applyStaticChunkedWorkshareLoop, or applyDynamicWorkshareLoop, depending; /// on the value of \p SchedKind and \p ChunkSize.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param SchedKind Scheduling algorithm to use.; /// \param ChunkSize The chunk size for the inner loop.; /// \param HasSimdModifier Whether the simd modifier is present in the; /// schedule clause.; /// \param HasMonotonicModifier Whether the monotonic modifier is present in; /// the schedule clause.; /// \param HasNonmonotonicModifier Whether the nonmonotonic modifier is; /// present in the schedule clause.; /// \param HasOrderedClause Whether the (parameterless) ordered clause is; /// present.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:664,depend,depending,664,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['depend'],['depending']
Integrability,"/// Modifies the number of unscheduled dependencies for this instruction,; /// and returns the number of remaining dependencies for the containing; /// bundle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:39,depend,dependencies,39,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['depend'],['dependencies']
Integrability,/// Modular dependency that has already been built prior to the dependency scan.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:12,depend,dependency,12,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,2,['depend'],['dependency']
Integrability,"/// Module linkage, which indicates that the entity can be referred; /// to from other translation units within the same module, and indirectly; /// from arbitrary other translation units through inline functions and; /// templates in the module interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Linkage.h:246,interface,interface,246,interpreter/llvm-project/clang/include/clang/Basic/Linkage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Linkage.h,1,['interface'],['interface']
Integrability,"/// Module pass, wrapping the inliner pass. This works in conjunction with the; /// InlineAdvisorAnalysis to facilitate inlining decisions taking into account; /// module-wide state, that need to keep track of inter-inliner pass runs, for; /// a given module. An InlineAdvisor is configured and kept alive for the; /// duration of the ModuleInlinerWrapperPass::run.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:17,wrap,wrapping,17,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,1,['wrap'],['wrapping']
Integrability,"/// More complex way of printing a MachineOperand.; /// \param TypeToPrint specifies the generic type to be printed on uses and; /// defs. It can be determined using MachineInstr::getTypeToPrint.; /// \param OpIdx - specifies the index of the operand in machine instruction.; /// This will be used by target dependent MIR formatter. Could be std::nullopt; /// if the index is unknown, e.g. called by dump().; /// \param PrintDef - whether we want to print `def` on an operand which; /// isDef. Sometimes, if the operand is printed before '=', we don't print; /// `def`.; /// \param IsStandalone - whether we want a verbose output of the MO. This; /// prints extra information that can be easily inferred when printing the; /// whole function, but not when printing only a fragment of it.; /// \param ShouldPrintRegisterTies - whether we want to print register ties.; /// Sometimes they are easily determined by the instruction's descriptor; /// (MachineInstr::hasComplexRegiterTies can determine if it's needed).; /// \param TiedOperandIdx - if we need to print register ties this needs to; /// provide the index of the tied register. If not, it will be ignored.; /// \param TRI - provide more target-specific information to the printer.; /// Unlike the previous function, this one will not try and get the; /// information from it's parent.; /// \param IntrinsicInfo - same as \p TRI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:308,depend,dependent,308,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['depend'],['dependent']
Integrability,/// Most of the state for walking the partitions is held in a class; /// with a nice interface for examining them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:85,interface,interface,85,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['interface'],['interface']
Integrability,"/// Most significant bits used to identify ""Fix"" variants in MessagePack.; ///; /// For example, FixStr objects encode their size in the five least significant; /// bits of their first byte, which is identified by the bit pattern ""101"" in; /// the three most significant bits. So FixBits::String contains 0b10100000.; ///; /// A corresponding mask of the bit pattern is found in \c FixBitsMask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h:61,Message,MessagePack,61,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h,1,['Message'],['MessagePack']
Integrability,/// Move the scheduler state forward until the specified node's dependents are; /// ready and can be scheduled with no resource conflicts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:64,depend,dependents,64,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['depend'],['dependents']
Integrability,"/// Move to the line of the provided source location. This will; /// return true if a newline was inserted or if; /// the requested location is the first token on the first line.; /// In these cases the next output will be the first column on the line and; /// make it possible to insert indention. The newline was inserted; /// implicitly when at the beginning of the file.; ///; /// @param Tok Token where to move to.; /// @param RequireStartOfLine Whether the next line depends on being in the; /// first column, such as a directive.; ///; /// @return Whether column adjustments are necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp:473,depend,depends,473,interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,1,['depend'],['depends']
Integrability,"/// Multiplies corresponding 16-bit elements of two 256-bit vectors of; /// [16 x i16], forming 32-bit intermediate products, and adds pairs of; /// those products to form 32-bit sums returned as elements of the; /// [8 x i32] result.; ///; /// There is only one wraparound case: when all four of the 16-bit sources; /// are \c 0x8000, the result will be \c 0x80000000.; ///; /// \code{.operation}; /// FOR i := 0 TO 7; /// j := i*32; /// temp1 := __a[j+15:j] * __b[j+15:j]; /// temp2 := __a[j+31:j+16] * __b[j+31:j+16]; /// result[j+31:j] := temp1 + temp2; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMADDWD instruction.; ///; /// \param __a; /// A 256-bit vector of [16 x i16] containing one of the source operands.; /// \param __b; /// A 256-bit vector of [16 x i16] containing one of the source operands.; /// \returns A 256-bit vector of [8 x i32] containing the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:263,wrap,wraparound,263,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,1,['wrap'],['wraparound']
Integrability,/// Name lookup found an unresolvable value declaration; /// and cannot yet complete. This only happens in C++ dependent; /// contexts with dependent using declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:111,depend,dependent,111,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,2,['depend'],['dependent']
Integrability,/// NeededEarly - set if any other intrinsic depends on this intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:45,depend,depends,45,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['depend'],['depends']
Integrability,/// Never wrap braces after a control statement.; /// \code; /// if (foo()) {; /// } else {; /// }; /// for (int i = 0; i < 10; ++i) {; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,wrap,wrap,10,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrap']
Integrability,"/// No entity found met the criteria within the current; /// instantiation,, but there were dependent base classes of the; /// current instantiation that could not be searched.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:92,depend,dependent,92,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['depend'],['dependent']
Integrability,/// No interoperability ABI has been specified,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:7,interoperab,interoperability,7,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['interoperab'],['interoperability']
Integrability,/// No memory dependence was encountered that would inhibit; /// vectorization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:14,depend,dependence,14,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,"/// No shape recomputation is necessary. This category does not depend on other categories.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooThresholdCategory.h:64,depend,depend,64,roofit/roofitcore/inc/RooThresholdCategory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooThresholdCategory.h,1,['depend'],['depend']
Integrability,/// No-op implementation of the TTI interface using the utility base; /// classes.; ///; /// This is used when no target specific information is available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetTransformInfo.cpp:36,interface,interface,36,interpreter/llvm-project/llvm/lib/Analysis/TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetTransformInfo.cpp,1,['interface'],['interface']
Integrability,"/// No-wrap operations can transfer sign extension of their result to their; /// operands. Generate the SCEV value for the widened operation without; /// actually modifying the IR yet. If the expression after extending the; /// operands is an AddRec for this loop, return the AddRec and the kind of; /// extension used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:7,wrap,wrap,7,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['wrap'],['wrap']
Integrability,"/// NoWrapFlags are bitfield indices into SubclassData.; ///; /// Add and Mul expressions may have no-unsigned-wrap <NUW> or; /// no-signed-wrap <NSW> properties, which are derived from the IR; /// operator. NSW is a misnomer that we use to mean no signed overflow or; /// underflow.; ///; /// AddRec expressions may have a no-self-wraparound <NW> property if, in; /// the integer domain, abs(step) * max-iteration(loop) <=; /// unsigned-max(bitwidth). This means that the recurrence will never reach; /// its start value if the step is non-zero. Computing the same value on; /// each iteration is not considered wrapping, and recurrences with step = 0; /// are trivially <NW>. <NW> is independent of the sign of step and the; /// value the add recurrence starts with.; ///; /// Note that NUW and NSW are also valid properties of a recurrence, and; /// either implies NW. For convenience, NW will be set for a recurrence; /// whenever either NUW or NSW are set.; ///; /// We require that the flag on a SCEV apply to the entire scope in which; /// that SCEV is defined. A SCEV's scope is set of locations dominated by; /// a defining location, which is in turn described by the following rules:; /// * A SCEVUnknown is at the point of definition of the Value.; /// * A SCEVConstant is defined at all points.; /// * A SCEVAddRec is defined starting with the header of the associated; /// loop.; /// * All other SCEVs are defined at the earlest point all operands are; /// defined.; ///; /// The above rules describe a maximally hoisted form (without regards to; /// potential control dependence). A SCEV is defined anywhere a; /// corresponding instruction could be defined in said maximally hoisted; /// form. Note that SCEVUDivExpr (currently the only expression type which; /// can trap) can be defined per these rules in regions where it would trap; /// at runtime. A SCEV being defined does not require the existence of any; /// instruction within the defined scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:111,wrap,wrap,111,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,5,"['depend', 'wrap']","['dependence', 'wrap', 'wraparound', 'wrapping']"
Integrability,"/// Node - Each edge bundle corresponds to a Hopfield node.; ///; /// The node contains precomputed frequency data that only depends on the CFG,; /// but Bias and Links are computed each time placeSpills is called.; ///; /// The node Value is positive when the variable should be in a register. The; /// value can change when linked nodes change, but convergence is very fast; /// because all weights are positive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp:125,depend,depends,125,interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp,1,['depend'],['depends']
Integrability,/// Non-dependent types used in templates that have already been instantiated; /// by some template instantiation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,depend,dependent,8,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['dependent']
Integrability,/// Non-modular file dependencies. This includes the main source file and; /// textually included header files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:21,depend,dependencies,21,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependencies']
Integrability,/// Not compiling a module interface at all.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:27,interface,interface,27,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['interface'],['interface']
Integrability,"/// Not null, if shrink-wrapping found a better place for the epilogue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:24,wrap,wrapping,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['wrap'],['wrapping']
Integrability,"/// Not null, if shrink-wrapping found a better place for the prologue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:24,wrap,wrapping,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['wrap'],['wrapping']
Integrability,"/// Note that a local declaration has been transformed by this; /// transformer.; ///; /// Local declarations are typically transformed via a call to; /// TransformDefinition. However, in some cases (e.g., lambda expressions),; /// the transformer itself has to transform the declarations. This routine; /// can be overridden by a subclass that keeps track of such mappings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:295,rout,routine,295,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Note that while no result was found in the current instantiation,; /// there were dependent base classes that could not be searched.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:86,depend,dependent,86,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['depend'],['dependent']
Integrability,/// Note whether this loop has any more iteratios to model. These methods are; /// essentially an interface for a GDM trait. Further reading in; /// ExprEngine::VisitObjCForCollectionStmt().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:98,interface,interface,98,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['interface'],['interface']
Integrability,"/// Note: The correctness of this analysis depends on the fact that the; /// following 2 sets will stop changing after some point.; /// ""Change"" here means that their size changes.; /// The size of each set is monotonically increasing; /// (we only add items to them) and it is upper bounded by the number of; /// instructions in the processed function (we can never save more; /// elements in either set than this number). Hence, at some point,; /// they will stop increasing.; /// Consequently, at some point, both sets will have stopped; /// changing, effectively making the analysis reach a fixpoint.; /// Note: These 2 sets are disjoint and an instruction can be considered; /// one of 3 things:; /// 1) Known to cause UB (AAUndefinedBehavior could prove it) and put it in; /// the KnownUBInsts set.; /// 2) Assumed to cause UB (in every updateImpl, AAUndefinedBehavior; /// has a reason to assume it).; /// 3) Assumed to not cause UB. very other instruction - AAUndefinedBehavior; /// could not find a reason to assume or prove that it can cause UB,; /// hence it assumes it doesn't. We have a set for these instructions; /// so that we don't reprocess them in every update.; /// Note however that instructions in this set may cause UB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:43,depend,depends,43,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['depend'],['depends']
Integrability,"/// Note: getBeginLoc() is the start of the whole DependentScopeDeclRefExpr,; /// and differs from getLocation().getStart().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:50,Depend,DependentScopeDeclRefExpr,50,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['Depend'],['DependentScopeDeclRefExpr']
Integrability,"/// NoteCandidates - When no template specialization match is found, prints; /// diagnostic messages containing the non-matching specializations that form; /// the candidate set.; /// This is analoguous to OverloadCandidateSet::NoteCandidates() with; /// OCD == OCD_AllCandidates and Cand->Viable == false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:92,message,messages,92,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['message'],['messages']
Integrability,"/// Notes that we failed to evaluate an expression that other expressions; /// directly depend on, and determine if we should keep evaluating. This; /// should only be called if we actually intend to keep evaluating.; ///; /// Call noteSideEffect() instead if we may be able to ignore the value that; /// we failed to evaluate, e.g. if we failed to evaluate Foo() in:; ///; /// (Foo(), 1) // use noteSideEffect; /// (Foo() || true) // use noteSideEffect; /// Foo() + 1 // use noteFailure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:88,depend,depend,88,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['depend'],['depend']
Integrability,/// Notifies the target JITDylib (and any pending queries on that JITDylib); /// that all symbols covered by this MaterializationResponsibility instance; /// have been emitted.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:314,depend,dependency,314,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,3,"['depend', 'wrap']","['dependencies', 'dependency', 'wrapped']"
Integrability,"/// Notifies the target JITDylib that the given symbols have been resolved.; /// This will update the given symbols' addresses in the JITDylib, and notify; /// any pending queries on the given symbols of their resolution. The given; /// symbols must be ones covered by this MaterializationResponsibility; /// instance. Individual calls to this method may resolve a subset of the; /// symbols, but all symbols must have been resolved prior to calling emit.; ///; /// This method will return an error if any symbols being resolved have been; /// moved to the error state due to the failure of a dependency. If this; /// method returns an error then clients should log it and call; /// failMaterialize. If no dependencies have been registered for the; /// symbols covered by this MaterializationResponsibility then this method; /// is guaranteed to return Error::success() and can be wrapped with cantFail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:593,depend,dependency,593,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,3,"['depend', 'wrap']","['dependencies', 'dependency', 'wrapped']"
Integrability,/// Notify the class that member has been added.; ///; /// This routine helps maintain information about the class based on which; /// members have been added. It will be invoked by DeclContext::addDecl(); /// whenever a member is added to this record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:64,rout,routine,64,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['rout'],['routine']
Integrability,"/// Notify the class that this destructor is now selected.; ///; /// Important properties of the class depend on destructor properties. Since; /// C++20, it is possible to have multiple destructor declarations in a class; /// out of which one will be selected at the end.; /// This is called separately from addedMember because it has to be deferred; /// to the completion of the class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:103,depend,depend,103,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['depend'],['depend']
Integrability,/// Notify this strategy that all roots have been released (including those; /// that depend on EntrySU or ExitSU).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:86,depend,depend,86,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['depend'],['depend']
Integrability,"/// Number of loops, associated with the depend clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:41,depend,depend,41,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['depend']
Integrability,"/// Number of points used by current integration rule. \see SetNPoints().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h:37,integrat,integration,37,math/mathcore/inc/Math/IntegratorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h,1,['integrat'],['integration']
Integrability,/// Number of spaces to indent when word-wrapping.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp:41,wrap,wrapping,41,interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,1,['wrap'],['wrapping']
Integrability,"/// Number values can store both int64s and doubles at full precision,; /// depending on what they were constructed/parsed from.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:76,depend,depending,76,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['depend'],['depending']
Integrability,"/// OMPD_loop is mapped to OMPD_for, OMPD_distribute or OMPD_simd depending; /// on the parameter of the bind clause. In the methods for the; /// mapped directives, check the parameters of the lastprivate clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:66,depend,depending,66,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['depending']
Integrability,"/// OUTCHAIN = ATOMIC_FENCE(INCHAIN, ordering, scope); /// This corresponds to the fence instruction. It takes an input chain, and; /// two integer constants: an AtomicOrdering and a SynchronizationScope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:183,Synchroniz,SynchronizationScope,183,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['Synchroniz'],['SynchronizationScope']
Integrability,"/// ObjCCategoryDecl - Represents a category declaration. A category allows; /// you to add methods to an existing class (without subclassing or modifying; /// the original class interface or implementation:-). Categories don't allow; /// you to add instance data. The following example adds ""myMethod"" to all; /// NSView's within a process:; ///; /// \@interface NSView (MyViewMethods); /// - myMethod;; /// \@end; ///; /// Categories also allow you to split the implementation of a class across; /// several files (a feature more naturally supported in C++).; ///; /// Categories were originally inspired by dynamic languages such as Common; /// Lisp and Smalltalk. More traditional class-based languages (C++, Java); /// don't support this level of dynamism, which is both powerful and dangerous.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:179,interface,interface,179,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['interface'],['interface']
Integrability,"/// ObjCCategoryImplDecl - An object of this class encapsulates a category; /// \@implementation declaration. If a category class has declaration of a; /// property, its implementation must be specified in the category's; /// \@implementation declaration. Example:; /// \@interface I \@end; /// \@interface I(CATEGORY); /// \@property int p1, d1;; /// \@end; /// \@implementation I(CATEGORY); /// \@dynamic p1,d1;; /// \@end; ///; /// ObjCCategoryImplDecl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:272,interface,interface,272,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['interface'],['interface']
Integrability,"/// ObjCImplementationDecl - Represents a class definition - this is where; /// method definitions are specified. For example:; ///; /// @code; /// \@implementation MyClass; /// - (void)myMethod { /* do something */ }; /// \@end; /// @endcode; ///; /// In a non-fragile runtime, instance variables can appear in the class; /// interface, class extensions (nameless categories), and in the implementation; /// itself, as well as being synthesized as backing storage for properties.; ///; /// In a fragile runtime, instance variables are specified in the class; /// interface, \em not in the implementation. Nevertheless (for legacy reasons),; /// we allow instance variables to be specified in the implementation. When; /// specified, they need to be \em identical to the interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:327,interface,interface,327,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,3,['interface'],['interface']
Integrability,"/// ObjCIvarDecl - Represents an ObjC instance variable. In general, ObjC; /// instance variables are identical to C. The only exception is Objective-C; /// supports C++ style access control. For example:; ///; /// \@interface IvarExample : NSObject; /// {; /// id defaultToProtected;; /// \@public:; /// id canBePublic; // same as C++.; /// \@protected:; /// id canBeProtected; // same as C++.; /// \@package:; /// id canBePackage; // framework visibility (not available in C++).; /// }; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:217,interface,interface,217,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,"/// ObjCMethodDecl - Represents an instance or class method declaration.; /// ObjC methods can be declared within 4 contexts: class interfaces,; /// categories, protocols, and class implementations. While C++ member; /// functions leverage C syntax, Objective-C method syntax is modeled after; /// Smalltalk (using colons to specify argument types/expressions).; /// Here are some brief examples:; ///; /// Setter/getter instance methods:; /// - (void)setMenu:(NSMenu *)menu;; /// - (NSMenu *)menu;; ///; /// Instance method that takes 2 NSView arguments:; /// - (void)replaceSubview:(NSView *)oldView with:(NSView *)newView;; ///; /// Getter class method:; /// + (NSMenu *)defaultMenu;; ///; /// A selector represents a unique name for a method. The selector names for; /// the above methods are setMenu:, menu, replaceSubview:with:, and defaultMenu.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:132,interface,interfaces,132,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,"['interface', 'protocol']","['interfaces', 'protocols']"
Integrability,/// ObjCObjectAdoptsQTypeProtocols - Checks that protocols in IC's; /// protocol list adopt all protocols in QT's qualified-id protocol; /// list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:49,protocol,protocols,49,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,4,['protocol'],"['protocol', 'protocols']"
Integrability,"/// ObjCProtocolExpr used for protocol expression in Objective-C.; ///; /// This is used as: \@protocol(foo), as in:; /// \code; /// [obj conformsToProtocol:@protocol(foo)]; /// \endcode; ///; /// The return type is ""Protocol*"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:30,protocol,protocol,30,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,4,"['Protocol', 'protocol']","['Protocol', 'protocol']"
Integrability,/// Object streamers require the integrated assembler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:33,integrat,integrated,33,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,1,['integrat'],['integrated']
Integrability,/// Objective C \@protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:18,protocol,protocol,18,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['protocol'],['protocol']
Integrability,/// Offsets of the 32-bit fields of bitstream wrapper header.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodeEnums.h:46,wrap,wrapper,46,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodeEnums.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodeEnums.h,1,['wrap'],['wrapper']
Integrability,/// Offsets to dependant clobber loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:15,depend,dependant,15,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependant']
Integrability,"/// On targets that support TOC entries, return a section for the entry given; /// the symbol it refers to.; /// TODO: Implement this interface for existing ELF targets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:134,interface,interface,134,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,1,['interface'],['interface']
Integrability,/// Only allow verbose messages if we know we're filtering by hotness; /// (BFI is only set in this case).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h:23,message,messages,23,interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h,2,['message'],['messages']
Integrability,/// Only wrap braces after a multi-line control statement.; /// \code; /// if (foo && bar &&; /// baz); /// {; /// quux();; /// }; /// while (foo || bar) {; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:9,wrap,wrap,9,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrap']
Integrability,/// Opaque context ID used to refer to an Objective-C class or protocol or a C++; /// namespace.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:63,protocol,protocol,63,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['protocol'],['protocol']
Integrability,"/// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:152,Synchroniz,Synchronizes,152,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['Synchroniz'],['Synchronizes']
Integrability,"/// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:179,Synchroniz,Synchronizes,179,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['Synchroniz'],['Synchronizes']
Integrability,"/// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:164,Synchroniz,Synchronizes,164,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['Synchroniz'],['Synchronizes']
Integrability,/// OpenMP attributes for 'depend' clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h:27,depend,depend,27,interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,1,['depend'],['depend']
Integrability,/// OpenMP dependence types for 'doacross' clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h:11,depend,dependence,11,interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,1,['depend'],['dependence']
Integrability,/// Operand \p Op is used on \p N sub-instructions. Fill \p Ops with \p N SrcOps; /// made from \p Op depending on operand type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:102,depend,depending,102,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['depend'],['depending']
Integrability,/// OptSpecifier - Wrapper class for abstracting references to option IDs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptSpecifier.h:19,Wrap,Wrapper,19,interpreter/llvm-project/llvm/include/llvm/Option/OptSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptSpecifier.h,1,['Wrap'],['Wrapper']
Integrability,/// Option class for critical edge splitting.; ///; /// This provides a builder interface for overriding the default options used; /// during critical edge splitting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:80,interface,interface,80,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,1,['interface'],['interface']
Integrability,"/// Option to choose whether to track sentinels.; ///; /// This option affects the ABI for the nodes. When not specified explicitly,; /// the ABI depends on LLVM_ENABLE_ABI_BREAKING_CHECKS. Specify explicitly to; /// enable \a ilist_node::isSentinel().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h:146,depend,depends,146,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,1,['depend'],['depends']
Integrability,/// Options controlling dependency output.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:24,depend,dependency,24,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,1,['depend'],['dependency']
Integrability,/// Options that control the dependency output generation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:29,depend,dependency,29,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependency']
Integrability,"/// Original declaration, used to emit the error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:49,message,message,49,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,1,['message'],['message']
Integrability,"/// Our algorithm for walking (and trying to optimize) clobbers, all wrapped up; /// in one class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:69,wrap,wrapped,69,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['wrap'],['wrapped']
Integrability,/// Output dependency latency of a pair of defs of the same register.; ///; /// This is typically one cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:11,depend,dependency,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,1,['depend'],['dependency']
Integrability,"/// Overridden from RooAbsMinimizerFcn to include gradient strategy synchronization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.h:68,synchroniz,synchronization,68,roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.h,1,['synchroniz'],['synchronization']
Integrability,/// Override handleDiagnostics to provide custom implementation.; /// Return true if it handles diagnostics reporting properly otherwise; /// return false to make LLVMContext::diagnose() to print the message; /// with a prefix based on the severity.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h:200,message,message,200,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticHandler.h,1,['message'],['message']
Integrability,"/// Override to return false to tell LLVM no stub space will be needed.; /// This requires some guarantees depending on architecuture, but when; /// you know what you are doing it saves allocated space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:107,depend,depending,107,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,1,['depend'],['depending']
Integrability,/// PDBContext; /// This data structure is the top level entity that deals with PDB debug; /// information parsing. This data structure exists only when there is a; /// need for a transparent interface to different debug information formats; /// (e.g. PDB and DWARF). More control and power over the debug information; /// access can be had by using the PDB interfaces directly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h:192,interface,interface,192,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h,2,['interface'],"['interface', 'interfaces']"
Integrability,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:284,depend,depending,284,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,1,['depend'],['depending']
Integrability,/// Parse LLVM Assembly for summary index from a MemoryBuffer.; ///; /// \param F The MemoryBuffer containing assembly with summary; /// \param Err Error result info.; ///; /// parseSummaryIndexAssemblyFile is a wrapper around this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:212,wrap,wrapper,212,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['wrap'],['wrapper']
Integrability,/// Parse LLVM Assembly including the summary index from a MemoryBuffer.; ///; /// \param F The MemoryBuffer containing assembly with summary; /// \param Err Error result info.; /// \param Slots The optional slot mapping that will be initialized during; /// parsing.; ///; /// parseAssemblyFileWithIndex is a wrapper around this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:309,wrap,wrapper,309,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['wrap'],['wrapper']
Integrability,"/// Parse NSW/NUW flags from add/sub/mul IR binary operation \p Op into; /// SCEV no-wrap flags, and deduce flag[s] that aren't known yet.; /// Does not mutate the original instruction. Returns std::nullopt if it could; /// not deduce more precise flags than the instruction already has, otherwise; /// returns proven flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:85,wrap,wrap,85,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['wrap'],['wrap']
Integrability,"/// Parse Objective-C type arguments and protocol qualifiers, extending the; /// current type with the parsed result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:41,protocol,protocol,41,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['protocol'],['protocol']
Integrability,"/// Parse Objective-C type arguments or protocol qualifiers.; ///; /// objc-type-arguments:; /// '<' type-name '...'[opt] (',' type-name '...'[opt])* '>'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:40,protocol,protocol,40,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['protocol'],['protocol']
Integrability,"/// Parse a C++ pseudo-destructor expression after the base,; /// . or -> operator, and nested-name-specifier have already been; /// parsed. We're handling this fragment of the grammar:; ///; /// postfix-expression: [C++2a expr.post]; /// postfix-expression . template[opt] id-expression; /// postfix-expression -> template[opt] id-expression; ///; /// id-expression:; /// qualified-id; /// unqualified-id; ///; /// qualified-id:; /// nested-name-specifier template[opt] unqualified-id; ///; /// nested-name-specifier:; /// type-name ::; /// decltype-specifier :: FIXME: not implemented, but probably only; /// allowed in C++ grammar by accident; /// nested-name-specifier identifier ::; /// nested-name-specifier template[opt] simple-template-id ::; /// [...]; ///; /// unqualified-id:; /// ~ type-name; /// ~ decltype-specifier; /// [...]; ///; /// ... where the all but the last component of the nested-name-specifier; /// has already been parsed, and the base expression is not of a non-dependent; /// class type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:991,depend,dependent,991,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['depend'],['dependent']
Integrability,"/// Parse a protocol qualifier type such as '<NSCopying>', which is; /// an anachronistic way of writing 'id<NSCopying>'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:12,protocol,protocol,12,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['protocol'],['protocol']
Integrability,"/// Parse a textual alias analysis pipeline into the provided AA manager.; ///; /// The format of the textual AA pipeline is a comma separated list of AA; /// pass names:; ///; /// basic-aa,globals-aa,...; ///; /// The AA manager is set up such that the provided alias analyses are tried; /// in the order specified. See the \c AAManaager documentation for details; /// about the logic used. This routine just provides the textual mapping; /// between AA names and the analyses to register with the manager.; ///; /// Returns false if the text cannot be parsed cleanly. The specific state of; /// the \p AA manager is unspecified if such an error is encountered and this; /// returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:397,rout,routine,397,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['rout'],['routine']
Integrability,"/// Parse an Objective-C type parameter list, if present, or capture; /// the locations of the protocol identifiers for a list of protocol; /// references.; ///; /// objc-type-parameter-list:; /// '<' objc-type-parameter (',' objc-type-parameter)* '>'; ///; /// objc-type-parameter:; /// objc-type-parameter-variance? identifier objc-type-parameter-bound[opt]; ///; /// objc-type-parameter-bound:; /// ':' type-name; ///; /// objc-type-parameter-variance:; /// '__covariant'; /// '__contravariant'; ///; /// \param lAngleLoc The location of the starting '<'.; ///; /// \param protocolIdents Will capture the list of identifiers, if the; /// angle brackets contain a list of protocol references rather than a; /// type parameter list.; ///; /// \param rAngleLoc The location of the ending '>'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:95,protocol,protocol,95,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,4,['protocol'],"['protocol', 'protocolIdents']"
Integrability,"/// Parse an assignment expression where part of an Objective-C message; /// send has already been parsed.; ///; /// In this case \p LBracLoc indicates the location of the '[' of the message; /// send, and either \p ReceiverName or \p ReceiverExpr is non-null indicating; /// the receiver of the message.; ///; /// Since this handles full assignment-expression's, it handles postfix; /// expressions and other binary operators for these expressions as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:64,message,message,64,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,3,['message'],['message']
Integrability,"/// Parse an list of arguments into an InputArgList.; ///; /// The resulting InputArgList will reference the strings in [\p ArgBegin,; /// \p ArgEnd), and their lifetime should extend past that of the returned; /// InputArgList.; ///; /// The only error that can occur in this routine is if an argument is; /// missing values; in this case \p MissingArgCount will be non-zero.; ///; /// \param MissingArgIndex - On error, the index of the option which could; /// not be parsed.; /// \param MissingArgCount - On error, the number of missing options.; /// \param VisibilityMask - Only include options with any of these; /// visibility flags set.; /// \return An InputArgList; on error this will contain all the options; /// which could be parsed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:277,rout,routine,277,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,1,['rout'],['routine']
Integrability,"/// Parse an operator-function-id or conversion-function-id as part; /// of a C++ unqualified-id.; ///; /// This routine is responsible only for parsing the operator-function-id or; /// conversion-function-id; it does not handle template arguments in any way.; ///; /// \code; /// operator-function-id: [C++ 13.5]; /// 'operator' operator; ///; /// operator: one of; /// new delete new[] delete[]; /// + - * / % ^ & | ~; /// ! = < > += -= *= /= %=; /// ^= &= |= << >> >>= <<= == !=; /// <= >= && || ++ -- , ->* ->; /// () [] <=>; ///; /// conversion-function-id: [C++ 12.3.2]; /// operator conversion-type-id; ///; /// conversion-type-id:; /// type-specifier-seq conversion-declarator[opt]; ///; /// conversion-declarator:; /// ptr-operator conversion-declarator[opt]; /// \endcode; ///; /// \param SS The nested-name-specifier that preceded this unqualified-id. If; /// non-empty, then we are parsing the unqualified-id of a qualified-id.; ///; /// \param EnteringContext whether we are entering the scope of the; /// nested-name-specifier.; ///; /// \param ObjectType if this unqualified-id occurs within a member access; /// expression, the type of the base object whose member is being accessed.; ///; /// \param Result on a successful parse, contains the parsed unqualified-id.; ///; /// \returns true if parsing fails, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:113,rout,routine,113,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['rout'],['routine']
Integrability,/// Parse and get an InterfaceFile that represents the full; /// library.; ///; /// \param InputBuffer Buffer holding contents of TAPI text file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIReader.h:21,Interface,InterfaceFile,21,interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIReader.h,1,['Interface'],['InterfaceFile']
Integrability,"/// Parse either Objective-C type arguments or protocol qualifiers; if the; /// former, also parse protocol qualifiers afterward.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:47,protocol,protocol,47,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,2,['protocol'],['protocol']
Integrability,/// Parse expressions that start with an identifier.; ///; /// This function can parse named values and matchers.; /// In case of failure it will try to determine the user's intent to give; /// an appropriate error message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:215,message,message,215,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,1,['message'],['message']
Integrability,"/// Parse global scope or nested-name-specifier if present.; ///; /// Parses a C++ global scope specifier ('::') or nested-name-specifier (which; /// may be preceded by '::'). Note that this routine will not parse ::new or; /// ::delete; it will just leave them in the token stream.; ///; /// '::'[opt] nested-name-specifier; /// '::'; ///; /// nested-name-specifier:; /// type-name '::'; /// namespace-name '::'; /// nested-name-specifier identifier '::'; /// nested-name-specifier 'template'[opt] simple-template-id '::'; ///; ///; /// \param SS the scope specifier that will be set to the parsed; /// nested-name-specifier (or empty); ///; /// \param ObjectType if this nested-name-specifier is being parsed following; /// the ""."" or ""->"" of a member access expression, this parameter provides the; /// type of the object whose members are being accessed.; ///; /// \param ObjectHadErrors if this unqualified-id occurs within a member access; /// expression, indicates whether the original subexpressions had any errors.; /// When true, diagnostics for missing 'template' keyword will be supressed.; ///; /// \param EnteringContext whether we will be entering into the context of; /// the nested-name-specifier after parsing it.; ///; /// \param MayBePseudoDestructor When non-NULL, points to a flag that; /// indicates whether this nested-name-specifier may be part of a; /// pseudo-destructor name. In this case, the flag will be set false; /// if we don't actually end up parsing a destructor name. Moreover,; /// if we do end up determining that we are parsing a destructor name,; /// the last component of the nested-name-specifier is not parsed as; /// part of the scope specifier.; ///; /// \param IsTypename If \c true, this nested-name-specifier is known to be; /// part of a type name. This is used to improve error recovery.; ///; /// \param LastII When non-NULL, points to an IdentifierInfo* that will be; /// filled in with the leading identifier in the last component of the; /// nest",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:191,rout,routine,191,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['rout'],['routine']
Integrability,"/// Parse the block as a dependent block, which may be used in; /// some template instantiations but not others.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:25,depend,dependent,25,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['depend'],['dependent']
Integrability,"/// Parse the contents of the ""availability"" attribute.; ///; /// availability-attribute:; /// 'availability' '(' platform ',' opt-strict version-arg-list,; /// opt-replacement, opt-message')'; ///; /// platform:; /// identifier; ///; /// opt-strict:; /// 'strict' ','; ///; /// version-arg-list:; /// version-arg; /// version-arg ',' version-arg-list; ///; /// version-arg:; /// 'introduced' '=' version; /// 'deprecated' '=' version; /// 'obsoleted' = version; /// 'unavailable'; /// opt-replacement:; /// 'replacement' '=' <string>; /// opt-message:; /// 'message' '=' <string>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:182,message,message,182,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,3,['message'],['message']
Integrability,"/// Parse the first angle-bracket-delimited clause for an; /// Objective-C object or object pointer type, which may be either; /// type arguments or protocol qualifiers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:149,protocol,protocol,149,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['protocol'],['protocol']
Integrability,"/// Parse the receiver of an Objective-C++ message send.; ///; /// This routine parses the receiver of a message send in; /// Objective-C++ either as a type or as an expression. Note that this; /// routine must not be called to parse a send to 'super', since it; /// has no way to return such a result.; ///; /// \param IsExpr Whether the receiver was parsed as an expression.; ///; /// \param TypeOrExpr If the receiver was parsed as an expression (\c; /// IsExpr is true), the parsed expression. If the receiver was parsed; /// as a type (\c IsExpr is false), the parsed type.; ///; /// \returns True if an error occurred during parsing or semantic; /// analysis, in which case the arguments do not have valid; /// values. Otherwise, returns false for a successful parse.; ///; /// objc-receiver: [C++]; /// 'super' [not parsed here]; /// expression; /// simple-type-specifier; /// typename-specifier",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:43,message,message,43,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,4,"['message', 'rout']","['message', 'routine']"
Integrability,"/// Parse the record that corresponds to a LangOptions data; /// structure.; ///; /// This routine parses the language options from the AST file and then gives; /// them to the AST listener if one is set.; ///; /// \returns true if the listener deems the file unacceptable, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:91,rout,routine,91,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['rout'],['routine']
Integrability,"/// Parse the remainder of an Objective-C message following the; /// '[' objc-receiver.; ///; /// This routine handles sends to super, class messages (sent to a; /// class name), and instance messages (sent to an object), and the; /// target is represented by \p SuperLoc, \p ReceiverType, or \p; /// ReceiverExpr, respectively. Only one of these parameters may have; /// a valid value.; ///; /// \param LBracLoc The location of the opening '['.; ///; /// \param SuperLoc If this is a send to 'super', the location of the; /// 'super' keyword that indicates a send to the superclass.; ///; /// \param ReceiverType If this is a class message, the type of the; /// class we are sending a message to.; ///; /// \param ReceiverExpr If this is an instance message, the expression; /// used to compute the receiver object.; ///; /// objc-message-args:; /// objc-selector; /// objc-keywordarg-list; ///; /// objc-keywordarg-list:; /// objc-keywordarg; /// objc-keywordarg-list objc-keywordarg; ///; /// objc-keywordarg:; /// selector-name[opt] ':' objc-keywordexpr; ///; /// objc-keywordexpr:; /// nonempty-expr-list; ///; /// nonempty-expr-list:; /// assignment-expression; /// nonempty-expr-list , assignment-expression; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:42,message,message,42,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,8,"['message', 'rout']","['message', 'message-args', 'messages', 'routine']"
Integrability,"/// ParseAssert - Parse an assert statement.; ///; /// Assert ::= ASSERT condition , message ;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:85,message,message,85,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['message'],['message']
Integrability,"/// ParseBaseTypeSpecifier - Parse a C++ base-type-specifier which is either a; /// class name or decltype-specifier. Note that we only check that the result; /// names a type; semantic analysis will need to verify that the type names a; /// class. The result is either a type or null, depending on whether a type; /// name was found.; ///; /// base-type-specifier: [C++11 class.derived]; /// class-or-decltype; /// class-or-decltype: [C++11 class.derived]; /// nested-name-specifier[opt] class-name; /// decltype-specifier; /// class-name: [C++ class.name]; /// identifier; /// simple-template-id; ///; /// In C++98, instead of base-type-specifier, we have:; ///; /// ::[opt] nested-name-specifier[opt] class-name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:286,depend,depending,286,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['depend'],['depending']
Integrability,/// ParseDirectiveSecureLogUnique; /// ::= .secure_log_unique ... message ...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:66,message,message,66,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,1,['message'],['message']
Integrability,"/// ParseExternalDeclaration:; ///; /// The `Attrs` that are passed in are C++11 attributes and appertain to the; /// declaration.; ///; /// external-declaration: [C99 6.9], declaration: [C++ dcl.dcl]; /// function-definition; /// declaration; /// [GNU] asm-definition; /// [GNU] __extension__ external-declaration; /// [OBJC] objc-class-definition; /// [OBJC] objc-class-declaration; /// [OBJC] objc-alias-declaration; /// [OBJC] objc-protocol-definition; /// [OBJC] objc-method-definition; /// [OBJC] @end; /// [C++] linkage-specification; /// [GNU] asm-definition:; /// simple-asm-expr ';'; /// [C++11] empty-declaration; /// [C++11] attribute-declaration; ///; /// [C++11] empty-declaration:; /// ';'; ///; /// [C++0x/GNU] 'extern' 'template' declaration; ///; /// [C++20] module-import-declaration; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:436,protocol,protocol-definition,436,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,1,['protocol'],['protocol-definition']
Integrability,"/// ParseFile - Main entrypoint for parsing a tblgen file. These parser; /// routines return true on error, or false on success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:77,rout,routines,77,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,1,['rout'],['routines']
Integrability,"/// ParseInitializerWithPotentialDesignator - Parse the 'initializer' production; /// checking to see if the token stream starts with a designator.; ///; /// C99:; ///; /// designation:; /// designator-list '='; /// [GNU] array-designator; /// [GNU] identifier ':'; ///; /// designator-list:; /// designator; /// designator-list designator; ///; /// designator:; /// array-designator; /// '.' identifier; ///; /// array-designator:; /// '[' constant-expression ']'; /// [GNU] '[' constant-expression '...' constant-expression ']'; ///; /// C++20:; ///; /// designated-initializer-list:; /// designated-initializer-clause; /// designated-initializer-list ',' designated-initializer-clause; ///; /// designated-initializer-clause:; /// designator brace-or-equal-initializer; ///; /// designator:; /// '.' identifier; ///; /// We allow the C99 syntax extensions in C++20, but do not allow the C++20; /// extension (a braced-init-list after the designator with no '=') in C99.; ///; /// NOTE: [OBC] allows '[ objc-receiver objc-message-args ]' as an; /// initializer (because it is an expression). We need to consider this case; /// when parsing array designators.; ///; /// \p CodeCompleteCB is called with Designation parsed so far.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp:1024,message,message-args,1024,interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseInit.cpp,1,['message'],['message-args']
Integrability,"/// ParseMicrosoftAsmStatement. When -fms-extensions/-fasm-blocks is enabled,; /// this routine is called to collect the tokens for an MS asm statement.; ///; /// [MS] ms-asm-statement:; /// ms-asm-block; /// ms-asm-block ms-asm-statement; ///; /// [MS] ms-asm-block:; /// '__asm' ms-asm-line '\n'; /// '__asm' '{' ms-asm-instruction-block[opt] '}' ';'[opt]; ///; /// [MS] ms-asm-instruction-block; /// ms-asm-line; /// ms-asm-line '\n' ms-asm-instruction-block; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp:88,rout,routine,88,interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,1,['rout'],['routine']
Integrability,/// ParseObjCAtDirectives - Handle parts of the external-declaration production:; /// external-declaration: [C99 6.9]; /// [OBJC] objc-class-definition; /// [OBJC] objc-class-declaration; /// [OBJC] objc-alias-declaration; /// [OBJC] objc-protocol-definition; /// [OBJC] objc-method-definition; /// [OBJC] '@' 'end',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:239,protocol,protocol-definition,239,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['protocol'],['protocol-definition']
Integrability,/// ParseObjCProtocolExpression - Build protocol expression for \@protocol,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,protocol,protocol,40,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['protocol'],['protocol']
Integrability,/// ParseObjCTypeQualifierList - This routine parses the objective-c's type; /// qualifier list and builds their bitmask representation in the input; /// argument.; ///; /// objc-type-qualifiers:; /// objc-type-qualifier; /// objc-type-qualifiers objc-type-qualifier; ///; /// objc-type-qualifier:; /// 'in'; /// 'out'; /// 'inout'; /// 'oneway'; /// 'bycopy'; /// 'byref'; /// 'nonnull'; /// 'nullable'; /// 'null_unspecified'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:38,rout,routine,38,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['rout'],['routine']
Integrability,"/// ParseParenExprOrCondition:; /// [C ] '(' expression ')'; /// [C++] '(' condition ')'; /// [C++1z] '(' init-statement[opt] condition ')'; ///; /// This function parses and performs error recovery on the specified condition; /// or expression (depending on whether we're in C++ or C mode). This function; /// goes out of its way to recover well. It returns true if there was a parser; /// error (the right paren couldn't be found), which indicates that the caller; /// should try to recover harder. It returns false if the condition is; /// successfully parsed. Note that a successful parse can still have semantic; /// errors in the condition.; /// Additionally, it will assign the location of the outer-most '(' and ')',; /// to LParenLoc and RParenLoc, respectively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp:246,depend,depending,246,interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,1,['depend'],['depending']
Integrability,"/// ParseParenExpression - This parses the unit that starts with a '(' token,; /// based on what is allowed by ExprType. The actual thing parsed is returned; /// in ExprType. If stopIfCastExpr is true, it will only return the parsed type,; /// not the parsed cast-expression.; ///; /// \verbatim; /// primary-expression: [C99 6.5.1]; /// '(' expression ')'; /// [GNU] '(' compound-statement ')' (if !ParenExprOnly); /// postfix-expression: [C99 6.5.2]; /// '(' type-name ')' '{' initializer-list '}'; /// '(' type-name ')' '{' initializer-list ',' '}'; /// cast-expression: [C99 6.5.4]; /// '(' type-name ')' cast-expression; /// [ARC] bridged-cast-expression; /// [ARC] bridged-cast-expression:; /// (__bridge type-name) cast-expression; /// (__bridge_transfer type-name) cast-expression; /// (__bridge_retained type-name) cast-expression; /// fold-expression: [C++1z]; /// '(' cast-expression fold-operator '...' ')'; /// '(' '...' fold-operator cast-expression ')'; /// '(' cast-expression fold-operator '...'; /// fold-operator cast-expression ')'; /// [OPENMP] Array shaping operation; /// '(' '[' expression ']' { '[' expression ']' } cast-expression; /// \endverbatim",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:636,bridg,bridged-cast-expression,636,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,2,['bridg'],['bridged-cast-expression']
Integrability,/// ParseStatementOrDeclaration - Read 'statement' or 'declaration'.; /// StatementOrDeclaration:; /// statement; /// declaration; ///; /// statement:; /// labeled-statement; /// compound-statement; /// expression-statement; /// selection-statement; /// iteration-statement; /// jump-statement; /// [C++] declaration-statement; /// [C++] try-block; /// [MS] seh-try-block; /// [OBC] objc-throw-statement; /// [OBC] objc-try-catch-statement; /// [OBC] objc-synchronized-statement; /// [GNU] asm-statement; /// [OMP] openmp-construct [TODO]; ///; /// labeled-statement:; /// identifier ':' statement; /// 'case' constant-expression ':' statement; /// 'default' ':' statement; ///; /// selection-statement:; /// if-statement; /// switch-statement; ///; /// iteration-statement:; /// while-statement; /// do-statement; /// for-statement; ///; /// expression-statement:; /// expression[opt] ';'; ///; /// jump-statement:; /// 'goto' identifier ';'; /// 'continue' ';'; /// 'break' ';'; /// 'return' expression[opt] ';'; /// [GNU] 'goto' '*' expression ';'; ///; /// [OBC] objc-throw-statement:; /// [OBC] '@' 'throw' expression ';'; /// [OBC] '@' 'throw' ';'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp:456,synchroniz,synchronized-statement,456,interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,1,['synchroniz'],['synchronized-statement']
Integrability,"/// Parses \p Expr for use of a numeric operand at line \p LineNumber, or; /// before input is parsed if \p LineNumber is None. Accepts literal values,; /// numeric variables and function calls, depending on the value of \p AO.; /// \p MaybeInvalidConstraint indicates whether the text being parsed could; /// be an invalid constraint. \p Context points to the class instance holding; /// the live string and numeric variables. \returns the class representing; /// that operand in the AST of the expression or an error holding a; /// diagnostic against \p SM otherwise. If \p Expr starts with a ""("" this; /// function will attempt to parse a parenthesized expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:195,depend,depending,195,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['depend'],['depending']
Integrability,"/// Parses a template-id that after the template name has; /// already been parsed.; ///; /// This routine takes care of parsing the enclosed template argument; /// list ('<' template-parameter-list [opt] '>') and placing the; /// results into a form that can be transferred to semantic analysis.; ///; /// \param ConsumeLastToken if true, then we will consume the last; /// token that forms the template-id. Otherwise, we will leave the; /// last token in the stream (e.g., so that it can be replaced with an; /// annotation token).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp:99,rout,routine,99,interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,1,['rout'],['routine']
Integrability,/// Parses one or more object file relocations (some object files use; /// relocation pairs) and stores it to Relocations or SymbolRelocations; /// (this depends on the object file type).; /// \return Iterator to the next relocation that needs to be parsed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h:154,depend,depends,154,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,1,['depend'],['depends']
Integrability,"/// Parses the special case list entries from files. On failure, returns; /// 0 and writes an error message to string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:100,message,message,100,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,1,['message'],['message']
Integrability,"/// Parses the special case list from a memory buffer. On failure, returns; /// 0 and writes an error message to string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:102,message,message,102,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,1,['message'],['message']
Integrability,/// Parts of a decomposed MSGuidDecl. Factored out to avoid unnecessary; /// dependencies on DeclCXX.h.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:77,depend,dependencies,77,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['depend'],['dependencies']
Integrability,/// PassManagerBase - An abstract interface to allow code to add passes to; /// a pass manager without having to hard-code what kind of pass manager; /// it is.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:34,interface,interface,34,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,1,['interface'],['interface']
Integrability,/// PassManagerImpl_New is the actual class. PassManager is just the; /// wraper to publish simple pass manager interface,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:74,wrap,wraper,74,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,2,"['interface', 'wrap']","['interface', 'wraper']"
Integrability,"/// PassRegistry - This class manages the registration and intitialization of; /// the pass subsystem as application startup, and assists the PassManager; /// in resolving pass dependencies.; /// NOTE: PassRegistry is NOT thread-safe. If you want to use LLVM on multiple; /// threads simultaneously, you will need to use a separate PassRegistry on; /// each thread.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h:177,depend,dependencies,177,interpreter/llvm-project/llvm/include/llvm/PassRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h,1,['depend'],['dependencies']
Integrability,/// Payload interface to be specialized by each matcher type.; ///; /// It follows a similar interface as VariantMatcher itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:12,interface,interface,12,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,2,['interface'],['interface']
Integrability,/// Per-basic block information that doesn't depend on the trace through the; /// block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:45,depend,depend,45,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,1,['depend'],['depend']
Integrability,"/// Per-slot storage for varied column values (for one or multiple columns depending on IsSingleColumn).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RVariation.hxx:75,depend,depending,75,tree/dataframe/inc/ROOT/RDF/RVariation.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RVariation.hxx,1,['depend'],['depending']
Integrability,"/// PerThreadAllocator is used in conjunction with ThreadPoolExecutor to allow; /// per-thread allocations. It wraps a possibly thread-unsafe allocator,; /// e.g. BumpPtrAllocator. PerThreadAllocator must be used with only main thread; /// or threads created by ThreadPoolExecutor, as it utilizes getThreadIndex,; /// which is set by ThreadPoolExecutor. To work properly, ThreadPoolExecutor; /// should be initialized before PerThreadAllocator is created.; /// TODO: The same approach might be implemented for ThreadPool.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h:111,wrap,wraps,111,interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h,1,['wrap'],['wraps']
Integrability,/// Perform a dependence check and return if @p FC0 and @p FC1 can be fused.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:14,depend,dependence,14,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['depend'],['dependence']
Integrability,"/// Perform a dependency query based on pointer/pointeesize starting at the end; /// of StartBB.; ///; /// Add any clobber/def results to the results vector and keep track of which; /// blocks are visited in 'Visited'.; ///; /// This has special behavior for the first block queries (when SkipFirstBlock; /// is true). In this special case, it ignores the contents of the specified; /// block and starts returning dependence info for its predecessors.; ///; /// This function returns true on success, or false to indicate that it could; /// not compute dependence information for some reason. This should be treated; /// as a clobber dependence on the first instruction in the predecessor block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp:14,depend,dependency,14,interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,4,['depend'],"['dependence', 'dependency']"
Integrability,"/// Perform a full dependency query for an access to the QueryInst's; /// specified memory location, returning the set of instructions that either; /// define or clobber the value.; ///; /// Warning: For a volatile query instruction, the dependencies will be; /// accurate, and thus usable for reordering, but it is never legal to; /// remove the query instruction.; ///; /// This method assumes the pointer has a ""NonLocal"" dependency within; /// QueryInst's parent basic block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:19,depend,dependency,19,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,3,['depend'],"['dependencies', 'dependency']"
Integrability,"/// Perform a full dependency query for the specified call, returning the set; /// of blocks that the value is potentially live across.; ///; /// The returned set of results will include a ""NonLocal"" result for all; /// blocks where the value is live across.; ///; /// This method assumes the instruction returns a ""NonLocal"" dependency; /// within its own block.; ///; /// This returns a reference to an internal data structure that may be; /// invalidated on the next non-local query or when an instruction is; /// removed. Clients must copy this data if they want it around longer than; /// that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:19,depend,dependency,19,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,2,['depend'],['dependency']
Integrability,"/// Perform adjustment on the parameter type of a function.; ///; /// This routine adjusts the given parameter type @p T to the actual; /// parameter type used by semantic analysis (C99 6.7.5.3p[7,8],; /// C++ [dcl.fct]p3). The adjusted parameter type is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:75,rout,routine,75,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['rout'],['routine']
Integrability,"/// Perform initialization based on the user configured; /// set of features (e.g., +sse4).; ///; /// The list is guaranteed to have at most one entry per feature.; ///; /// The target may modify the features list, to change which options are; /// passed onwards to the backend.; /// FIXME: This part should be fixed so that we can change handleTargetFeatures; /// to merely a TargetInfo initialization routine.; ///; /// \return False on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:403,rout,routine,403,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['rout'],['routine']
Integrability,"/// Perform layout on the given record.; ///; /// This routine allows the external AST source to provide an specific; /// layout for a record, overriding the layout that would normally be; /// constructed. It is intended for clients who receive specific layout; /// details rather than source code (such as LLDB). The client is expected; /// to fill in the field offsets, base offsets, virtual base offsets, and; /// complete object size.; ///; /// \param Record The record whose layout is being requested.; ///; /// \param Size The final size of the record, in bits.; ///; /// \param Alignment The final alignment of the record, in bits.; ///; /// \param FieldOffsets The offset of each of the fields within the record,; /// expressed in bits. All of the fields must be provided with offsets.; ///; /// \param BaseOffsets The offset of each of the direct, non-virtual base; /// classes. If any bases are not given offsets, the bases will be laid; /// out according to the ABI.; ///; /// \param VirtualBaseOffsets The offset of each of the virtual base classes; /// (either direct or not). If any bases are not given offsets, the bases will be laid; /// out according to the ABI.; ///; /// \returns true if the record layout was provided, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:55,rout,routine,55,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,1,['rout'],['routine']
Integrability,"/// Perform layout on the given record.; ///; /// This routine allows the external AST source to provide an specific; /// layout for a record, overriding the layout that would normally be; /// constructed. It is intended for clients who receive specific layout; /// details rather than source code (such as LLDB). The client is expected; /// to fill in the field offsets, base offsets, virtual base offsets, and; /// complete object size.; ///; /// \param Record The record whose layout is being requested.; ///; /// \param Size The final size of the record, in bits.; ///; /// \param Alignment The final alignment of the record, in bits.; ///; /// \param FieldOffsets The offset of each of the fields within the record,; /// expressed in bits. All of the fields must be provided with offsets.; ///; /// \param BaseOffsets The offset of each of the direct, non-virtual base; /// classes. If any bases are not given offsets, the bases will be laid; /// out according to the ABI.; ///; /// \param VirtualBaseOffsets The offset of each of the virtual base classes; /// (either direct or not). If any bases are not given offsets, the bases will; /// be laid out according to the ABI.; ///; /// \returns true if the record layout was provided, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:55,rout,routine,55,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,1,['rout'],['routine']
Integrability,"/// Perform most of the PEI work here:; /// - saving/restoring of the callee-saved registers,; /// - stack frame creation and destruction.; /// Normally, this work is distributed among various functions, but doing it; /// in one place allows shrink-wrapping of the stack frame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:249,wrap,wrapping,249,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['wrap'],['wrapping']
Integrability,"/// Perform name lookup on the given name, classifying it based on; /// the results of name lookup and the following token.; ///; /// This routine is used by the parser to resolve identifiers and help direct; /// parsing. When the identifier cannot be found, this routine will attempt; /// to correct the typo and classify based on the resulting name.; ///; /// \param S The scope in which we're performing name lookup.; ///; /// \param SS The nested-name-specifier that precedes the name.; ///; /// \param Name The identifier. If typo correction finds an alternative name,; /// this pointer parameter will be updated accordingly.; ///; /// \param NameLoc The location of the identifier.; ///; /// \param NextToken The token following the identifier. Used to help; /// disambiguate the name.; ///; /// \param CCC The correction callback, if typo correction is desired.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:139,rout,routine,139,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['rout'],['routine']
Integrability,"/// Perform reference-marking and odr-use handling for a DeclRefExpr.; ///; /// Note, this may change the dependence of the DeclRefExpr, and so needs to be; /// handled with care if the DeclRefExpr is not newly-created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:106,depend,dependence,106,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['depend'],['dependence']
Integrability,"/// Perform semantic analysis for the given dependent function; /// template specialization.; ///; /// The only possible way to get a dependent function template specialization; /// is with a friend declaration, like so:; ///; /// \code; /// template \<class T> void foo(T);; /// template \<class T> class A {; /// friend void foo<>(T);; /// };; /// \endcode; ///; /// There really isn't any useful analysis we can do here, so we; /// just store the information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:44,depend,dependent,44,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,2,['depend'],['dependent']
Integrability,"/// Perform semantic analysis for the given function template; /// specialization.; ///; /// This routine performs all of the semantic analysis required for an; /// explicit function template specialization. On successful completion,; /// the function declaration \p FD will become a function template; /// specialization.; ///; /// \param FD the function declaration, which will be updated to become a; /// function template specialization.; ///; /// \param ExplicitTemplateArgs the explicitly-provided template arguments,; /// if any. Note that this may be valid info even when 0 arguments are; /// explicitly provided as in, e.g., \c void sort<>(char*, char*);; /// as it anyway contains info on the angle brackets locations.; ///; /// \param Previous the set of declarations that may be specialized by; /// this function specialization.; ///; /// \param QualifiedFriend whether this is a lookup for a qualified friend; /// declaration with no explicit template argument list that might be; /// befriending a function template specialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:98,rout,routine,98,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['rout'],['routine']
Integrability,"/// Perform semantic analysis for the given non-template member; /// specialization.; ///; /// This routine performs all of the semantic analysis required for an; /// explicit member function specialization. On successful completion,; /// the function declaration \p FD will become a member function; /// specialization.; ///; /// \param Member the member declaration, which will be updated to become a; /// specialization.; ///; /// \param Previous the set of declarations, one of which may be specialized; /// by this function specialization; the set will be modified to contain the; /// redeclared member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:100,rout,routine,100,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['rout'],['routine']
Integrability,"/// Perform semantic checking of a new function declaration.; ///; /// Performs semantic analysis of the new function declaration; /// NewFD. This routine performs all semantic checking that does not; /// require the actual declarator involved in the declaration, and is; /// used both for the declaration of functions as they are parsed; /// (called via ActOnDeclarator) and for the declaration of functions; /// that have been instantiated via C++ template instantiation (called; /// via InstantiateDecl).; ///; /// \param IsMemberSpecialization whether this new function declaration is; /// a member specialization (that replaces any definition provided by the; /// previous declaration).; ///; /// This sets NewFD->isInvalidDecl() to true if there was an error.; ///; /// \returns true if the function declaration is a redeclaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:147,rout,routine,147,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['rout'],['routine']
Integrability,"/// Perform semantic checking on a newly-created variable; /// declaration.; ///; /// This routine performs all of the type-checking required for a; /// variable declaration once it has been built. It is used both to; /// check variables after they have been parsed and their declarators; /// have been translated into a declaration, and to check variables; /// that have been instantiated from a template.; ///; /// Sets NewVD->isInvalidDecl() if an error was encountered.; ///; /// Returns true if the variable declaration is a redeclaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:91,rout,routine,91,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['rout'],['routine']
Integrability,"/// Perform simplification of memcpy's. If we have memcpy A; /// which copies X to Y, and memcpy B which copies Y to Z, then we can rewrite; /// B to be a memcpy from X to Z (or potentially a memmove, depending on; /// circumstances). This allows later passes to remove the first memcpy; /// altogether.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:201,depend,depending,201,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['depend'],['depending']
Integrability,"/// Perform substitution on the type T with a given set of template; /// arguments.; ///; /// This routine substitutes the given template arguments into the; /// type T and produces the instantiated type.; ///; /// \param T the type into which the template arguments will be; /// substituted. If this type is not dependent, it will be returned; /// immediately.; ///; /// \param Args the template arguments that will be; /// substituted for the top-level template parameters within T.; ///; /// \param Loc the location in the source code where this substitution; /// is being performed. It will typically be the location of the; /// declarator (if we're instantiating the type of some declaration); /// or the location of the type in the source code (if, e.g., we're; /// instantiating the type of a cast expression).; ///; /// \param Entity the name of the entity associated with a declaration; /// being instantiated (if any). May be empty to indicate that there; /// is no such entity (if, e.g., this is a type that occurs as part of; /// a cast expression) or that the entity has no name (e.g., an; /// unnamed function parameter).; ///; /// \param AllowDeducedTST Whether a DeducedTemplateSpecializationType is; /// acceptable as the top level type of the result.; ///; /// \returns If the instantiation succeeds, the instantiated; /// type. Otherwise, produces diagnostics and returns a NULL type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp:99,rout,routine,99,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,2,"['depend', 'rout']","['dependent', 'routine']"
Integrability,/// Perform target specific adjustments to the latency of a schedule; /// dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp:74,depend,dependency,74,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp,2,['depend'],['dependency']
Integrability,"/// Perform template argument deduction from a function call; /// (C++ [temp.deduct.call]).; ///; /// \param FunctionTemplate the function template for which we are performing; /// template argument deduction.; ///; /// \param ExplicitTemplateArgs the explicit template arguments provided; /// for this call.; ///; /// \param Args the function call arguments; ///; /// \param Specialization if template argument deduction was successful,; /// this will be set to the function template specialization produced by; /// template argument deduction.; ///; /// \param Info the argument will be updated to provide additional information; /// about template argument deduction.; ///; /// \param CheckNonDependent A callback to invoke to check conversions for; /// non-dependent parameters, between deduction and substitution, per DR1391.; /// If this returns true, substitution will be skipped and we return; /// TDK_NonDependentConversionFailure. The callback is passed the parameter; /// types (after substituting explicit template arguments).; ///; /// \returns the result of template argument deduction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:761,depend,dependent,761,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['depend'],['dependent']
Integrability,"/// Perform the actual initialization of the given entity based on; /// the computed initialization sequence.; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization, ownership of; /// which is transferred into the routine.; ///; /// \param ResultType if non-NULL, will be set to the type of the; /// initialized object, which is the type of the declaration in most; /// cases. However, when the initialized object is a variable of; /// incomplete array type and the initializer is an initializer; /// list, this type will be set to the completed array type.; ///; /// \returns an expression that performs the actual object initialization, if; /// the initialization is well-formed. Otherwise, emits diagnostics; /// and returns an invalid expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:394,rout,routine,394,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['rout'],['routine']
Integrability,"/// Perform the extraction, returning the new function and providing an; /// interface to see what was categorized as inputs and outputs.; ///; /// \param CEAC - Cache to speed up operations for the CodeExtractor when; /// hoisting, and extracting lifetime values and assumes.; /// \param Inputs [out] - filled with values marked as inputs to the; /// newly outlined function.; /// \param Outputs [out] - filled with values marked as outputs to the; /// newly outlined function.; /// \returns zero when called on a CodeExtractor instance where isEligible; /// returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:77,interface,interface,77,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,1,['interface'],['interface']
Integrability,"/// Perform the initialization of a potentially-movable value, which; /// is the result of return value.; ///; /// This routine implements C++20 [class.copy.elision]p3, which attempts to; /// treat returned lvalues as rvalues in certain cases (to prefer move; /// construction), then falls back to treating them as lvalues if that failed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:120,rout,routine,120,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['rout'],['routine']
Integrability,/// Perform the shrink-wrapping analysis and update; /// the MachineFrameInfo attached to \p MF with the results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp:23,wrap,wrapping,23,interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,1,['wrap'],['wrapping']
Integrability,"/// Perform type checking and populate the dependency graph, but; /// don't generate code yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:43,depend,dependency,43,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['depend'],['dependency']
Integrability,"/// PerformImplicitConversion - Perform an implicit conversion of the; /// expression From to the type ToType by following the standard; /// conversion sequence SCS. Returns the converted; /// expression. Flavor is the context in which we're performing this; /// conversion, for use in error messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:292,message,messages,292,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['message'],['messages']
Integrability,"/// PerformImplicitConversion - Perform an implicit conversion of the; /// expression From to the type ToType using the pre-computed implicit; /// conversion sequence ICS. Returns the converted; /// expression. Action is the kind of conversion we're performing,; /// used in the error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:285,message,message,285,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['message'],['message']
Integrability,"/// PerformImplicitConversion - Perform an implicit conversion of the; /// expression From to the type ToType. Returns the; /// converted expression. Flavor is the kind of conversion we're; /// performing, used in the error message. If @p AllowExplicit,; /// explicit user-defined conversions are permitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:224,message,message,224,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['message'],['message']
Integrability,/// Performs a full or partial save of processor state to the memory at; /// \a __p. The exact state saved depends on the 64-bit mask \a __m and; /// processor control register \c XCR0.; ///; /// \code{.operation}; /// mask[62:0] := __m[62:0] AND XCR0[62:0]; /// FOR i := 0 TO 62; /// IF mask[i] == 1; /// CASE (i) OF; /// 0: save X87 FPU state; /// 1: save SSE state; /// DEFAULT: __p.Ext_Save_Area[i] := ProcessorState[i]; /// FI; /// ENDFOR; /// __p.Header.XSTATE_BV[62:0] := INIT_FUNCTION(mask[62:0]); /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c XSAVEC instruction.; ///; /// \param __p; /// Pointer to the save area; must be 64-byte aligned.; /// \param __m; /// A 64-bit mask indicating what state should be saved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/xsavecintrin.h:107,depend,depends,107,interpreter/llvm-project/clang/lib/Headers/xsavecintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/xsavecintrin.h,1,['depend'],['depends']
Integrability,/// Performs a full or partial save of processor state to the memory at; /// \a __p. The exact state saved depends on the 64-bit mask \a __m and; /// processor control register \c XCR0.; ///; /// \code{.operation}; /// mask[62:0] := __m[62:0] AND XCR0[62:0]; /// FOR i := 0 TO 62; /// IF mask[i] == 1; /// CASE (i) OF; /// 0: save X87 FPU state; /// 1: save SSE state; /// DEFAULT: __p.Ext_Save_Area[i] := ProcessorState[i]; /// FI; /// ENDFOR; /// __p.Header.XSTATE_BV[62:0] := INIT_FUNCTION(mask[62:0]); /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c XSAVEC64 instruction.; ///; /// \param __p; /// Pointer to the save area; must be 64-byte aligned.; /// \param __m; /// A 64-bit mask indicating what state should be saved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/xsavecintrin.h:107,depend,depends,107,interpreter/llvm-project/clang/lib/Headers/xsavecintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/xsavecintrin.h,1,['depend'],['depends']
Integrability,"/// Performs an imprecise lookup of a dependent name in this class.; ///; /// This function does not follow strict semantic rules and should be used; /// only when lookup rules can be relaxed, e.g. indexing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:38,depend,dependent,38,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['depend'],['dependent']
Integrability,"/// Performs an intermediate calculation for deriving the next four SHA-1; /// message elements using previous message elements from the 128-bit; /// vectors of [4 x i32] in \a __X and \a __Y, and returns the result.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c SHA1MSG1 instruction.; ///; /// \param __X; /// A 128-bit vector of [4 x i32] containing previous message elements.; /// \param __Y; /// A 128-bit vector of [4 x i32] containing previous message elements.; /// \returns A 128-bit vector of [4 x i32] containing the derived SHA-1; /// elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h:79,message,message,79,interpreter/llvm-project/clang/lib/Headers/shaintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h,4,['message'],['message']
Integrability,"/// Performs an intermediate calculation for deriving the next four SHA-256; /// message elements using previous message elements from the 128-bit; /// vectors of [4 x i32] in \a __X and \a __Y, and returns the result.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c SHA256MSG1 instruction.; ///; /// \param __X; /// A 128-bit vector of [4 x i32] containing previous message elements.; /// \param __Y; /// A 128-bit vector of [4 x i32] containing previous message elements.; /// \returns A 128-bit vector of [4 x i32] containing the updated SHA-256; /// values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h:81,message,message,81,interpreter/llvm-project/clang/lib/Headers/shaintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h,4,['message'],['message']
Integrability,"/// Performs four iterations of the inner loop of the SHA-1 message digest; /// algorithm using the starting SHA-1 state (A, B, C, D) from the 128-bit; /// vector of [4 x i32] in \a V1 and the next four 32-bit elements of the; /// message from the 128-bit vector of [4 x i32] in \a V2. Note that the; /// SHA-1 state variable E must have already been added to \a V2; /// (\c _mm_sha1nexte_epu32() can perform this step). Returns the updated; /// SHA-1 state (A, B, C, D) as a 128-bit vector of [4 x i32].; ///; /// The SHA-1 algorithm has an inner loop of 80 iterations, twenty each; /// with a different combining function and rounding constant. This; /// intrinsic performs four iterations using a combining function and; /// rounding constant selected by \a M[1:0].; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_sha1rnds4_epu32(__m128i V1, __m128i V2, const int M);; /// \endcode; ///; /// This intrinsic corresponds to the \c SHA1RNDS4 instruction.; ///; /// \param V1; /// A 128-bit vector of [4 x i32] containing the initial SHA-1 state.; /// \param V2; /// A 128-bit vector of [4 x i32] containing the next four elements of; /// the message, plus SHA-1 state variable E.; /// \param M; /// An immediate value where bits [1:0] select among four possible; /// combining functions and rounding constants (not specified here).; /// \returns A 128-bit vector of [4 x i32] containing the updated SHA-1 state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h:60,message,message,60,interpreter/llvm-project/clang/lib/Headers/shaintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h,3,['message'],['message']
Integrability,"/// Performs name lookup for a name that was parsed in the; /// source code, and may contain a C++ scope specifier.; ///; /// This routine is a convenience routine meant to be called from; /// contexts that receive a name and an optional C++ scope specifier; /// (e.g., ""N::M::x""). It will then perform either qualified or; /// unqualified name lookup (with LookupQualifiedName or LookupName,; /// respectively) on the given name and return those results. It will; /// perform a special type of lookup for ""__super::"" scope specifier.; ///; /// @param S The scope from which unqualified name lookup will; /// begin.; ///; /// @param SS An optional C++ scope-specifier, e.g., ""::N::M"".; ///; /// @param EnteringContext Indicates whether we are going to enter the; /// context of the scope-specifier SS (if present).; ///; /// @returns True if any decls were found (but possibly ambiguous)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:131,rout,routine,131,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,2,['rout'],['routine']
Integrability,"/// Performs qualified name lookup or special type of lookup for; /// ""__super::"" scope specifier.; ///; /// This routine is a convenience overload meant to be called from contexts; /// that need to perform a qualified name lookup with an optional C++ scope; /// specifier that might require special kind of lookup.; ///; /// \param R captures both the lookup criteria and any lookup results found.; ///; /// \param LookupCtx The context in which qualified name lookup will; /// search.; ///; /// \param SS An optional C++ scope-specifier.; ///; /// \returns true if lookup succeeded, false if it failed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:114,rout,routine,114,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['rout'],['routine']
Integrability,"/// Performs the final calculation for deriving the next four SHA-1 message; /// elements using previous message elements from the 128-bit vectors of; /// [4 x i32] in \a __X and \a __Y, and returns the result.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c SHA1MSG2 instruction.; ///; /// \param __X; /// A 128-bit vector of [4 x i32] containing an intermediate result.; /// \param __Y; /// A 128-bit vector of [4 x i32] containing previous message values.; /// \returns A 128-bit vector of [4 x i32] containing the updated SHA-1; /// values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h:68,message,message,68,interpreter/llvm-project/clang/lib/Headers/shaintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h,3,['message'],['message']
Integrability,"/// Performs the final calculation for deriving the next four SHA-256 message; /// elements using previous message elements from the 128-bit vectors of; /// [4 x i32] in \a __X and \a __Y, and returns the result.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c SHA256MSG2 instruction.; ///; /// \param __X; /// A 128-bit vector of [4 x i32] containing an intermediate result.; /// \param __Y; /// A 128-bit vector of [4 x i32] containing previous message values.; /// \returns A 128-bit vector of [4 x i32] containing the updated SHA-256; /// values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h:70,message,message,70,interpreter/llvm-project/clang/lib/Headers/shaintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h,3,['message'],['message']
Integrability,"/// Performs two rounds of SHA-256 operation using the following inputs: a; /// starting SHA-256 state (C, D, G, H) from the 128-bit vector of; /// [4 x i32] in \a __X; a starting SHA-256 state (A, B, E, F) from the; /// 128-bit vector of [4 x i32] in \a __Y; and a pre-computed sum of the; /// next two message elements (unsigned 32-bit integers) and corresponding; /// rounding constants from the 128-bit vector of [4 x i32] in \a __Z.; /// Returns the updated SHA-256 state (A, B, E, F) as a 128-bit vector of; /// [4 x i32].; ///; /// The SHA-256 algorithm has a core loop of 64 iterations. This intrinsic; /// performs two of those iterations.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c SHA256RNDS2 instruction.; ///; /// \param __X; /// A 128-bit vector of [4 x i32] containing part of the initial SHA-256; /// state.; /// \param __Y; /// A 128-bit vector of [4 x i32] containing part of the initial SHA-256; /// state.; /// \param __Z; /// A 128-bit vector of [4 x i32] containing additional input to the; /// SHA-256 operation.; /// \returns A 128-bit vector of [4 x i32] containing the updated SHA-1 state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h:304,message,message,304,interpreter/llvm-project/clang/lib/Headers/shaintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h,1,['message'],['message']
Integrability,"/// Phi Node, for code in SSA form.; /// Each Phi node has an array of possible values that it can take,; /// depending on where control flow comes from.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:110,depend,depending,110,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['depend'],['depending']
Integrability,"/// Pipe for inter-thread synchronization - for epoll-ing on multiple; /// conditions. It is meant for uni-directional 1:1 signalling - specifically:; /// no multiple consumers, no data passing. Thread waiting for signal should; /// poll the FDRead. Signalling thread should call signal() which writes single; /// character to FDRead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:26,synchroniz,synchronization,26,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,1,['synchroniz'],['synchronization']
Integrability,"/// Platform-dependent process object.; /// The return code, set after execution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:13,depend,dependent,13,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h,1,['depend'],['dependent']
Integrability,/// Platforms set up standard symbols and mediate interactions between dynamic; /// initializers (e.g. C++ static constructors) and ExecutionSession state.; /// Note that Platforms do not automatically run initializers: clients are still; /// responsible for doing this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:42,mediat,mediate,42,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['mediat'],['mediate']
Integrability,"/// Plotting engine function for internal use; ///; /// Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; /// function that occur in the previously plotted dataset are projected via partial integration,; /// otherwise no projections are performed. Optionally, certain projections can be performed; /// by summing over the values present in a provided dataset ('projData'), to correctly; /// project out data dependents that are not properly described by the PDF (e.g. per-event errors).; ///; /// The functions value can be multiplied with an optional scale factor. The interpretation; /// of the scale factor is unique for generic real functions, for PDFs there are various interpretations; /// possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; ///; /// The default projection behaviour can be overridden by supplying an optional set of dependents; /// to project via RooFit command arguments.; //_____________________________________________________________________________; // coverity[PASS_BY_VALUE]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:233,integrat,integration,233,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,3,"['depend', 'integrat']","['dependents', 'integration']"
Integrability,/// Pointer to a pointer to an Objective-C object. Used in the new ABI; /// message lookup function and some GC-related functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:76,message,message,76,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['message'],['message']
Integrability,"/// Pointer to compiled wrapper, we do *not* own.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.h:24,wrap,wrapper,24,core/metacling/src/TClingCallFunc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.h,1,['wrap'],['wrapper']
Integrability,"/// Pointer to the TBB task arena wrapper",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/TThreadExecutor.hxx:34,wrap,wrapper,34,core/imt/inc/ROOT/TThreadExecutor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/TThreadExecutor.hxx,1,['wrap'],['wrapper']
Integrability,"/// Pointer to the data structure used to lookup declarations; /// within this context (or a DependentStoredDeclsMap if this is a; /// dependent context). We maintain the invariant that, if the map; /// contains an entry for a DeclarationName (and we haven't lazily; /// omitted anything), then it contains all relevant entries for that; /// name (modulo the hasExternalDecls() flag).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:93,Depend,DependentStoredDeclsMap,93,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,"['Depend', 'depend']","['DependentStoredDeclsMap', 'dependent']"
Integrability,"/// PointerIntPair - This class implements a pair of a pointer and small; /// integer. It is designed to represent this in the space required by one; /// pointer by bitmangling the integer into the low part of the pointer. This; /// can only be done for small integers: typically up to 3 bits, but it depends; /// on the number of bits available according to PointerLikeTypeTraits for the; /// type.; ///; /// Note that PointerIntPair always puts the IntVal part in the highest bits; /// possible. For example, PointerIntPair<void*, 1, bool> will put the bit for; /// the bool into bit #2, not bit #0, which allows the low two bits to be used; /// for something else. For example, this allows:; /// PointerIntPair<PointerIntPair<void*, 1, bool>, 1, bool>; /// ... and the two bools will land in different bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h:301,depend,depends,301,interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h,1,['depend'],['depends']
Integrability,"/// PointerMayBeCaptured - Return true if this pointer value may be captured; /// by the enclosing function (which is required to exist). This routine can; /// be expensive, so consider caching the results. The boolean ReturnCaptures; /// specifies whether returning the value (or part of it) from the function; /// counts as capturing it or not. The boolean StoreCaptures specified whether; /// storing the value (or part of it) into memory anywhere automatically; /// counts as capturing it or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CaptureTracking.cpp:143,rout,routine,143,interpreter/llvm-project/llvm/lib/Analysis/CaptureTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CaptureTracking.cpp,1,['rout'],['routine']
Integrability,"/// PointerMayBeCaptured - Return true if this pointer value may be captured; /// by the enclosing function (which is required to exist). This routine can; /// be expensive, so consider caching the results. The boolean ReturnCaptures; /// specifies whether returning the value (or part of it) from the function; /// counts as capturing it or not. The boolean StoreCaptures specified; /// whether storing the value (or part of it) into memory anywhere; /// automatically counts as capturing it or not.; /// MaxUsesToExplore specifies how many uses the analysis should explore for; /// one value before giving up due too ""too many uses"". If MaxUsesToExplore; /// is zero, a default value is assumed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CaptureTracking.h:143,rout,routine,143,interpreter/llvm-project/llvm/include/llvm/Analysis/CaptureTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CaptureTracking.h,1,['rout'],['routine']
Integrability,"/// PointerMayBeCapturedBefore - Return true if this pointer value may be; /// captured by the enclosing function (which is required to exist). If a; /// DominatorTree is provided, only captures which happen before the given; /// instruction are considered. This routine can be expensive, so consider; /// caching the results. The boolean ReturnCaptures specifies whether; /// returning the value (or part of it) from the function counts as capturing; /// it or not. The boolean StoreCaptures specified whether storing the value; /// (or part of it) into memory anywhere automatically counts as capturing it; /// or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CaptureTracking.cpp:263,rout,routine,263,interpreter/llvm-project/llvm/lib/Analysis/CaptureTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CaptureTracking.cpp,1,['rout'],['routine']
Integrability,"/// PointerMayBeCapturedBefore - Return true if this pointer value may be; /// captured by the enclosing function (which is required to exist). If a; /// DominatorTree is provided, only captures which happen before the given; /// instruction are considered. This routine can be expensive, so consider; /// caching the results. The boolean ReturnCaptures specifies whether; /// returning the value (or part of it) from the function counts as capturing; /// it or not. The boolean StoreCaptures specified whether storing the value; /// (or part of it) into memory anywhere automatically counts as capturing it; /// or not. Captures by the provided instruction are considered if the; /// final parameter is true.; /// MaxUsesToExplore specifies how many uses the analysis should explore for; /// one value before giving up due too ""too many uses"". If MaxUsesToExplore; /// is zero, a default value is assumed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CaptureTracking.h:263,rout,routine,263,interpreter/llvm-project/llvm/include/llvm/Analysis/CaptureTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CaptureTracking.h,1,['rout'],['routine']
Integrability,"/// Pop the top class of the stack of classes that are; /// currently being parsed.; ///; /// This routine should be called when we have finished parsing the; /// definition of a class, but have not yet popped the Scope; /// associated with the class's definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:99,rout,routine,99,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['rout'],['routine']
Integrability,/// Populate the call graph with the functions in the given; /// declaration.; ///; /// Recursively walks the declaration to find all the dependent Decls as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CallGraph.h:138,depend,dependent,138,interpreter/llvm-project/clang/include/clang/Analysis/CallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CallGraph.h,1,['depend'],['dependent']
Integrability,"/// Populates a set of strings representing the Vector Function ABI variants; /// associated to the CallInst CI. If the CI does not contain the; /// vector-function-abi-variant attribute, we return without populating; /// VariantMappings, i.e. callers of getVectorVariantNames need not check for; /// the presence of the attribute (see InjectTLIMappings).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:336,Inject,InjectTLIMappings,336,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,1,['Inject'],['InjectTLIMappings']
Integrability,/// Populates the partition with a transitive closure of all the; /// instructions that the seeded instructions dependent on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp:112,depend,dependent,112,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,1,['depend'],['dependent']
Integrability,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:101,depend,depends,101,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,1,['depend'],['depends']
Integrability,/// Post-visit the Objective C message.; /// \sa checkPreObjCMessage(); ///; /// check::PostObjCMessage,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp:31,message,message,31,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,1,['message'],['message']
Integrability,/// PostGenericScheduler - Interface to the scheduling algorithm used by; /// ScheduleDAGMI.; ///; /// Callbacks from ScheduleDAGMI:; /// initPolicy -> initialize(DAG) -> registerRoots -> pickNode ...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:27,Interface,Interface,27,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['Interface'],['Interface']
Integrability,"/// PragmaHandler - Instances of this interface defined to handle the various; /// pragmas that the language front-end uses. Each handler optionally has a; /// name (e.g. ""pack"") and the HandlePragma method is invoked when a pragma with; /// that identifier is found. If a handler does not match any of the declared; /// pragmas the handler with a null identifier is invoked, if it exists.; ///; /// Note that the PragmaNamespace class can be used to subdivide pragmas, e.g.; /// we treat ""\#pragma STDC"" and ""\#pragma GCC"" as namespaces that contain other; /// pragmas.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Pragma.h:38,interface,interface,38,interpreter/llvm-project/clang/include/clang/Lex/Pragma.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Pragma.h,1,['interface'],['interface']
Integrability,"/// PragmaMessageHandler - Handle the microsoft and gcc \#pragma message; /// extension. The syntax is:; /// \code; /// #pragma message(string); /// \endcode; /// OR, in GCC mode:; /// \code; /// #pragma message string; /// \endcode; /// string is a string, which is fully macro expanded, and permits string; /// concatenation, embedded escape characters, etc... See MSDN for more details.; /// Also handles \#pragma GCC warning and \#pragma GCC error which take the same; /// form as \#pragma message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp:65,message,message,65,interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,4,['message'],['message']
Integrability,"/// Pre-visit the Objective C message.; ///; /// This will be called before the analyzer core processes the method call.; /// This is called for any action which produces an Objective-C message send,; /// including explicit message syntax and property access.; ///; /// check::PreObjCMessage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp:30,message,message,30,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,3,['message'],['message']
Integrability,/// Precise control over the wrapping of braces.; /// \code; /// # Should be declared this way:; /// BreakBeforeBraces: Custom; /// BraceWrapping:; /// AfterClass: true; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:29,wrap,wrapping,29,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapping']
Integrability,"/// PrescheduleNodesWithMultipleUses - Nodes with multiple uses; /// are not handled well by the general register pressure reduction; /// heuristics. When presented with code like this:; ///; /// N; /// / |; /// / |; /// U store; /// |; /// ...; ///; /// the heuristics tend to push the store up, but since the; /// operand of the store has another use (U), this would increase; /// the length of that other use (the U->N edge).; ///; /// This function transforms code like the above to route U's; /// dependence through the store when possible, like this:; ///; /// N; /// ||; /// ||; /// store; /// |; /// U; /// |; /// ...; ///; /// This results in the store being scheduled immediately; /// after N, which shortens the U->N live range, reducing; /// register pressure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:487,rout,route,487,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,2,"['depend', 'rout']","['dependence', 'route']"
Integrability,"/// Pretty-print a diagnostic message to a raw_ostream.; ///; /// This is a static helper to handle the line wrapping, colorizing, and; /// rendering of a diagnostic message to a particular ostream. It is; /// publicly visible so that clients which do not have sufficient state to; /// build a complete TextDiagnostic object can still get consistent; /// formatting of their diagnostic messages.; ///; /// \param OS Where the message is printed; /// \param IsSupplemental true if this is a continuation note diagnostic; /// \param Message The text actually printed; /// \param CurrentColumn The starting column of the first line, accounting; /// for any prefix.; /// \param Columns The number of columns to use in line-wrapping, 0 disables; /// all line-wrapping.; /// \param ShowColors Enable colorizing of the message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h:30,message,message,30,interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h,9,"['Message', 'message', 'wrap']","['Message', 'message', 'messages', 'wrapping']"
Integrability,/// Print a DDG edge with more information including detailed information; /// about the dependence edges.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDGPrinter.h:89,depend,dependence,89,interpreter/llvm-project/llvm/include/llvm/Analysis/DDGPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDGPrinter.h,1,['depend'],['dependence']
Integrability,/// Print a DDG node with more information including containing instructions; /// and detailed information about the dependence edges.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDGPrinter.h:117,depend,dependence,117,interpreter/llvm-project/llvm/include/llvm/Analysis/DDGPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDGPrinter.h,1,['depend'],['dependence']
Integrability,/// Print a short description useful for debugging or logging.; ///; /// We print the SCCs wrapped in '[]'s and skipping the middle SCCs if; /// there are a large number.; //; // Note: this is defined inline to dodge issues with GCC's interpretation; // of enclosing namespaces for friend function declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:91,wrap,wrapped,91,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['wrap'],['wrapped']
Integrability,/// Print a short description useful for debugging or logging.; ///; /// We print the function names in the SCC wrapped in '()'s and skipping; /// the middle functions if there are a large number.; //; // Note: this is defined inline to dodge issues with GCC's interpretation; // of enclosing namespaces for friend function declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:112,wrap,wrapped,112,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['wrap'],['wrapped']
Integrability,/// Print an error message to an output stream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:19,message,message,19,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['message'],['message']
Integrability,"/// Print any diagnostic option information to a raw_ostream.; ///; /// This implements all of the logic for adding diagnostic options to a message; /// (via OS). Each relevant option is comma separated and all are enclosed in; /// the standard bracketing: "" [...]"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnosticPrinter.cpp:140,message,message,140,interpreter/llvm-project/clang/lib/Frontend/TextDiagnosticPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnosticPrinter.cpp,1,['message'],['message']
Integrability,"/// Print attributes of an edge in the DDG graph. If the edge; /// is a MemoryDependence edge, then detailed dependence info; /// available from DependenceAnalysis is displayed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDGPrinter.h:109,depend,dependence,109,interpreter/llvm-project/llvm/include/llvm/Analysis/DDGPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDGPrinter.h,2,"['Depend', 'depend']","['DependenceAnalysis', 'dependence']"
Integrability,/// Print dependency graph,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:10,depend,dependency,10,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['dependency']
Integrability,"/// Print out the dependency information into a string using the dependency; /// file format that is specified in the options (-MD is the default) and; /// return it.; ///; /// \returns A \c StringError with the diagnostic output if clang errors; /// occurred, dependency file contents otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:18,depend,dependency,18,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,3,['depend'],['dependency']
Integrability,/// Print the dependence. \p Instr is used to map the instruction; /// indices to instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:14,depend,dependence,14,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,/// Print the error message to the error output stream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CodeCoverage.cpp:20,message,message,20,interpreter/llvm-project/llvm/tools/llvm-cov/CodeCoverage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CodeCoverage.cpp,1,['message'],['message']
Integrability,"/// Print the filename, with escaping or quoting that accommodates the three; /// most likely tools that use dependency files: GNU Make, BSD Make, and; /// NMake/Jom.; ///; /// BSD Make is the simplest case: It does no escaping at all. This means; /// characters that are normally delimiters, i.e. space and # (the comment; /// character) simply aren't supported in filenames.; ///; /// GNU Make does allow space and # in filenames, but to avoid being treated; /// as a delimiter or comment, these must be escaped with a backslash. Because; /// backslash is itself the escape character, if a backslash appears in a; /// filename, it should be escaped as well. (As a special case, $ is escaped; /// as $$, which is the normal Make way to handle the $ character.); /// For compatibility with BSD Make and historical practice, if GNU Make; /// un-escapes characters in a filename but doesn't find a match, it will; /// retry with the unmodified original string.; ///; /// GCC tries to accommodate both Make formats by escaping any space or #; /// characters in the original filename, but not escaping backslashes. The; /// apparent intent is so that filenames with backslashes will be handled; /// correctly by BSD Make, and by GNU Make in its fallback mode of using the; /// unmodified original string; filenames with # or space characters aren't; /// supported by BSD Make at all, but will be handled correctly by GNU Make; /// due to the escaping.; ///; /// A corner case that GCC gets only partly right is when the original filename; /// has a backslash immediately followed by space or #. GNU Make would expect; /// this backslash to be escaped; however GCC escapes the original backslash; /// only when followed by space, not #. It will therefore take a dependency; /// from a directive such as; /// #include ""a\ b\#c.h""; /// and emit it as; /// a\\\ b\\#c.h; /// which GNU Make will interpret as; /// a\ b\; /// followed by a comment. Failing to find this file, it will fall back to the; /// origi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DependencyFile.cpp:109,depend,dependency,109,interpreter/llvm-project/clang/lib/Frontend/DependencyFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DependencyFile.cpp,1,['depend'],['dependency']
Integrability,"/// Print the given string to a stream, word-wrapping it to; /// some number of columns in the process.; ///; /// \param OS the stream to which the word-wrapping string will be; /// emitted.; /// \param Str the string to word-wrap and output.; /// \param Columns the number of columns to word-wrap to.; /// \param Column the column number at which the first character of \p; /// Str will be printed. This will be non-zero when part of the first; /// line has already been printed.; /// \param Bold if the current text should be bold; /// \returns true if word-wrapping was required, or false if the; /// string fit on the first line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp:45,wrap,wrapping,45,interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,5,['wrap'],"['wrap', 'wrapping']"
Integrability,/// Print the output of the dependency directives source minimizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:28,depend,dependency,28,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['depend'],['dependency']
Integrability,"/// Print the previously scanned dependency directives as minimized source text.; ///; /// \param Source The original source text that the dependency directives were; /// scanned from.; /// \param Directives The previously scanned dependency; /// directives.; /// \param OS the stream to print the dependency directives on.; ///; /// This is used primarily for testing purposes, during dependency scanning the; /// \p Lexer uses the tokens directly, not their printed version.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:33,depend,dependency,33,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,5,['depend'],['dependency']
Integrability,/// Print the warning message to the error output stream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CodeCoverage.cpp:22,message,message,22,interpreter/llvm-project/llvm/tools/llvm-cov/CodeCoverage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CodeCoverage.cpp,1,['message'],['message']
Integrability,/// Print to ostream with a message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:28,message,message,28,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['message'],['message']
Integrability,/// Print using the given \p DP a user-friendly message.; /// This is the default message that will be printed to the user.; /// It is used when the frontend does not directly take advantage; /// of the information contained in fields of the subclasses.; /// The printed message must not end with '.' nor start with a severity; /// keyword.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:48,message,message,48,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,3,['message'],['message']
Integrability,"/// Printing interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEllipse.h:13,interface,interface,13,roofit/roofitcore/inc/RooEllipse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEllipse.h,1,['interface'],['interface']
Integrability,"/// Printing interface (human readable)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinningCategory.h:13,interface,interface,13,roofit/roofitcore/inc/RooBinningCategory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinningCategory.h,1,['interface'],['interface']
Integrability,/// Prints an include stack when appropriate for a particular; /// diagnostic level and location.; ///; /// This routine handles all the logic of suppressing particular include; /// stacks (such as those for notes) and duplicate include stacks when; /// repeated warnings occur within the same file. It also handles the logic; /// of customizing the formatting and display of the include stack.; ///; /// \param Loc The diagnostic location.; /// \param PLoc The presumed location of the diagnostic location.; /// \param Level The diagnostic level of the message this stack pertains to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DiagnosticRenderer.cpp:113,rout,routine,113,interpreter/llvm-project/clang/lib/Frontend/DiagnosticRenderer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DiagnosticRenderer.cpp,2,"['message', 'rout']","['message', 'routine']"
Integrability,/// Prints out all of the gathered dependencies into a string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningTool.cpp:35,depend,dependencies,35,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningTool.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningTool.cpp,1,['depend'],['dependencies']
Integrability,/// Prints the names of included files and the line of the file they were; /// included from. A diagnostic handler can use this before printing its; /// custom formatted message.; ///; /// \param IncludeLoc The location of the include.; /// \param OS the raw_ostream to print on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:170,message,message,170,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,1,['message'],['message']
Integrability,/// Private helper for finding the local dependencies of a call site.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp:41,depend,dependencies,41,interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,1,['depend'],['dependencies']
Integrability,"/// Process websocket request - called from THttpServer thread; /// THttpWSHandler interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:83,interface,interface,83,gui/webdisplay/src/RWebWindowWSHandler.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx,1,['interface'],['interface']
Integrability,/// Produce a name to be used for protocol's metadata. It comes either via; /// objc_runtime_name attribute or protocol name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:34,protocol,protocol,34,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['protocol'],['protocol']
Integrability,/// Produce additional diagnostics if a category conforms to a protocol that; /// defines a method taking a non-escaping parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:63,protocol,protocol,63,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['protocol'],['protocol']
Integrability,"/// Produce an error diagnostic and return true.; ///; /// This routine should only be used for fatal errors that have to; /// do with non-routine failures (e.g., corrupted AST file).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:64,rout,routine,64,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,2,['rout'],['routine']
Integrability,"/// Produce the largest range containing all X such that ""X BinOp Y"" is; /// guaranteed not to wrap (overflow) for *all* Y in Other. However, there may; /// be *some* Y in Other for which additional X not contained in the result; /// also do not overflow.; ///; /// NoWrapKind must be one of OBO::NoUnsignedWrap or OBO::NoSignedWrap.; ///; /// Examples:; /// typedef OverflowingBinaryOperator OBO;; /// #define MGNR makeGuaranteedNoWrapRegion; /// MGNR(Add, [i8 1, 2), OBO::NoSignedWrap) == [-128, 127); /// MGNR(Add, [i8 1, 2), OBO::NoUnsignedWrap) == [0, -1); /// MGNR(Add, [i8 0, 1), OBO::NoUnsignedWrap) == Full Set; /// MGNR(Add, [i8 -1, 6), OBO::NoSignedWrap) == [INT_MIN+1, INT_MAX-4); /// MGNR(Sub, [i8 1, 2), OBO::NoSignedWrap) == [-127, 128); /// MGNR(Sub, [i8 1, 2), OBO::NoUnsignedWrap) == [1, 0)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:95,wrap,wrap,95,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['wrap'],['wrap']
Integrability,"/// Produce the range that contains X if and only if ""X BinOp Other"" does; /// not wrap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:83,wrap,wrap,83,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['wrap'],['wrap']
Integrability,/// Produces the message of the following form:; /// 'Msg via Nth parameter',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:17,message,message,17,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,1,['message'],['message']
Integrability,/// Protocol * type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:4,Protocol,Protocol,4,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['Protocol'],['Protocol']
Integrability,/// ProtocolExtensionTy - LLVM type for struct; /// objc_protocol_extension *.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Protocol,ProtocolExtensionTy,4,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['Protocol'],['ProtocolExtensionTy']
Integrability,/// ProtocolExtensionTy - LLVM type for struct; /// objc_protocol_extension.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Protocol,ProtocolExtensionTy,4,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['Protocol'],['ProtocolExtensionTy']
Integrability,"/// ProtocolLAngleLoc, ProtocolRAngleLoc, and the source locations for; /// protocol qualifiers are stored after Info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Protocol,ProtocolLAngleLoc,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,3,"['Protocol', 'protocol']","['ProtocolLAngleLoc', 'ProtocolRAngleLoc', 'protocol']"
Integrability,/// ProtocolListPtrTy - LLVM type for struct objc_property_list*.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Protocol,ProtocolListPtrTy,4,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['Protocol'],['ProtocolListPtrTy']
Integrability,/// ProtocolListTy - LLVM type for struct objc_property_list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Protocol,ProtocolListTy,4,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['Protocol'],['ProtocolListTy']
Integrability,/// ProtocolPtrTy - LLVM type for external protocol handles; /// (typeof(Protocol)),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Protocol,ProtocolPtrTy,4,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,3,"['Protocol', 'protocol']","['Protocol', 'ProtocolPtrTy', 'protocol']"
Integrability,/// ProtocolPtrTy - LLVM type for struct objc_protocol *.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Protocol,ProtocolPtrTy,4,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['Protocol'],['ProtocolPtrTy']
Integrability,/// ProtocolTy - LLVM type for struct objc_protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Protocol,ProtocolTy,4,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['Protocol'],['ProtocolTy']
Integrability,/// Protocols - Protocols for which an objc_protocol structure has; /// been emitted. Forward declarations are handled by creating an; /// empty structure whose initializer is filled in when/if defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Protocol,Protocols,4,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,2,['Protocol'],['Protocols']
Integrability,/// Protocols reference in both the \@interface and class extensions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Protocol,Protocols,4,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,"['Protocol', 'interface']","['Protocols', 'interface']"
Integrability,/// Protocols referenced in the \@interface declaration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Protocol,Protocols,4,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,"['Protocol', 'interface']","['Protocols', 'interface']"
Integrability,/// Provide a file wrapper with an overriden status.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:19,wrap,wrapper,19,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,1,['wrap'],['wrapper']
Integrability,/// Provide wrappers to std::all_of which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::any_of which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::copy_if which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::find which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::find_if which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::for_each which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::lower_bound which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::move which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::none_of which take ranges instead of having to pass; /// begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::partition which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::remove_if which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::replace_copy which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::replace_copy_if which take ranges instead of having; /// to pass begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provide wrappers to std::upper_bound which take ranges instead of having to; /// pass begin/end explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:12,wrap,wrappers,12,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrappers']
Integrability,/// Provides a convenient interface for different programming models to generate; /// the required device actions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:26,interface,interface,26,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['interface'],['interface']
Integrability,"/// Provides a lazy, caching interface for making common memory aliasing; /// information queries, backed by LLVM's alias analysis passes.; ///; /// The dependency information returned is somewhat unusual, but is pragmatic.; /// If queried about a store or call that might modify memory, the analysis; /// will return the instruction[s] that may either load from that memory or; /// store to it. If queried with a load or call that can never modify memory,; /// the analysis will return calls and stores that might modify the pointer,; /// but generally does not return loads unless a) they are volatile, or; /// b) they load from *must-aliased* pointers. Returning a dependence on; /// must-alias'd pointers instead of all pointers interacts well with the; /// internal caching mechanism.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:29,interface,interface,29,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,3,"['depend', 'interface']","['dependence', 'dependency', 'interface']"
Integrability,"/// Provides common interface for the Decls that cannot be redeclared,; /// but can be merged if the same declaration is brought in from multiple; /// modules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:20,interface,interface,20,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,1,['interface'],['interface']
Integrability,/// Provides information about a dependent function-template; /// specialization declaration.; ///; /// This is used for function templates explicit specializations declared; /// within class templates:; ///; /// \code; /// template<typename> struct A {; /// template<typename> void f();; /// template<> void f<int>(); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode; ///; /// As well as dependent friend declarations naming function template; /// specializations declared within class templates:; ///; /// \code; /// template \<class T> void foo(T);; /// template \<class T> class A {; /// friend void foo<>(T); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:33,depend,dependent,33,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,4,"['Depend', 'depend']","['DependentFunctionTemplateSpecializationInfo', 'dependent']"
Integrability,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:219,interface,interface,219,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['interface'],['interface']
Integrability,/// Provides opaque interface for querying into ChunksToKeep without having to; /// actually understand what is going on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:20,interface,interface,20,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,1,['interface'],['interface']
Integrability,/// Provides top-level interfaces for incremental compilation and execution.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:23,interface,interfaces,23,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,1,['interface'],['interfaces']
Integrability,"/// Pseudo declaration for capturing expressions. Also is used for capturing of; /// non-static data members in non-static member functions.; ///; /// Clang supports capturing of variables only, but OpenMP 4.5 allows to; /// privatize non-static members of current class in non-static member; /// functions. This pseudo-declaration allows properly handle this kind of; /// capture by wrapping captured expression into a variable-like declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:384,wrap,wrapping,384,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['wrap'],['wrapping']
Integrability,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1572,message,message,1572,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['message'],['message']
Integrability,"/// PtrData - This is a union of four different pointer types, which depends; /// on what type of token this is:; /// Identifiers, keywords, etc:; /// This is an IdentifierInfo*, which contains the uniqued identifier; /// spelling.; /// Literals: isLiteral() returns true.; /// This is a pointer to the start of the token in a text buffer, which; /// may be dirty (have trigraphs / escaped newlines).; /// Annotations (resolved type names, C++ scopes, etc): isAnnotation().; /// This is a pointer to sema-specific data for the annotation token.; /// Eof:; // This is a pointer to a Decl.; /// Other:; /// This is null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h:69,depend,depends,69,interpreter/llvm-project/clang/include/clang/Lex/Token.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h,1,['depend'],['depends']
Integrability,/// Public interface to the SanitizerBinaryMetadata module pass for emitting; /// metadata for binary analysis sanitizers.; //; /// The pass should be inserted after optimizations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h:11,interface,interface,11,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,1,['interface'],['interface']
Integrability,/// Public interface to the address sanitizer module pass for instrumenting code; /// to check for various memory errors.; ///; /// This adds 'asan.module_ctor' to 'llvm.global_ctors'. This pass may also; /// run intependently of the function address sanitizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h:11,interface,interface,11,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h,1,['interface'],['interface']
Integrability,/// Public interface to the memory profiler module pass for instrumenting code; /// to profile memory allocations and accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h:11,interface,interface,11,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h,1,['interface'],['interface']
Integrability,"/// Pushes \p Val to the stack, as a target-dependent 'int'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp:44,depend,dependent,44,interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp,1,['depend'],['dependent']
Integrability,"/// Pushes \p Val to the stack, as a target-dependent 'long'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp:44,depend,dependent,44,interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp,1,['depend'],['dependent']
Integrability,/// QIdProtocolsAdoptObjCObjectProtocols - Checks that protocols in; /// QT's qualified-id protocol list adopt all protocols in IDecl's list; /// of protocols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:55,protocol,protocols,55,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,8,['protocol'],"['protocol', 'protocols']"
Integrability,"/// Query interface, see AAExecutionDomain; ///{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:10,interface,interface,10,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['interface'],['interface']
Integrability,"/// Quote target names for inclusion in GNU Make dependency files.; /// Only the characters '$', '#', ' ', '\t' are quoted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/MakeSupport.h:49,depend,dependency,49,interpreter/llvm-project/clang/include/clang/Basic/MakeSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/MakeSupport.h,1,['depend'],['dependency']
Integrability,"/// RAII class that determines when any errors have occurred; /// between the time the instance was created and the time it was; /// queried.; ///; /// Note that you almost certainly do not want to use this. It's usually; /// meaningless to ask whether a particular scope triggered an error message,; /// because error messages outside that scope can mark things invalid (or cause; /// us to reach an error limit), which can suppress errors within that scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:291,message,message,291,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,2,['message'],"['message', 'messages']"
Integrability,"/// RAII object wrapping a full-expression or block scope, and handling; /// the ending of the lifetime of temporaries created within it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:16,wrap,wrapping,16,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['wrap'],['wrapping']
Integrability,"/// RAII object wrapping the visitation of a sequenced subexpression of an; /// expression. At the end of this process, the side-effects of the evaluation; /// become sequenced with respect to the value computation of the result, so; /// we downgrade any UK_ModAsSideEffect within the evaluation to; /// UK_ModAsValue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:16,wrap,wrapping,16,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['wrap'],['wrapping']
Integrability,"/// RAII object wrapping the visitation of a subexpression which we might; /// choose to evaluate as a constant. If any subexpression is evaluated and; /// found to be non-constant, this allows us to suppress the evaluation of; /// the outer expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:16,wrap,wrapping,16,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['wrap'],['wrapping']
Integrability,/// RAII wrapper around CFBundleRef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/CFBundle.cpp:9,wrap,wrapper,9,interpreter/llvm-project/llvm/tools/dsymutil/CFBundle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/CFBundle.cpp,2,['wrap'],['wrapper']
Integrability,/// RAII wrapper to manage opening and releasing of a ld_plugin_input_file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp:9,wrap,wrapper,9,interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,1,['wrap'],['wrapper']
Integrability,"/// RDataFrame interface method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:15,interface,interface,15,roofit/roofitcore/inc/RooAbsDataHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h,2,['interface'],['interface']
Integrability,"/// RDataFrame interface method. No tasks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:15,interface,interface,15,roofit/roofitcore/inc/RooAbsDataHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h,1,['interface'],['interface']
Integrability,"/// RET instructions and also instructions that indirect calls/jumps from memory; /// combine a load and a branch within a single instruction. To mitigate these; /// instructions against LVI, they must be decomposed into separate load and; /// branch instructions, with an LFENCE in between. For more details, see:; /// - X86LoadValueInjectionRetHardening.cpp; /// - X86LoadValueInjectionIndirectThunks.cpp; /// - https://software.intel.com/security-software-guidance/insights/deep-dive-load-value-injection; ///; /// Returns `true` if a mitigation was applied or warning was emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:498,inject,injection,498,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['inject'],['injection']
Integrability,"/// RNTuple implements the hadd MergeFile interface; /// Merge this NTuple with the input list entries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTuple.hxx:42,interface,interface,42,tree/ntuple/v7/inc/ROOT/RNTuple.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTuple.hxx,1,['interface'],['interface']
Integrability,"/// Read \p Size bytes from the underlying stream at the current offset and; /// and set \p Buffer to the resulting data slice. Whether a copy occurs; /// depends on the implementation of the underlying stream. Updates the; /// stream's offset to point after the newly read data.; ///; /// \returns a success error code if the data was successfully read, otherwise; /// returns an appropriate error code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h:155,depend,depends,155,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,1,['depend'],['depends']
Integrability,"/// Read a FixedStreamArray of \p NumItems elements and store the result into; /// \p Array. Updates the stream's offset to point after the newly read; /// array. Never causes a copy (although iterating the elements of the; /// FixedStreamArray may, depending upon the implementation of the underlying; /// stream).; ///; /// \returns a success error code if the data was successfully read, otherwise; /// returns an appropriate error code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h:250,depend,depending,250,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,1,['depend'],['depending']
Integrability,"/// Read a VarStreamArray of size \p Size bytes and store the result into; /// \p Array. Updates the stream's offset to point after the newly read; /// array. Never causes a copy (although iterating the elements of the; /// VarStreamArray may, depending upon the implementation of the underlying; /// stream).; ///; /// \returns a success error code if the data was successfully read, otherwise; /// returns an appropriate error code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h:244,depend,depending,244,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,1,['depend'],['depending']
Integrability,"/// Read a \p Length byte string into \p Dest. Whether a copy occurs depends; /// on the implementation of the underlying stream. Updates the stream's; /// offset to point after the newly read data.; ///; /// \returns a success error code if the data was successfully read, otherwise; /// returns an appropriate error code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h:69,depend,depends,69,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,1,['depend'],['depends']
Integrability,"/// Read a null terminated string from \p Dest. Whether a copy occurs depends; /// on the implementation of the underlying stream. Updates the stream's; /// offset to point after the newly read data.; ///; /// \returns a success error code if the data was successfully read, otherwise; /// returns an appropriate error code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h:70,depend,depends,70,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,1,['depend'],['depends']
Integrability,"/// Read a numeric value of type T from the profile.; ///; /// If an error occurs during decoding, a diagnostic message is emitted and; /// EC is set.; ///; /// \returns the read value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:112,message,message,112,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['message'],['message']
Integrability,"/// Read a string from the profile.; ///; /// If an error occurs during decoding, a diagnostic message is emitted and; /// EC is set.; ///; /// \returns the read value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:95,message,message,95,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['message'],['message']
Integrability,"/// Read and return the type with the given index..; ///; /// The index is the type ID, shifted and minus the number of predefs. This; /// routine actually reads the record corresponding to the type at the given; /// location. It is a helper routine for GetType, which deals with reading type; /// IDs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:139,rout,routine,139,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,2,['rout'],['routine']
Integrability,/// Read the set of decls to be checked for deferred diags.; ///; /// The external source should append its own potentially emitted function; /// and variable decls which may cause deferred diags. Note that this routine; /// may be invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:212,rout,routine,212,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,/// Read the set of delegating constructors known to the; /// external Sema source.; ///; /// The external source should append its own delegating constructors to the; /// given vector of declarations. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:217,rout,routine,217,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,/// Read the set of ext_vector type declarations known to the; /// external Sema source.; ///; /// The external source should append its own ext_vector type declarations to; /// the given vector of declarations. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:227,rout,routine,227,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,/// Read the set of late parsed template functions for this source.; ///; /// The external source should insert its own late parsed template functions; /// into the map. Note that this routine may be invoked multiple times; the; /// external source should take care not to introduce the same map entries; /// repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:185,rout,routine,185,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,/// Read the set of pending instantiations known to the external; /// Sema source.; ///; /// The external source should append its own pending instantiations to the; /// given vector. Note that this routine may be invoked multiple times; the; /// external source should take care not to introduce the same instantiations; /// repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:199,rout,routine,199,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,/// Read the set of potentially unused typedefs known to the source.; ///; /// The external source should append its own potentially unused local; /// typedefs to the given vector of declarations. Note that this routine may; /// be invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:212,rout,routine,212,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,/// Read the set of referenced selectors known to the; /// external Sema source.; ///; /// The external source should append its own referenced selectors to the; /// given vector of selectors. Note that this routine; /// may be invoked multiple times; the external source should take care not; /// to introduce the same selectors repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:208,rout,routine,208,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,/// Read the set of tentative definitions known to the external Sema; /// source.; ///; /// The external source should append its own tentative definitions to the; /// given vector of tentative definitions. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:222,rout,routine,222,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,"/// Read the set of unused file-scope declarations known to the; /// external Sema source.; ///; /// The external source should append its own unused, filed-scope to the; /// given vector of declarations. Note that this routine may be; /// invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:220,rout,routine,220,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,/// Read the set of used vtables known to the external Sema source.; ///; /// The external source should append its own used vtables to the given; /// vector. Note that this routine may be invoked multiple times; the external; /// source should take care not to introduce the same vtables repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:174,rout,routine,174,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,"/// Read the set of weak, undeclared identifiers known to the; /// external Sema source.; ///; /// The external source should append its own weak, undeclared identifiers to; /// the given vector. Note that this routine may be invoked multiple times;; /// the external source should take care not to introduce the same identifiers; /// repeatedly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:211,rout,routine,211,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['rout'],['routine']
Integrability,"/// Reads MessagePack objects from memory, one at a time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h:10,Message,MessagePack,10,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h,1,['Message'],['MessagePack']
Integrability,"/// Reads a module from a file. On error, messages are written to stderr; /// and null is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/llvm-diff.cpp:42,message,messages,42,interpreter/llvm-project/llvm/tools/llvm-diff/llvm-diff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/llvm-diff.cpp,1,['message'],['messages']
Integrability,"/// Rebuild an Objective-C exception declaration.; ///; /// By default, performs semantic analysis to build the new declaration.; /// Subclasses may override this routine to provide different behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:163,rout,routine,163,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,/// Rebuild an expression which simply semantically wraps another; /// expression which it shares the type and value kind of.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:52,wrap,wraps,52,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['wrap'],['wraps']
Integrability,"/// Rebuild the operand to an Objective-C \@synchronized statement.; ///; /// By default, performs semantic analysis to build the new statement.; /// Subclasses may override this routine to provide different behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:44,synchroniz,synchronized,44,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,2,"['rout', 'synchroniz']","['routine', 'synchronized']"
Integrability,"/// Receiver - If this summary applies to an Objective-C message expression,; /// this is the effect applied to the state of the receiver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h:57,message,message,57,interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,1,['message'],['message']
Integrability,"/// Recognize a memcpy/memmove from a trivially otherwise unused alloca.; /// TODO: This should probably be integrated with visitAllocSites, but that; /// requires a deeper change to allow either unread or unwritten objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:108,integrat,integrated,108,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['integrat'],['integrated']
Integrability,"/// Record a physical register access.; /// For non-data-dependent uses, OpIdx == -1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:57,depend,dependent,57,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['depend'],['dependent']
Integrability,"/// Record a relocation described by the .reloc directive. Return std::nullopt; /// if succeeded. Otherwise, return a pair (Name is invalid, error message).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:147,message,message,147,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,1,['message'],['message']
Integrability,"/// Record a relocation entry.; ///; /// This routine is called by the assembler after layout and relaxation, and; /// post layout binding. The implementation is responsible for storing; /// information about the relocation so that it can be emitted during; /// writeObject().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h:46,rout,routine,46,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,1,['rout'],['routine']
Integrability,/// Record invoke function and block literal emitted during normal; /// codegen for a block expression. The information is used by; /// emitOpenCLEnqueuedBlock to emit wrapper kernel.; ///; /// \param InvokeF invoke function emitted for the block expression.; /// \param Block block literal emitted for the block expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h:168,wrap,wrapper,168,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h,1,['wrap'],['wrapper']
Integrability,"/// Record occurrences of template type parameter packs; /// when we don't have proper source-location information for; /// them.; ///; /// Ideally, this routine would never be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateVariadic.cpp:154,rout,routine,154,interpreter/llvm-project/clang/lib/Sema/SemaTemplateVariadic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateVariadic.cpp,1,['rout'],['routine']
Integrability,"/// Record that the critical edge (FromBB, ToBB) has been; /// split with NewBB.; /// This is best to use this method instead of directly update the; /// underlying information, because this helps mitigating the; /// number of time the DT information is invalidated.; ///; /// \note Do not use this method with regular edges.; ///; /// \note To benefit from the compile time improvement incurred by this; /// method, the users of this method have to limit the queries to the DT; /// interface between two edges splitting. In other words, they have to; /// pack the splitting of critical edges as much as possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineDominators.h:483,interface,interface,483,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineDominators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineDominators.h,1,['interface'],['interface']
Integrability,"/// Record the downward impact of a single instruction on current register; /// pressure. Unlike the advance/recede pressure tracking interface, this does; /// not discover live in/outs.; ///; /// This is intended for speculative queries. It leaves pressure inconsistent; /// with the current position, so must be restored by the caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp:134,interface,interface,134,interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp,1,['interface'],['interface']
Integrability,"/// Record the upward impact of a single instruction on current register; /// pressure. Unlike the advance/recede pressure tracking interface, this does; /// not discover live in/outs.; ///; /// This is intended for speculative queries. It leaves pressure inconsistent; /// with the current position, so must be restored by the caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp:132,interface,interface,132,interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp,1,['interface'],['interface']
Integrability,"/// Records if this value needs to be treated in an ABI dependant manner,; /// different to normal type legalization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:56,depend,dependant,56,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,1,['depend'],['dependant']
Integrability,"/// Records that the value at the current path is invalid.; /// Message is e.g. ""expected number"" and becomes part of the final error.; /// This overwrites any previously written error message in the root.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:64,Message,Message,64,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,2,"['Message', 'message']","['Message', 'message']"
Integrability,"/// Records whether it is allowed to have the original scalar loop execute at; /// least once. This may be needed as a fallback loop in case runtime; /// aliasing/dependence checks fail, or to handle the tail/remainder; /// iterations when the trip count is unknown or doesn't divide by the VF,; /// or as a peel-loop to handle gaps in interleave-groups.; /// Under optsize and when the trip count is very small we don't allow any; /// iterations to execute in the scalar loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:163,depend,dependence,163,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['depend'],['dependence']
Integrability,"/// Recursively computes a zero-based global bin index, given...; ///; /// - A set of zero-based per-axis bin indices; /// - The number of considered bins on each axis (can be either `GetNBinsNoOver`; /// or `GetNBins` depending on what you are trying to do); /// - A policy of treating all bins qs regular (i.e. no negative indices)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:219,depend,depending,219,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['depend'],['depending']
Integrability,"/// Recursively computes zero-based local bin indices, given...; ///; /// - A zero-based global bin index; /// - The number of considered bins on each axis (can be either `GetNBinsNoOver`; /// or `GetNBins` depending on what you are trying to do); /// - A policy of treating all bins as regular (i.e. no negative indices)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:207,depend,depending,207,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['depend'],['depending']
Integrability,/// Recursively populates a set with all conformed protocols in a class; /// hierarchy that have the 'objc_protocol_requires_explicit_implementation'; /// attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:51,protocol,protocols,51,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['protocol'],['protocols']
Integrability,"/// Recursively visit an Objective-C protocol reference with location; /// information.; ///; /// \returns false if the visitation was terminated early, true otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:37,protocol,protocol,37,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,1,['protocol'],['protocol']
Integrability,"/// Recursively walk the \p DIE tree and look for DIEs to keep. Store that; /// information in \p CU's DIEInfo.; ///; /// This function is the entry point of the DIE selection algorithm. It is; /// expected to walk the DIE tree and(through the mediation of; /// Context.File.Addresses) ask for relocation adjustment value on each; /// DIE that might be a 'root DIE'(f.e. subprograms, variables).; ///; /// Returns true if all dependencies are correctly discovered. Inter-CU; /// dependencies cannot be discovered if referenced CU is not analyzed yet.; /// If that is the case this method returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h:244,mediat,mediation,244,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,3,"['depend', 'mediat']","['dependencies', 'mediation']"
Integrability,"/// Recursively walk the \p DIE tree and look for DIEs to keep. Store that; /// information in \p CU's DIEInfo.; ///; /// This function is the entry point of the DIE selection algorithm. It is; /// expected to walk the DIE tree in file order and (though the mediation of; /// its helper) call hasValidRelocation() on each DIE that might be a 'root; /// DIE' (See DwarfLinker class comment).; ///; /// While walking the dependencies of root DIEs, this function is also called,; /// but during these dependency walks the file order is not respected. The; /// TF_DependencyWalk flag tells us which kind of traversal we are currently; /// doing.; ///; /// The recursive algorithm is implemented iteratively as a work list because; /// very deep recursion could exhaust the stack for large projects. The work; /// list acts as a scheduler for different types of work that need to be; /// performed.; ///; /// The recursive nature of the algorithm is simulated by running the ""main""; /// algorithm (LookForDIEsToKeep) followed by either looking at more DIEs; /// (LookForChildDIEsToKeep, LookForRefDIEsToKeep, LookForParentDIEsToKeep) or; /// fixing up a computed property (UpdateChildIncompleteness,; /// UpdateRefIncompleteness).; ///; /// The return value indicates whether the DIE is incomplete.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:258,mediat,mediation,258,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,3,"['depend', 'mediat']","['dependencies', 'dependency', 'mediation']"
Integrability,"/// RecyclingAllocator - This class wraps an Allocator, adding the; /// functionality of recycling deleted objects.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h:36,wrap,wraps,36,interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h,1,['wrap'],['wraps']
Integrability,"/// Reference to a CachedFileSystemEntry.; /// If the underlying entry is an opened file, this wrapper returns the file; /// contents and the scanned preprocessor directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h:95,wrap,wrapper,95,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,1,['wrap'],['wrapper']
Integrability,/// Referenced protocols,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:15,protocol,protocols,15,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['protocol'],['protocols']
Integrability,/// RegAllocBase provides the register allocation driver and interface that can; /// be extended to add interesting heuristics.; ///; /// Register allocators must override the selectOrSplit() method to implement; /// live range splitting. They must also override enqueue/dequeue to provide an; /// assignment order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.h:61,interface,interface,61,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.h,1,['interface'],['interface']
Integrability,"/// Register a diagnostic that can, but need not necessarily be issued.; /// \param severity One of kInfo kWarning kError kSysError.; /// \param location Function name where the diagnostic should be issued.; /// \param message Diagnostic message.; /// \param matchFullMessage If true, the message must be exactly identical.; /// If false, it's sufficient that `message` is a substring of the diagnostic message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx:219,message,message,219,core/testsupport/inc/ROOT/TestSupport.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx,5,['message'],['message']
Integrability,/// Register a function analysis ID that the results aggregation depends on.; ///; /// This is used in the new pass manager to implement the invalidation logic; /// where we must invalidate the results aggregation if any of our component; /// analyses become invalid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:65,depend,depends,65,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['depend'],['depends']
Integrability,"/// Register a new diagnostic to check for.; /// \param severity One of kInfo kWarning kError kSysError.; /// \param location Function name where the diagnostic should be issued.; /// \param message Diagnostic message.; /// \param matchFullMessage If true, the message must be exactly identical.; /// If false, it's sufficient that `message` is a substring of the diagnostic message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx:191,message,message,191,core/testsupport/inc/ROOT/TestSupport.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx,5,['message'],['message']
Integrability,/// Register information about a dependent action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:33,depend,dependent,33,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependent']
Integrability,"/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.; /// Analysis groups are used to define an interface (which need not derive from; /// Pass) that is required by passes to do their job. Analysis Groups differ; /// from normal analyses because any available implementation of the group will; /// be used if it is available.; ///; /// If no analysis implementing the interface is available, a default; /// implementation is created and added. A pass registers itself as the default; /// implementation by specifying 'true' as the second template argument of this; /// class.; ///; /// In addition to registering itself as an analysis group member, a pass must; /// register itself normally as well. Passes may be members of multiple groups; /// and may still be ""required"" specifically by name.; ///; /// The actual interface may also be registered as well (by not specifying the; /// second template argument). The interface should be registered to associate; /// a nice name with the interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:123,interface,interface,123,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h,5,['interface'],['interface']
Integrability,"/// Registers a URL pattern routing rule. When the server is listening, each; /// request is dispatched to the first registered handler whose UrlPathPattern; /// matches the UrlPath.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:28,rout,routing,28,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,1,['rout'],['routing']
Integrability,/// Registers all available CGSCC analysis passes.; ///; /// This is an interface that can be used to populate a \c CGSCCAnalysisManager; /// with all registered CGSCC analyses. Callers can still manually register any; /// additional analyses. Callers can also pre-register analyses and this will; /// not override those.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:72,interface,interface,72,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['interface'],['interface']
Integrability,/// Registers all available function analysis passes.; ///; /// This is an interface that can be used to populate a \c; /// FunctionAnalysisManager with all registered function analyses. Callers can; /// still manually register any additional analyses. Callers can also; /// pre-register analyses and this will not override those.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:75,interface,interface,75,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['interface'],['interface']
Integrability,/// Registers all available loop analysis passes.; ///; /// This is an interface that can be used to populate a \c LoopAnalysisManager; /// with all registered loop analyses. Callers can still manually register any; /// additional analyses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:71,interface,interface,71,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['interface'],['interface']
Integrability,/// Registers all available machine function analysis passes.; ///; /// This is an interface that can be used to populate a \c; /// MachineFunctionAnalysisManager with all registered function analyses.; /// Callers can still manually register any additional analyses. Callers can; /// also pre-register analyses and this will not override those.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:83,interface,interface,83,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['interface'],['interface']
Integrability,/// Registers all available module analysis passes.; ///; /// This is an interface that can be used to populate a \c; /// ModuleAnalysisManager with all registered module analyses. Callers can; /// still manually register any additional analyses. Callers can also; /// pre-register analyses and this will not override those.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:73,interface,interface,73,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['interface'],['interface']
Integrability,/// Remember the dependences on the top of the dependence stack such that they; /// may trigger further updates. (\see DependenceStack),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:17,depend,dependences,17,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,3,"['Depend', 'depend']","['DependenceStack', 'dependence', 'dependences']"
Integrability,/// Remove architecture slice from Interface.; ///; /// \param Arch architecture to remove.; /// \return New Interface File with removed architecture slice.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:35,Interface,Interface,35,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,2,['Interface'],['Interface']
Integrability,/// Remove the target-dependent attribute from the builder.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:22,depend,dependent,22,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,2,['depend'],['dependent']
Integrability,"/// Remove this link from a chain's list of notify subscribers.; /// Templated only to remove an include dependency from TChain: it expects; /// a TChain as input (in practice anything that implements SetNotify and; /// GetNotify will work, but in ROOT that is only TTree and its sub-classes).; /// \note No error is emitted if the TNotifyLink is not part of the linked list; /// for the chain passed as argument. The TNotifyLink will still remove itself; /// from the doubly linked list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:105,depend,dependency,105,core/base/inc/TNotifyLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h,1,['depend'],['dependency']
Integrability,"/// Removes an instruction from the dependence analysis, updating the; /// dependence of instructions that previously depended on it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:36,depend,dependence,36,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,3,['depend'],"['depended', 'dependence']"
Integrability,"/// Removes the given JITDylibs from the ExecutionSession.; ///; /// This method clears all resources held for the JITDylibs, puts them in the; /// closed state, and clears all references to them that are held by the; /// ExecutionSession or other JITDylibs. No further code can be added to the; /// removed JITDylibs, and the JITDylib objects will be freed once any; /// remaining JITDylibSPs pointing to them are destroyed.; ///; /// This method does *not* run static destructors for code contained in the; /// JITDylibs, and each JITDylib can only be removed once.; ///; /// JITDylibs will be removed in the order given. Teardown is usually; /// independent for each JITDylib, but not always. In particular, where the; /// ORC runtime is used it is expected that teardown off all JITDylibs will; /// depend on it, so the JITDylib containing the ORC runtime must be removed; /// last. If the client has introduced any other dependencies they should be; /// accounted for in the removal order too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:803,depend,depend,803,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,2,['depend'],"['depend', 'dependencies']"
Integrability,"/// Reorders the instructions that I depends on (the instructions defining its; /// operands), to ensure they dominate I.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:37,depend,depends,37,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,1,['depend'],['depends']
Integrability,"/// Replace a call to the specified intrinsic function.; /// If an intrinsic function must be implemented by the code generator; /// (such as va_start), this function should print a message and abort.; ///; /// Otherwise, if an intrinsic function call can be lowered, the code to; /// implement it (often a call to a non-intrinsic function) is inserted; /// _after_ the call instruction and the call is deleted. The caller must; /// be capable of handling this kind of change.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/IntrinsicLowering.h:182,message,message,182,interpreter/llvm-project/llvm/include/llvm/CodeGen/IntrinsicLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/IntrinsicLowering.h,1,['message'],['message']
Integrability,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:492,depend,dependent,492,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['depend'],['dependent']
Integrability,"/// Replace occurrences of '.' with '_' in each string passed as argument.; /// An Info message is printed when this happens. Dots at the end of the string are not replaced.; /// An exception is thrown in case the resulting set of strings would contain duplicates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx:88,message,message,88,tree/dataframe/src/RDFUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx,1,['message'],['message']
Integrability,"/// Replace the last token with an annotation token.; ///; /// Like AnnotateCachedTokens(), this routine replaces an; /// already-parsed (and resolved) token with an annotation; /// token. However, this routine only replaces the last token with; /// the annotation token; it does not affect any other cached; /// tokens. This function has no effect if backtracking is not; /// enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:97,rout,routine,97,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,2,['rout'],['routine']
Integrability,"/// Replace the tokens that form a simple-template-id with an; /// annotation token containing the complete template-id.; ///; /// The first token in the stream must be the name of a template that; /// is followed by a '<'. This routine will parse the complete; /// simple-template-id and replace the tokens with a single annotation; /// token with one of two different kinds: if the template-id names a; /// type (and \p AllowTypeAnnotation is true), the annotation token is; /// a type annotation that includes the optional nested-name-specifier; /// (\p SS). Otherwise, the annotation token is a template-id; /// annotation that does not include the optional; /// nested-name-specifier.; ///; /// \param Template the declaration of the template named by the first; /// token (an identifier), as returned from \c Action::isTemplateName().; ///; /// \param TNK the kind of template that \p Template; /// refers to, as returned from \c Action::isTemplateName().; ///; /// \param SS if non-NULL, the nested-name-specifier that precedes; /// this template name.; ///; /// \param TemplateKWLoc if valid, specifies that this template-id; /// annotation was preceded by the 'template' keyword and gives the; /// location of that keyword. If invalid (the default), then this; /// template-id was not preceded by a 'template' keyword.; ///; /// \param AllowTypeAnnotation if true (the default), then a; /// simple-template-id that refers to a class template, template; /// template parameter, or other template that produces a type will be; /// replaced with a type annotation token. Otherwise, the; /// simple-template-id is always replaced with a template-id; /// annotation token.; ///; /// \param TypeConstraint if true, then this is actually a type-constraint,; /// meaning that the template argument list can be omitted (and the template in; /// question must be a concept).; ///; /// If an unrecoverable parse error occurs and no annotation token can be; /// formed, this function returns true.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp:229,rout,routine,229,interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,1,['rout'],['routine']
Integrability,/// Replace/modify any TargetFrameIndex operands with a targte-dependent; /// sequence of memory operands that is recognized by PrologEpilogInserter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:63,depend,dependent,63,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['depend'],['dependent']
Integrability,"/// Replaces a template-id annotation token with a type; /// annotation token.; ///; /// If there was a failure when forming the type from the template-id,; /// a type annotation token will still be created, but will have a; /// NULL type pointer to signify an error.; ///; /// \param SS The scope specifier appearing before the template-id, if any.; ///; /// \param AllowImplicitTypename whether this is a context where T::type; /// denotes a dependent type.; /// \param IsClassName Is this template-id appearing in a context where we; /// know it names a class, such as in an elaborated-type-specifier or; /// base-specifier? ('typename' and 'template' are unneeded and disallowed; /// in those contexts.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp:444,depend,dependent,444,interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,1,['depend'],['dependent']
Integrability,/// Replaces the generic bug report message that is output upon; /// a crash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h:36,message,message,36,interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h,1,['message'],['message']
Integrability,/// Report a fatal error if Err is a failure value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns; /// // Error::success().; /// Error foo(bool DoFallibleOperation);; ///; /// cantFail(foo(false));; /// @endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:91,wrap,wrap,91,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['wrap'],['wrap']
Integrability,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained reference.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns a Bar&.; /// Expected<Bar&> foo(bool DoFallibleOperation);; ///; /// Bar &X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:156,wrap,wrap,156,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['wrap'],['wrap']
Integrability,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns an int.; /// Expected<int> foo(bool DoFallibleOperation);; ///; /// int X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:152,wrap,wrap,152,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['wrap'],['wrap']
Integrability,"/// Report a message to the currently installed diagnostic handler.; ///; /// This function returns, in particular in the case of error reporting; /// (DI.Severity == \a DS_Error), so the caller should leave the compilation; /// process in a self-consistent state, even though the generated code; /// need not be correct.; ///; /// The diagnostic message will be implicitly prefixed with a severity keyword; /// according to \p DI.getSeverity(), i.e., ""error: "" for \a DS_Error,; /// ""warning: "" for \a DS_Warning, and ""note: "" for \a DS_Note.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:13,message,message,13,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,2,['message'],['message']
Integrability,/// Report a parse error message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:25,message,message,25,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['message'],['message']
Integrability,/// Report an error at the current location with the given message.; ///; /// This function always return true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp:59,message,message,59,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,1,['message'],['message']
Integrability,/// Report an error at the given location with the given message.; ///; /// This function always return true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp:57,message,message,57,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,1,['message'],['message']
Integrability,/// Report an error with the given message at the given location.; ///; /// Always returns true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp:35,message,message,35,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp,1,['message'],['message']
Integrability,/// Report an error with the given message at unknown location.; ///; /// Always returns true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp:35,message,message,35,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIRParser.cpp,1,['message'],['message']
Integrability,/// Reports a diagnostic message to indicate an invalid size request has been; /// done on a scalable vector. This function may not return.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:25,message,message,25,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,1,['message'],['message']
Integrability,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:293,message,message,293,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"/// Reports an informative message: print \p Msg for debugging purposes as well; /// as an optimization remark. Uses either \p I as location of the remark, or; /// otherwise \p TheLoop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorize.h:27,message,message,27,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorize.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorize.h,1,['message'],['message']
Integrability,"/// Reports errors if a module must not include a specific file.; ///; /// \param RequestingModule The module including a file.; ///; /// \param RequestingModuleIsModuleInterface \c true if the inclusion is in; /// the interface of RequestingModule, \c false if it's in the; /// implementation of RequestingModule. Value is ignored and; /// meaningless if RequestingModule is nullptr.; ///; /// \param FilenameLoc The location of the inclusion's filename.; ///; /// \param Filename The included filename as written.; ///; /// \param File The included file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:219,interface,interface,219,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['interface'],['interface']
Integrability,/// Reports unsupported message \p Msg for \p MI to LLVM context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:24,message,message,24,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,1,['message'],['message']
Integrability,/// Represent the type of SchedCandidate found within a single queue.; /// pickNodeBidirectional depends on these listed by decreasing priority.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:97,depend,depends,97,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['depend'],['depends']
Integrability,"/// Representation for a specific memory location.; ///; /// This abstraction can be used to represent a specific location in memory.; /// The goal of the location is to represent enough information to describe; /// abstract aliasing, modification, and reference behaviors of whatever; /// value(s) are stored in memory at the particular location.; ///; /// The primary user of this interface is LLVM's Alias Analysis, but other; /// memory analyses such as MemoryDependence can use it as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h:383,interface,interface,383,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,1,['interface'],['interface']
Integrability,"/// Representation of a Microsoft __if_exists or __if_not_exists; /// statement with a dependent name.; ///; /// The __if_exists statement can be used to include a sequence of statements; /// in the program only when a particular dependent name does not exist. For; /// example:; ///; /// \code; /// template<typename T>; /// void call_foo(T &t) {; /// __if_exists (T::foo) {; /// t.foo(); // okay: only called when T::foo exists.; /// }; /// }; /// \endcode; ///; /// Similarly, the __if_not_exists statement can be used to include the; /// statements when a particular name does not exist.; ///; /// Note that this statement only captures __if_exists and __if_not_exists; /// statements whose name is dependent. All non-dependent cases are handled; /// directly in the parser, so that they don't introduce a new scope. Clang; /// introduces scopes in the dependent case to keep names inside the compound; /// statement from leaking out into the surround statements, which would; /// compromise the template instantiation model. This behavior differs from; /// Visual C++ (which never introduces a scope), but is a fairly reasonable; /// approximation of the VC++ behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:87,depend,dependent,87,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,5,['depend'],['dependent']
Integrability,"/// Representative of a block.; ///; /// This is a simple wrapper around an index into the reverse-post-order; /// traversal of the blocks.; ///; /// Unlike a block pointer, its order has meaning (location in the; /// topological sort) and it's class is the same regardless of block type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h:58,wrap,wrapper,58,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,1,['wrap'],['wrapper']
Integrability,/// Represents Objective-C's \@synchronized statement.; ///; /// Example:; /// \code; /// @synchronized (sem) {; /// do-something;; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtObjC.h:31,synchroniz,synchronized,31,interpreter/llvm-project/clang/include/clang/AST/StmtObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtObjC.h,2,['synchroniz'],['synchronized']
Integrability,/// Represents a 'co_await' expression while the type of the promise; /// is dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:77,depend,dependent,77,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['dependent']
Integrability,"/// Represents a C++ member access expression for which lookup; /// produced a set of overloaded functions.; ///; /// The member access may be explicit or implicit:; /// \code; /// struct A {; /// int a, b;; /// int explicitAccess() { return this->a + this->A::b; }; /// int implicitAccess() { return a + A::b; }; /// };; /// \endcode; ///; /// In the final AST, an explicit access always becomes a MemberExpr.; /// An implicit access may become either a MemberExpr or a; /// DeclRefExpr, depending on whether the member is static.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:489,depend,depending,489,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['depending']
Integrability,"/// Represents a C++ member access expression where the actual; /// member referenced could not be resolved because the base; /// expression or the member name was dependent.; ///; /// Like UnresolvedMemberExprs, these can be either implicit or; /// explicit accesses. It is only possible to get one of these with; /// an implicit access if a qualifier is provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:164,depend,dependent,164,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['dependent']
Integrability,"/// Represents a C++ nested name specifier, such as; /// ""\::std::vector<int>::"".; ///; /// C++ nested name specifiers are the prefixes to qualified; /// names. For example, ""foo::"" in ""foo::x"" is a nested name; /// specifier. Nested name specifiers are made up of a sequence of; /// specifiers, each of which can be a namespace, type, identifier; /// (for dependent names), decltype specifier, or the global specifier ('::').; /// The last two specifiers can only appear at the start of a; /// nested-namespace-specifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:357,depend,dependent,357,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,1,['depend'],['dependent']
Integrability,"/// Represents a C++ template name within the type system.; ///; /// A C++ template name refers to a template within the C++ type; /// system. In most cases, a template name is simply a reference to a; /// class template, e.g.; ///; /// \code; /// template<typename T> class X { };; ///; /// X<int> xi;; /// \endcode; ///; /// Here, the 'X' in \c X<int> is a template name that refers to the; /// declaration of the class template X, above. Template names can; /// also refer to function templates, C++0x template aliases, etc.; ///; /// Some template names are dependent. For example, consider:; ///; /// \code; /// template<typename MetaFun, typename T1, typename T2> struct apply2 {; /// typedef typename MetaFun::template apply<T1, T2>::type type;; /// };; /// \endcode; ///; /// Here, ""apply"" is treated as a template name within the typename; /// specifier in the typedef. ""apply"" is a nested template, and can; /// only be understood in the context of",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:562,depend,dependent,562,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['depend'],['dependent']
Integrability,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1082,depend,dependent,1082,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,6,['depend'],['dependent']
Integrability,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:495,wrap,wrapper,495,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,2,"['depend', 'wrap']","['depending', 'wrapper']"
Integrability,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:196,protocol,protocols,196,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,8,['protocol'],"['protocol', 'protocols']"
Integrability,"/// Represents a dependent template name that cannot be; /// resolved prior to template instantiation.; ///; /// This kind of template name refers to a dependent template name,; /// including its nested name specifier (if any). For example,; /// DependentTemplateName can refer to ""MetaFun::template apply"",; /// where ""MetaFun::"" is the nested name specifier and ""apply"" is the; /// template name referenced. The ""template"" keyword is implied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:17,depend,dependent,17,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,3,"['Depend', 'depend']","['DependentTemplateName', 'dependent']"
Integrability,/// Represents a dependent using declaration which was marked with; /// \c typename.; ///; /// \code; /// template \<class T> class A : public Base<T> {; /// using typename Base<T>::foo;; /// };; /// \endcode; ///; /// The type associated with an unresolved using typename decl is; /// currently always a typename type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:17,depend,dependent,17,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['depend'],['dependent']
Integrability,"/// Represents a dependent using declaration which was not marked with; /// \c typename.; ///; /// Unlike non-dependent using declarations, these *only* bring through; /// non-types; otherwise they would break two-phase lookup.; ///; /// \code; /// template \<class T> class A : public Base<T> {; /// using Base<T>::foo;; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:17,depend,dependent,17,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,2,['depend'],['dependent']
Integrability,/// Represents a directive that's lexed as part of the dependency directives; /// scanning. It's used to track various preprocessor directives that could; /// potentially have an effect on the dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:55,depend,dependency,55,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,2,['depend'],"['dependencies', 'dependency']"
Integrability,"/// Represents a field chain. A field chain is a list of fields where the first; /// element of the chain is the object under checking (not stored), and every; /// other element is a field, and the element that precedes it is the object; /// that contains it.; ///; /// Note that this class is immutable (essentially a wrapper around an; /// ImmutableList), new FieldChainInfo objects may be created by member; /// functions such as add() and replaceHead().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h:319,wrap,wrapper,319,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,1,['wrap'],['wrapper']
Integrability,/// Represents a field injected from an anonymous union/struct into the parent; /// scope. These are always implicit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:23,inject,injected,23,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['inject'],['injected']
Integrability,/// Represents a folding of a pack over an operator.; ///; /// This expression is always dependent and represents a pack expansion of the; /// forms:; ///; /// ( expr op ... ); /// ( ... op expr ); /// ( expr op ... op expr ),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:89,depend,dependent,89,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['dependent']
Integrability,/// Represents a matrix type where the type and the number of rows and columns; /// is dependent on a template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:87,depend,dependent,87,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependent']
Integrability,"/// Represents a nonloc::LocAsInteger or void* field, that point to objects, but; /// needs to be casted back to its dynamic type for a correct note message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedPointee.cpp:149,message,message,149,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedPointee.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedPointee.cpp,1,['message'],['message']
Integrability,"/// Represents a pointer to an Objective C object.; ///; /// These are constructed from pointer declarators when the pointee type is; /// an ObjCObjectType (or sugar for one). In addition, the 'id' and 'Class'; /// types are typedefs for these, and the protocol-qualified types 'id<P>'; /// and 'Class<P>' are translated into these.; ///; /// Pointers to pointers to Objective C objects are still PointerTypes;; /// only the first level of pointer gets it own type implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:253,protocol,protocol-qualified,253,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocol-qualified']
Integrability,"/// Represents a prvalue temporary that is written into memory so that; /// a reference can bind to it.; ///; /// Prvalue expressions are materialized when they need to have an address; /// in memory for a reference to bind to. This happens when binding a; /// reference to the result of a conversion, e.g.,; ///; /// \code; /// const int &r = 1.0;; /// \endcode; ///; /// Here, 1.0 is implicitly converted to an \c int. That resulting \c int is; /// then materialized via a \c MaterializeTemporaryExpr, and the reference; /// binds to the temporary. \c MaterializeTemporaryExprs are always glvalues; /// (either an lvalue or an xvalue, depending on the kind of reference binding; /// to it), maintaining the invariant that references always bind to glvalues.; ///; /// Reference binding and copy-elision can both extend the lifetime of a; /// temporary. When either happens, the expression will also track the; /// declaration which is responsible for the lifetime extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:637,depend,depending,637,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['depending']
Integrability,"/// Represents a qualified type name for which the type name is; /// dependent.; ///; /// DependentNameType represents a class of dependent types that involve a; /// possibly dependent nested-name-specifier (e.g., ""T::"") followed by a; /// name of a type. The DependentNameType may start with a ""typename"" (for a; /// typename-specifier), ""class"", ""struct"", ""union"", or ""enum"" (for a; /// dependent elaborated-type-specifier), or nothing (in contexts where we; /// know that we must be referring to a type, e.g., in a base class specifier).; /// Typically the nested-name-specifier is dependent, but in MSVC compatibility; /// mode, this type is used with non-dependent names to delay name lookup until; /// instantiation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:69,depend,dependent,69,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,8,"['Depend', 'depend']","['DependentNameType', 'dependent']"
Integrability,"/// Represents a serialized wrapper function call.; /// Serializing calls themselves allows us to batch them: We can make one; /// ""run-wrapper-functions"" utility and send it a list of calls to run.; ///; /// The motivating use-case for this API is JITLink allocation actions, where; /// we want to run multiple functions to finalize linked memory without having; /// to make separate IPC calls for each one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:28,wrap,wrapper,28,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,2,['wrap'],"['wrapper', 'wrapper-functions']"
Integrability,"/// Represents a single DWARF expression, whose value is location-dependent.; /// Typically used in DW_AT_location attributes to describe the location of; /// objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFLocationExpression.h:66,depend,dependent,66,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFLocationExpression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFLocationExpression.h,1,['depend'],['dependent']
Integrability,/// Represents a type parameter type in Objective C. It can take; /// a list of protocols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:80,protocol,protocols,80,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocols']
Integrability,"/// Represents a type template specialization; the template; /// must be a class template, a type alias template, or a template; /// template parameter. A template which cannot be resolved to one of; /// these, e.g. because it is written with a dependent scope; /// specifier, is instead represented as a; /// @c DependentTemplateSpecializationType.; ///; /// A non-dependent template specialization type is always ""sugar"",; /// typically for a \c RecordType. For example, a class template; /// specialization type of \c vector<int> will refer to a tag type for; /// the instantiation \c std::vector<int, std::allocator<int>>; ///; /// Template specializations are dependent if either the template or; /// any of the template arguments are dependent, in which case the; /// type may also be canonical.; ///; /// Instances of this type are allocated with a trailing array of; /// TemplateArguments, followed by a QualType representing the; /// non-canonical aliased type when the template is a type alias; /// template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:245,depend,dependent,245,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,5,"['Depend', 'depend']","['DependentTemplateSpecializationType', 'dependent']"
Integrability,"/// Represents a vector type where either the type or size is dependent.; ////; /// For example:; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((vector_size(Size))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:62,depend,dependent,62,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependent']
Integrability,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:161,interface,interface,161,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,3,"['interface', 'protocol']","['interface', 'protocol']"
Integrability,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:30,protocol,protocol,30,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,11,"['Protocol', 'interface', 'protocol']","['Protocols', 'interface', 'interfaces', 'protocol', 'protocols']"
Integrability,"/// Represents an alternative of the PatFrag. When parsing a GICombinePatFrag,; /// this is created from its ""Alternatives"" list. Each alternative is a list; /// of patterns written wrapped in a `(pattern ...)` dag init.; ///; /// Each argument to the `pattern` DAG operator is parsed into a Pattern; /// instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h:182,wrap,wrapped,182,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,1,['wrap'],['wrapped']
Integrability,"/// Represents an array type in C++ whose size is a value-dependent expression.; ///; /// For example:; /// \code; /// template<typename T, int Size>; /// class array {; /// T data[Size];; /// };; /// \endcode; ///; /// For these types, we won't actually know what the array bound is; /// until template instantiation occurs, at which point this will; /// become either a ConstantArrayType or a VariableArrayType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:58,depend,dependent,58,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependent']
Integrability,"/// Represents an extended address space qualifier where the input address space; /// value is dependent. Non-dependent address spaces are not represented with a; /// special Type subclass; they are stored on an ExtQuals node as part of a QualType.; ///; /// For example:; /// \code; /// template<typename T, int AddrSpace>; /// class AddressSpace {; /// typedef T __attribute__((address_space(AddrSpace))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:95,depend,dependent,95,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['depend'],['dependent']
Integrability,"/// Represents an extended vector type where either the type or size is; /// dependent.; ///; /// For example:; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((ext_vector_type(Size))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:77,depend,dependent,77,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependent']
Integrability,"/// Represents one property declaration in an Objective-C interface.; ///; /// For example:; /// \code{.mm}; /// \@property (assign, readwrite) int MyProperty;; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:58,interface,interface,58,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,"/// Represents that the FieldNode that comes after this is declared in a base; /// of the previous FieldNode. As such, this descendant doesn't wrap a; /// FieldRegion, and is purely a tool to describe a relation between two other; /// FieldRegion wrapping descendants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp:143,wrap,wrap,143,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp,2,['wrap'],"['wrap', 'wrapping']"
Integrability,/// Represents the body of a coroutine. This wraps the normal function; /// body and holds the additional semantic context required to set up and tear; /// down the coroutine frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:45,wrap,wraps,45,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,1,['wrap'],['wraps']
Integrability,"/// Represents the declaration of an Objective-C type parameter.; ///; /// \code; /// @interface NSDictionary<Key : id<NSCopying>, Value>; /// @end; /// \endcode; ///; /// In the example above, both \c Key and \c Value are represented by; /// \c ObjCTypeParamDecl. \c Key has an explicit bound of \c id<NSCopying>,; /// while \c Value gets an implicit bound of \c id.; ///; /// Objective-C type parameters are typedef-names in the grammar,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:87,interface,interface,87,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,"/// Represents the dependent type named by a dependently-scoped; /// typename using declaration, e.g.; /// using typename Base<T>::foo;; ///; /// Template instantiation turns these into the underlying type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:19,depend,dependent,19,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['depend'],"['dependent', 'dependently-scoped']"
Integrability,/// Represents the diagnostic message with the error message associated; /// and the information on the location of the problem.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h:30,message,message,30,interpreter/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h,2,['message'],['message']
Integrability,"/// Represents the ways an Objective-C message send can occur.; //; // Note to maintainers: OCM_Message should always be last, since it does not; // need to fit in the Data field's low bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:39,message,message,39,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['message'],['message']
Integrability,"/// Require that the context specified by SS be complete.; ///; /// If SS refers to a type, this routine checks whether the type is; /// complete enough (or can be made complete enough) for name lookup; /// into the DeclContext. A type that is not yet completed can be; /// considered ""complete enough"" if it is a class/struct/union/enum; /// that is currently being defined. Or, if we have a type that names; /// a class template specialization that is not a complete type, we; /// will attempt to instantiate that class template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:97,rout,routine,97,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,1,['rout'],['routine']
Integrability,"/// Reserves buffer and LSUnit queue resources that are necessary to issue; /// this instruction.; ///; /// Returns true if instruction IR is ready to be issued to the underlying; /// pipelines. Note that this operation cannot fail; it assumes that a; /// previous call to method `isAvailable(IR)` returned `SC_AVAILABLE`.; ///; /// If IR is a memory operation, then the Scheduler queries the LS unit to; /// obtain a LS token. An LS token is used internally to track memory; /// dependencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:480,depend,dependencies,480,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,1,['depend'],['dependencies']
Integrability,"/// Resolve the given export declaration into an actual export; /// declaration.; ///; /// \param Mod The module in which we're resolving the export declaration.; ///; /// \param Unresolved The export declaration to resolve.; ///; /// \param Complain Whether this routine should complain about unresolvable; /// exports.; ///; /// \returns The resolved export declaration, which will have a NULL pointer; /// if the export could not be resolved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:264,rout,routine,264,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['rout'],['routine']
Integrability,"/// Resolve the given module id to an actual module.; ///; /// \param Id The module-id to resolve.; ///; /// \param Mod The module in which we're resolving the module-id.; ///; /// \param Complain Whether this routine should complain about unresolvable; /// module-ids.; ///; /// \returns The resolved module, or null if the module-id could not be; /// resolved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:210,rout,routine,210,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['rout'],['routine']
Integrability,"/// ResolveAddressOfOverloadedFunction - Try to resolve the address of; /// an overloaded function (C++ [over.over]), where @p From is an; /// expression with overloaded function type and @p ToType is the type; /// we're trying to resolve to. For example:; ///; /// @code; /// int f(double);; /// int f(int);; ///; /// int (*pfd)(double) = f; // selects f(double); /// @endcode; ///; /// This routine returns the resulting FunctionDecl if it could be; /// resolved, and NULL otherwise. When @p Complain is true, this; /// routine will emit diagnostics if there is an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:393,rout,routine,393,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,2,['rout'],['routine']
Integrability,"/// Result of a LiveRange query. This class hides the implementation details; /// of live ranges, and it should be used as the primary interface for; /// examining live ranges around instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h:135,interface,interface,135,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,1,['interface'],['interface']
Integrability,"/// Result of the dependence checks, indicating whether the checked; /// dependences are safe for vectorization, require RT checks or are known to; /// be unsafe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:18,depend,dependence,18,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,2,['depend'],"['dependence', 'dependences']"
Integrability,/// Retrieve a qualifying protocol by index on the object type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:26,protocol,protocol,26,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocol']
Integrability,/// Retrieve all of the protocol qualifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:24,protocol,protocol,24,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocol']
Integrability,"/// Retrieve an iterator into the set of all identifiers; /// known to this identifier lookup source.; ///; /// This routine provides access to all of the identifiers known to; /// the identifier lookup, allowing access to the contents of the; /// identifiers without introducing the overhead of constructing; /// IdentifierInfo objects for each.; ///; /// \returns A new iterator into the set of known identifiers. The; /// caller is responsible for deleting this iterator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:117,rout,routine,117,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['rout'],['routine']
Integrability,"/// Retrieve the ""definitive"" declaration that provides all of the; /// visible entries for the given declaration context, if there is one.; ///; /// The ""definitive"" declaration is the only place where we need to look to; /// find information about the declarations within the given declaration; /// context. For example, C++ and Objective-C classes, C structs/unions, and; /// Objective-C protocols, categories, and extensions are all defined in a; /// single place in the source code, so they have definitive declarations; /// associated with them. C++ namespaces, on the other hand, can have; /// multiple definitions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTCommon.h:391,protocol,protocols,391,interpreter/llvm-project/clang/lib/Serialization/ASTCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTCommon.h,1,['protocol'],['protocols']
Integrability,"/// Retrieve the ""injected"" template arguments that correspond to the; /// template parameters of this template.; ///; /// Although the C++ standard has no notion of the ""injected"" template; /// arguments for a template, the notion is convenient when; /// we need to perform substitutions inside the definition of a template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,inject,injected,18,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['inject'],['injected']
Integrability,"/// Retrieve the IdentifierInfo for the named identifier.; ///; /// This routine builds a new IdentifierInfo for the given identifier. If any; /// declarations with this name are visible from translation unit scope, their; /// declarations will be deserialized and introduced into the declaration; /// chain of the identifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:73,rout,routine,73,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['rout'],['routine']
Integrability,/// Retrieve the Objective-C class declaration corresponding to; /// the predefined \c Protocol class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:87,Protocol,Protocol,87,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['Protocol'],['Protocol']
Integrability,"/// Retrieve the Objective-C interface to which this message; /// is being directed, if known.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The Objective-C interface if known, otherwise nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:29,interface,interface,29,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,6,"['interface', 'message', 'rout']","['interface', 'message', 'routine']"
Integrability,/// Retrieve the \p CompoundStmt representing the body of the lambda.; /// This is a convenience function for callers who do not need; /// to handle node(s) which may wrap a \p CompoundStmt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:167,wrap,wrap,167,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['wrap'],['wrap']
Integrability,"/// Retrieve the address of a function to call immediately before; /// calling objc_retainAutoreleasedReturnValue. The; /// implementation of objc_autoreleaseReturnValue sniffs the; /// instruction stream following its return address to decide; /// whether it's a call to objc_retainAutoreleasedReturnValue.; /// This can be prohibitively expensive, depending on the; /// relocation model, and so on some targets it instead sniffs for; /// a particular instruction sequence. This functions returns; /// that instruction sequence in inline assembly, which will be; /// empty if none is required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:350,depend,depending,350,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,1,['depend'],['depending']
Integrability,"/// Retrieve the arguments to this message, not including the; /// receiver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:35,message,message,35,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,"/// Retrieve the body of the coroutine as written. This will be either; /// a CompoundStmt. If the coroutine is in function-try-block, we will; /// wrap the CXXTryStmt into a CompoundStmt to keep consistency.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:148,wrap,wrap,148,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,1,['wrap'],['wrap']
Integrability,"/// Retrieve the body of the lambda. This will be most of the time; /// a \p CompoundStmt, but can also be \p CoroutineBodyStmt wrapping; /// a \p CompoundStmt. Note that unlike functions, lambda-expressions; /// cannot have a function-try-block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:128,wrap,wrapping,128,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['wrap'],['wrapping']
Integrability,"/// Retrieve the declaration that provides additional context for a; /// lambda, when the normal declaration context is not specific enough.; ///; /// Certain contexts (default arguments of in-class function parameters and; /// the initializers of data members) have separate name mangling rules for; /// lambdas within the Itanium C++ ABI. For these cases, this routine provides; /// the declaration in which the lambda occurs, e.g., the function parameter; /// or the non-static data member. Otherwise, it returns NULL to imply that; /// the declaration context suffices.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:363,rout,routine,363,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['rout'],['routine']
Integrability,"/// Retrieve the definition of this class, or NULL if this class; /// has been forward-declared (with \@class) but not yet defined (with; /// \@interface).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:144,interface,interface,144,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['interface'],['interface']
Integrability,"/// Retrieve the definition of this protocol, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:36,protocol,protocol,36,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['protocol'],['protocol']
Integrability,/// Retrieve the dependent lambda call operator of the closure type; /// if this is a templated closure type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:17,depend,dependent,17,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['depend'],['dependent']
Integrability,"/// Retrieve the first unplaced basic block.; ///; /// This routine is called when we are unable to use the CFG to walk through; /// all of the basic blocks and form a chain due to unnatural loops in the CFG.; /// We walk through the function's blocks in order, starting from the; /// LastUnplacedBlockIt. We update this iterator on each call to avoid; /// re-scanning the entire sequence on repeated calls to this routine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:60,rout,routine,60,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,2,['rout'],['routine']
Integrability,/// Retrieve the kind of bridge being performed as a string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:25,bridg,bridge,25,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['bridg'],['bridge']
Integrability,/// Retrieve the length of the parameter pack.; ///; /// This routine may only be invoked when the expression is not; /// value-dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:62,rout,routine,62,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,2,"['depend', 'rout']","['dependent', 'routine']"
Integrability,"/// Retrieve the location of the 'super' keyword for a class; /// or instance message to 'super', otherwise an invalid source location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:78,message,message,78,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,"/// Retrieve the name of the immediate macro expansion.; ///; /// This routine starts from a source location, and finds the name of the macro; /// responsible for its immediate expansion. It looks through any intervening; /// macro argument expansions to compute this. It returns a StringRef which; /// refers to the SourceManager-owned buffer of the source where that macro; /// name is spelled. Thus, the result shouldn't out-live that SourceManager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:71,rout,routine,71,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,1,['rout'],['routine']
Integrability,"/// Retrieve the name of the immediate macro expansion.; ///; /// This routine starts from a source location, and finds the name of the; /// macro responsible for its immediate expansion. It looks through any; /// intervening macro argument expansions to compute this. It returns a; /// StringRef that refers to the SourceManager-owned buffer of the source; /// where that macro name is spelled. Thus, the result shouldn't out-live; /// the SourceManager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:71,rout,routine,71,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['rout'],['routine']
Integrability,"/// Retrieve the name of the immediate macro expansion.; ///; /// This routine starts from a source location, and finds the name of the; /// macro responsible for its immediate expansion. It looks through any; /// intervening macro argument expansions to compute this. It returns a; /// StringRef which refers to the SourceManager-owned buffer of the source; /// where that macro name is spelled. Thus, the result shouldn't out-live; /// that SourceManager.; ///; /// This differs from Lexer::getImmediateMacroName in that any macro argument; /// location will result in the topmost function macro that accepted it.; /// e.g.; /// \code; /// MAC1( MAC2(foo) ); /// \endcode; /// for location of 'foo' token, this function will return ""MAC1"" while; /// Lexer::getImmediateMacroName will return ""MAC2"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:71,rout,routine,71,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,1,['rout'],['routine']
Integrability,"/// Retrieve the parser's current scope.; ///; /// This routine must only be used when it is certain that semantic analysis; /// and the parser are in precisely the same context, which is not the case; /// when, e.g., we are performing any kind of template instantiation.; /// Therefore, the only safe places to use this scope are in the parser; /// itself and in routines directly invoked from the parser and *never* from; /// template substitution or instantiation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:56,rout,routine,56,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['rout'],"['routine', 'routines']"
Integrability,/// Retrieve the pointer value of the message receiver.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:38,message,message,38,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,"/// Retrieve the receiver type to which this message is being directed.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The type of the receiver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:45,message,message,45,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,4,"['message', 'rout']","['message', 'routine']"
Integrability,/// Retrieve the set of module files on which the given module file; /// directly depends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:82,depend,depends,82,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,1,['depend'],['depends']
Integrability,"/// Retrieve the set of substitutions required when accessing a member; /// of the Objective-C receiver type that is declared in the given context.; ///; /// \c *this is the type of the object we're operating on, e.g., the; /// receiver for a message send or the base of a property access, and is; /// expected to be of some object or object pointer type.; ///; /// \param dc The declaration context for which we are building up a; /// substitution mapping, which should be an Objective-C class, extension,; /// category, or method within.; ///; /// \returns an array of type arguments that can be substituted for; /// the type parameters of the given declaration context in any type described; /// within that context, or an empty optional to indicate that no; /// substitution is required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:243,message,message,243,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['message'],['message']
Integrability,/// Retrieve the source location information for the type; /// being destroyed.; ///; /// This type-source information is available for non-dependent; /// pseudo-destructor expressions and some dependent pseudo-destructor; /// expressions. Returns null if we only have the identifier for a; /// dependent pseudo-destructor expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:140,depend,dependent,140,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,3,['depend'],['dependent']
Integrability,/// Retrieve the string representation of the given type as a string; /// that has the appropriate lifetime for code completion.; ///; /// This routine provides a fast path where we provide constant strings for; /// common type names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:144,rout,routine,144,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['rout'],['routine']
Integrability,/// Retrieve the template name that represents a dependent; /// template name such as \c MetaFun::template apply.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:49,depend,dependent,49,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['depend'],['dependent']
Integrability,/// Retrieve the template name that represents a dependent; /// template name such as \c MetaFun::template operator+.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:49,depend,dependent,49,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['depend'],['dependent']
Integrability,"/// Retrieve the template specialization type of the; /// injected-class-name for this class template.; ///; /// The injected-class-name for a class template \c X is \c; /// X<template-args>, where \c template-args is formed from the; /// template arguments that correspond to the template parameters of; /// \c X. For example:; ///; /// \code; /// template<typename T, int N>; /// struct array {; /// typedef array this_type; // ""array"" is equivalent to ""array<T, N>""; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:58,inject,injected-class-name,58,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['inject'],['injected-class-name']
Integrability,"/// Retrieve the type being destroyed.; ///; /// If the type being destroyed is a dependent type which may or may not; /// be a pointer, return an invalid type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:82,depend,dependent,82,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['dependent']
Integrability,"/// Retrieve the type named by the typename specifier as an identifier.; ///; /// This routine will return a non-NULL identifier pointer when the; /// form of the original typename was terminated by an identifier,; /// e.g., ""typename T::type"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:87,rout,routine,87,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['rout'],['routine']
Integrability,/// Retrieve the type of the Objective-C \c Protocol class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:44,Protocol,Protocol,44,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['Protocol'],['Protocol']
Integrability,"/// Retrieve the type parameters of this class.; ///; /// This function looks for a type parameter list for the given; /// class; if the class has been declared (with \c \@class) but not; /// defined (with \c \@interface), it will search for a declaration that; /// has type parameters, skipping any declarations that do not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:211,interface,interface,211,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// Retrieve the type referred to by 'super'.; ///; /// The returned type will either be an ObjCInterfaceType (for an; /// class message to super) or an ObjCObjectPointerType that refers; /// to a class (for an instance message to super);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:129,message,message,129,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,2,['message'],['message']
Integrability,"/// Retrieve the underlying dependent template name; /// structure, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:28,depend,dependent,28,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['depend'],['dependent']
Integrability,"/// Retrieve the underlying template declaration that; /// this template name refers to, if known.; ///; /// \returns The template declaration that this template name refers; /// to, if any. If the template name does not refer to a specific; /// declaration because it is a dependent name, or if it refers to a; /// set of function templates, returns NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:274,depend,dependent,274,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['depend'],['dependent']
Integrability,"/// Retrieve the underlying, overloaded function template; /// declarations that this template name refers to, if known.; ///; /// \returns The set of overloaded function templates that this template; /// name refers to, if known. If the template name does not refer to a; /// specific set of function templates because it is a dependent name or; /// refers to a single template, returns NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:328,depend,dependent,328,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['depend'],['dependent']
Integrability,"/// Retrieve the unqualified variant of the given type,; /// removing as little sugar as possible.; ///; /// This routine looks through various kinds of sugar to find the; /// least-desugared type that is unqualified. For example, given:; ///; /// \code; /// typedef int Integer;; /// typedef const Integer CInteger;; /// typedef CInteger DifferenceType;; /// \endcode; ///; /// Executing \c getUnqualifiedType() on the type \c DifferenceType will; /// desugar until we hit the type \c Integer, which has no qualifiers on it.; ///; /// The resulting type might still be qualified if it's sugar for an array; /// type. To strip qualifiers even from within a sugared array type, use; /// ASTContext::getUnqualifiedArrayType.; ///; /// Note: In C, the _Atomic qualifier is special (see C23 6.2.5p32 for; /// details), and it is not stripped by this function. Use; /// getAtomicUnqualifiedType() to strip qualifiers including _Atomic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:114,rout,routine,114,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['rout'],['routine']
Integrability,"/// Retrieve the visible declaration corresponding to D, if any.; ///; /// This routine determines whether the declaration D is visible in the current; /// module, with the current imports. If not, it checks whether any; /// redeclaration of D is visible, and if so, returns that declaration.; ///; /// \returns D, or a visible previous declaration of D, whichever is more recent; /// and visible. If no declaration of D is visible, returns null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:80,rout,routine,80,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['rout'],['routine']
Integrability,"/// Retrieves the ""canonical"" template name that refers to a; /// given template.; ///; /// The canonical template name is the simplest expression that can; /// be used to refer to a given template. For most templates, this; /// expression is just the template declaration itself. For example,; /// the template std::vector can be referred to via a variety of; /// names---std::vector, \::std::vector, vector (if vector is in; /// scope), etc.---but all of these names map down to the same; /// TemplateDecl, which is used to form the canonical template name.; ///; /// Dependent template names are more interesting. Here, the; /// template name could be something like T::template apply or; /// std::allocator<T>::template rebind, where the nested name; /// specifier itself is dependent. In this case, the canonical; /// template name uses the shortest form of the dependent; /// nested-name-specifier, which itself contains all canonical; /// types, values, and templates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:570,Depend,Dependent,570,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,3,"['Depend', 'depend']","['Dependent', 'dependent']"
Integrability,"/// Retrieves the ""common"" pointer shared by all (re-)declarations of; /// the same template. Calling this routine may implicitly allocate memory; /// for the common pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:107,rout,routine,107,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['rout'],['routine']
Integrability,"/// Retrieves the CXXRecordDecl that this type refers to, either; /// because the type is a RecordType or because it is the injected-class-name; /// type of a class template or class template partial specialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:124,inject,injected-class-name,124,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['inject'],['injected-class-name']
Integrability,"/// Retrieves the TagDecl that this type refers to, either; /// because the type is a TagType or because it is the injected-class-name; /// type of a class template or class template partial specialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:115,inject,injected-class-name,115,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['inject'],['injected-class-name']
Integrability,/// Retrieves the canonical declaration of this Objective-C protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:60,protocol,protocol,60,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['protocol'],['protocol']
Integrability,"/// Retrieves the injected specialization type for this partial; /// specialization. This is not the same as the type-decl-type for; /// this partial specialization, which is an InjectedClassNameType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,inject,injected,18,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,"['Inject', 'inject']","['InjectedClassNameType', 'injected']"
Integrability,"/// Return 'true' if this vector operation is ""horizontal""; /// and return the operands for the horizontal operation in LHS and RHS. A; /// horizontal operation performs the binary operation on successive elements; /// of its first operand, then on successive elements of its second operand,; /// returning the resulting values in a vector. For example, if; /// A = < float a0, float a1, float a2, float a3 >; /// and; /// B = < float b0, float b1, float b2, float b3 >; /// then the result of doing a horizontal operation on A and B is; /// A horizontal-op B = < a0 op a1, a2 op a3, b0 op b1, b2 op b3 >.; /// In short, LHS and RHS are inspected to see if LHS op RHS is of the form; /// A horizontal-op B, for some already available A and B, and if so then LHS is; /// set to A, RHS to B, and the routine returns 'true'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:798,rout,routine,798,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// Return C++ or ObjC overridden methods for the given \p Method.; ///; /// An ObjC method is considered to override any method in the class's; /// base classes, its protocols, or its categories' protocols, that has; /// the same selector and is of the same kind (class or instance).; /// A method in an implementation is not considered as overriding the same; /// method in the interface or its categories.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:167,protocol,protocols,167,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,3,"['interface', 'protocol']","['interface', 'protocols']"
Integrability,/// Return SCEV no-wrap flags that can be proven based on reasoning about; /// how poison produced from no-wrap flags on this value (e.g. a nuw add); /// would trigger undefined behavior on overflow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:19,wrap,wrap,19,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,['wrap'],['wrap']
Integrability,"/// Return a Machine IR pass that selectively replaces; /// certain byte and word instructions by equivalent 32 bit instructions,; /// in order to eliminate partial register usage, false dependences on; /// the upper portions of registers, and to save code size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h:187,depend,dependences,187,interpreter/llvm-project/llvm/lib/Target/X86/X86.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h,1,['depend'],['dependences']
Integrability,/// Return a dependent bit-precise integer type with the specified signedness; /// and bit count.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:13,depend,dependent,13,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['depend'],['dependent']
Integrability,/// Return a message composed from the arguments as a string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h:13,message,message,13,interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/Remark.h,1,['message'],['message']
Integrability,"/// Return a new range representing the possible values resulting; /// from an addition with wrap type \p NoWrapKind of a value in this; /// range and a value in \p Other.; /// If the result range is disjoint, the preferred range is determined by the; /// \p PreferredRangeType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:93,wrap,wrap,93,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['wrap'],['wrap']
Integrability,/// Return a new range representing the possible values resulting; /// from an application of the specified overflowing binary operator to a; /// left hand side of this range and a right hand side of \p Other given; /// the provided knowledge about lack of wrapping \p NoWrapKind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:257,wrap,wrapping,257,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['wrap'],['wrapping']
Integrability,"/// Return a new range representing the possible values resulting; /// from an subtraction with wrap type \p NoWrapKind of a value in this; /// range and a value in \p Other.; /// If the result range is disjoint, the preferred range is determined by the; /// \p PreferredRangeType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:96,wrap,wrap,96,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['wrap'],['wrap']
Integrability,"/// Return a non-unique reference to the type for a dependently-sized; /// array of the specified element type.; ///; /// FIXME: We will need these to be uniqued, or at least comparable, at some; /// point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:52,depend,dependently-sized,52,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['depend'],['dependently-sized']
Integrability,"/// Return a number greater or equal to the total number of entries in the; /// dataset.; ///; /// \note If you are interested in the total number of entries in a TChain,; /// this function will give that number once the last file of the chain; /// is opened. In general, using this instead of GetEntries will avoid; /// opening all files in the chain which could be very costly for very; /// large number of files stored at a remote location.; ///; /// The logic depends on whether the dataset is a TTree or a TChain. In the; /// first case, it simply returns the total number of entries in the tree. In; /// the latter case, it depends on which point of the processing of the chain; /// this function is called. During most of the chain processing, this; /// function will return TTree::kMaxEntries. When the chain arrives at the; /// last file, then the function will return the accumulated total number of; /// entries in the whole chain. A notable use case where this function; /// becomes quite useful is when writing the following for loop to traverse; /// the entries in the dataset:; ///; /// \code{.cpp}; /// for(Long64_t ievent = 0; ievent < dataset.GetEntriesFast(); ievent++) {; /// // Do something with the event in the dataset; /// }; /// \endcode; ///; /// In the example above, independently on whether the dataset is a TTree or; /// a TChain, the GetEntriesFast call will provide the correct stopping; /// condition for the loop (i.e. the total number of entries). In the TChain; /// case, calling GetEntries instead would open all the files in the chain; /// upfront which could be costly.; ///; /// The functionality offered by this method can also be seen when used in; /// conjunction with LoadTree. For a call like <tt> LoadTree(ievent) </tt>,; /// the condition <tt> ievent < dataset.GetEntriesFast() </tt> is only; /// satisfied if \p ievent is strictly smaller than the total number of; /// entries in the dataset. In fact, even when the dataset is a TChain, the; /// first t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h:464,depend,depends,464,tree/tree/inc/TTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h,2,['depend'],['depends']
Integrability,"/// Return a ranking of the implicit conversion sequence; /// kind, where smaller ranks represent better conversion; /// sequences.; ///; /// In particular, this routine gives user-defined conversion; /// sequences and ambiguous conversion sequences the same rank,; /// per C++ [over.best.ics]p10.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:162,rout,routine,162,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['rout'],['routine']
Integrability,/// Return a string representing the type of dependence that the dependence; /// analysis identified between the two given nodes. This function assumes; /// that there is a memory dependence between the given two nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h:45,depend,dependence,45,interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h,3,['depend'],['dependence']
Integrability,"/// Return a target-dependent comparison result if the input operand is; /// suitable for use with a square root estimate calculation. For example, the; /// comparison may check if the operand is NAN, INF, zero, normal, etc. The; /// result should be used as the condition operand for a select or branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,depend,dependent,20,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['depend'],['dependent']
Integrability,/// Return a target-dependent result if the input operand is not suitable for; /// use with a square root estimate calculation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,depend,dependent,20,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['depend'],['dependent']
Integrability,/// Return an ASTConsumer that can be chained with a; /// PCHGenerator that produces a wrapper file format containing a; /// serialized AST bitstream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h:87,wrap,wrapper,87,interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,1,['wrap'],['wrapper']
Integrability,/// Return an ASTConsumer that can be chained with a; /// PCHGenerator that produces a wrapper file format; /// that also contains full debug info for the module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h:87,wrap,wrapper,87,interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h,1,['wrap'],['wrapper']
Integrability,"/// Return an SMDiagnostic at the specified location with the specified; /// string.; ///; /// \param Msg If non-null, the kind of message (e.g., ""error"") which is; /// prefixed to the message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:131,message,message,131,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,2,['message'],['message']
Integrability,"/// Return an error at the location \p L, with the message \p Msg. This; /// may be modified before being emitted.; ///; /// \return The return value is always true, as an idiomatic convenience to; /// clients.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:51,message,message,51,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,1,['message'],['message']
Integrability,/// Return an interface into CodeGenModule.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h:14,interface,interface,14,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h,1,['interface'],['interface']
Integrability,/// Return any dependencies that synthetic symbols (e.g. init symbols); /// have on symbols in the LinkGraph.; /// This is used by the ObjectLinkingLayer to update the dependencies for; /// the synthetic symbols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:15,depend,dependencies,15,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,2,['depend'],['dependencies']
Integrability,"/// Return false and print error messages if there is any unexpected; /// duplicates BIT constant in any of the class hierarchy knows; /// to TClassTable.; /// If verbose is true, also print all the bit declare in eacho of the classes; /// and all their bases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStatusBitsChecker.cxx:33,message,messages,33,core/meta/src/TStatusBitsChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStatusBitsChecker.cxx,1,['message'],['messages']
Integrability,"/// Return false and print error messages if there is any unexpected; /// duplicates BIT constant in the class hierarchy.; /// If verbose is true, also print all the bit declare in this class; /// and all its bases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStatusBitsChecker.cxx:33,message,messages,33,core/meta/src/TStatusBitsChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStatusBitsChecker.cxx,2,['message'],['messages']
Integrability,/// Return false if the access functions of \p I0 and \p I1 could cause; /// a negative dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:88,depend,dependence,88,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['depend'],['dependence']
Integrability,/// Return optional depend modifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:20,depend,depend,20,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['depend']
Integrability,"/// Return overridden methods for the given \p Method.; ///; /// An ObjC method is considered to override any method in the class's; /// base classes (and base's categories), its protocols, or its categories'; /// protocols, that has; /// the same selector and is of the same kind (class or instance).; /// A method in an implementation is not considered as overriding the same; /// method in the interface or its categories.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:179,protocol,protocols,179,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,3,"['interface', 'protocol']","['interface', 'protocols']"
Integrability,/// Return the MCSchedClassDesc for this instruction. Some SchedClasses require; /// evaluation of predicates that depend on instruction operands or flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetSchedule.cpp:115,depend,depend,115,interpreter/llvm-project/llvm/lib/CodeGen/TargetSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetSchedule.cpp,1,['depend'],['depend']
Integrability,/// Return the MIFlags which represent both MachineInstrs. This; /// should be used when merging two MachineInstrs into one. This routine does; /// not modify the MIFlags of this MachineInstr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:130,rout,routine,130,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['rout'],['routine']
Integrability,/// Return the TypeLoc wrapper for the type source info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:23,wrap,wrapper,23,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['wrap'],['wrapper']
Integrability,/// Return the appropriate PCHContainerReader depending on the; /// current CodeGenOptions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:46,depend,depending,46,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,1,['depend'],['depending']
Integrability,/// Return the appropriate PCHContainerWriter depending on the; /// current CodeGenOptions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:46,depend,depending,46,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,1,['depend'],['depending']
Integrability,"/// Return the basic size of this type if it is a primitive type. These are; /// fixed by LLVM and are not target-dependent.; /// This will return zero if the type does not have a size or is not a; /// primitive type.; ///; /// If this is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// Note that this may not reflect the size of memory allocated for an; /// instance of the type or the number of bytes that are written when an; /// instance of the type is stored to memory. The DataLayout class provides; /// additional query functions to provide this information.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:114,depend,dependent,114,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h,1,['depend'],['dependent']
Integrability,"/// Return the class interface that this ivar is logically contained; /// in; this is either the interface where the ivar was declared, or the; /// interface the ivar is conceptually a part of in the case of synthesized; /// ivars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:21,interface,interface,21,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,3,['interface'],['interface']
Integrability,/// Return the clobber offset to dependent instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:33,depend,dependent,33,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependent']
Integrability,"/// Return the cost of a vrgather.vi (or vx) instruction for the type VT.; /// vrgather.vi/vx may be linear in the number of vregs implied by LMUL,; /// or may track the vrgather.vv cost. It is implementation-dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:209,depend,dependent,209,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['depend'],['dependent']
Integrability,"/// Return the cost of a vslidedown.vi or vslideup.vi instruction; /// for the type VT. (This does not cover the vslide1up or vslide1down; /// variants.) Slides may be linear in the number of vregs implied by LMUL,; /// or may track the vrgather.vv cost. It is implementation-dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:276,depend,dependent,276,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['depend'],['dependent']
Integrability,"/// Return the cost of a vslidedown.vx or vslideup.vx instruction; /// for the type VT. (This does not cover the vslide1up or vslide1down; /// variants.) Slides may be linear in the number of vregs implied by LMUL,; /// or may track the vrgather.vv cost. It is implementation-dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:276,depend,dependent,276,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['depend'],['dependent']
Integrability,/// Return the cycle of the earliest scheduled instruction in the dependence; /// chain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:66,depend,dependence,66,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,1,['depend'],['dependence']
Integrability,/// Return the cycle of the latest scheduled instruction in the dependence; /// chain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:64,depend,dependence,64,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,1,['depend'],['dependence']
Integrability,/// Return the debug type for a C++ method.; /// \arg CXXMethodDecl is of FunctionType. This function type is; /// not updated to include implicit \c this pointer. Use this routine; /// to get a method type which includes \c this pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:173,rout,routine,173,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['rout'],['routine']
Integrability,/// Return the destination instruction of the dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:46,depend,dependence,46,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,/// Return the error message as a string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:21,message,message,21,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['message'],['message']
Integrability,/// Return the host dependence of this action. This function is only expected; /// to be called if the host dependence exists.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:20,depend,dependence,20,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,2,['depend'],['dependence']
Integrability,"/// Return the implicit lifetime for this type, which must not be dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:66,depend,dependent,66,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependent']
Integrability,/// Return the information about all depending actions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:37,depend,depending,37,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['depending']
Integrability,/// Return the length of the (data dependency) critical path through the; /// trace.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:35,depend,dependency,35,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,1,['depend'],['dependency']
Integrability,"/// Return the minimum clearance before an instruction that reads an; /// unused register.; ///; /// For example, AVX instructions may copy part of a register operand into; /// the unused high bits of the destination register.; ///; /// vcvtsi2sdq %rax, undef %xmm0, %xmm14; ///; /// In the code above, vcvtsi2sdq copies %xmm0[127:64] into %xmm14 creating a; /// false dependence on any previous write to %xmm0.; ///; /// This hook works similarly to getPartialRegUpdateClearance, except that it; /// does not take an operand index. Instead sets \p OpNum to the index of the; /// unused register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:369,depend,dependence,369,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['depend'],['dependence']
Integrability,"/// Return the name of the profile section corresponding to \p IPSK.; ///; /// The name of the section depends on the object format type \p OF. If; /// \p AddSegmentInfo is true, a segment prefix and additional linker hints may; /// be added to the section name (this is the default).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:103,depend,depends,103,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['depend'],['depends']
Integrability,/// Return the name of the runtime interface that registers per-function control; /// data for one instrumented function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:35,interface,interface,35,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['interface'],['interface']
Integrability,/// Return the name of the runtime interface that registers the PGO name strings.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:35,interface,interface,35,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['interface'],['interface']
Integrability,"/// Return the number of actual arguments in this message,; /// not counting the receiver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:50,message,message,50,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,"/// Return the number of expected events over the full range of all variables.; /// `norm`, the variable set as normalisation constant in the constructor,; /// will yield the number of events in the range set in the constructor. That is, the function returns; /// \f[; /// N = \mathrm{norm} \; \cdot \; \frac{\int_{(x_F,y_F)} \mathrm{pdf}(x,y) }{\int_{(x_C,y_F)} \mathrm{pdf}(x,y)}; /// \f]; /// Where \f$ x \f$ is the set of dependents with a restricted range (defined by `rangeName` in the constructor),; /// and \f$ y \f$ are the other dependents. \f$ x_C \f$ is the integration; /// of \f$ x \f$ over the restricted range, and \f$ x_F \f$ is the integration of; /// \f$ x \f$ over the full range. `norm` is the number of events given as parameter to the constructor.; ///; /// If the nested PDF can be extended, \f$ N \f$ is further scaled by its expected number of events.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExtendPdf.cxx:426,depend,dependents,426,roofit/roofitcore/src/RooExtendPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExtendPdf.cxx,4,"['depend', 'integrat']","['dependents', 'integration']"
Integrability,"/// Return the number of qualifying protocols in this interface type,; /// or 0 if there are none.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:36,protocol,protocols,36,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,4,"['interface', 'protocol']","['interface', 'protocols']"
Integrability,"/// Return the number of qualifying protocols in this type, or 0 if; /// there are none.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:36,protocol,protocols,36,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocols']
Integrability,/// Return the number of qualifying protocols on the object type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:36,protocol,protocols,36,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocols']
Integrability,"/// Return the offset between two consecutive in-memory values (which depends on the `sizeof()` and alignment of the; /// value type).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:70,depend,depends,70,core/cont/inc/TVirtualCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h,1,['depend'],['depends']
Integrability,"/// Return the resource depth of the top/bottom of the trace center block.; /// This is the number of cycles required to execute all instructions from; /// the trace head to the trace center block. The resource depth only; /// considers execution resources, it ignores data dependencies.; /// When Bottom is set, instructions in the trace center block are included.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:274,depend,dependencies,274,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,1,['depend'],['dependencies']
Integrability,/// Return the result expression of this controlling expression. Defined if; /// and only if the generic selection expression is not result-dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:140,depend,dependent,140,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependent']
Integrability,"/// Return the single device dependence of this action. This function is only; /// expected to be called if a single device dependence exists. If \a; /// DoNotConsiderHostActions is set, a host dependence is allowed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:29,depend,dependence,29,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,3,['depend'],['dependence']
Integrability,"/// Return the size of the table header including the length but not including; /// the offsets. This is dependent on the table format, which is unambiguously; /// derived from parsing the table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFListTable.h:105,depend,dependent,105,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFListTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFListTable.h,1,['depend'],['dependent']
Integrability,/// Return the source instruction of the dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:41,depend,dependence,41,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,"/// Return the specified type with one level of ""sugar"" removed from; /// the type.; ///; /// This routine takes off the first typedef, typeof, etc. If the outer level; /// of the type is already concrete, it returns it unmodified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:99,rout,routine,99,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['rout'],['routine']
Integrability,"/// Return the target cache line size in bytes. By default, return; /// the line size for the bottom-most level of cache. This provides; /// a more convenient interface for the common case where all cache; /// levels have the same line size. Return zero if there is no; /// cache model.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:159,interface,interface,159,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,1,['interface'],['interface']
Integrability,/// Return the target-dependent attribute object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:22,depend,dependent,22,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,1,['depend'],['dependent']
Integrability,/// Return the total number of CFGBlocks within the CFG This is simply a; /// renaming of the getNumBlockIDs(). This is necessary because the dominator; /// implementation needs such an interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:186,interface,interface,186,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['interface'],['interface']
Integrability,/// Return the type wrapped by this type source info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:20,wrap,wrapped,20,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['wrap'],['wrapped']
Integrability,/// Return the unique reference to the type for a dependently sized vector of; /// the specified element type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:50,depend,dependently,50,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['depend'],['dependently']
Integrability,"/// Return the uniqued reference to the deduced template specialization type; /// which has been deduced to the given type, or to the canonical undeduced; /// such type, or the canonical deduced-but-dependent such type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:199,depend,dependent,199,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['depend'],['dependent']
Integrability,/// Return the uniqued reference to the type for a member pointer to; /// the specified type in the specified class.; ///; /// The class \p Cls is a \c Type because it could be a dependent name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:179,depend,dependent,179,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['depend'],['dependent']
Integrability,/// Return the value of the symbol depending on the object this can be an; /// offset or a virtual address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h:35,depend,depending,35,interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ObjectFile.h,1,['depend'],['depending']
Integrability,"/// Return this JITDylib and its transitive dependencies in DFS order; /// based on linkage relationships.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:44,depend,dependencies,44,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['depend'],['dependencies']
Integrability,"/// Return true for all instructions that only update; /// the first 32 or 64-bits of the destination register and leave the rest; /// unmodified. This can be used to avoid folding loads if the instructions; /// only update part of the destination register, and the non-updated part is; /// not needed. e.g. cvtss2sd, sqrtss. Unfolding the load from these; /// instructions breaks the partial register dependency and it can improve; /// performance. e.g.:; ///; /// movss (%rdi), %xmm0; /// cvtss2sd %xmm0, %xmm0; ///; /// Instead of; /// cvtss2sd (%rdi), %xmm0; ///; /// FIXME: This should be turned into a TSFlags.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:402,depend,dependency,402,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['depend'],['dependency']
Integrability,/// Return true for an order or output dependence that is loop carried; /// potentially. A dependence is loop carried if the destination defines a value; /// that may be used or defined by the source in a subsequent iteration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:39,depend,dependence,39,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,2,['depend'],['dependence']
Integrability,"/// Return true if EXTRACT_SUBVECTOR is cheap for extracting this result type; /// from this source type with this index. This is needed because; /// EXTRACT_SUBVECTOR usually has custom lowering that depends on the index of; /// the first element, and only the target knows which lowering is cheap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:201,depend,depends,201,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['depend'],['depends']
Integrability,/// Return true if I is an instruction with the FastMathFlags that are needed; /// for general reassociation set. This is not the same as testing; /// Instruction::isAssociative() because it includes operations like fsub.; /// (This routine is only intended to be called for floating-point operations.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp:233,rout,routine,233,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,1,['rout'],['routine']
Integrability,"/// Return true if Object memory is not visible after an unwind, in the sense; /// that program semantics cannot depend on Object containing any particular; /// value on unwind. If the RequiresNoCaptureBeforeUnwind out parameter is set; /// to true, then the memory is only not visible if the object has not been; /// captured prior to the unwind. Otherwise it is not visible even if captured.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:113,depend,depend,113,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['depend'],['depend']
Integrability,/// Return true if \p FaultingMI can be hoisted from after the; /// instructions in \p InstsSeenSoFar to before them. Set \p Dependence to a; /// non-null value if we also need to (and legally can) hoist a dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:125,Depend,Dependence,125,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,2,"['Depend', 'depend']","['Dependence', 'dependency']"
Integrability,/// Return true if \p IRP is readnone. This will query respective AAs that; /// deduce the information and introduce dependences for \p QueryingAA.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:117,depend,dependences,117,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['dependences']
Integrability,/// Return true if \p IRP is readonly. This will query respective AAs that; /// deduce the information and introduce dependences for \p QueryingAA.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:117,depend,dependences,117,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['dependences']
Integrability,"/// Return true if `ExtendOpTy`({`Start`,+,`Step`}) can be proved to be; /// equal to {`ExtendOpTy`(`Start`),+,`ExtendOpTy`(`Step`)}. This is; /// equivalent to proving no signed (resp. unsigned) wrap in; /// {`Start`,+,`Step`} if `ExtendOpTy` is `SCEVSignExtendExpr`; /// (resp. `SCEVZeroExtendExpr`).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:196,wrap,wrap,196,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['wrap'],['wrap']
Integrability,"/// Return true if an AddRec pointer \p Ptr is unsigned non-wrapping,; /// i.e. monotonically increasing/decreasing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:60,wrap,wrapping,60,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['wrap'],['wrapping']
Integrability,/// Return true if any expression is dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:37,depend,dependent,37,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['depend'],['dependent']
Integrability,/// Return true if instruction I depends on any instruction between; /// Start and End.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:33,depend,depends,33,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['depend'],['depends']
Integrability,"/// Return true if integer divide is usually cheaper than a sequence of; /// several shifts, adds, and multiplies for this target.; /// The definition of ""cheaper"" may depend on whether we're optimizing; /// for speed or for size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:168,depend,depend,168,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['depend'],['depend']
Integrability,/// Return true if it is profitable to convert a select of FP constants into; /// a constant pool load whose address depends on the select condition. The; /// parameter may be used to differentiate a select with FP compare from; /// integer compare.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:117,depend,depends,117,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['depend'],['depends']
Integrability,/// Return true if it's legal to contract llvm.amdgcn.rcp(llvm.sqrt),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp:33,contract,contract,33,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,1,['contract'],['contract']
Integrability,"/// Return true if speculation of the given load must be suppressed to avoid; /// ordering or interfering with an active sanitizer. If not suppressed,; /// dereferenceability and alignment must be proven separately. Note: This; /// is only needed for raw reasoning; if you use the interface below; /// (isSafeToSpeculativelyExecute), this is handled internally.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:281,interface,interface,281,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['interface'],['interface']
Integrability,"/// Return true if the (exclusive) upper bound wraps around the signed; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin): Wrapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:47,wrap,wraps,47,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,4,"['Wrap', 'wrap']","['Wrapped', 'wrapped', 'wraps']"
Integrability,"/// Return true if the Phi may generate a value that may underflow,; /// or may wrap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:80,wrap,wrap,80,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['wrap'],['wrap']
Integrability,/// Return true if the action has a host dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:41,depend,dependence,41,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependence']
Integrability,"/// Return true if the action has a single device dependence. If \a; /// DoNotConsiderHostActions is set, ignore the host dependence, if any, while; /// accounting for the number of dependences.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:50,depend,dependence,50,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,3,['depend'],"['dependence', 'dependences']"
Integrability,/// Return true if the attribute is a string (target-dependent); /// attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:53,depend,dependent,53,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,1,['depend'],['dependent']
Integrability,"/// Return true if the branch can be read through the bulk interfaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBranch.h:59,interface,interfaces,59,tree/tree/inc/TBranch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBranch.h,1,['interface'],['interfaces']
Integrability,/// Return true if the builder has the specified target-dependent; /// attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h:56,depend,dependent,56,interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AttributeMask.h,2,['depend'],['dependent']
Integrability,"/// Return true if the control flow in \p RPOTraversal is irreducible.; ///; /// This is a generic implementation to detect CFG irreducibility based on loop; /// info analysis. It can be used for any kind of CFG (Loop, MachineLoop,; /// Function, MachineFunction, etc.) by providing an RPO traversal (\p; /// RPOTraversal) and the loop info analysis (\p LI) of the CFG. This utility; /// function is only recommended when loop info analysis is available. If loop; /// info analysis isn't available, please, don't compute it explicitly for this; /// purpose. There are more efficient ways to detect CFG irreducibility that; /// don't require recomputing loop info analysis (e.g., T1/T2 or Tarjan's; /// algorithm).; ///; /// Requirements:; /// 1) GraphTraits must be implemented for NodeT type. It is used to access; /// NodeT successors.; // 2) \p RPOTraversal must be a valid reverse post-order traversal of the; /// target CFG with begin()/end() iterator interfaces.; /// 3) \p LI must be a valid LoopInfoBase that contains up-to-date loop; /// analysis information of the CFG.; ///; /// This algorithm uses the information about reducible loop back-edges already; /// computed in \p LI. When a back-edge is found during the RPO traversal, the; /// algorithm checks whether the back-edge is one of the reducible back-edges in; /// loop info. If it isn't, the CFG is irreducible. For example, for the CFG; /// below (canonical irreducible graph) loop info won't contain any loop, so the; /// algorithm will return that the CFG is irreducible when checking the B <-; /// -> C back-edge.; ///; /// (A->B, A->C, B->C, C->B, C->D); /// A; /// / \; /// B<- ->C; /// |; /// D; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CFG.h:957,interface,interfaces,957,interpreter/llvm-project/llvm/include/llvm/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CFG.h,1,['interface'],['interfaces']
Integrability,"/// Return true if the cost of the instruction is too high to speculatively; /// execute and should be kept behind a branch.; /// This normally just wraps around a getInstructionCost() call, but some; /// targets might report a low TCK_SizeAndLatency value that is incompatible; /// with the fixed TCC_Expensive value.; /// NOTE: This assumes the instruction passes isSafeToSpeculativelyExecute().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:149,wrap,wraps,149,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['wrap'],['wraps']
Integrability,/// Return true if the dependence from the store to the load has an; /// absolute distance of one.; /// E.g. A[i+1] = A[i] (or A[i-1] = A[i] for descending loop),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp:23,depend,dependence,23,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,1,['depend'],['dependence']
Integrability,"/// Return true if the dependence is a back-edge in the data dependence graph.; /// Since the DAG doesn't contain cycles, we represent a cycle in the graph; /// using an anti dependence from a Phi to an instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:23,depend,dependence,23,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,3,['depend'],['dependence']
Integrability,/// Return true if the dependences between @p I0 (in @p L0) and @p I1 (in; /// @p L1) allow loop fusion of @p L0 and @p L1. The dependence analyses; /// specified by @p DepChoice are used to determine this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:23,depend,dependences,23,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,2,['depend'],"['dependence', 'dependences']"
Integrability,"/// Return true if the exclusive upper bound wraps around the unsigned; /// domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0): Wrapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:45,wrap,wraps,45,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,4,"['Wrap', 'wrap']","['Wrapped', 'wrapped', 'wraps']"
Integrability,"/// Return true if the filename was added to the list of dependencies, false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:57,depend,dependencies,57,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,1,['depend'],['dependencies']
Integrability,/// Return true if the given message expression is known to never; /// return.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/DomainSpecific/ObjCNoReturn.h:29,message,message,29,interpreter/llvm-project/clang/include/clang/Analysis/DomainSpecific/ObjCNoReturn.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/DomainSpecific/ObjCNoReturn.h,1,['message'],['message']
Integrability,"/// Return true if the input \P Inst is part of a chain of dependent ops; /// that are suitable for reassociation, otherwise return false.; /// If the instruction's operands must be commuted to have a previous; /// instruction of the same type define the first source operand, \P Commuted; /// will be set to true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:59,depend,dependent,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['depend'],['dependent']
Integrability,"/// Return true if the position refers to a function interface, that is the; /// function scope, the function return, or an argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:53,interface,interface,53,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['interface'],['interface']
Integrability,/// Return true if the re-scheduling will put the given instruction too close; /// to the defs of its register dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:111,depend,dependencies,111,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['depend'],['dependencies']
Integrability,/// Return true if the target-dependent attribute is present.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:30,depend,dependent,30,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,1,['depend'],['dependent']
Integrability,/// Return true if the value is dependent on a dllimport variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:32,depend,dependent,32,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,1,['depend'],['dependent']
Integrability,/// Return true if there is a dependence between SUd and SUu.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VLIWMachineScheduler.cpp:30,depend,dependence,30,interpreter/llvm-project/llvm/lib/CodeGen/VLIWMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VLIWMachineScheduler.cpp,2,['depend'],['dependence']
Integrability,/// Return true if this instruction is convergent.; /// Convergent instructions can not be made control-dependent on any; /// additional values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:104,depend,dependent,104,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['depend'],['dependent']
Integrability,/// Return true if this instruction is convergent.; ///; /// Convergent instructions may not be made control-dependent on any; /// additional values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:109,depend,dependent,109,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,1,['depend'],['dependent']
Integrability,"/// Return true if this instruction requires *adjustment* after; /// instruction selection by calling a target hook. For example, this can be; /// used to fill in ARM 's' optional operand depending on whether the; /// conditional flag register is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:188,depend,depending,188,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,1,['depend'],['depending']
Integrability,"/// Return true if this instruction requires *adjustment*; /// after instruction selection by calling a target hook. For example, this; /// can be used to fill in ARM 's' optional operand depending on whether; /// the conditional flag register is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:188,depend,depending,188,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['depend'],['depending']
Integrability,/// Return true if this is a call to __assume() or __builtin_assume() with; /// a non-value-dependent constant parameter evaluating as false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:92,depend,dependent,92,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependent']
Integrability,"/// Return true if this is a memory dependence edge, and false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h:36,depend,dependence,36,interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h,1,['depend'],['dependence']
Integrability,/// Return true if this is a vector type where the runtime; /// length is machine dependent,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:82,depend,dependent,82,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,2,['depend'],['dependent']
Integrability,/// Return true if this is a vector value type where the; /// runtime length is machine dependent,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:88,depend,dependent,88,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,1,['depend'],['dependent']
Integrability,"/// Return true if this set wraps around the signed domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, SignedMin) == [X, SignedMax]: Not wrapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:28,wrap,wraps,28,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,4,['wrap'],"['wrapped', 'wraps']"
Integrability,"/// Return true if this set wraps around the unsigned domain. Special cases:; /// * Empty set: Not wrapped.; /// * Full set: Not wrapped.; /// * [X, 0) == [X, Max]: Not wrapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:28,wrap,wraps,28,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,4,['wrap'],"['wrapped', 'wraps']"
Integrability,/// Return true if we can prove that the specified FP value's sign bit is 0.; ///; /// NaN --> true/false (depending on the NaN's sign bit); /// +0 --> true; /// -0 --> false; /// x > +0 --> true; /// x < -0 --> false,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:107,depend,depending,107,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['depend'],['depending']
Integrability,/// Return true iff CR1 ult CR2 is equivalent to CR1 sge CR2.; /// Does not depend on strictness/direction of the predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:76,depend,depend,76,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['depend'],['depend']
Integrability,/// Return true iff CR1 ult CR2 is equivalent to CR1 slt CR2.; /// Does not depend on strictness/direction of the predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:76,depend,depend,76,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['depend'],['depend']
Integrability,"/// Return true of the given instruction should not be included in a scheduling; /// region.; ///; /// MachineScheduler does not currently support scheduling across calls. To; /// handle calls, the DAG builder needs to be modified to create register; /// anti/output dependencies on the registers clobbered by the call's regmask; /// operand. In PreRA scheduling, the stack pointer adjustment already prevents; /// scheduling across calls. In PostRA scheduling, we need the isCall to enforce; /// the boundary, but there would be no benefit to postRA scheduling across; /// calls this late anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:267,depend,dependencies,267,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['depend'],['dependencies']
Integrability,/// Return true to if it makes sense to break dependence on a partial; /// def or undef use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp:46,depend,dependence,46,interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,1,['depend'],['dependence']
Integrability,/// Return true we can analyze the memory accesses in the loop and there are; /// no memory dependence cycles.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:92,depend,dependence,92,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,/// Return whether this function has a dependent exception spec.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:39,depend,dependent,39,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependent']
Integrability,/// Return whether this function has an instantiation-dependent exception; /// spec.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:54,depend,dependent,54,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependent']
Integrability,/// Return whether this instruction can safely wrap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp:47,wrap,wrap,47,interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,1,['wrap'],['wrap']
Integrability,"/// ReturnStmt - This represents a return, optionally of an expression:; /// return;; /// return 4;; ///; /// Note that GCC allows return with no argument in a function declared to; /// return a value, and it allows returning a value in functions declared to; /// return void. We explicitly model this in the AST, which means you can't; /// depend on the return type of the function and the presence of an argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:341,depend,depend,341,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['depend'],['depend']
Integrability,/// Returns \c true if \p InterfaceDecl is subclass of \p NSClassKind,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NSAPI.h:26,Interface,InterfaceDecl,26,interpreter/llvm-project/clang/include/clang/AST/NSAPI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NSAPI.h,1,['Interface'],['InterfaceDecl']
Integrability,"/// Returns a DiagnosticConsumer that serializes diagnostics to; /// a bitcode file.; ///; /// The created DiagnosticConsumer is designed for quick and lightweight; /// transfer of diagnostics to the enclosing build system (e.g., an IDE).; /// This allows wrapper tools for Clang to get diagnostics from Clang; /// (via libclang) without needing to parse Clang's command line output.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticPrinter.h:256,wrap,wrapper,256,interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/SerializedDiagnosticPrinter.h,1,['wrap'],['wrapper']
Integrability,"/// Returns a MaterializationUnit::Interface for the object file contained in; /// the given buffer, or an error if the buffer does not contain a valid object; /// file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h:35,Interface,Interface,35,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectFileInterface.h,1,['Interface'],['Interface']
Integrability,"/// Returns a buffer with the contents of the remarks section depending on the; /// format of the file. If the section doesn't exist, this returns an empty; /// optional.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h:62,depend,depending,62,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h,1,['depend'],['depending']
Integrability,/// Returns a format style complying with one of Google's style guides:; /// http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml.; /// http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml.; /// https://developers.google.com/protocol-buffers/docs/style.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:252,protocol,protocol-buffers,252,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['protocol'],['protocol-buffers']
Integrability,/// Returns a node representing a splat of one value into all lanes; /// of the provided vector type. This is a utility which returns; /// either a BUILD_VECTOR or SPLAT_VECTOR depending on the; /// scalability of the desired vector type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:177,depend,depending,177,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['depend'],['depending']
Integrability,/// Returns a replacement refactoring result consumer (if any) that should; /// consume the results of a refactoring operation.; ///; /// The replacement refactoring result consumer is used by \c; /// TestSourceSelectionArgument to inject a test-specific result handling; /// logic into the refactoring operation. The test-specific consumer; /// ensures that the individual results in a particular test group are; /// identical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:232,inject,inject,232,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['inject'],['inject']
Integrability,/// Returns a simple string representation of each error.; ///; /// Each error only shows the error message without any context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:100,message,message,100,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,1,['message'],['message']
Integrability,"/// Returns a type-source information of a class message; /// send, or nullptr if the message is not a class message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:49,message,message,49,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,3,['message'],['message']
Integrability,"/// Returns a unique call site identifier for a given debug location of a call; /// instruction. This is wrapper of two scenarios, the probe-based profile and; /// regular profile, to hide implementation details from the sample loader and; /// the context tracker.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:105,wrap,wrapper,105,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,1,['wrap'],['wrapper']
Integrability,"/// Returns a value indicating whether this function corresponds to a builtin; /// function.; ///; /// The function corresponds to a built-in function if it is declared at; /// translation scope or within an extern ""C"" block and its name matches with; /// the name of a builtin. The returned value will be 0 for functions that do; /// not correspond to a builtin, a value of type \c Builtin::ID if in the; /// target-independent range \c [1,Builtin::First), or a target-specific builtin; /// value.; ///; /// \param ConsiderWrapperFunctions If true, we should consider wrapper; /// functions as their wrapped builtins. This shouldn't be done in general, but; /// it's useful in Sema to diagnose calls to wrappers based on their semantics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:569,wrap,wrapper,569,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,3,['wrap'],"['wrapped', 'wrapper', 'wrappers']"
Integrability,"/// Returns a wrapped CompilationDatabase that defers to the provided one,; /// but getCompileCommands() will infer commands for unknown files.; /// The return value of getAllFiles() or getAllCompileCommands() is unchanged.; /// See InterpolatingCompilationDatabase.cpp for details on heuristics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h:14,wrap,wrapped,14,interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,1,['wrap'],['wrapped']
Integrability,/// Returns a wrapped CompilationDatabase that will add -target and -mode flags; /// to commandline when they can be deduced from argv[0] of commandline returned; /// by underlying database.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h:14,wrap,wrapped,14,interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,1,['wrap'],['wrapped']
Integrability,/// Returns a wrapped CompilationDatabase that will expand all rsp(response); /// files on commandline returned by underlying database.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h:14,wrap,wrapped,14,interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,1,['wrap'],['wrapped']
Integrability,"/// Returns all compile commands for all the files in the compilation; /// database.; ///; /// FIXME: Add a layer in Tooling that provides an interface to run a tool; /// over all files in a compilation database. Not all build systems have the; /// ability to provide a feasible implementation for \c getAllCompileCommands.; ///; /// By default, this is implemented in terms of getAllFiles() and; /// getCompileCommands(). Subclasses may override this for efficiency.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h:142,interface,interface,142,interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,1,['interface'],['interface']
Integrability,/// Returns an LLVM function to call for finalizing the dynamic loop using; /// depending on `type`. Only i32 and i64 are supported by the runtime. Always; /// interpret integers as unsigned similarly to CanonicalLoopInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:80,depend,depending,80,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['depend'],['depending']
Integrability,/// Returns an LLVM function to call for initializing loop bounds using OpenMP; /// dynamic scheduling depending on `type`. Only i32 and i64 are supported by; /// the runtime. Always interpret integers as unsigned similarly to; /// CanonicalLoopInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:103,depend,depending,103,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['depend'],['depending']
Integrability,/// Returns an LLVM function to call for updating the next loop using OpenMP; /// dynamic scheduling depending on `type`. Only i32 and i64 are supported by; /// the runtime. Always interpret integers as unsigned similarly to; /// CanonicalLoopInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:101,depend,depending,101,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['depend'],['depending']
Integrability,/// Returns an enum value representing the kind of the dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:55,depend,dependence,55,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,2,['depend'],['dependence']
Integrability,"/// Returns an iterator over the types of the call's formal parameters.; ///; /// This uses the callee decl found by default name lookup rather than the; /// definition because it represents a public interface, and probably has; /// more annotations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:200,interface,interface,200,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['interface'],['interface']
Integrability,"/// Returns an opaque identifier for a diagnostic.; ///; /// This opaque identifier is intended to be stable even when the source code; /// is changed. It allows to track diagnostics in the long term, for example,; /// find which diagnostics are ""new"", maintain a database of suppressed; /// diagnostics etc.; ///; /// We may introduce more variants of issue hashes in the future; /// but older variants will still be available for compatibility.; ///; /// This hash is based on the following information:; /// - Name of the checker that emitted the diagnostic.; /// - Warning message.; /// - Name of the enclosing declaration.; /// - Contents of the line of code with the issue, excluding whitespace.; /// - Column number (but not the line number! - which makes it stable).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h:577,message,message,577,interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,1,['message'],['message']
Integrability,"/// Returns current rounding mode:; /// -1 Undefined; /// 0 Round to 0; /// 1 Round to nearest, ties to even; /// 2 Round to +inf; /// 3 Round to -inf; /// 4 Round to nearest, ties to zero; /// Other values are target dependent.; /// Result is rounding mode and chain. Input is a chain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:218,depend,dependent,218,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['depend'],['dependent']
Integrability,"/// Returns default flags for the barriers depending on the directive, for; /// which this barier is going to be emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:43,depend,depending,43,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['depend'],['depending']
Integrability,/// Returns dependent library specifiers,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h:12,depend,dependent,12,interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/IRSymtab.h,1,['depend'],['dependent']
Integrability,/// Returns dependent library specifiers from the input file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:12,depend,dependent,12,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,1,['depend'],['dependent']
Integrability,"/// Returns false, as the value of the constant doesn't depend on other objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h:56,depend,depend,56,roofit/roofitcore/inc/RooConstVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h,1,['depend'],['depend']
Integrability,"/// Returns how the message was written in the source (property access,; /// subscript, or explicit message send).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:20,message,message,20,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,2,['message'],['message']
Integrability,"/// Returns index of the loop we depend on (starting from 1), or 0 otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:33,depend,depend,33,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['depend'],['depend']
Integrability,/// Returns message string of the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:12,message,message,12,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['message'],['message']
Integrability,"/// Returns only the transport protocol in lower case, e.g. ""http"" for HTTP://server/file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/ROOT/RRawFile.hxx:31,protocol,protocol,31,io/io/inc/ROOT/RRawFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/ROOT/RRawFile.hxx,1,['protocol'],['protocol']
Integrability,/// Returns plain pointer to the entity pointed by this wrapper.; /// \tparam PointeeT Type of pointed entity.; ///; /// It is identical to getPtrAs<PointeeT*>.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:56,wrap,wrapper,56,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,1,['wrap'],['wrapper']
Integrability,"/// Returns the 'naming class' for this lookup, i.e. the; /// class which was looked into to find these results.; ///; /// C++0x [class.access.base]p5:; /// The access to a member is affected by the class in which the; /// member is named. This naming class is the class in which the; /// member name was looked up and found. [Note: this class can be; /// explicit, e.g., when a qualified-id is used, or implicit,; /// e.g., when a class member access operator (5.2.5) is used; /// (including cases where an implicit ""this->"" is added). If both; /// a class member access operator and a qualified-id are used to; /// name the member (as in p->T::m), the class naming the member; /// is the class named by the nested-name-specifier of the; /// qualified-id (that is, T). -- end note ]; ///; /// This is set by the lookup routines when they find results in a class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:820,rout,routines,820,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['rout'],['routines']
Integrability,"/// Returns the Objective-C interface that \p ND belongs to if it is; /// an Objective-C method/property/ivar etc. that is part of an interface,; /// otherwise returns null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:28,interface,interface,28,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,2,['interface'],['interface']
Integrability,"/// Returns the Windows version as Major.Minor.0.BuildNumber. Uses; /// RtlGetVersion or GetVersionEx under the hood depending on what is available.; /// GetVersionEx is deprecated, but this API exposes the build number which can; /// be useful for working around certain kernel bugs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:117,depend,depending,117,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,1,['depend'],['depending']
Integrability,"/// Returns the address of the requested section (or an error message; /// in the second element of the pair if the address cannot be found).; ///; /// if 'LocalAddress' is true, this returns the address of the section; /// within the linker's memory. If 'LocalAddress' is false it returns the; /// address within the target process (i.e. the load address).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:62,message,message,62,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,1,['message'],['message']
Integrability,/// Returns the address of this pointer in this block.; ///; /// This can be different than the address queried for the non-local result; /// because of phi translation. This returns null if the address was not; /// available in a block (i.e. because phi translation failed) or if this is; /// a cached result and that address was deleted.; ///; /// The address is always null for a non-local 'call' dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:400,depend,dependence,400,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependence']
Integrability,/// Returns the best type to use with repmovs depending on alignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SelectionDAGInfo.cpp:46,depend,depending,46,interpreter/llvm-project/llvm/lib/Target/X86/X86SelectionDAGInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SelectionDAGInfo.cpp,1,['depend'],['depending']
Integrability,/// Returns the designated initializers for the interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:48,interface,interface,48,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['interface'],['interface']
Integrability,/// Returns the distance between the pointers \p PtrA and \p PtrB iff they are; /// compatible and it is possible to calculate the distance between them. This; /// is a simple API that does not depend on the analysis pass.; /// \param StrictCheck Ensure that the calculated distance matches the; /// type-based one after all the bitcasts removal in the provided pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:194,depend,depend,194,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['depend']
Integrability,/// Returns the end iterator to \p range using `std::end` and; /// functions found through Argument-Dependent Lookup (ADL).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:100,Depend,Dependent,100,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,1,['Depend'],['Dependent']
Integrability,/// Returns the error message or an empty string if it does not exist.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h:22,message,message,22,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,1,['message'],['message']
Integrability,/// Returns the friendly description for a token kind that will appear; /// without quotes in diagnostic messages. These strings may be translatable in; /// future.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:105,message,messages,105,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,1,['message'],['messages']
Integrability,/// Returns the full string representation of each error.; ///; /// Each error message contains the full context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:79,message,message,79,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,1,['message'],['message']
Integrability,"/// Returns the function called if this is a wrapping a direct call, and null; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:45,wrap,wrapping,45,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,1,['wrap'],['wrapping']
Integrability,"/// Returns the given JITDylibs and all of their transitive dependencies in; /// DFS order (based on linkage relationships). Each JITDylib will appear; /// only once.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:60,depend,dependencies,60,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['depend'],['dependencies']
Integrability,"/// Returns the given JITDylibs and all of their transitive dependencies in; /// reverse DFS order (based on linkage relationships). Each JITDylib will; /// appear only once.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:60,depend,dependencies,60,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['depend'],['dependencies']
Integrability,"/// Returns the instruction on which a memory location depends.; ///; /// If isLoad is true, this routine ignores may-aliases with read-only; /// operations. If isLoad is false, this routine ignores may-aliases; /// with reads from read-only locations. If possible, pass the query; /// instruction as well; this function may take advantage of the metadata; /// annotated to the query instruction to refine the result. \p Limit; /// can be used to set the maximum number of instructions that will be; /// examined to find the pointer dependency. On return, it will be set to; /// the number of instructions left to examine. If a null pointer is passed; /// in, the limit will default to the value of -memdep-block-scan-limit.; ///; /// Note that this is an uncached query, and thus may be inefficient.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:55,depend,depends,55,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,4,"['depend', 'rout']","['dependency', 'depends', 'routine']"
Integrability,/// Returns the instruction on which a memory operation depends.; ///; /// See the class comment for more details. It is illegal to call this on; /// non-memory instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:56,depend,depends,56,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['depends']
Integrability,/// Returns the maximum forwarding delay for register reads dependent on; /// writes of scheduling class WriteResourceIdx.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:60,depend,dependent,60,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,1,['depend'],['dependent']
Integrability,/// Returns the memory dependences. If null is returned we exceeded; /// the MaxDependences threshold and this information is not; /// available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:23,depend,dependences,23,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependences']
Integrability,"/// Returns the most nullable nullability. This is used for message expressions; /// like [receiver method], where the nullability of this expression is either; /// the nullability of the receiver or the nullability of the return type of the; /// method, depending on which is more nullable. Contradicted is considered to; /// be the most nullable, to avoid false positive results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:60,message,message,60,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,2,"['depend', 'message']","['depending', 'message']"
Integrability,/// Returns the most recent error message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:34,message,message,34,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['message'],['message']
Integrability,"/// Returns the name of the library that serves as the backend for the JSON; /// interface, which is either `""nlohmann-json""` or `""rapidyaml""`.; /// \return Backend name as a string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/src/JSONInterface.cxx:81,interface,interface,81,roofit/jsoninterface/src/JSONInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/src/JSONInterface.cxx,1,['interface'],['interface']
Integrability,"/// Returns the next available unique source location. It is an offset into; /// the limitless virtual file. Each time this interface is used it bumps; /// an internal counter. This is very useful for using the various API in; /// clang which expect valid source locations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.h:124,interface,interface,124,interpreter/cling/lib/Interpreter/IncrementalParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.h,1,['interface'],['interface']
Integrability,"/// Returns the number of optional wrappers in `Type`.; ///; /// For example, if `Type` is `optional<optional<int>>`, the result of this; /// function will be 2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp:35,wrap,wrappers,35,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,1,['wrap'],['wrappers']
Integrability,/// Returns the number of the elements and the address of the depobj; /// dependency array.; /// \return Number of elements in depobj array and the pointer to the array of; /// dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:74,depend,dependency,74,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['depend'],"['dependencies', 'dependency']"
Integrability,"/// Returns the object expression (receiver) for an instance message,; /// or null for a message that is not an instance message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:61,message,message,61,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,3,['message'],['message']
Integrability,"/// Returns the offset in bits between successive objects of the; /// specified type, including alignment padding; always a multiple of 8.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// This is the amount that alloca reserves for this type. For example,; /// returns 96 or 128 for x86_fp80, depending on alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:411,depend,depending,411,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,1,['depend'],['depending']
Integrability,"/// Returns the offset in bytes between successive objects of the; /// specified type, including alignment padding.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// This is the amount that alloca reserves for this type. For example,; /// returns 12 or 16 for x86_fp80, depending on alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:387,depend,depending,387,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,1,['depend'],['depending']
Integrability,"/// Returns the parents of the given node (within the traversal scope).; ///; /// Note that this will lazily compute the parents of all nodes; /// and store them for later retrieval. Thus, the first call is O(n); /// in the number of AST nodes.; ///; /// Caveats and FIXMEs:; /// Calculating the parent map over all AST nodes will need to load the; /// full AST. This can be undesirable in the case where the full AST is; /// expensive to create (for example, when using precompiled header; /// preambles). Thus, there are good opportunities for optimization here.; /// One idea is to walk the given node downwards, looking for references; /// to declaration contexts - once a declaration context is found, compute; /// the parent map for the declaration context; if that can satisfy the; /// request, loading the whole AST can be avoided. Note that this is made; /// more complex by statements in templates having multiple parents - those; /// problems can be solved by building closure over the templated parts of; /// the AST, which also avoids touching large parts of the AST.; /// Additionally, we will want to add an interface to already give a hint; /// where to search for the parents, for example when looking at a statement; /// inside a certain function.; ///; /// 'NodeT' can be one of Decl, Stmt, Type, TypeLoc,; /// NestedNameSpecifier or NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:1123,interface,interface,1123,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,1,['interface'],['interface']
Integrability,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:1129,depend,dependencies,1129,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,6,['depend'],"['dependencies', 'dependency']"
Integrability,"/// Returns the previous system error message handler",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:38,message,message,38,core/foundation/inc/TError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h,1,['message'],['message']
Integrability,/// Returns the set of SCEVWrapPredicate no wrap flags implied by a; /// SCEVAddRecExpr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:44,wrap,wrap,44,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['wrap'],['wrap']
Integrability,/// Returns the size of \p range using `std::size` and functions found through; /// Argument-Dependent Lookup (ADL).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:93,Depend,Dependent,93,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,1,['Depend'],['Dependent']
Integrability,/// Returns the synchronization scope ID for this memory operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:16,synchroniz,synchronization,16,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,2,['synchroniz'],['synchronization']
Integrability,/// Returns the synchronization scope ID of this cmpxchg instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,synchroniz,synchronization,16,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Returns the synchronization scope ID of this fence instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,synchroniz,synchronization,16,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Returns the synchronization scope ID of this load instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,synchroniz,synchronization,16,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Returns the synchronization scope ID of this rmw instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,synchroniz,synchronization,16,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Returns the synchronization scope ID of this store instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:16,synchroniz,synchronization,16,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,"/// Returns the type for the shift amount of a shift opcode. For vectors,; /// returns the input type. For scalars, behavior depends on \p LegalTypes. If; /// \p LegalTypes is true, calls getScalarShiftAmountTy, otherwise uses; /// pointer type. If getScalarShiftAmountTy or pointer type cannot represent; /// all possible shift amounts, returns MVT::i32. In general, \p LegalTypes; /// should be set to true for calls during type legalization and after type; /// legalization has been completed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:125,depend,depends,125,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['depend'],['depends']
Integrability,"/// Returns the type of a class message send, or NULL if the; /// message is not a class message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:32,message,message,32,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,3,['message'],['message']
Integrability,/// Returns the value to inject into a selector to indicate the; /// presence of a catch-all.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:25,inject,inject,25,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,1,['inject'],['inject']
Integrability,/// Returns true if LoopAccessInfo can be used for dependence queries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:51,depend,dependence,51,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['depend'],['dependence']
Integrability,"/// Returns true if MI is a dependency breaking instruction for the subtarget.; ///; /// Similar in behavior to `isZeroIdiom`. However, it knows how to identify; /// all dependency breaking instructions (i.e. not just zero-idioms).; /// ; /// As for `isZeroIdiom`, this method returns a mask of ""broken"" dependencies.; /// (See method `isZeroIdiom` for a detailed description of Mask).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:28,depend,dependency,28,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,3,['depend'],"['dependencies', 'dependency']"
Integrability,"/// Returns true if MI is a dependency breaking instruction for the; /// subtarget associated with CPUID .; ///; /// The value computed by a dependency breaking instruction is not dependent; /// on the inputs. An example of dependency breaking instruction on X86 is; /// `XOR %eax, %eax`.; ///; /// If MI is a dependency breaking instruction for subtarget CPUID, then Mask; /// can be inspected to identify independent operands.; ///; /// Essentially, each bit of the mask corresponds to an input operand.; /// Explicit operands are laid out first in the mask; implicit operands follow; /// explicit operands. Bits are set for operands that are independent.; ///; /// Note that the number of bits in Mask may not be equivalent to the sum of; /// explicit and implicit operands in MI. Operands that don't have a; /// corresponding bit in Mask are assumed ""not independente"".; ///; /// The only exception is for when Mask is all zeroes. That means: explicit; /// input operands of MI are independent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:28,depend,dependency,28,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,5,['depend'],"['dependency', 'dependent']"
Integrability,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:28,depend,dependency,28,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,6,"['Depend', 'depend']","['Dependencies', 'dependencies', 'dependency', 'dependent']"
Integrability,"/// Returns true if MI is a dependency breaking zero-idiom instruction for the; /// subtarget.; ///; /// This function also sets bits in Mask related to input operands that; /// are not in a data dependency relationship. There is one bit for each; /// machine operand; implicit operands follow explicit operands in the bit; /// representation used for Mask. An empty (i.e. a mask with all bits; /// cleared) means: data dependencies are ""broken"" for all the explicit input; /// machine operands of MI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:28,depend,dependency,28,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,3,['depend'],"['dependencies', 'dependency']"
Integrability,/// Returns true if \p DependenceMI can clobber the liveIns in NullSucc block; /// if it was hoisted to the NullCheck block. This is used by caller; /// canHoistInst to decide if DependenceMI can be hoisted safely.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:23,Depend,DependenceMI,23,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,2,['Depend'],['DependenceMI']
Integrability,"/// Returns true if a dependency between \p Current and \p KillingDef is; /// guaranteed to be loop invariant for the loops that they are in. Either; /// because they are known to be in the same block, in the same loop level or; /// by guaranteeing that \p CurrentLoc only references a single MemoryLocation; /// during execution of the containing function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:22,depend,dependency,22,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['depend'],['dependency']
Integrability,"/// Returns true if a homogeneous prolog or epilog code can be emitted; /// for the size optimization. If possible, a frame helper call is injected.; /// When Exit block is given, this check is for epilog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:139,inject,injected,139,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['inject'],['injected']
Integrability,"/// Returns true if is legal to hoist or sink this instruction disregarding the; /// possible introduction of faults. Reasoning about potential faulting; /// instructions is the responsibility of the caller since it is challenging to; /// do efficiently from within this routine.; /// \p TargetExecutesOncePerLoop is true only when it is guaranteed that the; /// target executes at most once per execution of the loop body. This is used; /// to assess the legality of duplicating atomic loads. Generally, this is; /// true when moving out of loop and not true when moving into loops.; /// If \p ORE is set use it to emit optimization remarks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:271,rout,routine,271,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,1,['rout'],['routine']
Integrability,"/// Returns true if it is ready for scheduling, i.e. it has no more; /// unscheduled depending instructions/bundles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:85,depend,depending,85,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['depend'],['depending']
Integrability,"/// Returns true if memory accesses \p A and \p B can be reordered, if; /// necessary, when constructing interleaved groups.; ///; /// \p A must precede \p B in program order. We return false if reordering is; /// not necessary or is prevented because \p A and \p B may be dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:273,depend,dependent,273,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['depend'],['dependent']
Integrability,"/// Returns true if the argument consists of one contiguous run of 1s with any; /// number of 0s on either side. The 1s are allowed to wrap from LSB to MSB, so; /// 0x000FFF0, 0x0000FFFF, 0xFF0000FF, 0x0 are all runs. 0x0F0F0000 is not,; /// since all 1s are not contiguous.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:135,wrap,wrap,135,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['wrap'],['wrap']
Integrability,"/// Returns true if the arithmetic part of the \p WO 's result is; /// used only along the paths control dependent on the computation; /// not overflowing, \p WO being an <op>.with.overflow intrinsic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:105,depend,dependent,105,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['depend'],['dependent']
Integrability,/// Returns true if the dependency information has been calculated.; /// Note that depenendency validity can vary between instructions within; /// a single bundle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:24,depend,dependency,24,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['depend'],['dependency']
Integrability,"/// Returns true if the given selector is a designated initializer for the; /// interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.; ///; /// \param InitMethod if non-null and the function returns true, it receives; /// the method that was marked as a designated initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:80,interface,interface,80,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['interface'],['interface']
Integrability,"/// Returns true if the immediate message arguments of \c Msg should not; /// be rewritten because it will interfere with the rewrite of the parent; /// message expression. e.g.; /// \code; /// [NSDictionary dictionaryWithObjects:; /// [NSArray arrayWithObjects:@""1"", @""2"", nil]; /// forKeys:[NSArray arrayWithObjects:@""A"", @""B"", nil]];; /// \endcode; /// It will return true for this because we are going to rewrite this directly; /// to a dictionary literal without any array literals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Edit/RewriteObjCFoundationAPI.cpp:34,message,message,34,interpreter/llvm-project/clang/lib/Edit/RewriteObjCFoundationAPI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Edit/RewriteObjCFoundationAPI.cpp,2,['message'],['message']
Integrability,"/// Returns true if the instruction could potentially depend on the value of; /// exec. If false, exec dependencies may safely be ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.h:54,depend,depend,54,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.h,2,['depend'],"['depend', 'dependencies']"
Integrability,"/// Returns true if the instruction has no behavior (specified or otherwise); /// that is based on the value loaded from memory or the value of any; /// non-address register operands.; ///; /// For example, if the latency of the instruction is dependent on the; /// particular bits set in any of the registers *or* any of the bits loaded; /// from memory.; ///; /// Instructions are considered data invariant even if they set EFLAGS.; ///; /// A classical example of something that is inherently not data invariant is; /// an indirect jump -- the destination is loaded into icache based on the; /// bits set in the jump destination register.; ///; /// FIXME: This should become part of our instruction tables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h:244,depend,dependent,244,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,1,['depend'],['dependent']
Integrability,"/// Returns true if the loop is annotated parallel.; ///; /// A parallel loop can be assumed to not contain any dependencies between; /// iterations by the compiler. That is, any loop-carried dependency checking; /// can be skipped completely when parallelizing the loop on the target; /// machine. Thus, if the parallel loop information originates from the; /// programmer, e.g. via the OpenMP parallel for pragma, it is the; /// programmer's responsibility to ensure there are no loop-carried; /// dependencies. The final execution order of the instructions across; /// iterations is not guaranteed, thus, the end result might or might not; /// implement actual concurrent execution of instructions across multiple; /// iterations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:112,depend,dependencies,112,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,3,['depend'],"['dependencies', 'dependency']"
Integrability,/// Returns true if the memory operations \p A and \p B are consecutive.; /// This is a simple API that does not depend on the analysis pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:113,depend,depend,113,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['depend']
Integrability,"/// Returns true if the method selector resolves to a designated initializer; /// in the class's interface.; ///; /// \param InitMethod if non-null and the function returns true, it receives; /// the method declaration that was marked with the designated initializer; /// attribute.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:97,interface,interface,97,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// Returns true if the result or effects of the given instructions \p I; /// depend values not reachable through the def use graph.; /// * Memory dependence arises for example if the instruction reads from; /// memory or may produce effects or undefined behaviour. Memory dependent; /// instructions generally cannot be reorderd with respect to other memory; /// dependent instructions.; /// * Control dependence arises for example if the instruction may fault; /// if lifted above a throwing call or infinite loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:78,depend,depend,78,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,5,['depend'],"['depend', 'dependence', 'dependent']"
Integrability,"/// Returns true if the target allows calling a function through a pointer; /// with a different signature than the actual function (or equivalently,; /// bitcasting a function or function pointer to a different function type).; /// In principle in the most general case this could depend on the target, the; /// calling convention, and the actual types of the arguments and return; /// value. Here it just means whether the signature mismatch could *ever* be; /// allowed; in other words, does the target do strict checking of signatures; /// for all calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:282,depend,depend,282,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,1,['depend'],['depend']
Integrability,/// Returns true if the target will correctly handle shrink wrapping.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:60,wrap,wrapping,60,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,4,['wrap'],['wrapping']
Integrability,"/// Returns true if this instruction has the same cost (or less) than a; /// move instruction. This is useful during certain types of optimizations; /// (e.g., remat during two-address conversion or machine licm) where we would; /// like to remat or hoist the instruction, but not if it costs more than; /// moving the instruction into the appropriate register. Note, we are not; /// marking copies from and to the same register class with this flag.; ///; /// This method could be called by interface TargetInstrInfo::isAsCheapAsAMove; /// for different subtargets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:492,interface,interface,492,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,1,['interface'],['interface']
Integrability,/// Returns true if this interface decl contains at least one initializer; /// marked with the 'objc_designated_initializer' attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,interface,interface,25,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// Returns true if this interface decl declares a designated initializer; /// or it inherites one from its super class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,interface,interface,25,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,"/// Returns true if this is a C++11 attribute-specifier. Per; /// C++11 [dcl.attr.grammar]p6, two consecutive left square bracket tokens; /// always introduce an attribute. In Objective-C++11, this rule does not; /// apply if either '[' begins a message-send.; ///; /// If Disambiguate is true, we try harder to determine whether a '[[' starts; /// an attribute-specifier, and return CAK_InvalidAttributeSpecifier if not.; ///; /// If OuterMightBeMessageSend is true, we assume the outer '[' is either an; /// Obj-C message send or the start of an attribute. Otherwise, we assume it; /// is not an Obj-C message send.; ///; /// C++11 [dcl.attr.grammar]:; ///; /// attribute-specifier:; /// '[' '[' attribute-list ']' ']'; /// alignment-specifier; ///; /// attribute-list:; /// attribute[opt]; /// attribute-list ',' attribute[opt]; /// attribute '...'; /// attribute-list ',' attribute '...'; ///; /// attribute:; /// attribute-token attribute-argument-clause[opt]; ///; /// attribute-token:; /// identifier; /// identifier '::' identifier; ///; /// attribute-argument-clause:; /// '(' balanced-token-seq ')'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:246,message,message-send,246,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,3,['message'],"['message', 'message-send']"
Integrability,"/// Returns true if this symbol is a materialization-side-effects-only; /// symbol. Such symbols do not have a real address. They exist to trigger; /// and support synchronization of materialization side effects, e.g. for; /// collecting initialization information. These symbols will vanish from; /// the symbol table immediately upon reaching the ready state, and will; /// appear to queries as if they were never defined (except that query; /// callback execution will be delayed until they reach the ready state).; /// MaterializationSideEffectOnly symbols should only be queried using the; /// SymbolLookupFlags::WeaklyReferencedSymbol flag (see; /// llvm/include/llvm/ExecutionEngine/Orc/Core.h).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:164,synchroniz,synchronization,164,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,1,['synchroniz'],['synchronization']
Integrability,/// Returns true if this value is equivalent to a default-constructed; /// WrapperFunctionResult.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:75,Wrap,WrapperFunctionResult,75,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,1,['Wrap'],['WrapperFunctionResult']
Integrability,/// Returns true if we've proved that V doesn't wrap by means of a SCEV; /// predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:48,wrap,wrap,48,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['wrap'],['wrap']
Integrability,"/// Returns true iff Val consists of one contiguous run of 1s with any number of; /// 0s on either side. The 1s are allowed to wrap from LSB to MSB, so; /// 0x000FFF0, 0x0000FFFF, and 0xFF0000FF are all runs. 0x0F0F0000 is not,; /// since all 1s are not contiguous.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h:127,wrap,wrap,127,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h,1,['wrap'],['wrap']
Integrability,"/// Returns true iff the routine could find two commutable operands in the; /// given machine instruction with 3 vector inputs.; /// The 'SrcOpIdx1' and 'SrcOpIdx2' are INPUT and OUTPUT arguments. Their; /// input values can be re-defined in this method only if the input values; /// are not pre-defined, which is designated by the special value; /// 'CommuteAnyOperandIndex' assigned to it.; /// If both of indices are pre-defined and refer to some operands, then the; /// method simply returns true if the corresponding operands are commutable; /// and returns false otherwise.; ///; /// For example, calling this method this way:; /// unsigned Op1 = 1, Op2 = CommuteAnyOperandIndex;; /// findThreeSrcCommutedOpIndices(MI, Op1, Op2);; /// can be interpreted as a query asking to find an operand that would be; /// commutable with the operand#1.; ///; /// If IsIntrinsic is set, operand 1 will be ignored for commuting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h:25,rout,routine,25,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,1,['rout'],['routine']
Integrability,"/// Returns true iff the routine could find two commutable operands in the; /// given machine instruction.; /// The 'SrcOpIdx1' and 'SrcOpIdx2' are INPUT and OUTPUT arguments. Their; /// input values can be re-defined in this method only if the input values; /// are not pre-defined, which is designated by the special value; /// 'CommuteAnyOperandIndex' assigned to it.; /// If both of indices are pre-defined and refer to some operands, then the; /// method simply returns true if the corresponding operands are commutable; /// and returns false otherwise.; ///; /// For example, calling this method this way:; /// unsigned Op1 = 1, Op2 = CommuteAnyOperandIndex;; /// findCommutedOpIndices(MI, Op1, Op2);; /// can be interpreted as a query asking to find an operand that would be; /// commutable with the operand#1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h:25,rout,routine,25,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,1,['rout'],['routine']
Integrability,"/// Returns true iff the routine could find two commutable operands in the; /// given machine instruction.; /// The 'SrcOpIdx1' and 'SrcOpIdx2' are INPUT and OUTPUT arguments.; /// If any of the INPUT values is set to the special value; /// 'CommuteAnyOperandIndex' then the method arbitrarily picks a commutable; /// operand, then returns its index in the corresponding argument.; /// If both of INPUT values are set to 'CommuteAnyOperandIndex' then method; /// looks for 2 commutable operands.; /// If INPUT values refer to some operands of MI, then the method simply; /// returns true if the corresponding operands are commutable and returns; /// false otherwise.; ///; /// For example, calling this method this way:; /// unsigned Op1 = 1, Op2 = CommuteAnyOperandIndex;; /// findCommutedOpIndices(MI, Op1, Op2);; /// can be interpreted as a query asking to find an operand that would be; /// commutable with the operand#1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:25,rout,routine,25,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['rout'],['routine']
Integrability,"/// Returns true on error, false on success. If true is returned then the error; /// message is copied to OutStr and cleared in the ExecutionEngine instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/ExecutionEngine.h:85,message,message,85,interpreter/llvm-project/llvm/include/llvm-c/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/ExecutionEngine.h,1,['message'],['message']
Integrability,"/// Returns true when the Objective-C message is sent to a class.; ///; /// Example; /// matcher = objcMessageExpr(isClassMessage()); /// matches; /// \code; /// [NSString stringWithFormat:@""format""];; /// \endcode; /// but not; /// \code; /// NSString *x = @""hello"";; /// [x containsString:@""h""];; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:38,message,message,38,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['message'],['message']
Integrability,"/// Returns true when the Objective-C message is sent to an instance.; ///; /// Example; /// matcher = objcMessageExpr(isInstanceMessage()); /// matches; /// \code; /// NSString *x = @""hello"";; /// [x containsString:@""h""];; /// \endcode; /// but not; /// \code; /// [NSString stringWithFormat:@""format""];; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:38,message,message,38,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['message'],['message']
Integrability,/// Returns true when the Objective-C method declaration is a class method.; ///; /// Example; /// matcher = objcMethodDecl(isClassMethod()); /// matches; /// \code; /// @interface I + (void)foo; @end; /// \endcode; /// but not; /// \code; /// @interface I - (void)bar; @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:171,interface,interface,171,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['interface'],['interface']
Integrability,/// Returns true when the Objective-C method declaration is an instance method.; ///; /// Example; /// matcher = objcMethodDecl(isInstanceMethod()); /// matches; /// \code; /// @interface I - (void)bar; @end; /// \endcode; /// but not; /// \code; /// @interface I + (void)foo; @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:178,interface,interface,178,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['interface'],['interface']
Integrability,"/// Returns true when, heuristically, the analyzer may be analyzing debugging; /// code. We use this to suppress localization diagnostics in un-localized user; /// interfaces that are only used for debugging and are therefore not user; /// facing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/LocalizationChecker.cpp:164,interface,interfaces,164,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/LocalizationChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/LocalizationChecker.cpp,1,['interface'],['interfaces']
Integrability,"/// Returns true, if metadata on \p BI allows us to optimize branching into \p; /// TakenSucc via injection of invariant conditions. The branch should be not; /// enough and not previously unswitched, the information about this comes from; /// the metadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:98,inject,injection,98,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['injection']
Integrability,"/// Returns true, if predicate described by ( \p Pred, \p LHS, \p RHS ); /// succeeding into blocks ( \p IfTrue, \p IfFalse) can be optimized by; /// injecting a loop-invariant condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:150,inject,injecting,150,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['injecting']
Integrability,/// Returns whether V is a source of divergence.; ///; /// This function provides the target-dependent information for; /// the target-independent UniformityAnalysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:93,depend,dependent,93,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['depend'],['dependent']
Integrability,/// Returns whether this partition contains a dependence cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp:46,depend,dependence,46,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,1,['depend'],['dependence']
Integrability,"/// Returns with the modified state and a map of (uninitialized region,; /// note message) pairs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h:82,message,message,82,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,1,['message'],['message']
Integrability,"/// Rewrite an alloca partition's users.; ///; /// This routine drives both of the rewriting goals of the SROA pass. It tries; /// to rewrite uses of an alloca partition to be conducive for SSA value; /// promotion. If the partition needs a new, more refined alloca, this will; /// build that new alloca, preserving as much type information as possible, and; /// rewrite the uses of the old alloca to point at the new one and have the; /// appropriate new offsets. It also evaluates how successful the rewrite was; /// at enabling promotion and if it was successful queues the alloca to be; /// promoted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:56,rout,routine,56,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rout'],['routine']
Integrability,"/// Rewrite image intrinsics to use register layouts expected by the subtarget.; ///; /// Depending on the subtarget, load/store with 16-bit element data need to be; /// rewritten to use the low half of 32-bit registers, or directly use a packed; /// layout. 16-bit addresses should also sometimes be packed into 32-bit; /// registers.; ///; /// We don't want to directly select image instructions just yet, but also want; /// to exposes all register repacking to the legalizer/combiners. We also don't; /// want a selected instruction entering RegBankSelect. In order to avoid; /// defining a multitude of intermediate image instructions, directly hack on; /// the intrinsic's arguments. In cases like a16 addresses, this requires; /// padding now unnecessary arguments with $noreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:90,Depend,Depending,90,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['Depend'],['Depending']
Integrability,/// Rewrite statements and expressions for Sema \p Actions CurContext.; ///; /// Used to wrap already parsed statements/expressions into a new CapturedStmt; /// context. DeclRefExpr used inside the new context are changed to refer to the; /// captured variable instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:89,wrap,wrap,89,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['wrap'],['wrap']
Integrability,"/// RewriteByRefVar - For each __block typex ND variable this routine transforms; /// the declaration into:; /// struct __Block_byref_ND {; /// void *__isa; // NULL for everything except __weak pointers; /// struct __Block_byref_ND *__forwarding;; /// int32_t __flags;; /// int32_t __size;; /// void *__Block_byref_id_object_copy; // If variable is __block ObjC object; /// void *__Block_byref_id_object_dispose; // If variable is __block ObjC object; /// typex ND;; /// };; ///; /// It then replaces declaration of ND variable with:; /// struct __Block_byref_ND ND = {__isa=0B, __forwarding=&ND, __flags=some_flag,; /// __size=sizeof(struct __Block_byref_ND),; /// ND=initializer-if-any};; ///; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:62,rout,routine,62,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rout'],['routine']
Integrability,/// RewriteIvarOffsetComputation - This routine synthesizes computation of; /// ivar offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:40,rout,routine,40,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rout'],['routine']
Integrability,/// RewriteLocallyDefinedNamedAggregates - This routine rewrites locally defined; /// named aggregate types into the input buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:48,rout,routine,48,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,1,['rout'],['routine']
Integrability,"/// RewriteObjCFieldDecl - This routine rewrites a field into the buffer.; /// It handles elaborated types, as well as enum types in the process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:32,rout,routine,32,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,1,['rout'],['routine']
Integrability,"/// RewriteObjCFieldDeclType - This routine rewrites a type into the buffer.; /// It handles elaborated types, as well as enum types in the process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:36,rout,routine,36,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,1,['rout'],['routine']
Integrability,/// RewriteObjCProtocolExpr - Rewrite a protocol expression into; /// a synthesized/forward data reference (to the protocol's metadata).; /// The forward references (and metadata) are generated in; /// RewriteModernObjC::HandleTranslationUnit().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:40,protocol,protocol,40,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['protocol'],['protocol']
Integrability,/// RewriteObjCProtocolExpr - Rewrite a protocol expression into; /// a synthesized/forward data reference (to the protocol's metadata).; /// The forward references (and metadata) are generated in; /// RewriteObjC::HandleTranslationUnit().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:40,protocol,protocol,40,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,2,['protocol'],['protocol']
Integrability,/// RewriteObjCProtocolMetaData - Rewrite protocols meta-data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:42,protocol,protocols,42,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['protocol'],['protocols']
Integrability,/// RewriteObjCSynchronizedStmt -; /// This routine rewrites @synchronized(expr) stmt;; /// into:; /// objc_sync_enter(expr);; /// @try stmt @finally { objc_sync_exit(expr); }; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:44,rout,routine,44,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,"['rout', 'synchroniz']","['routine', 'synchronized']"
Integrability,/// Rewriter - This is the main interface to the rewrite buffers. Its primary; /// job is to dispatch high-level requests to the low-level RewriteBuffers that; /// are involved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:32,interface,interface,32,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,1,['interface'],['interface']
Integrability,"/// Robust ray-node intersection routine. See ""Robust BVH Ray Traversal"", by T. Ize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/node.h:33,rout,routine,33,geom/geom/inc/bvh/v2/node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/node.h,1,['rout'],['routine']
Integrability,"/// Rteurn this JITDylib and its transitive dependencies in reverse DFS order; /// based on linkage relationships.; ///; /// If any JITDylib in the order is defunct then this method will return an; /// error, otherwise returns the order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:44,depend,dependencies,44,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['depend'],['dependencies']
Integrability,"/// Run - Minimize the DAG formed by the \p Changes vertices and the; /// \p Dependencies edges by executing \see ExecuteOneTest() on subsets of; /// changes and returning the smallest set which still satisfies the test; /// predicate and the input \p Dependencies.; ///; /// \param Changes The list of changes.; ///; /// \param Dependencies The list of dependencies amongst changes. For each; /// (x,y) in \p Dependencies, both x and y must be in \p Changes. The; /// minimization algorithm guarantees that for each tested changed set S,; /// \f$ x \in S \f$ implies \f$ y \in S \f$. It is an error to have cyclic; /// dependencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h:77,Depend,Dependencies,77,interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h,6,"['Depend', 'depend']","['Dependencies', 'dependencies']"
Integrability,/// Run `::update` on \p AA and track the dependences queried while doing so.; /// Also adjust the state if we know further updates are not necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:42,depend,dependences,42,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['dependences']
Integrability,/// Run a registered jit-side wrapper function.; /// This should be called by the ExecutorProcessControl instance in response; /// to incoming jit-dispatch requests from the executor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:30,wrap,wrapper,30,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['wrap'],['wrapper']
Integrability,/// Run a wrapper function in the executor using the given Runner to dispatch; /// OnComplete when the result is ready.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,wrap,wrapper,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,1,['wrap'],['wrapper']
Integrability,/// Run a wrapper function in the executor. OnComplete will be dispatched; /// as a GenericNamedTask using this instance's TaskDispatch object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,wrap,wrapper,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,1,['wrap'],['wrapper']
Integrability,"/// Run a wrapper function in the executor. The given WFRHandler will be; /// called on the result when it is returned.; ///; /// The wrapper function should be callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:10,wrap,wrapper,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,2,['wrap'],['wrapper']
Integrability,"/// Run a wrapper function in the executor. The wrapper function should be; /// callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:10,wrap,wrapper,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,4,['wrap'],['wrapper']
Integrability,"/// Run a wrapper function in the executor.; ///; /// The wrapper function should be callable as:; ///; /// \code{.cpp}; /// CWrapperFunctionResult fn(uint8_t *Data, uint64_t Size);; /// \endcode{.cpp}; ///; /// The given OnComplete function will be called to return the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:10,wrap,wrapper,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,2,['wrap'],['wrapper']
Integrability,/// Run a wrapper function using SPS to serialize the arguments and; /// deserialize the results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:10,wrap,wrapper,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,3,['wrap'],['wrapper']
Integrability,/// Run a wrapper function using SPS to serialize the arguments and; /// deserialize the results.; ///; /// If SPSSignature is a non-void function signature then the second argument; /// (the first in the Args list) should be a reference to a return value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:10,wrap,wrapper,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,2,['wrap'],['wrapper']
Integrability,/// Run call returning raw WrapperFunctionResult.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:27,Wrap,WrapperFunctionResult,27,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,1,['Wrap'],['WrapperFunctionResult']
Integrability,"/// Run checkers for debug-printing a ProgramState.; ///; /// Unlike most other callbacks, any checker can simply implement the virtual; /// method CheckerBase::printState if it has custom data to print.; ///; /// \param Out The output stream; /// \param State The state being printed; /// \param NL The preferred representation of a newline.; /// \param Space The preferred space between the left side and the message.; /// \param IsDot Whether the message will be printed in 'dot' format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:411,message,message,411,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,2,['message'],['message']
Integrability,/// Run checkers for post-visiting obj-c messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:41,message,messages,41,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,2,['message'],['messages']
Integrability,/// Run checkers for pre-visiting obj-c messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:40,message,messages,40,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,2,['message'],['messages']
Integrability,"/// Run checkers for region changes.; ///; /// This corresponds to the check::RegionChanges callback.; /// \param state The current program state.; /// \param invalidated A set of all symbols potentially touched by the change.; /// \param ExplicitRegions The regions explicitly requested for invalidation.; /// For example, in the case of a function call, these would be arguments.; /// \param Regions The transitive closure of accessible regions,; /// i.e. all regions that may have been touched by this change.; /// \param Call The call expression wrapper if the regions are invalidated; /// by a call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:550,wrap,wrapper,550,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,1,['wrap'],['wrapper']
Integrability,/// Run checkers for visiting an obj-c message to nil.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:39,message,message,39,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,1,['message'],['message']
Integrability,/// Run checkers for visiting obj-c messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:36,message,messages,36,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,2,['message'],['messages']
Integrability,"/// Run in two modes dependending on whether constructed with IntervalPressure; /// or RegisterPressure. If requireIntervals is false, LIS are ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:21,depend,dependending,21,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,1,['depend'],['dependending']
Integrability,"/// Run numeric integrations using RooRombergIntegrator and ROOT's adaptive integrator. Ensure that; /// they reach the requested precision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:16,integrat,integrations,16,roofit/roofitcore/test/testRooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx,2,['integrat'],"['integrations', 'integrator']"
Integrability,"/// Run the dependency scanning tool for a given clang driver command-line,; /// and report the discovered dependencies to the provided consumer. If \p; /// ModuleName isn't empty, this function reports the dependencies of module; /// \p ModuleName.; ///; /// \returns false if clang errors occurred (with diagnostics reported to; /// \c DiagConsumer), true otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h:12,depend,dependency,12,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h,3,['depend'],"['dependencies', 'dependency']"
Integrability,"/// Run the wrapper pass to rebuild an aggregation over known AA passes.; ///; /// This is the legacy pass manager's interface to the new-style AA results; /// aggregation object. Because this is somewhat shoe-horned into the legacy; /// pass manager, we hard code all the specific alias analyses available into; /// it. While the particular set enabled is configured via commandline flags,; /// adding a new alias analysis to LLVM will require adding support for it to; /// this list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:12,wrap,wrapper,12,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,/// RunProgramWithTimeout - This function provides an alternate interface; /// to the sys::Program::ExecuteAndWait interface.; /// @see sys::Program::ExecuteAndWait,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.cpp:64,interface,interface,64,interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.cpp,2,['interface'],['interface']
Integrability,/// Runs the wrapped linker job with the newly created input.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp:13,wrap,wrapped,13,interpreter/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp,1,['wrap'],['wrapped']
Integrability,"/// Runs the wrapped pass up to \c MaxIterations on the SCC, iterating; /// whenever an indirect call is refined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:13,wrap,wrapped,13,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['wrap'],['wrapped']
Integrability,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:392,integrat,integration,392,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,1,['integrat'],['integration']
Integrability,/// SMEAttrs is a utility class to parse the SME ACLE attributes on functions.; /// It helps determine a function's requirements for PSTATE.ZA and PSTATE.SM. It; /// has interfaces to query whether a streaming mode change or lazy-save; /// mechanism is required when going from one function to another (e.g. through; /// a call).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64SMEAttributes.h:170,interface,interfaces,170,interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64SMEAttributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64SMEAttributes.h,1,['interface'],['interfaces']
Integrability,/// SU has had all predecessor dependencies resolved. Put it into; /// Available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.h:31,depend,dependencies,31,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.h,1,['depend'],['dependencies']
Integrability,"/// Same as the above interface but using an ArrayRef, as well as \p Sum.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:22,interface,interface,22,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['interface'],['interface']
Integrability,"/// Same as the above, but sets a BBNum depending on BB traversal that; /// will be used as prefix for the vreg names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.h:40,depend,depending,40,interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.h,1,['depend'],['depending']
Integrability,/// Sanitize diagnostic options for dependency scan.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp:36,depend,dependency,36,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,1,['depend'],['dependency']
Integrability,/// Scan for preprocessor directives for the given entry if necessary and; /// returns a wrapper object with reference semantics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h:89,wrap,wrapper,89,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,1,['wrap'],['wrapper']
Integrability,/// Scan through instruction dependencies and update InsertAfter array.; /// Return false if any dependency is incompatible with if conversion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp:29,depend,dependencies,29,interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,2,['depend'],"['dependencies', 'dependency']"
Integrability,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:610,depend,dependence,610,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,1,['depend'],['dependence']
Integrability,/// Scheduling dependency. This represents one direction of an edge in the; /// scheduling DAG.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:15,depend,dependency,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['depend'],['dependency']
Integrability,"/// ScratchBuffer - This class exposes a simple interface for the dynamic; /// construction of tokens. This is used for builtin macros (e.g. __LINE__) as; /// well as token pasting, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h:48,interface,interface,48,interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,1,['interface'],['interface']
Integrability,"/// Search for subprograms and variables referencing live code and discover; /// dependend DIEs. Mark live DIEs, set placement for DIEs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h:81,depend,dependend,81,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,1,['depend'],['dependend']
Integrability,/// Search the call expression for the symbol Sym and dispatch the; /// 'getMessageForX()' methods to construct a specific message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:123,message,message,123,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,1,['message'],['message']
Integrability,"/// Search the given JITDylibs for the given symbols.; ///; /// SearchOrder lists the JITDylibs to search. For each dylib, the associated; /// boolean indicates whether the search should match against non-exported; /// (hidden visibility) symbols in that dylib (true means match against; /// non-exported symbols, false means do not match).; ///; /// The NotifyComplete callback will be called once all requested symbols; /// reach the required state.; ///; /// If all symbols are found, the RegisterDependencies function will be called; /// while the session lock is held. This gives clients a chance to register; /// dependencies for on the queried symbols for any symbols they are; /// materializing (if a MaterializationResponsibility instance is present,; /// this can be implemented by calling; /// MaterializationResponsibility::addDependencies). If there are no; /// dependenant symbols for this query (e.g. it is being made by a top level; /// client to get an address to call) then the value NoDependenciesToRegister; /// can be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:619,depend,dependencies,619,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,2,['depend'],"['dependenant', 'dependencies']"
Integrability,"/// Searches the buffer for the first prefix in the prefix regular expression.; ///; /// This searches the buffer using the provided regular expression, however it; /// enforces constraints beyond that:; /// 1) The found prefix must not be a suffix of something that looks like; /// a valid prefix.; /// 2) The found prefix must be followed by a valid check type suffix using \c; /// FindCheckType above.; ///; /// \returns a pair of StringRefs into the Buffer, which combines:; /// - the first match of the regular expression to satisfy these two is; /// returned,; /// otherwise an empty StringRef is returned to indicate failure.; /// - buffer rewound to the location right after parsed suffix, for parsing; /// to continue from; ///; /// If this routine returns a valid prefix, it will also shrink \p Buffer to; /// start at the beginning of the returned prefix, increment \p LineNumber for; /// each new line consumed from \p Buffer, and set \p CheckTy to the type of; /// check found by examining the suffix.; ///; /// If no valid prefix is found, the state of Buffer, LineNumber, and CheckTy; /// is unspecified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:750,rout,routine,750,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['rout'],['routine']
Integrability,/// SectionTypeDescriptors - These are strings that describe the various section; /// types. This *must* be kept in order with and stay synchronized with the; /// section type list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp:136,synchroniz,synchronized,136,interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,1,['synchroniz'],['synchronized']
Integrability,/// Select the appropriate assignment function depending on whether this is; /// a variadic call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:47,depend,depending,47,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,1,['depend'],['depending']
Integrability,/// SelectNodeTo - These are wrappers around MorphNodeTo that accept a; /// machine opcode.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:29,wrap,wrappers,29,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['wrap'],['wrappers']
Integrability,"/// SelectPropertyForSynthesisFromProtocols - Finds the most appropriate; /// property declaration that should be synthesised in all of the inherited; /// protocols. It also diagnoses properties declared in inherited protocols with; /// mismatched types or attributes, since any of them can be candidate for; /// synthesis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp:155,protocol,protocols,155,interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,2,['protocol'],['protocols']
Integrability,"/// Semantic checking for initializer lists.; ///; /// The InitListChecker class contains a set of routines that each; /// handle the initialization of a certain kind of entity, e.g.,; /// arrays, vectors, struct/union types, scalars, etc. The; /// InitListChecker itself performs a recursive walk of the subobject; /// structure of the type to be initialized, while stepping through; /// the initializer list one element at a time. The IList and Index; /// parameters to each of the Check* routines contain the active; /// (syntactic) initializer list and the index into that initializer; /// list that represents the current initializer. Each routine is; /// responsible for moving that Index forward as it consumes elements.; ///; /// Each Check* routine also has a StructuredList/StructuredIndex; /// arguments, which contains the current ""structured"" (semantic); /// initializer list and the index into that initializer list where we; /// are copying initializers as we map them over to the semantic; /// list. Once we have completed our recursive walk of the subobject; /// structure, we will have constructed a full semantic initializer; /// list.; ///; /// C99 designators cause changes in the initializer list traversal,; /// because they make the initialization ""jump"" into a specific; /// subobject and then continue the initialization from that; /// point. CheckDesignatedInitializer() recursively steps into the; /// designated subobject and manages backing out the recursion to; /// initialize the subobjects after the one designated.; ///; /// If an initializer list contains any designators, we build a placeholder; /// structured list even in 'verify only' mode, so that we can track which; /// elements need 'empty' initializtion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:99,rout,routines,99,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,4,['rout'],"['routine', 'routines']"
Integrability,/// Send a SimpleRemoteEPC message.; ///; /// This function may be called concurrently. Subclasses should implement; /// locking if required for the underlying transport.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:27,message,message,27,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,1,['message'],['message']
Integrability,"/// Send message with ZMQ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:9,message,message,9,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,1,['message'],['message']
Integrability,"/// Serialize the identifier object as specified by the Symbol Graph format.; ///; /// The identifier property of a symbol contains the USR for precise and unique; /// references, and the interface language name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:188,interface,interface,188,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['interface'],['interface']
Integrability,"/// Set color printing, so the type diffing will inject color markers; /// into the output.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:49,inject,inject,49,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['inject'],['inject']
Integrability,/// Set dependence type location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,depend,dependence,8,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependence']
Integrability,/// Set dependence type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,depend,dependence,8,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependence']
Integrability,/// Set dependency kind and its location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,depend,dependency,8,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependency']
Integrability,/// Set dependency kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,depend,dependency,8,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependency']
Integrability,/// Set error and error message,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:24,message,message,24,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,1,['message'],['message']
Integrability,/// Set map for Swift interfaces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:22,interface,interfaces,22,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,3,['interface'],['interfaces']
Integrability,/// Set message string of the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,message,message,8,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['message'],['message']
Integrability,/// Set of 'depend' clauses with 'sink|source' dependence kind. Required to; /// get the data (loop counters etc.) about enclosing loop-based construct.; /// This data is required during codegen.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:12,depend,depend,12,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['depend'],"['depend', 'dependence']"
Integrability,/// Set of dependency graph nodes which should be updated if this one; /// is updated. The bit encodes if it is optional.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,depend,dependency,11,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['dependency']
Integrability,/// Set of potential dependent memory accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:21,depend,dependent,21,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependent']
Integrability,"/// Set or clear the allow-contract flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:27,contract,contract,27,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['contract'],['contract']
Integrability,"/// Set the ""delayed"" diagnostic that will be emitted once; /// the current diagnostic completes.; ///; /// If a diagnostic is already in-flight but the front end must; /// report a problem (e.g., with an inconsistent file system; /// state), this routine sets a ""delayed"" diagnostic that will be; /// emitted after the current diagnostic completes. This should; /// only be used for fatal errors detected at inconvenient; /// times. If emitting a delayed diagnostic causes a second delayed; /// diagnostic to be introduced, that second delayed diagnostic; /// will be ignored.; ///; /// \param DiagID The ID of the diagnostic being delayed.; ///; /// \param Arg1 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.; ///; /// \param Arg2 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.; ///; /// \param Arg3 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:248,rout,routine,248,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['rout'],['routine']
Integrability,"/// Set the bits from loBit (inclusive) to hiBit (exclusive) to 1.; /// This function handles ""wrap"" case when \p loBit >= \p hiBit, and calls; /// setBits when \p loBit < \p hiBit.; /// For \p loBit == \p hiBit wrap case, set every bit to 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:95,wrap,wrap,95,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['wrap'],['wrap']
Integrability,"/// Set the desired level of confidence-level accuracy for Keys interval; /// determination.; //; /// When determining the cutoff PDF height that gives the; /// desired confidence level (C_d), the algorithm will consider acceptable; /// any found confidence level c such that Abs(c - C_d) < epsilon.; ///; /// Any value of this ""epsilon"" > 0 is considered acceptable, though it is; /// advisable to not use a value too small, because the integration of the; /// Keys PDF sometimes does not have extremely high accuracy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:438,integrat,integration,438,roofit/roostats/inc/RooStats/MCMCCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h,1,['integrat'],['integration']
Integrability,/// Set the device offload info of this action and propagate it to its; /// dependences.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:76,depend,dependences,76,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependences']
Integrability,"/// Set the library that serves as the backend for the JSON interface. Note that the `""rapidyaml""` backend is only; /// supported if rapidyaml was found on the system when ROOT was compiled. \param[in] name Name of the backend, can be; /// either `""nlohmann-json""` or `""rapidyaml""`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/src/JSONInterface.cxx:60,interface,interface,60,roofit/jsoninterface/src/JSONInterface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/src/JSONInterface.cxx,1,['interface'],['interface']
Integrability,/// Set the loop data for the depend clauses with 'sink|source' kind of; /// dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:30,depend,depend,30,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['depend'],"['depend', 'dependency']"
Integrability,/// Set the name of destroyed type for a dependent pseudo-destructor; /// expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:41,depend,dependent,41,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['dependent']
Integrability,"/// Set the offload info of this action to be the same as the provided action,; /// and propagate it to its dependences.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:108,depend,dependences,108,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependences']
Integrability,/// Set the pointer value of the message receiver.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:33,message,message,33,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,/// Set the predefines for this Preprocessor.; ///; /// These predefines are automatically injected when parsing the main file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:91,inject,injected,91,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['inject'],['injected']
Integrability,"/// Set the stream to be unbuffered. When unbuffered, the stream will flush; /// after every write. This routine will also flush the buffer immediately; /// when the stream is being set to unbuffered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:105,rout,routine,105,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,1,['rout'],['routine']
Integrability,"/// Set this link as the head of the chain's list of notify subscribers.; /// Templated only to remove an include dependency from TChain: it expects; /// a TChain as input (in practice anything that implements SetNotify and; /// GetNotify will work, but in ROOT that is only TTree and its sub-classes).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:114,depend,dependency,114,core/base/inc/TNotifyLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h,1,['depend'],['dependency']
Integrability,/// SetIvarInitializers - This routine builds initialization ASTs for the; /// Objective-C implementation whose ivars need be initialized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:31,rout,routine,31,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['rout'],['routine']
Integrability,"/// Sets each byte of the result to the corresponding byte of the 256-bit; /// integer vector in \a __a, the negative of that byte, or zero, depending; /// on whether the corresponding byte of the 256-bit integer vector in; /// \a __b is greater than zero, less than zero, or equal to zero,; /// respectively.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPSIGNB instruction.; ///; /// \param __a; /// A 256-bit integer vector.; /// \param __b; /// A 256-bit integer vector].; /// \returns A 256-bit integer vector containing the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:141,depend,depending,141,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,1,['depend'],['depending']
Integrability,"/// Sets each element of the result to the corresponding element of the; /// 256-bit vector of [16 x i16] in \a __a, the negative of that element,; /// or zero, depending on whether the corresponding element of the 256-bit; /// vector of [16 x i16] in \a __b is greater than zero, less than zero, or; /// equal to zero, respectively.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPSIGNW instruction.; ///; /// \param __a; /// A 256-bit vector of [16 x i16].; /// \param __b; /// A 256-bit vector of [16 x i16].; /// \returns A 256-bit vector of [16 x i16] containing the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:161,depend,depending,161,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,1,['depend'],['depending']
Integrability,"/// Sets each element of the result to the corresponding element of the; /// 256-bit vector of [8 x i32] in \a __a, the negative of that element, or; /// zero, depending on whether the corresponding element of the 256-bit; /// vector of [8 x i32] in \a __b is greater than zero, less than zero, or; /// equal to zero, respectively.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPSIGND instruction.; ///; /// \param __a; /// A 256-bit vector of [8 x i32].; /// \param __b; /// A 256-bit vector of [8 x i32].; /// \returns A 256-bit vector of [8 x i32] containing the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:160,depend,depending,160,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,1,['depend'],['depending']
Integrability,"/// Sets of potentially dependent accesses - members of one set share an; /// underlying pointer. The set ""CheckDeps"" identfies which sets really need a; /// dependence check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:24,depend,dependent,24,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['depend'],"['dependence', 'dependent']"
Integrability,/// Sets optional dependency modifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:18,depend,dependency,18,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependency']
Integrability,/// Sets the dependence kind for the clause for 'depobj' directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:13,depend,dependence,13,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependence']
Integrability,/// Sets the effect on the receiver of the message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h:43,message,message,43,interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,1,['message'],['message']
Integrability,"/// Sets the function declaration that owns this; /// ParmVarDecl. Since ParmVarDecls are often created before the; /// FunctionDecls that own them, this routine is required to update; /// the DeclContext appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:154,rout,routine,154,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['rout'],['routine']
Integrability,/// Sets the number of unscheduled dependencies to the number of; /// dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:35,depend,dependencies,35,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['depend'],['dependencies']
Integrability,/// Sets the ordering constraint and the synchronization scope ID of this load; /// instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:41,synchroniz,synchronization,41,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Sets the ordering constraint and the synchronization scope ID of this; /// store instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:41,synchroniz,synchronization,41,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Sets the synchronization scope ID of this cmpxchg instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,synchroniz,synchronization,13,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Sets the synchronization scope ID of this fence instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,synchroniz,synchronization,13,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Sets the synchronization scope ID of this load instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,synchroniz,synchronization,13,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Sets the synchronization scope ID of this rmw instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,synchroniz,synchronization,13,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,/// Sets the synchronization scope ID of this store instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:13,synchroniz,synchronization,13,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['synchroniz'],['synchronization']
Integrability,"/// Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:99,interface,interface,99,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['interface'],['interface']
Integrability,"/// Sets whether an error message should be printed out if an action fails. By; /// default, if an action fails, a message is printed out to stderr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h:26,message,message,26,interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,2,['message'],['message']
Integrability,"/// Sets whether this is a template-name lookup. For template-name lookups,; /// injected-class-names are treated as naming a template rather than a; /// template specialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:81,inject,injected-class-names,81,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['inject'],['injected-class-names']
Integrability,"/// Setter function without integration set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:28,integrat,integration,28,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['integrat'],['integration']
Integrability,"/// Setting flag makes this RooMomentMorphFuncND instance behave like the; /// former RooMomentMorphND class, with the the only difference being the; /// base class. If you want to create a pdf object that behaves exactly like; /// the old RooMomentMorphND, you can do it as follows:; ///; /// ```C++; /// RooMomentMorphFuncND func{<c'tor args you previously passed to RooMomentMorphFunc>};; ///; /// func.setPdfMode(); // change behavior to be exactly like the former RooMomentMorphND; ///; /// // Pass the selfNormalized=true` flag to the wrapper because the; /// RooMomentMorphFuncND already normalizes itself in pdf mode.; /// RooWrapperPdf pdf{""pdf_name"", ""pdf_name"", func, /*selfNormalized=*/true};; /// ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooMomentMorphFuncND.h:541,wrap,wrapper,541,roofit/roofit/inc/RooMomentMorphFuncND.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooMomentMorphFuncND.h,1,['wrap'],['wrapper']
Integrability,/// Should be called for expressions in non-statement position to avoid; /// wrapping into expression statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp:77,wrap,wrapping,77,interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,1,['wrap'],['wrapping']
Integrability,/// Should be used for Protocol Buffer messages in text format; /// (https://developers.google.com/protocol-buffers/).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:23,Protocol,Protocol,23,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,3,"['Protocol', 'message', 'protocol']","['Protocol', 'messages', 'protocol-buffers']"
Integrability,/// Should be used for Protocol Buffers; /// (https://developers.google.com/protocol-buffers/).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:23,Protocol,Protocol,23,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,"['Protocol', 'protocol']","['Protocol', 'protocol-buffers']"
Integrability,/// Should colors be used when printing out the diagnostic messages?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:59,message,messages,59,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['message'],['messages']
Integrability,/// Should this fixup be evaluated in a target dependent manner?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixupKindInfo.h:47,depend,dependent,47,interpreter/llvm-project/llvm/include/llvm/MC/MCFixupKindInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixupKindInfo.h,1,['depend'],['dependent']
Integrability,/// Should we use the integrated assembler?; /// The integrated assembler should be enabled by default (by the; /// constructors) when failing to parse a valid piece of assembly (inline; /// or otherwise) is considered a bug. It may then be overridden after; /// construction (see LLVMTargetMachine::initAsmInfo()).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:22,integrat,integrated,22,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,2,['integrat'],['integrated']
Integrability,"/// Similar to SCEV::NoWrapFlags, but with slightly different semantics; /// for FlagNUSW. The increment is considered to be signed, and a + b; /// (where b is the increment) is considered to wrap if:; /// zext(a + b) != zext(a) + sext(b); ///; /// If Signed is a function that takes an n-bit tuple and maps to the; /// integer domain as the tuples value interpreted as twos complement,; /// and Unsigned a function that takes an n-bit tuple and maps to the; /// integer domain as the base two value of input tuple, then a + b; /// has IncrementNUSW iff:; ///; /// 0 <= Unsigned(a) + Signed(b) < 2^n; ///; /// The IncrementNSSW flag has identical semantics with SCEV::FlagNSW.; ///; /// Note that the IncrementNUSW flag is not commutative: if base + inc; /// has IncrementNUSW, then inc + base doesn't neccessarily have this; /// property. The reason for this is that this is used for sign/zero; /// extending affine AddRec SCEV expressions when a SCEVWrapPredicate is; /// assumed. A {base,+,inc} expression is already non-commutative with; /// regards to base and inc, since it is interpreted as:; /// (((base + inc) + inc) + inc) ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:192,wrap,wrap,192,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['wrap'],['wrap']
Integrability,"/// Simple callback implementation. Marshaller and function are provided.; ///; /// This class wraps a function of arbitrary signature and a marshaller; /// function into a MatcherDescriptor.; /// The marshaller is in charge of taking the VariantValue arguments, checking; /// their types, unpacking them and calling the underlying function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:95,wrap,wraps,95,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,1,['wrap'],['wraps']
Integrability,/// Simple state for a set.; ///; /// This represents a state containing a set of values. The interface supports; /// modelling sets that contain all possible elements. The state's internal; /// value is modified using union or intersection operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:94,interface,interface,94,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['interface'],['interface']
Integrability,"/// Simple state with integers encoding.; ///; /// The interface ensures that the assumed bits are always a subset of the known; /// bits. Users can only add known bits and, except through adding known bits,; /// they can only remove assumed bits. This should guarantee monotonicity and; /// thereby the existence of a fixpoint (if used correctly). The fixpoint is; /// reached when the assumed and known state/bits are equal. Users can; /// force/inidicate a fixpoint. If an optimistic one is indicated, the known; /// state will catch up with the assumed one, for a pessimistic fixpoint it is; /// the other way around.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:55,interface,interface,55,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['interface'],['interface']
Integrability,/// Simple wrapper around getFloatTypeSemantics() to make code a; /// little shorter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:11,wrap,wrapper,11,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,1,['wrap'],['wrapper']
Integrability,"/// Simple wrapper around std::function<void(raw_ostream&)>.; /// This class is useful to construct print helpers for raw_ostream.; ///; /// Example:; /// Printable printRegister(unsigned Register) {; /// return Printable([Register](raw_ostream &OS) {; /// OS << getRegisterName(Register);; /// });; /// }; /// ... OS << printRegister(Register); ...; ///; /// Implementation note: Ideally this would just be a typedef, but doing so; /// leads to operator << being ambiguous as function has matching constructors; /// in some STL versions. I have seen the problem on gcc 4.6 libstdc++ and; /// microsoft STL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Printable.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/Support/Printable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Printable.h,1,['wrap'],['wrapper']
Integrability,/// Simple wrapper class for chaining callbacks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:11,wrap,wrapper,11,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['wrap'],['wrapper']
Integrability,/// Simple wrapper class for chaining listeners.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:11,wrap,wrapper,11,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['wrap'],['wrapper']
Integrability,/// Simple wrapper for a single bit (boolean) state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['wrap'],['wrapper']
Integrability,/// Simple wrapper for toolchain detector with costly initialization. This; /// delays the creation of the actual detector until its first usage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/LazyDetector.h:11,wrap,wrapper,11,interpreter/llvm-project/clang/lib/Driver/ToolChains/LazyDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/LazyDetector.h,1,['wrap'],['wrapper']
Integrability,"/// Simple wrapper observer that takes several observers, and calls; /// each one for each event. If there are multiple observers (say CSE,; /// Legalizer, Combiner), it's sufficient to register this to the machine; /// function as the delegate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,1,['wrap'],['wrapper']
Integrability,/// Simple wrapper that does the following.; /// 1) Lazily evaluate the MachineFunction to compute CSEable instructions.; /// 2) Allows configuration of which instructions are CSEd through CSEConfig; /// object. Provides a method called get which takes a CSEConfig object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:11,wrap,wrapper,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,1,['wrap'],['wrapper']
Integrability,"/// Simulates liveness when stepping forward over an instruction(bundle).; /// Remove killed-uses, add defs. This is the not recommended way, because it; /// depends on accurate kill flags. If possible use stepBackward() instead of; /// this function. The clobbers set will be the list of registers either; /// defined or clobbered by a regmask. The operand will identify whether this; /// is a regmask or register operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h:158,depend,depends,158,interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h,1,['depend'],['depends']
Integrability,"/// Simulates liveness when stepping forward over an instruction(bundle): Remove; /// killed-uses, add defs. This is the not recommended way, because it depends; /// on accurate kill flags. If possible use stepBackward() instead of this; /// function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LivePhysRegs.cpp:153,depend,depends,153,interpreter/llvm-project/llvm/lib/CodeGen/LivePhysRegs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LivePhysRegs.cpp,1,['depend'],['depends']
Integrability,/// Single thread synchronization scope ID (single address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:18,synchroniz,synchronization,18,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,"/// Size examples:; ///; /// Type SizeInBits StoreSizeInBits AllocSizeInBits[*]; /// ---- ---------- --------------- ---------------; /// i1 1 8 8; /// i8 8 8 8; /// i19 19 24 32; /// i32 32 32 32; /// i100 100 104 128; /// i128 128 128 128; /// Float 32 32 32; /// Double 64 64 64; /// X86_FP80 80 80 96; ///; /// [*] The alloc size depends on the alignment, and thus on the target.; /// These values are for x86-32 linux.; /// Returns the number of bits necessary to hold the specified type.; ///; /// If Ty is a scalable vector type, the scalable property will be set and; /// the runtime size will be a positive integer multiple of the base size.; ///; /// For example, returns 36 for i36 and 80 for x86_fp80. The type passed must; /// have a size (Type::isSized() must return true).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:334,depend,depends,334,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,1,['depend'],['depends']
Integrability,"/// Skip past any invisible AST nodes which might surround this; /// statement, such as ExprWithCleanups or ImplicitCastExpr nodes,; /// but also injected CXXMemberExpr and CXXConstructExpr which represent; /// implicit conversions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:146,inject,injected,146,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['inject'],['injected']
Integrability,"/// SkipBitcodeWrapperHeader - Some systems wrap bc files with a special; /// header for padding or other reasons. The format of this header is:; ///; /// struct bc_header {; /// uint32_t Magic; // 0x0B17C0DE; /// uint32_t Version; // Version, currently always 0.; /// uint32_t BitcodeOffset; // Offset to traditional bitcode file.; /// uint32_t BitcodeSize; // Size of traditional bitcode file.; /// ... potentially other gunk ...; /// };; ///; /// This function is called when we find a file with a matching magic number.; /// In this case, skip down to the subsection of the file that is actually a; /// BC file.; /// If 'VerifyBufferSize' is true, check that the buffer is large enough to; /// contain the whole bitcode file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h:44,wrap,wrap,44,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,1,['wrap'],['wrap']
Integrability,/// SlotIndex - An opaque wrapper around machine indexes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h:26,wrap,wrapper,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,1,['wrap'],['wrapper']
Integrability,"/// Smart pointer for the return type of actions; /**; \class ROOT::RDF::RResultPtr; \ingroup dataframe; \brief A wrapper around the result of RDataFrame actions able to trigger calculations lazily.; \tparam T Type of the action result. A smart pointer which allows to access the result of a RDataFrame action. The; methods of the encapsulated object can be accessed via the arrow operator.; Upon invocation of the arrow operator or dereferencing (`operator*`), the; loop on the events and calculations of all scheduled actions are executed; if needed.; It is possible to iterate on the result proxy if the proxied object is a collection.; ~~~{.cpp}; for (auto& myItem : myResultProxy) { ... };; ~~~; If iteration is not supported by the type of the proxied object, a compilation error is thrown. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:114,wrap,wrapper,114,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,1,['wrap'],['wrapper']
Integrability,"/// SofieFunctor : used to wrap the infer function of the; /// generated model by SOFIE in a RDF compatible signature.; /// The number of slots is an optional parameter used to; /// create multiple SOFIE Sessions, which can be run in a parallel; /// model evaluation. One should use as number of slots the number of slots used by; /// RDataFrame. By default, in case of `nslots=0`, only a single Session will be created; /// and the Functor cannot be run in parallel.; /// Examples of using the SofieFunctor are the C++ tutorial TMVA_SOFIE_RDataFrame.C; /// and the Python tutorial TMVA_SOFIE_RDataFrame.py which makes use of the ROOT JIT; /// to compile on the fly the generated SOFIE model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIEHelpers.hxx:27,wrap,wrap,27,tmva/sofie/inc/TMVA/SOFIEHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIEHelpers.hxx,1,['wrap'],['wrap']
Integrability,/// Some fixed point operations may be natively supported by the target but; /// only for specific scales. This method allows for checking; /// if the width is supported by the target for a given operation that may; /// depend on scale.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:220,depend,depend,220,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['depend'],['depend']
Integrability,"/// Sort numeric integration variables in summation and integration lists.; /// To be used during construction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:17,integrat,integration,17,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,2,['integrat'],['integration']
Integrability,/// Source manager for better error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:36,message,messages,36,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,1,['message'],['messages']
Integrability,"/// SourceManager and necessary dependencies (e.g. VFS, FileManager) for a; /// single in-memorty file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:32,depend,dependencies,32,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['depend'],['dependencies']
Integrability,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:615,depend,depend,615,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,2,['depend'],"['depend', 'depends']"
Integrability,"/// Special case '[super init];' and '[self init];'; ///; /// Even though calling '[super init]' without assigning the result to self; /// and checking if the parent returns 'nil' is a bad pattern, it is common.; /// Additionally, our Self Init checker already warns about it. To avoid; /// overwhelming the user with messages from both checkers, we model the case; /// of '[super init]' in cases when it is not consumed by another expression; /// as if the call preserves the value of 'self'; essentially, assuming it can; /// never fail and return 'nil'.; /// Note, we don't want to just stop tracking the value since we want the; /// RetainCount checker to report leaks and use-after-free if SelfInit checker; /// is turned off.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h:318,message,messages,318,interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,1,['message'],['messages']
Integrability,/// Special wrapper used under M68k PIC mode for PC; /// relative displacements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h:12,wrap,wrapper,12,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,1,['wrap'],['wrapper']
Integrability,/// Special wrapper used under X86-64 PIC mode for RIP; /// relative displacements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:12,wrap,wrapper,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['wrap'],['wrapper']
Integrability,/// SpecialMemberOverloadResult - The overloading result for a special member; /// function.; ///; /// This is basically a wrapper around PointerIntPair. The lowest bits of the; /// integer are used to determine whether overload resolution succeeded.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:123,wrap,wrapper,123,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['wrap'],['wrapper']
Integrability,"/// Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:142,interface,interface,142,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,1,['interface'],['interface']
Integrability,/// Specifies that a value-dependent expression of integral or; /// dependent type should be considered a null pointer constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:27,depend,dependent,27,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,2,['depend'],['dependent']
Integrability,/// Specifies that a value-dependent expression should be considered; /// to never be a null pointer constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:27,depend,dependent,27,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependent']
Integrability,/// Specifies that the expression should never be value-dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:56,depend,dependent,56,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependent']
Integrability,/// Specifies that this function declaration is actually a; /// dependent function template specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:64,depend,dependent,64,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['depend'],['dependent']
Integrability,/// Spiller interface.; ///; /// Implementations are utility classes which insert spill or remat code on; /// demand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Spiller.h:12,interface,interface,12,interpreter/llvm-project/llvm/include/llvm/CodeGen/Spiller.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Spiller.h,1,['interface'],['interface']
Integrability,/// Split an immediate offset \p ImmOffset depending on whether it fits in the; /// immediate field. Modifies \p ImmOffset and sets \p SOffset to the variable; /// component.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:43,depend,depending,43,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['depend'],['depending']
Integrability,"/// Splits and processes shuffle mask depending on the number of input and; /// output registers. The function does 2 main things: 1) splits the; /// source/destination vectors into real registers; 2) do the mask analysis to; /// identify which real registers are permuted. Then the function processes; /// resulting registers mask using provided action items. If no input register; /// is defined, \p NoInputAction action is used. If only 1 input register is; /// used, \p SingleInputAction is used, otherwise \p ManyInputsAction is used to; /// process > 2 input registers and masks.; /// \param Mask Original shuffle mask.; /// \param NumOfSrcRegs Number of source registers.; /// \param NumOfDestRegs Number of destination registers.; /// \param NumOfUsedRegs Number of actually used destination registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:38,depend,depending,38,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['depend'],['depending']
Integrability,/// StackSafetyInfo wrapper for the legacy pass manager,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h:20,wrap,wrapper,20,interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,1,['wrap'],['wrapper']
Integrability,/// StackSafetyInfo wrapper for the new pass manager.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h:20,wrap,wrapper,20,interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,1,['wrap'],['wrapper']
Integrability,"/// Start building a new switch statement.; ///; /// By default, performs semantic analysis to build the new statement.; /// Subclasses may override this routine to provide different behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:154,rout,routine,154,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Start indices of clauses of the formula in `Clauses`.; ///; /// The element at index 0 stands for the start index of the null clause. It; /// is set to 0 and isn't used. Start indices of clauses in the formula start; /// from the element at index 1.; ///; /// For example, for the formula `(L1 v L2) ^ (L2 v L3 v L4)` the elements of; /// `ClauseStarts` will be `[0, 1, 3]`. Note that the literals of the first; /// clause always start at index 1. The start index for the literals of the; /// second clause depends on the size of the first clause and so on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:511,depend,depends,511,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['depend'],['depends']
Integrability,"/// Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source.; /// Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...).; /// The jitting phase is skipped if the `jit` parameter is `false` (unsafe, use with care).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx:52,depend,depending,52,tree/dataframe/src/RLoopManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx,1,['depend'],['depending']
Integrability,"/// Starts the definition of this Objective-C class, taking it from; /// a forward declaration (\@class) to a definition (\@interface).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:124,interface,interface,124,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// Starts the definition of this Objective-C protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:46,protocol,protocol,46,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['protocol'],['protocol']
Integrability,/// Store information on the type dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:34,depend,dependency,34,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependency']
Integrability,/// Stores a list of Objective-C type parameters for a parameterized class; /// or a category/extension thereof.; ///; /// \code; /// @interface NSArray<T> // stores the <T>; /// @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:135,interface,interface,135,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,"/// Stores all information related to a compile unit, be it in its original; /// instance of the object file or its brand new cloned and generated DIE tree.; /// NOTE: we need alignment of at least 8 bytes as we use; /// PointerIntPair<CompileUnit *, 3> in the DependencyTracker.h",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h:261,Depend,DependencyTracker,261,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,1,['Depend'],['DependencyTracker']
Integrability,/// Stores either the selector that this message is sending; /// to (when \c HasMethod is zero) or an \c ObjCMethodDecl pointer; /// referring to the method that we type-checked against.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:41,message,message,41,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,/// Stores reduction item and reduction operation only (required for dependent; /// reduction item).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:69,depend,dependent,69,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['depend'],['dependent']
Integrability,/// Stores the extra dependencies between symbols: the data should be kept; /// alive as long as the key is live.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:21,depend,dependencies,21,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,1,['depend'],['dependencies']
Integrability,/// Strategy that injects operations into the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:18,inject,injects,18,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,1,['inject'],['injects']
Integrability,/// Strategy to randomly select a block and shuffle the operations without; /// affecting data dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:95,depend,dependency,95,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,1,['depend'],['dependency']
Integrability,/// Strategy to select a random instruction and add a new sink (user) to it to; /// increate data dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:98,depend,dependency,98,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,1,['depend'],['dependency']
Integrability,"/// Stream adapter for standard library input streams.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stream.h:11,adapter,adapter,11,geom/geom/inc/bvh/v2/stream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stream.h,1,['adapter'],['adapter']
Integrability,"/// Stream adapter for standard library output streams.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stream.h:11,adapter,adapter,11,geom/geom/inc/bvh/v2/stream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stream.h,1,['adapter'],['adapter']
Integrability,"/// Streaming machine code generation interface.; ///; /// This interface is intended to provide a programmatic interface that is very; /// similar to the level that an assembler .s file provides. It has callbacks; /// to emit bytes, handle directives, etc. The implementation of this interface; /// retains state to know what the current section is etc.; ///; /// There are multiple implementations of this interface: one for writing out; /// a .s file, and implementations that write out .o files of various formats.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:38,interface,interface,38,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,5,['interface'],['interface']
Integrability,/// Streaming object file generation interface.; ///; /// This class provides an implementation of the MCStreamer interface which is; /// suitable for use with the assembler backend. Specific object file formats; /// are expected to subclass this interface to implement directives specific; /// to that file format or custom semantics expected by the object writer; /// implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h:37,interface,interface,37,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectStreamer.h,3,['interface'],['interface']
Integrability,/// StringSet - A wrapper for StringMap that provides set-like functionality.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h:18,wrap,wrapper,18,interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSet.h,1,['wrap'],['wrapper']
Integrability,"/// Strings for synthesized arguments.; ///; /// This is mutable since we treat the ArgList as being the list; /// of Args, and allow routines to add new strings (to have a; /// convenient place to store the memory) via MakeIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:134,rout,routines,134,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,1,['rout'],['routines']
Integrability,"/// Strip off the Objective-C ""kindof"" type and (with it) any; /// protocol qualifiers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:67,protocol,protocol,67,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['protocol'],['protocol']
Integrability,"/// Submit updates to all available trees. It will also; /// 1. discard duplicated updates,; /// 2. remove invalid updates. (Invalid updates means deletion of an edge that; /// still exists or insertion of an edge that does not exist.); /// The Eager Strategy flushes updates immediately while the Lazy Strategy; /// queues the updates.; ///; /// Note: The ""existence"" of an edge in a CFG refers to the CFG which DTU is; /// in sync with + all updates before that single update.; ///; /// CAUTION!; /// 1. It is required for the state of the LLVM IR to be updated; /// *before* submitting the updates because the internal update routine will; /// analyze the current state of the CFG to determine whether an update; /// is valid.; /// 2. It is illegal to submit any update that has already been submitted,; /// i.e., you are supposed not to insert an existent edge or delete a; /// nonexistent edge.; /// 3. It is only legal to submit updates to an edge in the order CFG changes; /// are made. The order you submit updates on different edges is not; /// restricted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h:629,rout,routine,629,interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DomTreeUpdater.h,1,['rout'],['routine']
Integrability,"/// Substitute type arguments from an object type for the Objective-C type; /// parameters used in the subject type.; ///; /// This operation combines the computation of type arguments for; /// substitution (\c Type::getObjCSubstitutions) with the actual process of; /// substitution (\c QualType::substObjCTypeArgs) for the convenience of; /// callers that need to perform a single substitution in isolation.; ///; /// \param objectType The type of the object whose member type we're; /// substituting into. For example, this might be the receiver of a message; /// or the base of a property access.; ///; /// \param dc The declaration context from which the subject type was; /// retrieved, which indicates (for example) which type parameters should; /// be substituted.; ///; /// \param context The context in which the subject type was written.; ///; /// \returns the subject type after replacing all of the Objective-C type; /// parameters with their corresponding arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:554,message,message,554,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['message'],['message']
Integrability,/// SuggestParentheses - Emit a note with a fixit hint that wraps; /// ParenRange in parentheses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:60,wrap,wraps,60,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['wrap'],['wraps']
Integrability,"/// Summary of how a function affects memory in the program.; ///; /// Loads from constant globals are not considered memory accesses for this; /// interface. Also, functions may freely modify stack space local to their; /// invocation without having to report it through these interfaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:148,interface,interface,148,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,2,['interface'],"['interface', 'interfaces']"
Integrability,"/// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h:93,message,messages,93,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,1,['message'],['messages']
Integrability,"/// Swap all the anti dependences in the DAG. That means it is no longer a DAG,; /// but we do this to find the circuits, and then change them back.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:22,depend,dependences,22,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['depend'],['dependences']
Integrability,/// Swaps \p lhs with \p rhs using `std::swap` and functions found through; /// Argument-Dependent Lookup (ADL).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:89,Depend,Dependent,89,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,1,['Depend'],['Dependent']
Integrability,"/// Switches the message service to a different level while the instance is alive.; /// Can also temporarily activate / deactivate message topics.; /// Use as; /// ~~~{.cpp}; /// RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);; /// [ statements that normally generate a lot of output ]; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:17,message,message,17,roofit/roofitcore/inc/RooHelpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h,2,['message'],['message']
Integrability,/// Symbol is part of a protocol interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexSymbol.h:24,protocol,protocol,24,interpreter/llvm-project/clang/include/clang/Index/IndexSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/IndexSymbol.h,2,"['interface', 'protocol']","['interface', 'protocol']"
Integrability,"/// Symbol resolution interface.; ///; /// Allows symbol flags and addresses to be looked up by name.; /// Symbol queries are done in bulk (i.e. you request resolution of a set of; /// symbols, rather than a single one) to reduce IPC overhead in the case of; /// remote JITing, and expose opportunities for parallel compilation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:22,interface,interface,22,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,1,['interface'],['interface']
Integrability,/// SymbolMetadata - Represents path-dependent metadata about a specific region.; /// Metadata symbols remain live as long as they are marked as in use before; /// dead-symbol sweeping AND their associated regions are still alive.; /// Intended for use by checkers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h:37,depend,dependent,37,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h,1,['depend'],['dependent']
Integrability,/// Synchronization scope ID for this memory operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:4,Synchroniz,Synchronization,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['Synchroniz'],['Synchronization']
Integrability,/// Synchronization scope names registered with LLVMContext.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRPrinter.cpp:4,Synchroniz,Synchronization,4,interpreter/llvm-project/llvm/lib/CodeGen/MIRPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRPrinter.cpp,2,['Synchroniz'],['Synchronization']
Integrability,"/// Synchronize minimizer settings with calculators in child classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h:4,Synchroniz,Synchronize,4,roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h,1,['Synchroniz'],['Synchronize']
Integrability,"/// Synchronize minimizer settings with calculators in child classes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:4,Synchroniz,Synchronize,4,roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h,1,['Synchroniz'],['Synchronize']
Integrability,/// Synchronized with respect to all concurrently executing threads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:4,Synchroniz,Synchronized,4,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,1,['Synchroniz'],['Synchronized']
Integrability,/// Synchronized with respect to signal handlers executing in the same thread.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:4,Synchroniz,Synchronized,4,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,1,['Synchroniz'],['Synchronized']
Integrability,/// Synchronizes access to internal data structures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:4,Synchroniz,Synchronizes,4,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,1,['Synchroniz'],['Synchronizes']
Integrability,"/// SynthMsgSendStretCallExpr - This routine translates message expression; /// into a call to objc_msgSend_stret() entry point. Tricky part is that; /// nil check on receiver must be performed before calling objc_msgSend_stret.; /// MsgSendStretFlavor - function declaration objc_msgSend_stret(...); /// msgSendType - function type of objc_msgSend_stret(...); /// returnType - Result type of the method being synthesized.; /// ArgTypes - type of the arguments passed to objc_msgSend_stret, starting with receiver type.; /// MsgExprs - list of argument expressions being passed to objc_msgSend_stret,; /// starting with receiver.; /// Method - Method being rewritten.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:37,rout,routine,37,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,"['message', 'rout']","['message', 'routine']"
Integrability,"/// SynthesizeByrefCopyDestroyHelper - This routine synthesizes:; /// void __Block_byref_id_object_copy(struct Block_byref_id_object *dst,; /// struct Block_byref_id_object *src) {; /// _Block_object_assign (&_dest->object, _src->object,; /// BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT; /// [|BLOCK_FIELD_IS_WEAK]) // object; /// _Block_object_assign(&_dest->object, _src->object,; /// BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK; /// [|BLOCK_FIELD_IS_WEAK]) // block; /// }; /// And:; /// void __Block_byref_id_object_dispose(struct Block_byref_id_object *_src) {; /// _Block_object_dispose(_src->object,; /// BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT; /// [|BLOCK_FIELD_IS_WEAK]) // object; /// _Block_object_dispose(_src->object,; /// BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK; /// [|BLOCK_FIELD_IS_WEAK]) // block; /// }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:44,rout,routine,44,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rout'],['routine']
Integrability,/// System synchronization scope ID (single address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:11,synchroniz,synchronization,11,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// Tag that can use a checker name as a message provider; /// (see SimpleProgramPointTag).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h:41,message,message,41,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h,1,['message'],['message']
Integrability,"/// Take a vector of vectors of EntryRanges (a vector per file), filter the entries according to entryList, and; /// and return a new vector of vectors of EntryRanges where cluster start/end entry numbers have been converted to; /// TEntryList-local entry numbers.; ///; /// This routine assumes that entry numbers in the TEntryList (and, if present, in the sub-entrylists) are in; /// ascending order, i.e., for n > m:; /// elist.GetEntry(n) + tree_offset_for_entry_from_elist(n) > elist.GetEntry(m) + tree_offset_for_entry_from_elist(m)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx:280,rout,routine,280,tree/treeplayer/src/TTreeProcessorMT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx,1,['rout'],['routine']
Integrability,/// Take the cc1 arguments corresponding to the most recent invocation used; /// with this action. Any modifications implied by the discovered dependencies; /// will have already been applied.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp:143,depend,dependencies,143,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,1,['depend'],['dependencies']
Integrability,"/// Take the selection rules as input (for consistency w/ other selector; /// interfaces)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h:78,interface,interfaces,78,core/dictgen/res/DictSelectionReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h,1,['interface'],['interfaces']
Integrability,"/// Takes a memcpy and a call that it depends on,; /// and checks for the possibility of a call slot optimization by having; /// the call write its result directly into the destination of the memcpy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:38,depend,depends,38,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['depend'],['depends']
Integrability,"/// Target - Wrapper for Target specific information.; ///; /// For registration purposes, this is a POD type so that targets can be; /// registered without the use of static constructors.; ///; /// Targets should implement a single global instance of this class (which; /// will be zero initialized), and pass that instance to the TargetRegistry as; /// part of their initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:13,Wrap,Wrapper,13,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['Wrap'],['Wrapper']
Integrability,/// Target dependent implementation to get the values constituting the address; /// MachineInstr that is accessing memory. These values are returned as a; /// struct ExtAddrMode which contains all relevant information to make up the; /// address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,depend,dependent,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['depend'],['dependent']
Integrability,"/// Target specific streamer interface. This is used so that targets can; /// implement support for target specific assembly directives.; ///; /// If target foo wants to use this, it should implement 3 classes:; /// * FooTargetStreamer : public MCTargetStreamer; /// * FooTargetAsmStreamer : public FooTargetStreamer; /// * FooTargetELFStreamer : public FooTargetStreamer; ///; /// FooTargetStreamer should have a pure virtual method for each directive. For; /// example, for a "".bar symbol_name"" directive, it should have; /// virtual emitBar(const MCSymbol &Symbol) = 0;; ///; /// The FooTargetAsmStreamer and FooTargetELFStreamer classes implement the; /// method. The assembly streamer just prints "".bar symbol_name"". The object; /// streamer does whatever is needed to implement .bar in the object file.; ///; /// In the assembly printer and parser the target streamer can be used by; /// calling getTargetStreamer and casting it to FooTargetStreamer:; ///; /// MCTargetStreamer &TS = OutStreamer.getTargetStreamer();; /// FooTargetStreamer &ATS = static_cast<FooTargetStreamer &>(TS);; ///; /// The base classes FooTargetAsmStreamer and FooTargetELFStreamer should; /// *never* be treated differently. Callers should always talk to a; /// FooTargetStreamer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:29,interface,interface,29,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,1,['interface'],['interface']
Integrability,/// Target-dependent implementation for IsCopyInstr.; /// If the specific machine instruction is a instruction that moves/copies; /// value from one register to another register return destination and source; /// registers as machine operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,depend,dependent,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['depend'],['dependent']
Integrability,/// Target-dependent implementation for foldMemoryOperand.; /// Target-independent code in foldMemoryOperand will; /// take care of adding a MachineMemOperand to the newly created instruction.; /// The instruction and any auxiliary instructions necessary will be inserted; /// at InsertPt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,depend,dependent,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,2,['depend'],['dependent']
Integrability,/// Target-dependent implementation for getOutliningTypeImpl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,depend,dependent,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['depend'],['dependent']
Integrability,"/// Target-dependent implementation of getExtractSubregInputs.; ///; /// \returns true if it is possible to build the equivalent; /// EXTRACT_SUBREG inputs with the pair \p MI, \p DefIdx. False otherwise.; ///; /// \pre MI.isExtractSubregLike().; ///; /// \see TargetInstrInfo::getExtractSubregInputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,depend,dependent,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['depend'],['dependent']
Integrability,"/// Target-dependent implementation of getInsertSubregInputs.; ///; /// \returns true if it is possible to build the equivalent; /// INSERT_SUBREG inputs with the pair \p MI, \p DefIdx. False otherwise.; ///; /// \pre MI.isInsertSubregLike().; ///; /// \see TargetInstrInfo::getInsertSubregInputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,depend,dependent,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['depend'],['dependent']
Integrability,"/// Target-dependent implementation of getRegSequenceInputs.; ///; /// \returns true if it is possible to build the equivalent; /// REG_SEQUENCE inputs with the pair \p MI, \p DefIdx. False otherwise.; ///; /// \pre MI.isRegSequenceLike().; ///; /// \see TargetInstrInfo::getRegSequenceInputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,depend,dependent,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['depend'],['dependent']
Integrability,/// TargetFolder - Create constants with target dependent folding.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetFolder.h:48,depend,dependent,48,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetFolder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetFolder.h,1,['depend'],['dependent']
Integrability,"/// TargetIndex - Like a constant pool entry, but with completely; /// target-dependent semantics. Holds target flags, a 32-bit index, and a; /// 64-bit index. Targets can use this however they like.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:78,depend,dependent,78,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['depend'],['dependent']
Integrability,"/// TargetLowering::LowerCallTo - This is the default LowerCallTo; /// implementation, which just calls LowerCall.; /// FIXME: When all targets are; /// migrated to using LowerCall, this hook should be integrated into SDISel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:202,integrat,integrated,202,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['integrat'],['integrated']
Integrability,/// TargetRegistry - Generic interface to target specific features.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:29,interface,interface,29,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['interface'],['interface']
Integrability,/// TargetSchedModel provides an interface to the machine model.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:33,interface,interface,33,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['interface'],['interface']
Integrability,/// Task routine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:9,rout,routine,9,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['rout'],['routine']
Integrability,/// Tell the pass manager which passes we depend on and what information we; /// preserve.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackMapLivenessAnalysis.cpp:42,depend,depend,42,interpreter/llvm-project/llvm/lib/CodeGen/StackMapLivenessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackMapLivenessAnalysis.cpp,1,['depend'],['depend']
Integrability,/// Tell the pass manager which passes we depend on and what; /// information we preserve.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackMapLivenessAnalysis.cpp:42,depend,depend,42,interpreter/llvm-project/llvm/lib/CodeGen/StackMapLivenessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackMapLivenessAnalysis.cpp,1,['depend'],['depend']
Integrability,"/// Templated storage wrapper for a callable.; ///; /// This class is consistently default constructible, copy / move; /// constructible / assignable.; ///; /// Supported callable types:; /// - Function pointer; /// - Function reference; /// - Lambda; /// - Function object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:22,wrap,wrapper,22,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['wrap'],['wrapper']
Integrability,/// Temporary files created by the linker wrapper.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp:42,wrap,wrapper,42,interpreter/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp,1,['wrap'],['wrapper']
Integrability,/// Test if there can be dependencies on Inst through Arg. This function only; /// tests dependencies relevant for removing pairs of calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp:25,depend,dependencies,25,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,2,['depend'],['dependencies']
Integrability,/// Test if this SCC is a child of \a C.; ///; /// See the comments for \c isParentOf for detailed notes about the; /// complexity of this routine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:139,rout,routine,139,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['rout'],['routine']
Integrability,/// Test if this SCC is a descendant of \a C.; ///; /// See the comments for \c isParentOf for detailed notes about the; /// complexity of this routine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:144,rout,routine,144,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['rout'],['routine']
Integrability,/// Test if this operation can be floating-point contracted (FMA).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:49,contract,contracted,49,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['contract'],['contracted']
Integrability,/// Test whether a GEP's result is known to be non-null.; ///; /// Uses properties inherent in a GEP to try to determine whether it is known; /// to be non-null.; ///; /// Currently this routine does not support vector GEPs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:187,rout,routine,187,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['rout'],['routine']
Integrability,"/// Test whether calls to a function lower to actual program function; /// calls.; ///; /// The idea is to test whether the program is likely to require a 'call'; /// instruction or equivalent in order to call the given function.; ///; /// FIXME: It's not clear that this is a good or useful query API. Client's; /// should probably move to simpler cost metrics using the above.; /// Alternatively, we could split the cost interface into distinct code-size; /// and execution-speed costs. This would allow modelling the core of this; /// query more accurately as a call is a single small instruction, but; /// incurs significant execution cost.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:423,interface,interface,423,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['interface'],['interface']
Integrability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true.; ///; /// This routine tries to figure out predicate for Phis which are SCEVUnknown; /// if it is true for every possible incoming value from their respective; /// basic blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:170,rout,routine,170,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['rout'],['routine']
Integrability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true.; ///; /// This routine tries to reason about shifts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:170,rout,routine,170,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['rout'],['routine']
Integrability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true.; ///; /// This routine tries to rule out certain kinds of integer overflow, and; /// then tries to reason about arithmetic properties of the predicates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:170,rout,routine,170,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['rout'],['routine']
Integrability,"/// Test whether the condition described by Pred, LHS, and RHS is true; /// whenever the condition described by Pred, FoundLHS, and FoundRHS is; /// true.; ///; /// This routine tries to weaken the known condition basing on fact that; /// FoundLHS is an AddRec.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:170,rout,routine,170,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['rout'],['routine']
Integrability,/// Test whether there are elements crossing LaneSizeInBits lanes in this; /// shuffle mask.; ///; /// X86 divides up its shuffles into in-lane and cross-lane shuffle operations; /// and we routinely test for these.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:190,rout,routinely,190,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routinely']
Integrability,"/// Test whether we can convert a value from the old to the new type.; ///; /// This predicate should be used to guard calls to convertValue in order to; /// ensure that we only try to convert viable values. The strategy is that we; /// will peel off single element struct and array wrappings to get to an; /// underlying value, and convert that value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:283,wrap,wrappings,283,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['wrap'],['wrappings']
Integrability,/// Tests if this MemDepResult represents a query that is an instruction; /// clobber dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:86,depend,dependency,86,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependency']
Integrability,/// Tests if this MemDepResult represents a query that is an instruction; /// definition dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:89,depend,dependency,89,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependency']
Integrability,"/// Tests if this a weak dependence. Weak dependencies are considered DAG; /// edges for height computation and other heuristics, but do not force; /// ordering. Breaking a weak edge may require the scheduler to compensate,; /// for example by inserting a copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:25,depend,dependence,25,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,2,['depend'],"['dependence', 'dependencies']"
Integrability,/// Tests if this is a Data dependence that is associated with a register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:28,depend,dependence,28,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['depend'],['dependence']
Integrability,/// Tests if this is an Order dependence between two memory accesses; /// where both sides of the dependence access memory in non-volatile and; /// fully modeled ways.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,depend,dependence,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,2,['depend'],['dependence']
Integrability,"/// Tests if this is an Order dependence that is marked as ""cluster"",; /// meaning it is artificial and wants to be adjacent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,depend,dependence,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['depend'],['dependence']
Integrability,/// Tests if this is an Order dependence that is marked as a barrier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,depend,dependence,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['depend'],['dependence']
Integrability,"/// Tests if this is an Order dependence that is marked as; /// ""artificial"", meaning it isn't necessary for correctness.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,depend,dependence,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['depend'],['dependence']
Integrability,"/// Tests if this is an Order dependence that is marked as; /// ""must alias"", meaning that the SUnits at either end of the edge have a; /// memory dependence on a known memory location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,depend,dependence,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,2,['depend'],['dependence']
Integrability,/// Tests if this is could be any kind of memory dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:49,depend,dependence,49,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['depend'],['dependence']
Integrability,/// Tests if this is not an SDep::Data dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:39,depend,dependence,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['depend'],['dependence']
Integrability,"/// The ""main remark streamer"" used by all the specialized remark streamers.; /// This streamer keeps generic remark metadata in memory throughout the life; /// of the LLVMContext. This metadata may be emitted in a section in object; /// files depending on the format requirements.; ///; /// All specialized remark streamers should convert remarks to; /// llvm::remarks::Remark and emit them through this streamer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:244,depend,depending,244,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,1,['depend'],['depending']
Integrability,/// The CGSCC analysis manager.; ///; /// See the documentation for the AnalysisManager template for detail; /// documentation. This type serves as a convenient way to refer to this; /// construct in the adaptors and proxies used to integrate this into the larger; /// pass manager infrastructure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:233,integrat,integrate,233,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['integrat'],['integrate']
Integrability,"/// The DAGCombine code sequence ends in MI (Machine Instruction) Root.; /// The new code sequence ends in MI NewRoot. A necessary condition for the new; /// sequence to replace the old sequence is that it cannot lengthen the critical; /// path. The definition of ""improve"" may be restricted by specifying that the; /// new path improves the data dependency chain (MustReduceDepth).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp:347,depend,dependency,347,interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,1,['depend'],['dependency']
Integrability,/// The DWARF address class. Taken from; /// https://docs.nvidia.com/cuda/archive/10.0/ptx-writers-guide-to-interoperability/index.html#cuda-specific-dwarf,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h:108,interoperab,interoperability,108,interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h,1,['interoperab'],['interoperability']
Integrability,"/// The Data class implementation for DWARF v5 accelerator table. Unlike the; /// Apple Data classes, this class is just a DIE wrapper, and does not know to; /// serialize itself. The complete serialization logic is in the; /// emitDWARF5AccelTable function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:127,wrap,wrapper,127,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['wrap'],['wrapper']
Integrability,/// The GCC ABI message lookup function. Returns an IMP pointing to the; /// method implementation for this message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:16,message,message,16,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,4,['message'],['message']
Integrability,"/// The GCC ABI superclass message lookup function. Takes a pointer to a; /// structure describing the receiver and the class, and a selector as; /// arguments. Returns the IMP for the corresponding method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:27,message,message,27,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,3,['message'],['message']
Integrability,"/// The GNUstep ABI superclass message lookup function. Takes a pointer to; /// a structure describing the receiver and the class, and a selector as; /// arguments. Returns the slot for the corresponding method. Superclass; /// message lookup rarely changes, so this is a good caching opportunity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:31,message,message,31,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,2,['message'],['message']
Integrability,"/// The I/O thread routine, there is exactly one I/O thread in-flight for every cluster pool",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RClusterPool.hxx:19,rout,routine,19,tree/ntuple/v7/inc/ROOT/RClusterPool.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RClusterPool.hxx,1,['rout'],['routine']
Integrability,"/// The InstrumentationMap represents the computed function id's and indicated; /// function addresses from an object file (or a YAML file). This provides an; /// interface to just the mapping between the function id, and the function; /// address.; ///; /// We also provide raw access to the actual instrumentation map entries we find; /// associated with a particular object file.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h:163,interface,interface,163,interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h,1,['interface'],['interface']
Integrability,"/// The LLVM OpenMP runtime. When completed and integrated, this will become; /// the default for Clang.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:48,integrat,integrated,48,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['integrat'],['integrated']
Integrability,"/// The LLVM::CallingConv to actually use for this function, which may; /// depend on the ABI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:76,depend,depend,76,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,1,['depend'],['depend']
Integrability,"/// The MS C++ ABI needs a pointer to RTTI data plus some flags to describe the; /// type of a catch handler, so we use this wrapper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:125,wrap,wrapper,125,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,1,['wrap'],['wrapper']
Integrability,"/// The ObjC runtime may provide entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector.; ///; /// The entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// behavior; if that's dynamically a large proportion of all objects, using; /// the entrypoint will also be faster than using a message send.; ///; /// If the runtime does support a required entrypoint, then this method will; /// generate a call and return the resulting value. Otherwise it will return; /// std::nullopt and the caller can generate a msgSend instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:96,message,message,96,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,4,['message'],['message']
Integrability,/// The Objective-C 'Protocol' type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:21,Protocol,Protocol,21,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['Protocol'],['Protocol']
Integrability,"/// The Objective-C context data block, which contains information about; /// Objective-C classes and protocols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h:102,protocol,protocols,102,interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h,1,['protocol'],['protocols']
Integrability,"/// The RHS of all logical operators gets a fresh counter in order to count; /// how many times the RHS evaluates to true or false, depending on the; /// semantics of the operator. This is only valid for "">= v7"" of the profile; /// version so that we facilitate backward compatibility. In addition, in; /// order to use MC/DC, count the number of total LHS and RHS conditions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:132,depend,depending,132,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['depend'],['depending']
Integrability,"/// The RooStringView is a wrapper around a C-style string that can also be; /// constructed from a `std::string` or a TString. As such, it serves as a; /// drop-in replacement for `const char*` in public RooFit interfaces, keeping; /// the possibility to pass a C-style string without copying but also accepting; /// a `std::string`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringView.h:27,wrap,wrapper,27,roofit/roofitcore/inc/RooStringView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringView.h,2,"['interface', 'wrap']","['interfaces', 'wrapper']"
Integrability,/// The SMS algorithm consists of the following main steps:; /// 1. Computation and analysis of the dependence graph.; /// 2. Ordering of the nodes (instructions).; /// 3. Attempt to Schedule the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:100,depend,dependence,100,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['depend'],['dependence']
Integrability,/// The ScalableErrorAsWarning is a temporary measure to suppress errors from; /// using the wrong interface on a scalable vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp:99,interface,interface,99,interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp,1,['interface'],['interface']
Integrability,/// The Swift type to which a given type is bridged.; ///; /// Reflects the swift_bridge attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:44,bridg,bridged,44,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['bridg'],['bridged']
Integrability,"/// The VE backend uses a two-staged process to lower and legalize vector; /// instructions:; //; /// 1. VP and standard vector SDNodes are lowered to SDNodes of the VVP_* layer.; //; // All VVP nodes have a mask and an Active Vector Length (AVL) parameter.; // The AVL parameters refers to the element position in the vector the VVP; // node operates on.; //; //; // 2. The VVP SDNodes are legalized. The AVL in a legal VVP node refers to; // chunks of 64bit. We track this by wrapping the AVL in a LEGALAVL node.; //; // The AVL mechanism in the VE architecture always refers to chunks of; // 64bit, regardless of the actual element type vector instructions are; // operating on. For vector types v256.32 or v256.64 nothing needs to be; // legalized since each element occupies a 64bit chunk - there is no; // difference between counting 64bit chunks or element positions. However,; // all vector types with > 256 elements store more than one logical element; // per 64bit chunk and need to be transformed.; // However legalization is performed, the resulting legal VVP SDNodes will; // have a LEGALAVL node as their AVL operand. The LEGALAVL nodes wraps; // around an AVL that refers to 64 bit chunks just as the architecture; // demands - that is, the wrapped AVL is the correct setting for the VL; // register for this VVP operation to get the desired behavior.; //; /// AVL Functions {; // The AVL operand position of this node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VECustomDAG.h:478,wrap,wrapping,478,interpreter/llvm-project/llvm/lib/Target/VE/VECustomDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VECustomDAG.h,3,['wrap'],"['wrapped', 'wrapping', 'wraps']"
Integrability,/// The \c ModulePass which wraps up a \c CallGraph and the logic to; /// build it.; ///; /// This class exposes both the interface to the call graph container and the; /// module pass which runs over a module of IR and produces the call graph. The; /// call graph interface is entirelly a wrapper around a \c CallGraph object; /// which is stored internally for each module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h:28,wrap,wraps,28,interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,4,"['interface', 'wrap']","['interface', 'wrapper', 'wraps']"
Integrability,"/// The `omp target` interface; ///; /// For more information about the usage of this interface,; /// \see openmp/libomptarget/deviceRTLs/common/include/target.h; ///; ///{; /// Create a runtime call for kmpc_target_init; ///; /// \param Loc The insert and source location description.; /// \param IsSPMD Flag to indicate if the kernel is an SPMD kernel or not.; /// \param MinThreads Minimal number of threads, or 0.; /// \param MaxThreads Maximal number of threads, or 0.; /// \param MinTeams Minimal number of teams, or 0.; /// \param MaxTeams Maximal number of teams, or 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:21,interface,interface,21,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,2,['interface'],['interface']
Integrability,/// The accelerator tables are designed to allow efficient random access; /// (using a symbol name as a key) into debug info by providing an index of the; /// debug info DIEs. This class implements the common functionality of Apple and; /// DWARF 5 accelerator tables.; /// TODO: Generalize the rest of the AppleAcceleratorTable interface and move it; /// to this class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:329,interface,interface,329,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,1,['interface'],['interface']
Integrability,/// The actual analysis pass wrapper.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:29,wrap,wrapper,29,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,1,['wrap'],['wrapper']
Integrability,"/// The amount that a frame offset needs to be adjusted to; /// have the actual offset from the stack/frame pointer. The exact usage of; /// this is target-dependent, but it is typically used to adjust between; /// SP-relative and FP-relative offsets. E.G., if objects are accessed via; /// SP then OffsetAdjustment is zero; if FP is used, OffsetAdjustment is set; /// to the distance between the initial SP and the value in FP. For many; /// targets, this value is only used when generating debug info (via; /// TargetRegisterInfo::getFrameIndexReference); when generating code, the; /// corresponding adjustments are performed directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:156,depend,dependent,156,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['depend'],['dependent']
Integrability,/// The argument has its reference count decreased by 1 to model; /// a transferred bridge cast under ARC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h:84,bridg,bridge,84,interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,1,['bridg'],['bridge']
Integrability,/// The argument is treated as if an -autorelease message had been sent to; /// the referenced object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h:50,message,message,50,interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,1,['message'],['message']
Integrability,/// The atomic synchronization scopes supported by the AMDGPU target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:15,synchroniz,synchronization,15,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,1,['synchroniz'],['synchronization']
Integrability,/// The base interface for DWARFLinker implementations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:13,interface,interface,13,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,1,['interface'],['interface']
Integrability,/// The base interface of visitors for API information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h:13,interface,interface,13,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SerializerBase.h,1,['interface'],['interface']
Integrability,"/// The basic block for which we are generating the stack protector.; ///; /// As a result of stack protector generation, we will splice the; /// terminators of this basic block into the successor mbb SuccessMBB and; /// replace it with a compare/branch to the successor mbbs; /// SuccessMBB/FailureMBB depending on whether or not the stack protector; /// was violated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h:303,depend,depending,303,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,1,['depend'],['depending']
Integrability,/// The basic data container for the call graph of a \c Module of IR.; ///; /// This class exposes both the interface to the call graph for a module of IR.; ///; /// The core call graph itself can also be updated to reflect changes to the IR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h:108,interface,interface,108,interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,1,['interface'],['interface']
Integrability,/// The bound architecture of the dependent action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:34,depend,dependent,34,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependent']
Integrability,/// The canonical template name to which this dependent; /// template name refers.; ///; /// The canonical template name for a dependent template name is; /// another dependent template name whose nested name specifier is; /// canonical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:46,depend,dependent,46,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,3,['depend'],['dependent']
Integrability,"/// The chain of non-module PCH files. The first entry is the one named; /// by the user, the last one is the one that doesn't depend on anything; /// further.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:127,depend,depend,127,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,1,['depend'],['depend']
Integrability,"/// The class CompletionContextHandler contains four interfaces, each of; /// which handles one type of completion result.; /// Its derived classes are used to create concrete handlers based on; /// \c CodeCompletionContext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/CodeCompletion.cpp:53,interface,interfaces,53,interpreter/llvm-project/clang/lib/Interpreter/CodeCompletion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/CodeCompletion.cpp,1,['interface'],['interfaces']
Integrability,/// The consumer of collected dependency information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:30,depend,dependency,30,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependency']
Integrability,"/// The content format depends on the content ID and may be binary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:23,depend,depends,23,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['depend'],['depends']
Integrability,"/// The core of the Dsymutil Dwarf linking logic.; ///; /// The link of the dwarf information from the object files will be; /// driven by DWARFLinker. DwarfLinkerForBinary reads DebugMap objects; /// and pass information to the DWARFLinker. DWARFLinker; /// optimizes DWARF taking into account valid relocations.; /// Finally, optimized DWARF is passed to DwarfLinkerForBinary through; /// DWARFEmitter interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.h:404,interface,interface,404,interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.h,1,['interface'],['interface']
Integrability,"/// The cost threshold for the unrolled loop. Should be relative to the; /// getInstructionCost values returned by this API, and the expectation is; /// that the unrolled loop's instructions when run through that interface; /// should not exceed this cost. However, this is only an estimate. Also,; /// specific loops may be unrolled even with a cost above this threshold if; /// deemed profitable. Set this to UINT_MAX to disable the loop body cost; /// restriction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:213,interface,interface,213,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['interface'],['interface']
Integrability,"/// The data describing the designator, which comes in three; /// different forms, depending on the lower two bits.; /// - An unsigned index into the array of Expr*'s stored after this node; /// in memory, for [constant-expression] designators.; /// - A FieldDecl*, for references to a known field.; /// - An IdentifierInfo*, for references to a field with a given name; /// when the class type is dependent.; /// - A CXXBaseSpecifier*, for references that look at a field in a; /// base class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:83,depend,depending,83,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,2,['depend'],"['dependent', 'depending']"
Integrability,"/// The data structure for the dependency graph; ///; /// Note that in this graph if there is an edge from A to B (A -> B),; /// then it means that B depends on A, and when the state of A is; /// updated, node B should also be updated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:31,depend,dependency,31,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['depend'],"['dependency', 'depends']"
Integrability,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:54,message,message,54,core/base/src/TErrorDefaultHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx,1,['message'],['message']
Integrability,"/// The definition of the size of form DW_FORM_ref_addr depends on the; /// version. In DWARF v2 it's the size of an address; after that, it's the; /// size of a reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h:56,depend,depends,56,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,1,['depend'],['depends']
Integrability,/// The dependence action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:8,depend,dependence,8,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependence']
Integrability,"/// The dependence stack is used to track dependences during an; /// `AbstractAttribute::update` call. As `AbstractAttribute::update` can be; /// recursive we might have multiple vectors of dependences in here. The stack; /// size, should be adjusted according to the expected recursion depth and the; /// inner dependence vector size to the expected number of dependences per; /// abstract attribute. Since the inner vectors are actually allocated on the; /// stack we can be generous with their size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:8,depend,dependence,8,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,5,['depend'],"['dependence', 'dependences']"
Integrability,/// The dependency scanning service contains shared configuration and state that; /// is used by the individual dependency scanning workers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h:8,depend,dependency,8,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,2,['depend'],['dependency']
Integrability,/// The dependent memory instructions.; /// This list is derived on demand in calculateDependencies().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:8,depend,dependent,8,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['depend'],['dependent']
Integrability,/// The dependent template name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:8,depend,dependent,8,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['depend'],['dependent']
Integrability,"/// The depth, in the dependence graph, for a node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:22,depend,dependence,22,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,1,['depend'],['dependence']
Integrability,/// The diagnostic client that performs the actual formatting; /// of error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:76,message,messages,76,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,1,['message'],['messages']
Integrability,"/// The diagnostic we should emit for \c D, and the declaration that; /// originated it, or \c AR_Available.; ///; /// \param D The declaration to check.; /// \param Message If non-null, this will be populated with the message from; /// the availability attribute that is selected.; /// \param ClassReceiver If we're checking the method of a class message; /// send, the class. Otherwise nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp:166,Message,Message,166,interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,3,"['Message', 'message']","['Message', 'message']"
Integrability,/// The directory to copy module dependencies to when collecting them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:33,depend,dependencies,33,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,1,['depend'],['dependencies']
Integrability,"/// The distance function, which indicates that operation V of iteration I; /// depends on operations U of iteration I-distance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:80,depend,depends,80,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,1,['depend'],['depends']
Integrability,"/// The element quantity of this vector. The meaning of this value depends; /// on the type of vector:; /// - For FixedVectorType = <ElementQuantity x ty>, there are; /// exactly ElementQuantity elements in this vector.; /// - For ScalableVectorType = <vscale x ElementQuantity x ty>,; /// there are vscale * ElementQuantity elements in this vector, where; /// vscale is a runtime-constant integer greater than 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:67,depend,depends,67,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,1,['depend'],['depends']
Integrability,/// The endianness of all multi-byte encoded values in MessagePack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h:55,Message,MessagePack,55,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h,1,['Message'],['MessagePack']
Integrability,"/// The enum of section identifiers to be used in internal interfaces.; ///; /// Pre-standard implementation of package files defined a number of section; /// identifiers with values that clash definitions in the DWARFv5 standard.; /// See https://gcc.gnu.org/wiki/DebugFissionDWP and Section 7.3.5.3 in DWARFv5.; ///; /// The following identifiers are the same in the proposal and in DWARFv5:; /// - DW_SECT_INFO = 1 (.debug_info.dwo); /// - DW_SECT_ABBREV = 3 (.debug_abbrev.dwo); /// - DW_SECT_LINE = 4 (.debug_line.dwo); /// - DW_SECT_STR_OFFSETS = 6 (.debug_str_offsets.dwo); ///; /// The following identifiers are defined only in DWARFv5:; /// - DW_SECT_LOCLISTS = 5 (.debug_loclists.dwo); /// - DW_SECT_RNGLISTS = 8 (.debug_rnglists.dwo); ///; /// The following identifiers are defined only in the GNU proposal:; /// - DW_SECT_TYPES = 2 (.debug_types.dwo); /// - DW_SECT_LOC = 5 (.debug_loc.dwo); /// - DW_SECT_MACINFO = 7 (.debug_macinfo.dwo); ///; /// DW_SECT_MACRO for the .debug_macro.dwo section is defined in both standards,; /// but with different values, 8 in GNU and 7 in DWARFv5.; ///; /// This enum defines constants to represent the identifiers of both sets.; /// For DWARFv5 ones, the values are the same as defined in the standard.; /// For pre-standard ones that correspond to sections being deprecated in; /// DWARFv5, the values are chosen arbitrary and a tag ""_EXT_"" is added to; /// the names.; ///; /// The enum is for internal use only. The user should not expect the values; /// to correspond to any input/output constants. Special conversion functions,; /// serializeSectionKind() and deserializeSectionKind(), should be used for; /// the translation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h:59,interface,interfaces,59,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h,1,['interface'],['interfaces']
Integrability,"/// The file system to be used during the scan.; /// This is either \c FS passed in the constructor (when performing canonical; /// preprocessing), or \c DepFS (when performing dependency directives scan).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h:177,depend,dependency,177,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h,1,['depend'],['dependency']
Integrability,/// The file to write GraphViz-formatted header dependencies to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:48,depend,dependencies,48,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,1,['depend'],['dependencies']
Integrability,/// The file to write dependency output to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:22,depend,dependency,22,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,1,['depend'],['dependency']
Integrability,"/// The final RPageSink that represents the synchronization point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleParallelWriter.hxx:44,synchroniz,synchronization,44,tree/ntuple/v7/inc/ROOT/RNTupleParallelWriter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleParallelWriter.hxx,1,['synchroniz'],['synchronization']
Integrability,"/// The finalization stack made up of finalize callbacks currently in-flight,; /// wrapped into FinalizationInfo objects that reference also the finalization; /// target block and the kind of cancellable directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:83,wrap,wrapped,83,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['wrap'],['wrapped']
Integrability,/// The first byte identifiers of MessagePack object formats.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h:34,Message,MessagePack,34,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPack.h,1,['Message'],['MessagePack']
Integrability,"/// The first template argument to which the template; /// argument deduction failure refers.; ///; /// Depending on the result of the template argument deduction,; /// this template argument may have different meanings:; ///; /// TDK_IncompletePack: this is the number of arguments we deduced; /// for the pack.; ///; /// TDK_Inconsistent: this argument is the first value deduced; /// for the corresponding template parameter.; ///; /// TDK_SubstitutionFailure: this argument is the template; /// argument we were instantiating when we encountered an error.; ///; /// TDK_DeducedMismatch: this is the parameter type, after substituting; /// deduced arguments.; ///; /// TDK_NonDeducedMismatch: this is the component of the 'parameter'; /// of the deduction, directly provided in the source code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:104,Depend,Depending,104,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,1,['Depend'],['Depending']
Integrability,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:942,interface,interface,942,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['interface'],['interface']
Integrability,"/// The following allows us to typecheck messages to ""id"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:41,message,messages,41,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['message'],['messages']
Integrability,/// The format for the dependency file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:23,depend,dependency,23,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,1,['depend'],['dependency']
Integrability,/// The format that is output by the dependency scanner.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h:37,depend,dependency,37,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,1,['depend'],['dependency']
Integrability,/// The full dependencies and module graph for a specific input.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:13,depend,dependencies,13,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,1,['depend'],['dependencies']
Integrability,"/// The function is a secondary interface to the LLVM Assembly Parser. It parses; /// an ASCII string that (presumably) contains LLVM Assembly code for a module; /// summary. It returns a a ModuleSummaryIndex with the corresponding features.; /// Note that this does not verify that the generated Index is valid, so you; /// should run the verifier after parsing the file to check that it is okay.; /// Parse LLVM Assembly from a string; /// \param AsmString The string containing assembly; /// \param Err Error result info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:32,interface,interface,32,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['interface'],['interface']
Integrability,"/// The function is a secondary interface to the LLVM Assembly Parser. It parses; /// an ASCII string that (presumably) contains LLVM Assembly code. It returns a; /// Module (intermediate representation) with the corresponding features. Note; /// that this does not verify that the generated Module is valid, so you should; /// run the verifier after parsing the file to check that it is okay.; /// Parse LLVM Assembly from a string; /// \param AsmString The string containing assembly; /// \param Err Error result info.; /// \param Context Context in which to allocate globals info.; /// \param Slots The optional slot mapping that will be initialized during; /// parsing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:32,interface,interface,32,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['interface'],['interface']
Integrability,"/// The given lookup names class member(s) and is not being used for; /// an address-of-member expression. Classify the type of access; /// according to whether it's possible that this reference names an; /// instance member. This is best-effort in dependent contexts; it is okay to; /// conservatively answer ""yes"", in which case some errors will simply; /// not be caught until template-instantiation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:249,depend,dependent,249,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['depend'],['dependent']
Integrability,"/// The global settings depend on a global variable named R__ZipMode which can be; /// modified by a global function named R__SetZipMode. Both are defined in Bits.h.; ///; /// - The default is to use the global setting and the default of the global; /// setting is to use the ZLIB compression algorithm.; /// - The LZMA algorithm (from the XZ package) is also available. The LZMA; /// compression usually results in greater compression factors, but takes; /// more CPU time and memory when compressing. LZMA memory usage is particularly; /// high for compression levels 8 and 9.; /// - Finally, the LZ4 package results in worse compression ratios; /// than ZLIB but achieves much faster decompression rates.; ///; /// The current algorithms support level 1 to 9. The higher the level the greater; /// the compression and more CPU time and memory resources used during compression.; /// Level 0 means no compression.; ///; /// Recommendation for the compression algorithm's levels:; /// - ZLIB is recommended to be used with compression level 1 [101]; /// - LZMA is recommended to be used with compression level 7-8 (higher is better,; /// since in the case of LZMA we don't care about compression/decompression speed); /// [207 - 208]; /// - LZ4 is recommended to be used with compression level 4 [404]; /// - ZSTD is recommended to be used with compression level 5 [505]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/inc/Compression.h:24,depend,depend,24,core/zip/inc/Compression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/inc/Compression.h,1,['depend'],['depend']
Integrability,/// The graph of direct and transitive modular dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:47,depend,dependencies,47,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,1,['depend'],['dependencies']
Integrability,"/// The height, in the dependence graph, for a node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:23,depend,dependence,23,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,1,['depend'],['dependence']
Integrability,/// The high-level implementation of the dependency discovery tool that runs on; /// an individual worker thread.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:41,depend,dependency,41,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,1,['depend'],['dependency']
Integrability,/// The identity of a type_info object depends on the canonical unqualified; /// type only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/APValue.cpp:39,depend,depends,39,interpreter/llvm-project/clang/lib/AST/APValue.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/APValue.cpp,1,['depend'],['depends']
Integrability,"/// The injected class name in C++ is the name of the class that; /// appears inside the class itself. For example:; ///; /// \code; /// struct C {; /// // C is implicitly declared here as a synonym for the class name.; /// };; ///; /// C::C c; // same as ""C c;""; /// \endcode; // It is another question why it is on the redecl chain.; // The test show it can be either:; // ... <- InjectedC <- C <- ..., i.e previous decl or; // ... <- C <- InjectedC <- ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:8,inject,injected,8,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,3,"['Inject', 'inject']","['InjectedC', 'injected']"
Integrability,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:8,inject,injected,8,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,9,"['Inject', 'depend', 'inject']","['Injected', 'dependent', 'injected']"
Integrability,/// The injected-class-name type for this class template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,inject,injected-class-name,8,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inject'],['injected-class-name']
Integrability,/// The interface for consumers of difference data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffConsumer.h:8,interface,interface,8,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffConsumer.h,1,['interface'],['interface']
Integrability,"/// The interface for creating a vectorized skeleton using one of two; /// different strategies, each corresponding to one execution of the vplan; /// as described above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:8,interface,interface,8,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['interface'],['interface']
Integrability,"/// The interface of a task scheduler to schedule page (de)compression tasks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:8,interface,interface,8,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['interface'],['interface']
Integrability,/// The interface that lets the caller handle unsafe buffer usage analysis; /// results by overriding this class's handle... methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h:8,interface,interface,8,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,1,['interface'],['interface']
Integrability,/// The interface to read coverage mapping function records for a module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:8,interface,interface,8,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,1,['interface'],['interface']
Integrability,/// The interface to read sample profiles from the associated file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:8,interface,interface,8,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['interface'],['interface']
Integrability,/// The interface to the class that gets notified of each visitation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CVTypeVisitor.cpp:8,interface,interface,8,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CVTypeVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CVTypeVisitor.cpp,1,['interface'],['interface']
Integrability,/// The internal \c CallGraph around which the rest of this interface; /// is wrapped.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h:60,interface,interface,60,interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,2,"['interface', 'wrap']","['interface', 'wrapped']"
Integrability,/// The iterator interface to the top-level loops in the current function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h:17,interface,interface,17,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,1,['interface'],['interface']
Integrability,"/// The kind of ""extra"" information stored in the DeclarationName. See; /// @c ExtraKindOrNumArgs for an explanation of how these enumerator values; /// are used. Note that DeclarationName depends on the numerical values; /// of the enumerators in this enum. See DeclarationName::StoredNameKind; /// for more info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:189,depend,depends,189,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['depend'],['depends']
Integrability,/// The kind of bridging performed by the Objective-C bridge cast.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:16,bridg,bridging,16,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,2,['bridg'],"['bridge', 'bridging']"
Integrability,"/// The kind of message send this is, which is one of the; /// ReceiverKind values.; ///; /// We pad this out to a byte to avoid excessive masking and shifting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:16,message,message,16,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,/// The kind of receiver this message is sending to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:30,message,message,30,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,"/// The largest number of element an array can have and still be; /// considered ""small"".; ///; /// This is currently used to decide whether or not it is worth ""forcing"" a; /// LazyCompoundVal on bind.; ///; /// This is controlled by 'region-store-small-struct-limit' option.; /// To disable all small-struct-dependent behavior, set the option to ""0"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:309,depend,dependent,309,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['depend'],['dependent']
Integrability,"/// The largest number of fields a struct can have and still be; /// considered ""small"".; ///; /// This is currently used to decide whether or not it is worth ""forcing"" a; /// LazyCompoundVal on bind.; ///; /// This is controlled by 'region-store-small-struct-limit' option.; /// To disable all small-struct-dependent behavior, set the option to ""0"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:308,depend,dependent,308,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['depend'],['dependent']
Integrability,"/// The last component in the nested name specifier, which; /// can be an identifier, a declaration, or a type.; ///; /// When the pointer is NULL, this specifier represents the global; /// specifier '::'. Otherwise, the pointer is one of; /// IdentifierInfo*, Namespace*, or Type*, depending on the kind of; /// specifier as encoded within the prefix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:283,depend,depending,283,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,1,['depend'],['depending']
Integrability,/// The legacy name for the LLVM OpenMP runtime from when it was the Intel; /// OpenMP runtime. We support this mode for users with existing; /// dependencies on this runtime library name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:146,depend,dependencies,146,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['depend'],['dependencies']
Integrability,/// The legacy pass manager's instcombine pass.; ///; /// This is a basic whole-function wrapper around the instcombine utility. It; /// will try to combine all instructions in the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h:89,wrap,wrapper,89,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h,1,['wrap'],['wrapper']
Integrability,"/// The legality of the wrapped instruction. This is informed by InstrType,; /// and is used when checking when two instructions are considered similar.; /// If either instruction is not legal, the instructions are automatically not; /// considered similar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:24,wrap,wrapped,24,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wrapped']
Integrability,"/// The length of the critical path through a trace is the maximum of two path; /// lengths:; ///; /// 1. The maximum height+depth over all instructions in the trace center block.; ///; /// 2. The longest cross-block dependency chain. For small blocks, it is; /// possible that the critical path through the trace doesn't include any; /// instructions in the block.; ///; /// This function computes the second number from the live-in list of the; /// center block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineTraceMetrics.cpp:217,depend,dependency,217,interpreter/llvm-project/llvm/lib/CodeGen/MachineTraceMetrics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineTraceMetrics.cpp,1,['depend'],['dependency']
Integrability,"/// The length of the parameter pack, if known.; ///; /// When this expression is not value-dependent, this is the length of; /// the pack. When the expression was parsed rather than instantiated; /// (and thus is value-dependent), this is zero.; ///; /// After partial substitution into a sizeof...(X) expression (for instance,; /// within an alias template or during function template argument deduction),; /// we store a trailing array of partially-substituted TemplateArguments,; /// and this is the length of that array.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:92,depend,dependent,92,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,2,['depend'],['dependent']
Integrability,"/// The list of rules associated with the most recent active run. These are; /// defined using the diagnostics passed to the SarifDocument. Each rule; /// need not be unique through the result set. E.g. there may be several; /// 'syntax' errors throughout code under analysis, each of which has its; /// own specific diagnostic message (and consequently, RuleId). Rules are; /// also known as ""reportingDescriptor"" objects in SARIF.; ///; /// Reference: <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317556"">rules property</a>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:328,message,message,328,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,1,['message'],['message']
Integrability,/// The location of the bridge keyword.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:24,bridg,bridge,24,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['bridg'],['bridge']
Integrability,/// The loop analysis manager.; ///; /// See the documentation for the AnalysisManager template for detail; /// documentation. This typedef serves as a convenient way to refer to this; /// construct in the adaptors and proxies used to integrate this into the larger; /// pass manager infrastructure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h:235,integrat,integrate,235,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,1,['integrat'],['integrate']
Integrability,"/// The lowest three bits of Ptr are used to express what kind of name; /// we're actually storing, using the values of StoredNameKind. Depending; /// on the kind of name this is, the upper bits of Ptr may have one; /// of several different meanings:; ///; /// StoredIdentifier - The name is a normal identifier, and Ptr is; /// a normal IdentifierInfo pointer.; ///; /// StoredObjCZeroArgSelector - The name is an Objective-C; /// selector with zero arguments, and Ptr is an IdentifierInfo; /// pointer pointing to the selector name.; ///; /// StoredObjCOneArgSelector - The name is an Objective-C selector; /// with one argument, and Ptr is an IdentifierInfo pointer; /// pointing to the selector name.; ///; /// StoredCXXConstructorName - The name of a C++ constructor,; /// Ptr points to a CXXSpecialNameExtra.; ///; /// StoredCXXDestructorName - The name of a C++ destructor,; /// Ptr points to a CXXSpecialNameExtra.; ///; /// StoredCXXConversionFunctionName - The name of a C++ conversion function,; /// Ptr points to a CXXSpecialNameExtra.; ///; /// StoredCXXOperatorName - The name of an overloaded C++ operator,; /// Ptr points to a CXXOperatorIdName.; ///; /// StoredDeclarationNameExtra - Ptr is actually a pointer to a; /// DeclarationNameExtra structure, whose first value will tell us; /// whether this is an Objective-C selector, C++ deduction guide,; /// C++ literal operator, or C++ using directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:136,Depend,Depending,136,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['Depend'],['Depending']
Integrability,"/// The main entry to the graph construction algorithm. It starts by; /// creating nodes in increasing order of granularity and then; /// adds def-use and memory edges. As one of the final stages, it; /// also creates pi-block nodes to facilitate codegen in transformations; /// that use dependence graphs.; ///; /// The algorithmic complexity of this implementation is O(V^2 * I^2), where V; /// is the number of vertecies (nodes) and I is the number of instructions in; /// each node. The total number of instructions, N, is equal to V * I,; /// therefore the worst-case time complexity is O(N^2). The average time; /// complexity is O((N^2)/2).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h:288,depend,dependence,288,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h,1,['depend'],['dependence']
Integrability,"/// The mapping of profile information to coverage data.; ///; /// This is the main interface to get coverage information, using a profile to; /// fill out execution counts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:84,interface,interface,84,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['interface'],['interface']
Integrability,"/// The meaning of fLocator depends on the storage backend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:28,depend,depends,28,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['depend'],['depends']
Integrability,"/// The message is a class message, and the identifier is a type; /// name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,message,message,8,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['message'],['message']
Integrability,/// The message is an instance message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,message,message,8,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['message'],['message']
Integrability,/// The message is sent to 'super'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:8,message,message,8,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['message'],['message']
Integrability,/// The message provided to the user when there is a conflict.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:8,message,message,8,interpreter/llvm-project/clang/include/clang/Basic/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h,2,['message'],['message']
Integrability,/// The mode in which the dependency scanner will operate to find the; /// dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h:26,depend,dependency,26,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,2,['depend'],"['dependencies', 'dependency']"
Integrability,/// The model delegates to the \c PassT::run method.; ///; /// The return is wrapped in an \c AnalysisResultModel.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:77,wrap,wrapped,77,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,1,['wrap'],['wrapped']
Integrability,/// The module IDs on which this module directly depends.; /// FIXME: We don't really need a vector here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:49,depend,depends,49,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,1,['depend'],['depends']
Integrability,/// The module dependency collector for crashdumps,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:15,depend,dependency,15,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,1,['depend'],['dependency']
Integrability,/// The module manager which manages modules and their dependencies,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:55,depend,dependencies,55,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['depend'],['dependencies']
Integrability,/// The name denotes a member of a dependent type that could not be; /// resolved. ActOnNameClassifiedAsDependentNonType should be called to; /// convert the result to an expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,depend,dependent,35,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['dependent']
Integrability,"/// The name is a dependent name, so the results will differ; /// from one instantiation to the next.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:18,depend,dependent,18,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['dependent']
Integrability,"/// The name of the current module, of which the main source file; /// is a part. If CompilingModule is set, we are compiling the interface; /// of this module, otherwise we are compiling an implementation file of; /// it. This starts as ModuleName in case -fmodule-name is provided and; /// changes during compilation to reflect the current module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:130,interface,interface,130,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['interface'],['interface']
Integrability,"/// The name refers to a dependent template name:; /// \code; /// template<typename MetaFun, typename T1, typename T2> struct apply2 {; /// typedef typename MetaFun::template apply<T1, T2>::type type;; /// };; /// \endcode; ///; /// Here, ""apply"" is a dependent template name within the typename; /// specifier in the typedef. ""apply"" is a nested template, and; /// whether the template name is assumed to refer to a type template or a; /// function template depends on the context in which the template; /// name occurs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h:25,depend,dependent,25,interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h,3,['depend'],"['dependent', 'depends']"
Integrability,"/// The nested name specifier that qualifies the template name.; ///; /// The bit is used to indicate whether the ""template"" keyword was; /// present before the template name itself. Note that the; /// ""template"" keyword is always redundant in this case (otherwise,; /// the template name would be a dependent name and we would express; /// this name with DependentTemplateName).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:300,depend,dependent,300,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,2,"['Depend', 'depend']","['DependentTemplateName', 'dependent']"
Integrability,"/// The null-separated list of names to use as the targets in the dependency; /// file, if any. Defaults to the value of \c ModuleFile, as in the driver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:66,depend,dependency,66,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependency']
Integrability,"/// The number of arguments in the message send, not; /// including the receiver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:35,message,message,35,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,/// The number of association expressions and the index of the result; /// expression in the case where the generic selection expression is not; /// result-dependent. The result index is equal to ResultDependentIndex; /// if and only if the generic selection expression is result-dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:156,depend,dependent,156,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,2,['depend'],['dependent']
Integrability,"/// The number of dependencies minus the number of dependencies of scheduled; /// instructions. As soon as this is zero, the instruction/bundle gets ready; /// for scheduling.; /// Note that this is negative as long as Dependencies is not calculated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:18,depend,dependencies,18,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,3,"['Depend', 'depend']","['Dependencies', 'dependencies']"
Integrability,"/// The number of dependencies. Constitutes of the number of users of the; /// instruction plus the number of dependent memory instructions (if any).; /// This value is calculated on demand.; /// If InvalidDeps, the number of dependencies is not calculated yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:18,depend,dependencies,18,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,3,['depend'],"['dependencies', 'dependent']"
Integrability,/// The number of levels of template parameters enclosing this statement; /// expression. Used to determine if a statement expression remains; /// dependent after instantiation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:147,depend,dependent,147,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['depend'],['dependent']
Integrability,/// The number of protocols stored directly on this object type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:18,protocol,protocols,18,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocols']
Integrability,/// The number of protocols stored on this type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:18,protocol,protocols,18,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocols']
Integrability,/// The offload kind of each dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:29,depend,dependence,29,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,2,['depend'],['dependence']
Integrability,/// The offload kind of the dependent action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:28,depend,dependent,28,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependent']
Integrability,"/// The opaque type map for Objective-C interfaces. All direct; /// manipulation is done by the runtime interfaces, which are; /// responsible for coercing to the appropriate type; these opaque; /// types are never refined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:40,interface,interfaces,40,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,2,['interface'],['interfaces']
Integrability,/// The optimization diagnostic interface.; ///; /// It allows reporting when optimizations are performed and when they are not; /// along with the reasons for it. Hotness information of the corresponding; /// code region can be included in the remark if DiagnosticsHotnessRequested is; /// enabled in the LLVM context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h:32,interface,interface,32,interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h,2,['interface'],['interface']
Integrability,/// The outer loop counter this loop depends on (if any).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:37,depend,depends,37,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['depend'],['depends']
Integrability,"/// The pack index, or the number of stored templates; /// or template arguments, depending on which subclass we have.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:82,depend,depending,82,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['depend'],['depending']
Integrability,/// The parent dependency collector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:15,depend,dependency,15,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependency']
Integrability,"/// The parsed content: depending on the container type, some fields might be; /// empty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h:24,depend,depending,24,interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h,1,['depend'],['depending']
Integrability,"/// The parsed content: depending on the remark, some fields might be empty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h:24,depend,depending,24,interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/BitstreamRemarkParser.h,1,['depend'],['depending']
Integrability,/// The parser has parsed the context-sensitive type 'instancetype'; /// in an Objective-C message declaration. Return the appropriate type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:91,message,message,91,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['message'],['message']
Integrability,/// The parser has processed a module-declaration that begins the definition; /// of a module interface or implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:94,interface,interface,94,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['interface'],['interface']
Integrability,"/// The path of the dependency file (.d), if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:20,depend,dependency,20,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependency']
Integrability,/// The path to the modulemap file which defines this module.; ///; /// This can be used to explicitly build this module. This file will; /// additionally appear in \c FileDeps as a dependency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:182,depend,dependency,182,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependency']
Integrability,"/// The point here is that we can only tell at run time if a class has an associated collection proxy.; /// For compile time, in the first iteration of this PR we had an extra template argument that acted as a ""tag"" to; /// differentiate the RField specialization for classes with an associated collection proxy (inherits; /// `RProxiedCollectionField`) from the RField primary template definition (`RClassField`-derived), as in:; /// ```; /// auto field = std::make_unique<RField<MyClass>>(""klass"");; /// // vs; /// auto otherField = std::make_unique<RField<MyClass, ROOT::Experimental::TagIsCollectionProxy>>(""klass"");; /// ```; ///; /// That is convenient only for non-nested types, i.e. it doesn't work with, e.g. `RField<std::vector<MyClass>,; /// ROOT::Experimental::TagIsCollectionProxy>`, as the tag is not forwarded to the instantiation of the inner RField; /// (that for the value type of the vector). The following two possible solutions were considered:; /// - A wrapper type (much like `ntuple/v7/inc/ROOT/RNTupleUtil.hxx:49`), that helps to differentiate both cases.; /// There we would have:; /// ```; /// auto field = std::make_unique<RField<RProxiedCollection<MyClass>>>(""klass""); // Using collection proxy; /// ```; /// - A helper `IsCollectionProxy<T>` type, that can be used in a similar way to those in the `<type_traits>` header.; /// We found this more convenient and is the implemented thing below. Here, classes can be marked as a; /// collection proxy with either of the following two forms (whichever is more convenient for the user):; /// ```; /// template <>; /// struct IsCollectionProxy<MyClass> : std::true_type {};; /// ```; /// or by adding a member type to the class as follows:; /// ```; /// class MyClass {; /// public:; /// using IsCollectionProxy = std::true_type;; /// };; /// ```; ///; /// Of course, there is another possible solution which is to have a single `RClassField` that implements both; /// the regular-class and the collection-proxy behaviors, and ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx:975,wrap,wrapper,975,tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,1,['wrap'],['wrapper']
Integrability,/// The primary message line of the diagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h:16,message,message,16,interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h,1,['message'],['message']
Integrability,/// The primary public interface to the Clang code generator.; ///; /// This is not really an abstract interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h:23,interface,interface,23,interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,2,['interface'],['interface']
Integrability,"/// The protocol in the following functions (Merge*, force*, Enforce*,; /// expand*) is to return ""true"" if a change has been made, ""false""; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:8,protocol,protocol,8,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['protocol'],['protocol']
Integrability,"/// The protocols are stored after the ObjCTypeParamType node. In the; /// canonical type, the list of protocols are sorted alphabetically; /// and uniqued.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:8,protocol,protocols,8,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['protocol'],['protocols']
Integrability,/// The query functions are protected such that other attributes need to go; /// through the Attributor interfaces: `Attributor::isAssumedDead(...)`; /// Returns true if the underlying value is assumed dead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:104,interface,interfaces,104,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['interface'],['interfaces']
Integrability,"/// The region for all the non-static global variables.; ///; /// This class is further split into subclasses for efficient implementation of; /// invalidating a set of related global values as is done in; /// RegionStoreManager::invalidateRegions (instead of finding all the dependent; /// globals, we invalidate the whole parent region).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:276,depend,dependent,276,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,1,['depend'],['dependent']
Integrability,"/// The region representing an object (ObjC/C++) on which the method is; /// called. With dynamic dispatch, the method definition depends on the; /// runtime type of this object. NULL when the DynamicTypeInfo is; /// precise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:130,depend,depends,130,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['depend'],['depends']
Integrability,/// The routine which creates the final PseudoObjectExpr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp:8,rout,routine,8,interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,1,['rout'],['routine']
Integrability,/// The section this unit will be emitted in. This may or may not be set to; /// a valid section depending on the client that is emitting DWARF.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h:97,depend,depending,97,interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,1,['depend'],['depending']
Integrability,"/// The selector of the given message exactly matches the selector; /// of the current method, which might imply that some kind of delegation; /// is occurring.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:30,message,message,30,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['message'],['message']
Integrability,"/// The sequence of commands required to build the translation unit. Commands; /// should be executed in order.; ///; /// FIXME: If we add support for multi-arch builds in clang-scan-deps, we; /// should make the dependencies between commands explicit to enable parallel; /// builds of each architecture.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:213,depend,dependencies,213,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,1,['depend'],['dependencies']
Integrability,"/// The set of ""injected"" template arguments used within this; /// template.; ///; /// This pointer refers to the template arguments (there are as; /// many template arguments as template parameters) for the; /// template, and is allocated lazily, since most templates do not; /// require the use of this information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:16,inject,injected,16,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inject'],['injected']
Integrability,"/// The set of allocatable registers.; /// We'll be ignoring anti-dependencies on non-allocatable registers,; /// because they may not be safe to break.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CriticalAntiDepBreaker.h:66,depend,dependencies,66,interpreter/llvm-project/llvm/lib/CodeGen/CriticalAntiDepBreaker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CriticalAntiDepBreaker.h,1,['depend'],['dependencies']
Integrability,/// The set of blocks which we have determined whose control; /// dependence sources must be live and which have not had; /// those dependences analyzed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp:66,depend,dependence,66,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,2,['depend'],"['dependence', 'dependences']"
Integrability,"/// The set of modules imported by this module, and on which this; /// module depends.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:78,depend,depends,78,interpreter/llvm-project/clang/include/clang/Basic/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h,1,['depend'],['depends']
Integrability,/// The set of modules on which this module depends. Each entry is; /// a module ID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp:44,depend,depends,44,interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp,1,['depend'],['depends']
Integrability,"/// The simplest user interface if the default entry that comes with the ntuple model is used.; /// \return The number of uncompressed bytes written.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx:22,interface,interface,22,tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx,1,['interface'],['interface']
Integrability,/// The smallest dependence distance in bytes in the loop. This may not be; /// the same as the maximum number of bytes that are safe to operate on; /// simultaneously.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:17,depend,dependence,17,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,/// The source Instruction that is being wrapped.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:41,wrap,wrapped,41,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wrapped']
Integrability,"/// The source location where the module was explicitly or implicitly; /// imported in the local translation unit.; ///; /// If module A depends on and imports module B, both modules will have the; /// same DirectImportLoc, but different ImportLoc (B's ImportLoc will be a; /// source location inside module A).; ///; /// WARNING: This is largely useless. It doesn't tell you when a module was; /// made visible, just when the first submodule of that module was imported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:137,depend,depends,137,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,1,['depend'],['depends']
Integrability,/// The source range is just the protocol name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:33,protocol,protocol,33,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['protocol'],['protocol']
Integrability,/// The source symbol conforms to the target symbol.; /// For example Objective-C protocol conformances.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h:82,protocol,protocol,82,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,1,['protocol'],['protocol']
Integrability,"/// The stack of modules being built, which is used to detect; /// cycles in the module dependency graph as modules are being built, as; /// well as to describe why we're rebuilding a particular module.; ///; /// There is no way to set this value from the command line. If we ever need; /// to do so (e.g., if on-demand module construction moves out-of-process),; /// we can add a cc1-level option to do so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:88,depend,dependency,88,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['depend'],['dependency']
Integrability,/// The standard DAG builder does not normally include terminators as DAG; /// nodes because it does not create the necessary dependencies to prevent; /// reordering. A specialized scheduler can override; /// TargetInstrInfo::isSchedulingBoundary then enable this flag to indicate; /// it has taken responsibility for scheduling the terminator correctly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:126,depend,dependencies,126,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['depend'],['dependencies']
Integrability,"/// The start of a nested block (e.g. lambda introducer in C++ or; /// ""function"" in JavaScript) is not wrapped to a new line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h:104,wrap,wrapped,104,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,1,['wrap'],['wrapped']
Integrability,"/// The state object holding the global address mapping, which must be; /// accessed synchronously.; //; // FIXME: There is no particular need the entire map needs to be; // synchronized. Wouldn't a reader-writer design be better here?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:174,synchroniz,synchronized,174,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['synchroniz'],['synchronized']
Integrability,/// The state used to identify and rename anti-dependence registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AggressiveAntiDepBreaker.h:47,depend,dependence,47,interpreter/llvm-project/llvm/lib/CodeGen/AggressiveAntiDepBreaker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AggressiveAntiDepBreaker.h,1,['depend'],['dependence']
Integrability,"/// The streaming interface shared between DiagnosticBuilder and; /// PartialDiagnostic. This class is not intended to be constructed directly; /// but only as base class of DiagnosticBuilder and PartialDiagnostic builder.; ///; /// Any new type of argument accepted by DiagnosticBuilder and PartialDiagnostic; /// should be implemented as a '<<' operator of StreamingDiagnostic, e.g.; ///; /// const StreamingDiagnostic&; /// operator<<(const StreamingDiagnostic&, NewArgType);; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:18,interface,interface,18,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['interface'],['interface']
Integrability,"/// The string to emit. Depending on the MTRF_* flags it may be a comment, a; /// value, a label name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:24,Depend,Depending,24,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['Depend'],['Depending']
Integrability,/// The style of wrapping parameters on the same line (bin-packed) or; /// on one line each.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:17,wrap,wrapping,17,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrapping']
Integrability,"/// The synchronization scope ID of this cmpxchg instruction. Not quite; /// enough room in SubClassData for everything, so synchronization scope ID; /// gets its own field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,synchroniz,synchronization,8,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['synchroniz'],['synchronization']
Integrability,"/// The synchronization scope ID of this fence instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,synchroniz,synchronization,8,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['synchroniz'],['synchronization']
Integrability,"/// The synchronization scope ID of this load instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,synchroniz,synchronization,8,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['synchroniz'],['synchronization']
Integrability,"/// The synchronization scope ID of this rmw instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,synchroniz,synchronization,8,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['synchroniz'],['synchronization']
Integrability,"/// The synchronization scope ID of this store instruction. Not quite enough; /// room in SubClassData for everything, so synchronization scope ID gets its; /// own field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:8,synchroniz,synchronization,8,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['synchroniz'],['synchronization']
Integrability,/// The target dependent kind of fixup item this is. The kind is used to; /// determine how the operand value should be encoded into the instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:15,depend,dependent,15,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,1,['depend'],['dependent']
Integrability,"/// The template argument is a non-type template argument that can't be; /// represented by the special-case Declaration, NullPtr, or Integral; /// forms. These values are only ever produced by constant evaluation,; /// so cannot be dependent.; /// TODO: merge Declaration, NullPtr and Integral into this?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:233,depend,dependent,233,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,1,['depend'],['dependent']
Integrability,"/// The template argument is an expression, and we've not resolved it to one; /// of the other forms yet, either because it's dependent or because we're; /// representing a non-canonical template argument (for instance, in a; /// TemplateSpecializationType).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:126,depend,dependent,126,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,1,['depend'],['dependent']
Integrability,/// The template model for the base class which wraps a concrete; /// implementation in a type erased interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:48,wrap,wraps,48,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,2,"['interface', 'wrap']","['interface', 'wraps']"
Integrability,"/// The template parameter to which a template argument; /// deduction failure refers.; ///; /// Depending on the result of template argument deduction, this; /// template parameter may have different meanings:; ///; /// TDK_Incomplete: this is the first template parameter whose; /// corresponding template argument was not deduced.; ///; /// TDK_IncompletePack: this is the expanded parameter pack for; /// which we deduced too few arguments.; ///; /// TDK_Inconsistent: this is the template parameter for which; /// two different template argument values were deduced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:97,Depend,Depending,97,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,1,['Depend'],['Depending']
Integrability,"/// The template specialization which this type represents.; /// For example, in; /// template <class T> class A { ... };; /// this is A<T>, whereas in; /// template <class X, class Y> class A<B<X,Y> > { ... };; /// this is A<B<X,Y> >.; ///; /// It is always unqualified, always a template specialization type,; /// and always dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:327,depend,dependent,327,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependent']
Integrability,/// The tool chain of the dependent action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:26,depend,dependent,26,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['dependent']
Integrability,"/// The transformed type if not dependent, otherwise the same as BaseType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:32,depend,dependent,32,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['dependent']
Integrability,"/// The type is a struct containing a field whose type is neither; /// PCK_Trivial nor PCK_VolatileTrivial.; /// Note that a C++ struct type does not necessarily match this; C++ copying; /// semantics are too complex to express here, in part because they depend; /// on the exact constructor or assignment operator that is chosen by; /// overload resolution to do the copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:255,depend,depend,255,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['depend'],['depend']
Integrability,"/// The type of a name-lookup filter, which can be provided to the; /// name-lookup routines to specify which declarations should be included in; /// the result set (when it returns true) and which declarations should be; /// filtered out (returns false).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:84,rout,routines,84,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['rout'],['routines']
Integrability,/// The type of the dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:20,depend,dependence,20,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,2,['depend'],['dependence']
Integrability,/// The typedef for the predefined \c Protocol class in Objective-C.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:38,Protocol,Protocol,38,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['Protocol'],['Protocol']
Integrability,/// The value of the type trait. Unspecified if dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:48,depend,dependent,48,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,2,['depend'],['dependent']
Integrability,"/// The value to put into the fixup location. The exact interpretation of the; /// expression is target dependent, usually it will be one of the operands to; /// an instruction or an assembler directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:104,depend,dependent,104,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,1,['depend'],['dependent']
Integrability,/// The values for the various substitution positions.; ///; /// This is used when the argument is not an std::string. The specific value; /// is mangled into an uint64_t and the interpretation depends on exactly; /// what sort of argument kind it is.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:194,depend,depends,194,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['depend'],['depends']
Integrability,/// The vector of memory access instructions. The indices are used as; /// instruction identifiers in the Dependence class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:106,Depend,Dependence,106,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['Depend'],['Dependence']
Integrability,/// The version of the SDK which was used during the compilation.; /// The option is used for two different purposes:; /// * on darwin the version is propagated to LLVM where it's used; /// to support SDK Version metadata (See D55673).; /// * CUDA compilation uses it to control parts of CUDA compilation; /// in clang that depend on specific version of the CUDA SDK.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h:324,depend,depend,324,interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,1,['depend'],['depend']
Integrability,"/// The version of the protocol class. Used to differentiate between ObjC1; /// and ObjC2 protocols. Objective-C 1 protocols can not contain optional; /// components and can not contain declared properties. We always emit; /// Objective-C 2 property structures, but we have to pretend that they're; /// Objective-C 1 property structures when targeting the GCC runtime or it; /// will abort.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:23,protocol,protocol,23,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,3,['protocol'],"['protocol', 'protocols']"
Integrability,/// The virtual file system interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:28,interface,interface,28,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,1,['interface'],['interface']
Integrability,/// The way to wrap binary operators.; /// \version 3.6,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:15,wrap,wrap,15,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['wrap'],['wrap']
Integrability,"/// The wrapped atomic value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx:8,wrap,wrapped,8,hist/histv7/test/atomics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx,1,['wrap'],['wrapped']
Integrability,"/// The wrapped inner sink, not owned by this class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleParallelWriter.cxx:8,wrap,wrapped,8,tree/ntuple/v7/src/RNTupleParallelWriter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleParallelWriter.cxx,1,['wrap'],['wrapped']
Integrability,"/// The wrapped map iterator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:8,wrap,wrapped,8,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['wrap'],['wrapped']
Integrability,/// The wrapper struct used inside the __block_literal struct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:8,wrap,wrapper,8,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['wrap'],['wrapper']
Integrability,/// The zero-based index of the result expression's generic association in; /// the generic selection's association list. Defined only if the; /// generic selection is not result-dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:179,depend,dependent,179,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependent']
Integrability,"/// There are 4 scenarios we can use the InlineAdvisor:; /// - Default - use manual heuristics.; ///; /// - Release mode, the expected mode for production, day to day deployments.; /// In this mode, when building the compiler, we also compile a pre-trained ML; /// model to native code, and link it as a static library. This mode has low; /// overhead and no additional dependencies for the compiler runtime.; ///; /// - Development mode, for training new models.; /// In this mode, we trade off runtime performance for flexibility. This mode; /// requires the TFLite library, and evaluates models dynamically. This mode; /// also permits generating training logs, for offline training.; ///; /// - Dynamically load an advisor via a plugin (PluginInlineAdvisorAnalysis)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h:370,depend,dependencies,370,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,1,['depend'],['dependencies']
Integrability,"/// There is no root node for the dependency graph. But the SCCIterator; /// requires a single entry point, so we maintain a fake(""synthetic"") root; /// node that depends on every node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:34,depend,dependency,34,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['depend'],"['dependency', 'depends']"
Integrability,/// These are the different kinds of scheduling dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:48,depend,dependencies,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['depend'],['dependencies']
Integrability,/// These values correspond to the CV_CFL_LANG enumeration in the Microsoft; /// Debug Interface Access SDK,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:87,Interface,Interface,87,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,1,['Interface'],['Interface']
Integrability,"/// Thin wrapper around ""int"" used to store reaching definitions,; /// using an encoding that makes it compatible with TinyPtrVector.; /// The 0th LSB is forced zero (and will be used for pointer union tagging),; /// The 1st LSB is forced one (to make sure the value is non-zero).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:9,wrap,wrapper,9,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,1,['wrap'],['wrapper']
Integrability,/// Thin wrapper around a block for SSA Updater interface. Necessary because; /// we need to track the PHI value(s) that we may have observed as necessary; /// in this block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:9,wrap,wrapper,9,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,/// Thin wrapper around a block predecessor iterator. Only difference from a; /// normal block iterator is that it dereferences to an LDVSSABlock.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:9,wrap,wrapper,9,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['wrap'],['wrapper']
Integrability,/// Thin wrapper around an integer -- designed to give more type safety to; /// spill location numbers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:9,wrap,wrapper,9,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['wrap'],['wrapper']
Integrability,/// This abstract interface provides operations for creating; /// containers for serialized ASTs (precompiled headers and clang; /// modules).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h:18,interface,interface,18,interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,1,['interface'],['interface']
Integrability,/// This abstract interface provides operations for unwrapping; /// containers for serialized ASTs (precompiled headers and clang; /// modules).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h:18,interface,interface,18,interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,1,['interface'],['interface']
Integrability,/// This analysis provides dependence information for the memory; /// accesses of a loop.; ///; /// It runs the analysis for a loop on demand. This can be initiated by; /// querying the loop access info via AM.getResult<LoopAccessAnalysis>.; /// getResult return a LoopAccessInfo object. See this class for the; /// specifics of what information is provided.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:27,depend,dependence,27,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,"/// This builder is only a wrapper around all the other builders, which selects the best builder; /// depending on the desired BVH quality and whether a multi-threaded build is desired.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/default_builder.h:27,wrap,wrapper,27,geom/geom/inc/bvh/v2/default_builder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/default_builder.h,2,"['depend', 'wrap']","['depending', 'wrapper']"
Integrability,"/// This builds up a Constant using the ConstantExpr interface. That way, we; /// will return Constants for objects which aren't represented by a; /// SCEVConstant, because SCEVConstant is restricted to ConstantInt.; /// Returns NULL if the SCEV isn't representable as a Constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:53,interface,interface,53,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['interface'],['interface']
Integrability,"/// This callback is used in conjunction with PointerMayBeCaptured. In; /// addition to the interface here, you'll need to provide your own getters; /// to see whether anything was captured.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CaptureTracking.h:92,interface,interface,92,interpreter/llvm-project/llvm/include/llvm/Analysis/CaptureTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CaptureTracking.h,1,['interface'],['interface']
Integrability,/// This callback is used to infer the types for Class variables. This info is; /// used later to validate messages that sent to classes. Class variables are; /// initialized with by invoking the 'class' method on a class.; /// This method is also used to infer the type information for the return; /// types.; // TODO: right now it only tracks generic types. Extend this to track every; // type in the DynamicTypeMap and diagnose type errors!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:107,message,messages,107,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['message'],['messages']
Integrability,/// This can be used as the value for a RegisterDependenciesFunction if there; /// are no dependants to register with.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:90,depend,dependants,90,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['depend'],['dependants']
Integrability,"/// This category's shape does not depend on others, and does not need recomputing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:35,depend,depend,35,roofit/roofitcore/inc/RooCategory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h,1,['depend'],['depend']
Integrability,"/// This class builds the dependence graph for the instructions in a loop,; /// and attempts to schedule the instructions using the SMS algorithm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:26,depend,dependence,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,1,['depend'],['dependence']
Integrability,"/// This class define an interface similar to the LTOCodeGenerator, but adapted; /// for ThinLTO processing.; /// The ThinLTOCodeGenerator is not intended to be reuse for multiple; /// compilation: the model is that the client adds modules to the generator and; /// ask to perform the ThinLTO optimizations / codegen, and finally destroys the; /// codegenerator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:25,interface,interface,25,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,1,['interface'],['interface']
Integrability,/// This class defines the interface to the ThinLTO backend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:27,interface,interface,27,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['interface'],['interface']
Integrability,"/// This class discovers DIEs dependencies: marks ""live"" DIEs, marks DIE; /// locations (whether DIE should be cloned as regular DIE or it should be put; /// into the artificial type unit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h:30,depend,dependencies,30,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,1,['depend'],['dependencies']
Integrability,"/// This class implements a resolution-based interface to LLVM's LTO; /// functionality. It supports regular LTO, parallel LTO code generation and; /// ThinLTO. You can use it from a linker in the following way:; /// - Set hooks and code generation options (see lto::Config struct defined in; /// Config.h), and use the lto::Config object to create an lto::LTO object.; /// - Create lto::InputFile objects using lto::InputFile::create(), then use; /// the symbols() function to enumerate its symbols and compute a resolution; /// for each symbol (see SymbolResolution below).; /// - After the linker has visited each input file (and each regular object; /// file) and computed a resolution for each symbol, take each lto::InputFile; /// and pass it and an array of symbol resolutions to the add() function.; /// - Call the getMaxTasks() function to get an upper bound on the number of; /// native object files that LTO may add to the link.; /// - Call the run() function. This function will use the supplied AddStream; /// and Cache functions to add up to getMaxTasks() native object files to; /// the link.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:45,interface,interface,45,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,1,['interface'],['interface']
Integrability,/// This class implements a stable ordering of constant; /// integers that does not depend on their address. This is important for; /// applications that sort ConstantInt's to ensure uniqueness.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:84,depend,depend,84,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['depend'],['depend']
Integrability,"/// This class is a wrapper over an AAResults, and it is intended to be used; /// only when there are no IR changes inbetween queries. BatchAAResults is; /// reusing the same `AAQueryInfo` to preserve the state across queries,; /// esentially making AA work in ""batch mode"". The internal state cannot be; /// cleared, so to go ""out-of-batch-mode"", the user must either use AAResults,; /// or create a new BatchAAResults.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:20,wrap,wrapper,20,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['wrap'],['wrapper']
Integrability,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:20,wrap,wrapper,20,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,1,['wrap'],['wrapper']
Integrability,"/// This class provides a portable interface to dynamic libraries which also; /// might be known as shared libraries, shared objects, dynamic shared; /// objects, or dynamic link libraries. Regardless of the terminology or the; /// operating system interface, this class provides a portable interface that; /// allows dynamic libraries to be loaded and searched for externally; /// defined symbols. This is typically used to provide ""plug-in"" support.; /// It also allows for symbols to be defined which don't live in any library,; /// but rather the main program itself, useful on Windows where the main; /// executable cannot be searched.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DynamicLibrary.h:35,interface,interface,35,interpreter/llvm-project/llvm/include/llvm/Support/DynamicLibrary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DynamicLibrary.h,3,['interface'],['interface']
Integrability,"/// This class provides a symbol table of name/value pairs. It is essentially; /// a std::map<std::string,Value*> but has a controlled interface provided by; /// LLVM as well as ensuring uniqueness of names.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueSymbolTable.h:135,interface,interface,135,interpreter/llvm-project/llvm/include/llvm/IR/ValueSymbolTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueSymbolTable.h,1,['interface'],['interface']
Integrability,"/// This class provides an interface for updating the loop pass manager based; /// on mutations to the loop nest.; ///; /// A reference to an instance of this class is passed as an argument to each; /// Loop pass, and Loop passes should use it to update LPM infrastructure if; /// they modify the loop nest structure.; ///; /// \c LPMUpdater comes with two modes: the loop mode and the loop-nest mode. In; /// loop mode, all the loops in the function will be pushed into the worklist; /// and when new loops are added to the pipeline, their subloops are also; /// inserted recursively. On the other hand, in loop-nest mode, only top-level; /// loops are contained in the worklist and the addition of new (top-level); /// loops will not trigger the addition of their subloops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:27,interface,interface,27,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,1,['interface'],['interface']
Integrability,/// This class provides an interface through which checkers can create; /// individual bug reports.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h:27,interface,interface,27,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporter.h,1,['interface'],['interface']
Integrability,/// This class provides an interface to register all the standard pass; /// instrumentations and manages their state (if any).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:27,interface,interface,27,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,1,['interface'],['interface']
Integrability,/// This class provides utilities for finding source registers of specific; /// bit ranges in an artifact. The routines can look through the source; /// registers if they're other artifacts to try to find a non-artifact source; /// of a value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:111,rout,routines,111,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,1,['rout'],['routines']
Integrability,"/// This class represents an assumption made on an AddRec expression. Given an; /// affine AddRec expression {a,+,b}, we assume that it has the nssw or nusw; /// flags (defined below) in the first X iterations of the loop, where X is a; /// SCEV expression returned by getPredicatedBackedgeTakenCount).; ///; /// Note that this does not imply that X is equal to the backedge taken; /// count. This means that if we have a nusw predicate for i32 {0,+,1} with a; /// predicated backedge taken count of X, we only guarantee that {0,+,1} has; /// nusw in the first X iterations. {0,+,1} may still wrap in the loop if we; /// have more than X iterations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:593,wrap,wrap,593,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['wrap'],['wrap']
Integrability,/// This class represents an entry in the slot index list held in the; /// SlotIndexes pass. It should not be used directly. See the; /// SlotIndex & SlotIndexes classes for the public interface to this; /// information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h:185,interface,interface,185,interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,1,['interface'],['interface']
Integrability,"/// This class represents the internal implementation of the RecordKeeper.; /// It contains all of the contextual static state of the Record classes. It is; /// kept out-of-line to simplify dependencies, and also make it easier for; /// internal classes to access the uniquer state of the keeper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:190,depend,dependencies,190,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['depend'],['dependencies']
Integrability,"/// This class stores info we want to provide to or retain within an alias; /// query. By default, the root query is stateless and starts with a freshly; /// constructed info object. Specific alias analyses can use this query info to; /// store per-query state that is important for recursive or nested queries to; /// avoid recomputing. To enable preserving this state across multiple queries; /// where safe (due to the IR not changing), use a `BatchAAResults` wrapper.; /// The information stored in an `AAQueryInfo` is currently limitted to the; /// caches used by BasicAA, but can further be extended to fit other AA needs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:463,wrap,wrapper,463,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['wrap'],['wrapper']
Integrability,/// This class works in conjunction with the post-RA scheduler to rename; /// registers to break register anti-dependencies (WAR hazards).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h:111,depend,dependencies,111,interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h,1,['depend'],['dependencies']
Integrability,"/// This class wraps a filename and another Error.; ///; /// In some cases, an error needs to live along a 'source' name, in order to; /// show more detailed information to the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['wrap'],['wraps']
Integrability,/// This class wraps a std::error_code in a Error.; ///; /// This is useful if you're writing an interface that returns a Error; /// (or Expected) and you want to call code that still returns; /// std::error_codes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,"['interface', 'wrap']","['interface', 'wraps']"
Integrability,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,7,"['Depend', 'message', 'wrap']","['Depending', 'message', 'wraps']"
Integrability,"/// This class wraps an output stream for a file. Most clients should just be; /// able to return an instance of this base class from the stream callback, but; /// if a client needs to perform some action after the stream is written to,; /// that can be done by deriving from this class and overriding the destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Caching.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/Support/Caching.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Caching.h,1,['wrap'],['wraps']
Integrability,"/// This class wraps the list of protocol qualifiers. For types that can; /// take ObjC protocol qualifers, they can subclass this class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:15,wrap,wraps,15,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,3,"['protocol', 'wrap']","['protocol', 'wraps']"
Integrability,/// This class wraps the llvm.memcpy intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['wrap'],['wraps']
Integrability,/// This class wraps the llvm.memcpy.inline intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['wrap'],['wraps']
Integrability,/// This class wraps the llvm.memcpy/memmove intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['wrap'],['wraps']
Integrability,/// This class wraps the llvm.memmove intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['wrap'],['wraps']
Integrability,/// This class wraps the llvm.memset and llvm.memset.inline intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['wrap'],['wraps']
Integrability,/// This class wraps the llvm.memset.inline intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:15,wrap,wraps,15,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['wrap'],['wraps']
Integrability,"/// This enumeration lists the possible predicates for CmpInst subclasses.; /// Values in the range 0-31 are reserved for FCmpInst, while values in the; /// range 32-64 are reserved for ICmpInst. This is necessary to ensure the; /// predicate values are not overlapping between the classes.; ///; /// Some passes (e.g. InstCombine) depend on the bit-wise characteristics of; /// FCMP_* values. Changing the bit patterns requires a potential change to; /// those passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:332,depend,depend,332,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['depend'],['depend']
Integrability,"/// This folds:; /// select (icmp eq (and X, C1)), TC, FC; /// iff C1 is a power 2 and the difference between TC and FC is a power-of-2.; /// To something like:; /// (shr (and (X, C1)), (log2(C1) - log2(TC-FC))) + FC; /// Or:; /// (shl (and (X, C1)), (log2(TC-FC) - log2(C1))) + FC; /// With some variations depending if FC is larger than TC, or the shift; /// isn't needed, or the bit widths don't match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:308,depend,depending,308,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['depend'],['depending']
Integrability,"/// This function attempts to replace V with a simpler value based on the; /// demanded bits. When this function is called, it is known that only the bits; /// set in DemandedMask of the result of V are ever used downstream.; /// Consequently, depending on the mask and V, it may be possible to replace V; /// with a constant or one of its operands. In such cases, this function does; /// the replacement and returns true. In all other cases, it returns false after; /// analyzing the expression and setting KnownOne and known to be one in the; /// expression. Known.Zero contains all the bits that are known to be zero in; /// the expression. These are provided to potentially allow the caller (which; /// might recursively be SimplifyDemandedBits itself) to simplify the; /// expression.; /// Known.One and Known.Zero always follow the invariant that:; /// Known.One & Known.Zero == 0.; /// That is, a bit can't be both 1 and 0. The bits in Known.One and Known.Zero; /// are accurate even for bits not in DemandedMask. Note; /// also that the bitwidth of V, DemandedMask, Known.Zero and Known.One must all; /// be the same.; ///; /// This returns null if it did not change anything and it permits no; /// simplification. This returns V itself if it did some simplification of V's; /// operands based on the information about what bits are demanded. This returns; /// some other non-null value if it found out that V is equal to another value; /// in the context where the specified bits are demanded, but not for all users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:244,depend,depending,244,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['depend'],['depending']
Integrability,"/// This function builds an error message into \p ErrMsg using the \p prefix; /// string and the Unix error number given by \p errnum. If errnum is -1, the; /// default then the value of errno is used.; /// Make an error message; ///; /// If the error number can be converted to a string, it will be; /// separated from prefix by "": "".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h:34,message,message,34,interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,2,['message'],['message']
Integrability,"/// This function calls abort(), and prints the optional message to stderr.; /// Use the llvm_unreachable macro (that adds location info), instead of; /// calling this function directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:57,message,message,57,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,1,['message'],['message']
Integrability,"/// This function can analyze one/two way branching only and should (mostly) be; /// called by target independent side.; /// First entry is always the opcode of the branching instruction, except when; /// the Cond vector is supposed to be empty, e.g., when analyzeBranch fails, a; /// BB with only unconditional jump. Subsequent entries depend upon the opcode,; /// e.g. Jump_c p will have; /// Cond[0] = Jump_c; /// Cond[1] = p; /// HW-loop ENDLOOP:; /// Cond[0] = ENDLOOP; /// Cond[1] = MBB; /// New value jump:; /// Cond[0] = Hexagon::CMPEQri_f_Jumpnv_t_V4 -- specific opcode; /// Cond[1] = R; /// Cond[2] = Imm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:337,depend,depend,337,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['depend'],['depend']
Integrability,/// This function checks if it is valid to move Candidate to the delay slot; /// and returns true if it isn't. It also updates memory and register; /// dependence information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp:152,depend,dependence,152,interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp,1,['depend'],['dependence']
Integrability,"/// This function determines the number of columns in the window; /// if standard error is connected to a ""tty"" or ""console""; /// window. If standard error is not connected to a tty or; /// console, or if the number of columns cannot be determined,; /// this routine returns zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:259,rout,routine,259,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h,1,['rout'],['routine']
Integrability,"/// This function determines the number of columns in the window; /// if standard output is connected to a ""tty"" or ""console""; /// window. If standard output is not connected to a tty or; /// console, or if the number of columns cannot be determined,; /// this routine returns zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:261,rout,routine,261,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h,1,['rout'],['routine']
Integrability,"/// This function generates code at the beginning and end of a function marked; /// with either `aarch64_pstate_za_new` or `aarch64_new_zt0`.; /// At the beginning of the function, the following code is generated:; /// - Commit lazy-save if active [Private-ZA Interface*]; /// - Enable PSTATE.ZA [Private-ZA Interface]; /// - Zero ZA [Has New ZA State]; /// - Zero ZT0 [Has New ZT0 State]; ///; /// * A function with new ZT0 state will not change ZA, so committing the; /// lazy-save is not strictly necessary. However, the lazy-save mechanism; /// may be active on entry to the function, with PSTATE.ZA set to 1. If; /// the new ZT0 function calls a function that does not share ZT0, we will; /// need to conditionally SMSTOP ZA before the call, setting PSTATE.ZA to 0.; /// For this reason, it's easier to always commit the lazy-save at the; /// beginning of the function regardless of whether it has ZA state.; ///; /// At the end of the function, PSTATE.ZA is disabled if the function has a; /// Private-ZA Interface. A function is considered to have a Private-ZA; /// interface if it does not share ZA or ZT0.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/SMEABIPass.cpp:260,Interface,Interface,260,interpreter/llvm-project/llvm/lib/Target/AArch64/SMEABIPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/SMEABIPass.cpp,4,"['Interface', 'interface']","['Interface', 'interface']"
Integrability,"/// This function inlines the called function into the basic; /// block of the caller. This returns false if it is not possible to inline; /// this call. The program is still in a well defined state if this occurs; /// though.; ///; /// Note that this only does one level of inlining. For example, if the; /// instruction 'call B' is inlined, and 'B' calls 'C', then the call to 'C' now; /// exists in the instruction stream. Similarly this will inline a recursive; /// function by one level.; ///; /// Note that while this routine is allowed to cleanup and optimize the; /// *inlined* code to minimize the actual inserted code, it must not delete; /// code in the caller as users of this routine may have pointers to; /// instructions in the caller that need to remain stable.; ///; /// If ForwardVarArgsTo is passed, inlining a function with varargs is allowed; /// and all varargs at the callsite will be passed to any calls to; /// ForwardVarArgsTo. The caller of InlineFunction has to make sure any varargs; /// are only used by ForwardVarArgsTo.; ///; /// The callee's function attributes are merged into the callers' if; /// MergeAttributes is set to true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:524,rout,routine,524,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,2,['rout'],['routine']
Integrability,"/// This function is a main interface to the LLVM Assembly Parser. It parses; /// an ASCII file that (presumably) contains LLVM Assembly code for a module; /// summary. It returns a ModuleSummaryIndex with the corresponding features.; /// Note that this does not verify that the generated Index is valid, so you; /// should run the verifier after parsing the file to check that it is okay.; /// Parse LLVM Assembly Index from a file; /// \param Filename The name of the file to parse; /// \param Err Error result info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:28,interface,interface,28,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['interface'],['interface']
Integrability,"/// This function is a main interface to the LLVM Assembly Parser. It parses; /// an ASCII file that (presumably) contains LLVM Assembly code, including; /// a module summary. It returns a Module (intermediate representation) and; /// a ModuleSummaryIndex with the corresponding features. Note that this does; /// not verify that the generated Module or Index are valid, so you should; /// run the verifier after parsing the file to check that they are okay.; /// Parse LLVM Assembly from a file; /// \param Filename The name of the file to parse; /// \param Err Error result info.; /// \param Context Context in which to allocate globals info.; /// \param Slots The optional slot mapping that will be initialized during; /// parsing.; /// \param DataLayoutCallback Override datalayout in the llvm assembly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:28,interface,interface,28,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['interface'],['interface']
Integrability,"/// This function is a main interface to the LLVM Assembly Parser. It parses; /// an ASCII file that (presumably) contains LLVM Assembly code. It returns a; /// Module (intermediate representation) with the corresponding features. Note; /// that this does not verify that the generated Module is valid, so you should; /// run the verifier after parsing the file to check that it is okay.; /// Parse LLVM Assembly from a file; /// \param Filename The name of the file to parse; /// \param Err Error result info.; /// \param Context Context in which to allocate globals info.; /// \param Slots The optional slot mapping that will be initialized during; /// parsing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:28,interface,interface,28,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['interface'],['interface']
Integrability,/// This function is another interface to the MIR serialization format parser.; ///; /// It returns a MIR parser that works with the given memory buffer and that can; /// parse the embedded LLVM IR module and initialize the machine functions by; /// parsing the machine function's state.; ///; /// \param Contents - The MemoryBuffer containing the machine level IR.; /// \param Context - Context which will be used for the parsed LLVM IR module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:29,interface,interface,29,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,1,['interface'],['interface']
Integrability,"/// This function is responsible for generating diagnostic pieces that are; /// *not* provided by bug report visitors.; /// These diagnostics may differ depending on the consumer's settings,; /// and are therefore constructed separately for each consumer.; ///; /// There are two path diagnostics generation modes: with adding edges (used; /// for plists) and without (used for HTML and text). When edges are added,; /// the path is modified to insert artificially generated edges.; /// Otherwise, more detailed diagnostics is emitted for block edges,; /// explaining the transitions in words.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:153,depend,depending,153,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['depend'],['depending']
Integrability,/// This function is the bridge between argument position and the call base; /// context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:25,bridg,bridge,25,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['bridg'],['bridge']
Integrability,/// This function is the low-level interface to the LLVM Assembly Parser.; /// This is kept as an independent function instead of being inlined into; /// parseAssembly for the convenience of interactive users that want to add; /// recently parsed bits to an existing module.; ///; /// \param F The MemoryBuffer containing assembly; /// \param M The module to add data to.; /// \param Index The index to add data to.; /// \param Err Error result info.; /// \param Slots The optional slot mapping that will be initialized during; /// parsing.; /// \return true on error.; /// \param DataLayoutCallback Override datalayout in the llvm assembly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:35,interface,interface,35,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['interface'],['interface']
Integrability,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:30,interface,interface,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,1,['interface'],['interface']
Integrability,"/// This function just prints the help message, exactly the same way as if the; /// -help or -help-hidden option had been given on the command line.; ///; /// \param Hidden if true will print hidden options; /// \param Categorized if true print options in categories",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:39,message,message,39,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['message'],['message']
Integrability,/// This function opens a file for writing and then writes a binary ELF stub to; /// the file.; ///; /// @param FilePath File path for writing the ELF binary.; /// @param Stub Source InterFace Stub to generate a binary ELF stub from.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp:183,InterFace,InterFace,183,interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,1,['InterFace'],['InterFace']
Integrability,/// This function returns true if CallSym is a long double emulation routine.; ///; /// FIXME: Changing the ABI based on the callee name is unsound. The lib func; /// address could be captured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsCCState.h:69,rout,routine,69,interpreter/llvm-project/llvm/lib/Target/Mips/MipsCCState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsCCState.h,1,['rout'],['routine']
Integrability,"/// This function should be called by the pass, iff they do not:; ///; /// 1. Add or remove basic blocks from the function; /// 2. Modify terminator instructions in any way.; ///; /// This function annotates the AnalysisUsage info object to say that analyses; /// that only depend on the CFG are preserved by this pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:274,depend,depend,274,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,1,['depend'],['depend']
Integrability,"/// This function takes an error, and appends a string of text to the end of; /// that error. Since ""appending"" to an Error isn't supported behavior of an; /// Error, this function technically creates a new error with the combined; /// message and consumes the old error.; ///; /// @param Err Source error.; /// @param After Text to append at the end of Err's error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp:236,message,message,236,interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,2,['message'],['message']
Integrability,/// This handles parsing pragmas that take a macro name and optional message,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp:69,message,message,69,interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,1,['message'],['message']
Integrability,"/// This helper fills TH1Ds for which no axes were specified by buffering the fill values to pick good axes limits.; ///; /// TH1Ds have an automatic mechanism to pick good limits based on the first N entries they were filled with, but; /// that does not work in multi-thread event loops as it might yield histograms with incompatible binning in each; /// thread, making it impossible to merge the per-thread results.; /// Instead, this helper delays the decision on the axes limits until all threads have done processing, synchronizing; /// the decision on the limits as part of the merge operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:523,synchroniz,synchronizing,523,tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,1,['synchroniz'],['synchronizing']
Integrability,/// This holds information associated with Objective-C interfaces/classes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:55,interface,interfaces,55,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,1,['interface'],['interfaces']
Integrability,/// This holds information associated with Objective-C protocols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:55,protocol,protocols,55,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,1,['protocol'],['protocols']
Integrability,"/// This holds the working set of currently open ranges. For fast; /// access, this is done both as a set of VarLocIDs, and a map of; /// DebugVariable to recent VarLocID. Note that a DBG_VALUE ends all; /// previous open ranges for the same variable. In addition, we keep; /// two different maps (Vars/EntryValuesBackupVars), so erase/insert; /// methods act differently depending on whether a VarLoc is primary; /// location or backup one. In the case the VarLoc is backup location; /// we will erase/insert from the EntryValuesBackupVars map, otherwise; /// we perform the operation on the Vars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:372,depend,depending,372,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['depend'],['depending']
Integrability,"/// This initialization routine creates type info globals and; /// adds external function declarations to module.; /// @param numTypeInfos number of linear type info associated type info types; /// to create as GlobalVariable instances, starting with the value 1.; /// @param module code for module instance; /// @param builder builder instance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:24,rout,routine,24,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['rout'],['routine']
Integrability,/// This interface is used by reader of CoverageMapping test; /// format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:9,interface,interface,9,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['interface'],['interface']
Integrability,/// This interface provides a way to observe the actions of the; /// preprocessor as it does its thing.; ///; /// Clients can define their hooks here to implement preprocessor level tools.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:9,interface,interface,9,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['interface'],['interface']
Integrability,"/// This interface returns a list of dependent libraries in the form:; /// lib libA.so libB.so libC.so. The first library is the library we are; /// searching dependencies for.; /// Note: In order to speed up the search, we display the dependencies of the; /// libraries which are not yet loaded. For instance, if libB.so was already; /// loaded the list would contain: lib libA.so libC.so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:9,interface,interface,9,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,4,"['depend', 'interface']","['dependencies', 'dependent', 'interface']"
Integrability,"/// This intrinisc is one of the two SHA512 message scheduling instructions.; /// The intrinsic performs an intermediate calculation for the next four; /// SHA512 message qwords. The calculated results are stored in \a dst.; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256i _mm256_sha512msg1_epi64(__m256i __A, __m128i __B); /// \endcode; ///; /// This intrinsic corresponds to the \c VSHA512MSG1 instruction.; ///; /// \param __A; /// A 256-bit vector of [4 x long long].; /// \param __B; /// A 128-bit vector of [2 x long long].; /// \returns; /// A 256-bit vector of [4 x long long].; ///; /// \code{.operation}; /// DEFINE ROR64(qword, n) {; /// 	count := n % 64; /// 	dest := (qword >> count) | (qword << (64 - count)); /// 	RETURN dest; /// }; /// DEFINE SHR64(qword, n) {; /// 	RETURN qword >> n; /// }; /// DEFINE s0(qword):; /// 	RETURN ROR64(qword,1) ^ ROR64(qword, 8) ^ SHR64(qword, 7); /// }; /// W[4] := __B.qword[0]; /// W[3] := __A.qword[3]; /// W[2] := __A.qword[2]; /// W[1] := __A.qword[1]; /// W[0] := __A.qword[0]; /// dst.qword[3] := W[3] + s0(W[4]); /// dst.qword[2] := W[2] + s0(W[3]); /// dst.qword[1] := W[1] + s0(W[2]); /// dst.qword[0] := W[0] + s0(W[1]); /// dst[MAX:256] := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sha512intrin.h:44,message,message,44,interpreter/llvm-project/clang/lib/Headers/sha512intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sha512intrin.h,2,['message'],['message']
Integrability,"/// This intrinisc is one of the two SHA512 message scheduling instructions.; /// The intrinsic performs the final calculation for the next four SHA512; /// message qwords. The calculated results are stored in \a dst.; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256i _mm256_sha512msg2_epi64(__m256i __A, __m256i __B); /// \endcode; ///; /// This intrinsic corresponds to the \c VSHA512MSG2 instruction.; ///; /// \param __A; /// A 256-bit vector of [4 x long long].; /// \param __B; /// A 256-bit vector of [4 x long long].; /// \returns; /// A 256-bit vector of [4 x long long].; ///; /// \code{.operation}; /// DEFINE ROR64(qword, n) {; /// 	count := n % 64; /// 	dest := (qword >> count) | (qword << (64 - count)); /// 	RETURN dest; /// }; /// DEFINE SHR64(qword, n) {; /// 	RETURN qword >> n; /// }; /// DEFINE s1(qword) {; /// 	RETURN ROR64(qword,19) ^ ROR64(qword, 61) ^ SHR64(qword, 6); /// }; /// W[14] := __B.qword[2]; /// W[15] := __B.qword[3]; /// W[16] := __A.qword[0] + s1(W[14]); /// W[17] := __A.qword[1] + s1(W[15]); /// W[18] := __A.qword[2] + s1(W[16]); /// W[19] := __A.qword[3] + s1(W[17]); /// dst.qword[3] := W[19]; /// dst.qword[2] := W[18]; /// dst.qword[1] := W[17]; /// dst.qword[0] := W[16]; /// dst[MAX:256] := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sha512intrin.h:44,message,message,44,interpreter/llvm-project/clang/lib/Headers/sha512intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sha512intrin.h,2,['message'],['message']
Integrability,"/// This intrinisc is one of the two SM3 message scheduling intrinsics. The; /// intrinsic performs an initial calculation for the next four SM3 message; /// words. The calculated results are stored in \a dst.; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_sm3msg1_epi32(__m128i __A, __m128i __B, __m128i __C); /// \endcode; ///; /// This intrinsic corresponds to the \c VSM3MSG1 instruction.; ///; /// \param __A; /// A 128-bit vector of [4 x int].; /// \param __B; /// A 128-bit vector of [4 x int].; /// \param __C; /// A 128-bit vector of [4 x int].; /// \returns; /// A 128-bit vector of [4 x int].; ///; /// \code{.operation}; /// DEFINE ROL32(dword, n) {; /// 	count := n % 32; /// 	dest := (dword << count) | (dword >> (32 - count)); /// 	RETURN dest; /// }; /// DEFINE P1(x) {; /// 	RETURN x ^ ROL32(x, 15) ^ ROL32(x, 23); /// }; /// W[0] := __C.dword[0]; /// W[1] := __C.dword[1]; /// W[2] := __C.dword[2]; /// W[3] := __C.dword[3]; /// W[7] := __A.dword[0]; /// W[8] := __A.dword[1]; /// W[9] := __A.dword[2]; /// W[10] := __A.dword[3]; /// W[13] := __B.dword[0]; /// W[14] := __B.dword[1]; /// W[15] := __B.dword[2]; /// TMP0 := W[7] ^ W[0] ^ ROL32(W[13], 15); /// TMP1 := W[8] ^ W[1] ^ ROL32(W[14], 15); /// TMP2 := W[9] ^ W[2] ^ ROL32(W[15], 15); /// TMP3 := W[10] ^ W[3]; /// dst.dword[0] := P1(TMP0); /// dst.dword[1] := P1(TMP1); /// dst.dword[2] := P1(TMP2); /// dst.dword[3] := P1(TMP3); /// dst[MAX:128] := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm3intrin.h:41,message,message,41,interpreter/llvm-project/clang/lib/Headers/sm3intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm3intrin.h,2,['message'],['message']
Integrability,"/// This intrinisc is one of the two SM3 message scheduling intrinsics. The; /// intrinsic performs the final calculation for the next four SM3 message; /// words. The calculated results are stored in \a dst.; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_sm3msg2_epi32(__m128i __A, __m128i __B, __m128i __C); /// \endcode; ///; /// This intrinsic corresponds to the \c VSM3MSG2 instruction.; ///; /// \param __A; /// A 128-bit vector of [4 x int].; /// \param __B; /// A 128-bit vector of [4 x int].; /// \param __C; /// A 128-bit vector of [4 x int].; /// \returns; /// A 128-bit vector of [4 x int].; ///; /// \code{.operation}; /// DEFINE ROL32(dword, n) {; /// 	count := n % 32; /// 	dest := (dword << count) | (dword >> (32-count)); /// 	RETURN dest; /// }; /// WTMP[0] := __A.dword[0]; /// WTMP[1] := __A.dword[1]; /// WTMP[2] := __A.dword[2]; /// WTMP[3] := __A.dword[3]; /// W[3] := __B.dword[0]; /// W[4] := __B.dword[1]; /// W[5] := __B.dword[2]; /// W[6] := __B.dword[3]; /// W[10] := __C.dword[0]; /// W[11] := __C.dword[1]; /// W[12] := __C.dword[2]; /// W[13] := __C.dword[3]; /// W[16] := ROL32(W[3], 7) ^ W[10] ^ WTMP[0]; /// W[17] := ROL32(W[4], 7) ^ W[11] ^ WTMP[1]; /// W[18] := ROL32(W[5], 7) ^ W[12] ^ WTMP[2]; /// W[19] := ROL32(W[6], 7) ^ W[13] ^ WTMP[3]; /// W[19] := W[19] ^ ROL32(W[16], 6) ^ ROL32(W[16], 15) ^ ROL32(W[16], 30); /// dst.dword[0] := W[16]; /// dst.dword[1] := W[17]; /// dst.dword[2] := W[18]; /// dst.dword[3] := W[19]; /// dst[MAX:128] := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm3intrin.h:41,message,message,41,interpreter/llvm-project/clang/lib/Headers/sm3intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm3intrin.h,2,['message'],['message']
Integrability,"/// This intrinisc performs two rounds of SHA512 operation using initial SHA512; /// state (C,D,G,H) from \a __A, an initial SHA512 state (A,B,E,F) from; /// \a __A, and a pre-computed sum of the next two round message qwords and; /// the corresponding round constants from \a __C (only the two lower qwords; /// of the third operand). The updated SHA512 state (A,B,E,F) is written to; /// \a __A, and \a __A can be used as the updated state (C,D,G,H) in later; /// rounds.; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256i _mm256_sha512rnds2_epi64(__m256i __A, __m256i __B, __m128i __C); /// \endcode; ///; /// This intrinsic corresponds to the \c VSHA512RNDS2 instruction.; ///; /// \param __A; /// A 256-bit vector of [4 x long long].; /// \param __B; /// A 256-bit vector of [4 x long long].; /// \param __C; /// A 128-bit vector of [2 x long long].; /// \returns; /// A 256-bit vector of [4 x long long].; ///; /// \code{.operation}; /// DEFINE ROR64(qword, n) {; /// 	count := n % 64; /// 	dest := (qword >> count) | (qword << (64 - count)); /// 	RETURN dest; /// }; /// DEFINE SHR64(qword, n) {; /// 	RETURN qword >> n; /// }; /// DEFINE cap_sigma0(qword) {; /// 	RETURN ROR64(qword,28) ^ ROR64(qword, 34) ^ ROR64(qword, 39); /// }; /// DEFINE cap_sigma1(qword) {; /// 	RETURN ROR64(qword,14) ^ ROR64(qword, 18) ^ ROR64(qword, 41); /// }; /// DEFINE MAJ(a,b,c) {; /// 	RETURN (a & b) ^ (a & c) ^ (b & c); /// }; /// DEFINE CH(e,f,g) {; /// 	RETURN (e & f) ^ (g & ~e); /// }; /// A[0] := __B.qword[3]; /// B[0] := __B.qword[2]; /// C[0] := __C.qword[3]; /// D[0] := __C.qword[2]; /// E[0] := __B.qword[1]; /// F[0] := __B.qword[0]; /// G[0] := __C.qword[1]; /// H[0] := __C.qword[0]; /// WK[0]:= __A.qword[0]; /// WK[1]:= __A.qword[1]; /// FOR i := 0 to 1:; /// 	A[i+1] := CH(E[i], F[i], G[i]) +; /// 	cap_sigma1(E[i]) + WK[i] + H[i] +; /// 	MAJ(A[i], B[i], C[i]) +; /// 	cap_sigma0(A[i]); /// 	B[i+1] := A[i]; /// 	C[i+1] := B[i]; /// 	D[i+1] := C[i]; /// 	E[i+1] := CH(E[i], F[i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sha512intrin.h:211,message,message,211,interpreter/llvm-project/clang/lib/Headers/sha512intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sha512intrin.h,1,['message'],['message']
Integrability,/// This is a C++ 20 module partition interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:38,interface,interface,38,interpreter/llvm-project/clang/include/clang/Basic/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h,1,['interface'],['interface']
Integrability,/// This is a C++20 module interface unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:27,interface,interface,27,interpreter/llvm-project/clang/include/clang/Basic/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h,1,['interface'],['interface']
Integrability,"/// This is a class that wraps a range of IRInstructionData from one point to; /// another in the vector of IRInstructionData, which is a region of the; /// program. It is also responsible for defining the structure within this; /// region of instructions.; ///; /// The structure of a region is defined through a value numbering system; /// assigned to each unique value in a region at the creation of the; /// IRSimilarityCandidate.; ///; /// For example, for each Instruction we add a mapping for each new; /// value seen in that Instruction.; /// IR: Mapping Added:; /// %add1 = add i32 %a, c1 %add1 -> 3, %a -> 1, c1 -> 2; /// %add2 = add i32 %a, %1 %add2 -> 4; /// %add3 = add i32 c2, c1 %add3 -> 6, c2 -> 5; ///; /// We can compare IRSimilarityCandidates against one another.; /// The \ref isSimilar function compares each IRInstructionData against one; /// another and if we have the same sequences of IRInstructionData that would; /// create the same hash, we have similar IRSimilarityCandidates.; ///; /// We can also compare the structure of IRSimilarityCandidates. If we can; /// create a mapping of registers in the region contained by one; /// IRSimilarityCandidate to the region contained by different; /// IRSimilarityCandidate, they can be considered structurally similar.; ///; /// IRSimilarityCandidate1: IRSimilarityCandidate2:; /// %add1 = add i32 %a, %b %add1 = add i32 %d, %e; /// %add2 = add i32 %a, %c %add2 = add i32 %d, %f; /// %add3 = add i32 c1, c2 %add3 = add i32 c3, c4; ///; /// Can have the following mapping from candidate to candidate of:; /// %a -> %d, %b -> %e, %c -> %f, c1 -> c3, c2 -> c4; /// and can be considered similar.; ///; /// IRSimilarityCandidate1: IRSimilarityCandidate2:; /// %add1 = add i32 %a, %b %add1 = add i32 %d, c4; /// %add2 = add i32 %a, %c %add2 = add i32 %d, %f; /// %add3 = add i32 c1, c2 %add3 = add i32 c3, c4; ///; /// We cannot create the same mapping since the use of c4 is not used in the; /// same way as %b or c2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:25,wrap,wraps,25,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wraps']
Integrability,/// This is a convenience wrapper function for the above two functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:26,wrap,wrapper,26,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['wrap'],['wrapper']
Integrability,"/// This is a dependence on the specified instruction which clobbers the; /// desired value. The pointer member of the MemDepResult pair holds the; /// instruction that clobbers the memory. For example, this occurs when we; /// see a may-aliased store to the memory location we care about.; ///; /// There are several cases that may be interesting here:; /// 1. Loads are clobbered by may-alias stores.; /// 2. Loads are considered clobbered by partially-aliased loads. The; /// client may choose to analyze deeper into these cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:14,depend,dependence,14,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependence']
Integrability,"/// This is a dependence on the specified instruction which defines or; /// produces the desired memory location. The pointer member of the; /// MemDepResult pair holds the instruction that defines the memory.; ///; /// Cases of interest:; /// 1. This could be a load or store for dependence queries on; /// load/store. The value loaded or stored is the produced value.; /// Note that the pointer operand may be different than that of the; /// queried pointer due to must aliases and phi translation. Note; /// that the def may not be the same type as the query, the pointers; /// may just be must aliases.; /// 2. For loads and stores, this could be an allocation instruction. In; /// this case, the load is loading an undef value or a store is the; /// first store to (that part of) the allocation.; /// 3. Dependence queries on calls return Def only when they are readonly; /// calls or memory use intrinsics with identical callees and no; /// intervening clobbers. No validation is done that the operands to; /// the calls are the same.; /// 4. For loads and stores, this could be a select instruction that; /// defines pointer to this memory location. In this case, users can; /// find non-clobbered Defs for both select values that are reaching; // the desired memory location (there is still a guarantee that there; // are no clobbers between analyzed memory location and select).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:14,depend,dependence,14,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,3,"['Depend', 'depend']","['Dependence', 'dependence']"
Integrability,/// This is a nicer interface when you don't have a list of Ids to exclude.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp:20,interface,interface,20,interpreter/llvm-project/llvm/lib/Option/ArgList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp,1,['interface'],['interface']
Integrability,/// This is a pair of an optional message and source location used for pragmas; /// that annotate macros like pragma clang restrict_expansion and pragma clang; /// deprecated. This pair stores the optional message and the location of the; /// annotation pragma for use producing diagnostics and notes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:34,message,message,34,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,2,['message'],['message']
Integrability,"/// This is a public interface to the hardware address sanitizer pass for; /// instrumenting code to check for various memory errors at runtime, similar to; /// AddressSanitizer but based on partial hardware assistance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h:21,interface,interface,21,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,1,['interface'],['interface']
Integrability,/// This is a raw interface for bypassing addChildLoop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:18,interface,interface,18,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,1,['interface'],['interface']
Integrability,/// This is a result from a NonLocal dependence query.; ///; /// For each BasicBlock (the BB entry) it keeps a MemDepResult and the; /// (potentially phi translated) address that was live in the block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:37,depend,dependence,37,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependence']
Integrability,/// This is a simple wrapper around an MDNode which provides a higher-level; /// interface by hiding the details of how alias analysis information is encoded; /// in its operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:21,wrap,wrapper,21,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"/// This is a test harness which runs test by executing generated; /// function with a type info type to throw. Harness wraps the execution; /// of generated function in a C++ try catch clause.; /// @param engine execution engine to use for executing generated function.; /// This demo program expects this to be a JIT instance for demo; /// purposes.; /// @param function generated test function to run; /// @param typeToThrow type info type of generated exception to throw, or; /// indicator to cause foreign exception to be thrown.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:120,wrap,wraps,120,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['wrap'],['wraps']
Integrability,/// This is a wrapper around getCallPreservedMask().; /// Return true if the register is preserved after the call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:14,wrap,wrapper,14,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['wrap'],['wrapper']
Integrability,/// This is a wrapper around getRegForValue that also takes care of; /// truncating or sign-extending the given getelementptr index value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:14,wrap,wrapper,14,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['wrap'],['wrapper']
Integrability,"/// This is a wrapper around getUnderlyingObject which also knows how to; /// look through objc_retain and objc_autorelease calls, which we know to return; /// their argument verbatim.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h:14,wrap,wrapper,14,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h,1,['wrap'],['wrapper']
Integrability,/// This is a wrapper around getUnderlyingObjects and adds support for basic; /// ptrtoint+arithmetic+inttoptr sequences.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:14,wrap,wrapper,14,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['wrap'],['wrapper']
Integrability,/// This is a wrapper around getUnderlyingObjects and adds support for basic; /// ptrtoint+arithmetic+inttoptr sequences.; /// It returns false if unidentified object is found in getUnderlyingObjects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:14,wrap,wrapper,14,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['wrap'],['wrapper']
Integrability,/// This is a wrapper around stripAndAccumulateConstantOffsets with the; /// in-bounds requirement set to false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:14,wrap,wrapper,14,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['wrap'],['wrapper']
Integrability,"/// This is an alternative analysis pass to; /// BlockFrequencyInfoWrapperPass. The difference is that with this pass the; /// block frequencies are not computed when the analysis pass is executed but; /// rather when the BFI result is explicitly requested by the analysis client.; ///; /// There are some additional requirements for any client pass that wants to use; /// the analysis:; ///; /// 1. The pass needs to initialize dependent passes with:; ///; /// INITIALIZE_PASS_DEPENDENCY(LazyBFIPass); ///; /// 2. Similarly, getAnalysisUsage should call:; ///; /// LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(AU); ///; /// 3. The computed BFI should be requested with; /// getAnalysis<LazyBlockFrequencyInfoPass>().getBFI() before either LoopInfo; /// or BPI could be invalidated for example by changing the CFG.; ///; /// Note that it is expected that we wouldn't need this functionality for the; /// new PM since with the new PM, analyses are executed on demand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h:429,depend,dependent,429,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h,1,['depend'],['dependent']
Integrability,"/// This is an alternative analysis pass to; /// BranchProbabilityInfoWrapperPass. The difference is that with this pass the; /// branch probabilities are not computed when the analysis pass is executed but; /// rather when the BPI results is explicitly requested by the analysis client.; ///; /// There are some additional requirements for any client pass that wants to use; /// the analysis:; ///; /// 1. The pass needs to initialize dependent passes with:; ///; /// INITIALIZE_PASS_DEPENDENCY(LazyBPIPass); ///; /// 2. Similarly, getAnalysisUsage should call:; ///; /// LazyBranchProbabilityInfoPass::getLazyBPIAnalysisUsage(AU); ///; /// 3. The computed BPI should be requested with; /// getAnalysis<LazyBranchProbabilityInfoPass>().getBPI() before LoopInfo; /// could be invalidated for example by changing the CFG.; ///; /// Note that it is expected that we wouldn't need this functionality for the; /// new PM since with the new PM, analyses are executed on demand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h:436,depend,dependent,436,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h,1,['depend'],['dependent']
Integrability,"/// This is an approximation of reciprocal throughput of a math/logic op.; /// A higher cost indicates less expected throughput.; /// From Agner Fog's guides, reciprocal throughput is ""the average number of; /// clock cycles per instruction when the instructions are not part of a; /// limiting dependency chain.""; /// Therefore, costs should be scaled to account for multiple execution units; /// on the target that can process this type of instruction. For example, if; /// there are 5 scalar integer units and 2 vector integer units that can; /// calculate an 'add' in a single cycle, this model should indicate that the; /// cost of the vector add instruction is 2.5 times the cost of the scalar; /// add instruction.; /// \p Args is an optional argument which holds the instruction operands; /// values so the TTI can analyze those values searching for special; /// cases or optimizations based on those values.; /// \p CxtI is the optional original context instruction, if one exists, to; /// provide even more information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:295,depend,dependency,295,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['depend'],['dependency']
Integrability,/// This is called before the very first declaration in the translation unit; /// is parsed. Note that the ASTContext may have already injected some; /// declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:135,inject,injected,135,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['inject'],['injected']
Integrability,/// This is ctor variant allows a pass to build an optimization remark; /// from an existing remark.; ///; /// This is useful when a transformation pass (e.g LV) wants to emit a remark; /// (\p Orig) generated by one of its analyses (e.g. LAA) as its own analysis; /// remark. The string \p Prepend will be emitted before the original; /// message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:340,message,message,340,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,2,['message'],['message']
Integrability,"/// This is definitely an Objective-C message send expression, rather than; /// a lambda-introducer, attribute-specifier, or array designator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:38,message,message,38,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['message'],['message']
Integrability,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. Note that; /// this class does not copy this message, so this reference must be valid for; /// the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:498,message,message,498,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,2,['message'],['message']
Integrability,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// floating-point non-commutativity. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:498,message,message,498,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,3,['message'],['message']
Integrability,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-analysis=, then; /// the diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic will; /// include the source code location. \p Msg is the message to show. The; /// front-end will append its own message related to options that address; /// pointer aliasing legality. Note that this class does not copy this; /// message, so this reference must be valid for the whole life time of the; /// diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:498,message,message,498,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,3,['message'],['message']
Integrability,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass-missed=, then the; /// diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic; /// will include the source code location. \p Msg is the message to show.; /// Note that this class does not copy this message, so this reference; /// must be valid for the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:496,message,message,496,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,2,['message'],['message']
Integrability,"/// This is deprecated now and only used by the function API below.; /// \p PassName is the name of the pass emitting this diagnostic. If; /// this name matches the regular expression given in -Rpass=, then the; /// diagnostic will be emitted. \p Fn is the function where the diagnostic; /// is being emitted. \p Loc is the location information to use in the; /// diagnostic. If line table information is available, the diagnostic; /// will include the source code location. \p Msg is the message to show.; /// Note that this class does not copy this message, so this reference; /// must be valid for the whole life time of the diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:489,message,message,489,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,2,['message'],['message']
Integrability,/// This is just an interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h:20,interface,interface,20,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkSerializer.h,2,['interface'],['interface']
Integrability,"/// This is only relevant if we are wrapping a CallInst. If we are requiring; /// that the function calls have matching names as well as types, and the; /// call is not an indirect call, this will hold the name of the function. If; /// it is an indirect string, it will be the empty string. However, if this; /// requirement is not in place it will be the empty string regardless of the; /// function call type. The value held here is used to create the hash of the; /// instruction, and check to make sure two instructions are close to one; /// another.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:36,wrap,wrapping,36,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wrapping']
Integrability,/// This is only relevant if we are wrapping a CmpInst where we needed to; /// change the predicate of a compare instruction from a greater than form; /// to a less than form. It is std::nullopt otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:36,wrap,wrapping,36,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wrapping']
Integrability,/// This is part of the update interface to inform the cache; /// that a block has been deleted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:31,interface,interface,31,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,2,['interface'],['interface']
Integrability,/// This is part of the update interface to remove information related to this; /// value from the cache.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:31,interface,interface,31,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['interface'],['interface']
Integrability,"/// This is the AA result object for the basic, local, and stateless alias; /// analysis. It implements the AA query interface in an entirely stateless; /// manner. As one consequence, it is never invalidated due to IR changes.; /// While it does retain some storage, that is used as an optimization and not; /// to preserve information from query to query. However it does retain handles; /// to various other analyses and must be recomputed when those analyses are.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h:117,interface,interface,117,interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h,1,['interface'],['interface']
Integrability,"/// This is the Makefile compatible dep format. This will include all of the; /// deps necessary for an implicit modules build, but won't include any; /// intermodule dependency information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h:167,depend,dependency,167,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,1,['depend'],['dependency']
Integrability,/// This is the base abstract class for diagnostic reporting in; /// the backend.; /// The print method must be overloaded by the subclasses to print a; /// user-friendly message in the client of the backend (let us call it a; /// frontend).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:171,message,message,171,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['message'],['message']
Integrability,"/// This is the fast version of querying register pressure that does not; /// directly depend on current liveness.; ///; /// @param Delta captures information needed for heuristics.; ///; /// @param CriticalPSets Are the pressure sets that are known to exceed some; /// limit within the region, not necessarily at the current position.; ///; /// @param MaxPressureLimit Is the max pressure within the region, not; /// necessarily at the current position.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp:87,depend,depend,87,interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp,1,['depend'],['depend']
Integrability,"/// This is the generic walker interface for walkers of MemorySSA.; /// Walkers are used to be able to further disambiguate the def-use chains; /// MemorySSA gives you, or otherwise produce better info than MemorySSA gives; /// you.; /// In particular, while the def-use chains provide basic information, and are; /// guaranteed to give, for example, the nearest may-aliasing MemoryDef for a; /// MemoryUse as AliasAnalysis considers it, a user mant want better or other; /// information. In particular, they may want to use SCEV info to further; /// disambiguate memory accesses, or they may want the nearest dominating; /// may-aliasing MemoryDef for a call or a store. This API enables a; /// standardized interface to getting and using that info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:31,interface,interface,31,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,2,['interface'],['interface']
Integrability,"/// This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/inc/ROOT/RVec.hxx:63,depend,depend,63,math/vecops/inc/ROOT/RVec.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/inc/ROOT/RVec.hxx,1,['depend'],['depend']
Integrability,/// This is the part of SmallVectorTemplateBase which does not depend on whether; /// the type T is a POD. The extra dummy template argument is used by ArrayRef; /// to avoid unnecessarily requiring T to be complete.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:63,depend,depend,63,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,1,['depend'],['depend']
Integrability,"/// This is the pointer to an array of tokens that the macro is; /// defined to, with arguments expanded for function-like macros. If this is; /// a token stream, these are the tokens we are returning. This points into; /// the macro definition we are lexing from, a cache buffer that is owned by; /// the preprocessor, or some other buffer that we may or may not own; /// (depending on OwnsTokens).; /// Note that if it points into Preprocessor's cache buffer, the Preprocessor; /// may update the pointer as needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:374,depend,depending,374,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,1,['depend'],['depending']
Integrability,/// This is the query interface to determine the lattice value for the; /// specified Value* at the context instruction (if specified) or at the; /// start of the block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:22,interface,interface,22,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['interface'],['interface']
Integrability,"/// This is the query interface to determine the lattice value for the; /// specified Value* at the specified instruction using only information; /// from assumes/guards and range metadata. Unlike getValueInBlock(), no; /// recursive query is performed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:22,interface,interface,22,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['interface'],['interface']
Integrability,/// This is the query interface to determine the lattice; /// value for the specified Value* that is true on the specified edge.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:22,interface,interface,22,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['interface'],['interface']
Integrability,/// This is the update interface to inform the cache that an edge from; /// PredBB to OldSucc has been threaded to be from PredBB to NewSucc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:23,interface,interface,23,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['interface'],['interface']
Integrability,/// This is true iff the protocol is tagged with the; /// `objc_non_runtime_protocol` attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,protocol,protocol,25,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['protocol'],['protocol']
Integrability,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:120,Depend,Depending,120,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,"['Depend', 'rout']","['Depending', 'routine']"
Integrability,/// This is used to interface between code that wants to; /// operate on terminator instructions directly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CFG.h:20,interface,interface,20,interpreter/llvm-project/llvm/include/llvm/IR/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CFG.h,1,['interface'],['interface']
Integrability,"/// This is used to represent a portion of an LLVM function in a low-level; /// Data Dependence DAG representation suitable for instruction selection.; /// This DAG is constructed as the first step of instruction selection in order; /// to allow implementation of machine specific optimizations; /// and code simplifications.; ///; /// The representation used by the SelectionDAG is a target-independent; /// representation, which has some similarities to the GCC RTL representation,; /// but is significantly more simple, powerful, and is a graph form instead of a; /// linear form.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:85,Depend,Dependence,85,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Depend'],['Dependence']
Integrability,/// This keeps track of which passes implements the interfaces that are; /// required by the current pass (to implement getAnalysis()).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:52,interface,interfaces,52,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,1,['interface'],['interfaces']
Integrability,/// This main parsing routine tries to open the main binary and if; /// successful iterates over the STAB entries. The real parsing is; /// done in handleStabSymbolTableEntry.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/MachODebugMapParser.cpp:22,rout,routine,22,interpreter/llvm-project/llvm/tools/dsymutil/MachODebugMapParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/MachODebugMapParser.cpp,1,['rout'],['routine']
Integrability,/// This marker indicates that the query dependency is unknown.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:41,depend,dependency,41,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependency']
Integrability,"/// This marker indicates that the query has no dependency in the specified; /// block.; ///; /// To find out more, the client should query other predecessor blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:48,depend,dependency,48,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependency']
Integrability,/// This marker indicates that the query has no dependency in the specified; /// function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:48,depend,dependency,48,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependency']
Integrability,/// This marker indicates that the query has no known dependency in the; /// specified block.; ///; /// More detailed state info is encoded in the upper part of the pair (i.e.; /// the Instruction*),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:54,depend,dependency,54,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['depend'],['dependency']
Integrability,/// This method clones the current Program and deletes the specified; /// instruction from the cloned module. It then runs a series of cleanup; /// passes (ADCE and SimplifyCFG) to eliminate any code which depends on the; /// value. The modified module is then returned.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:206,depend,depends,206,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['depend'],['depends']
Integrability,"/// This method determines which of the registers reported by; /// TargetRegisterInfo::getCalleeSavedRegs() should actually get saved.; /// The default implementation checks populates the \p SavedRegs bitset with; /// all registers which are modified in the function, targets may override; /// this function to save additional registers.; /// This method also sets up the register scavenger ensuring there is a free; /// register or a frameindex available.; /// This method should not be called by any passes outside of PEI, because; /// it may change state passed in by \p MF and \p RS. The preferred; /// interface outside PEI is getCalleeSaves.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:607,interface,interface,607,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,1,['interface'],['interface']
Integrability,"/// This method is a wrapper of fastEmit_ri. It first tries to emit an; /// instruction with an immediate operand using fastEmit_ri.; /// If that fails, it materializes the immediate into a register and try; /// fastEmit_rr instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:21,wrap,wrapper,21,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,1,['wrap'],['wrapper']
Integrability,"/// This method is a wrapper of fastEmit_ri.; ///; /// It first tries to emit an instruction with an immediate operand using; /// fastEmit_ri. If that fails, it materializes the immediate into a register; /// and try fastEmit_rr instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:21,wrap,wrapper,21,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['wrap'],['wrapper']
Integrability,"/// This method is a wrapper to simplify add emission.; ///; /// First try to emit an add with an immediate operand using emitAddSub_ri. If; /// that fails, then try to materialize the immediate into a register and use; /// emitAddSub_rr instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:21,wrap,wrapper,21,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['wrap'],['wrapper']
Integrability,/// This method is called by the ExecuteStage at the end of each cycle to; /// identify bottlenecks caused by data dependencies. Vector RegDeps is; /// populated by instructions that were not issued because of unsolved; /// register dependencies. Vector MemDeps is populated by instructions that; /// were not issued because of unsolved memory dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:115,depend,dependencies,115,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,3,['depend'],['dependencies']
Integrability,/// This method is used to determine if an instruction; /// should be allowed to be dispatched. The return value is; /// how many cycles until the instruction can be dispatched.; /// This method is called after MCA has already checked for; /// register and hardware dependencies so this method should only; /// implement custom behaviour and dependencies that are not picked up; /// by MCA naturally.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCA/AMDGPUCustomBehaviour.h:266,depend,dependencies,266,interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCA/AMDGPUCustomBehaviour.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCA/AMDGPUCustomBehaviour.h,2,['depend'],['dependencies']
Integrability,/// This method provides fast access to all the subexpressions of; /// a CallExpr without going through the slower virtual child_iterator; /// interface. This provides efficient reverse iteration of the; /// subexpressions. This is currently used for CFG construction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:143,interface,interface,143,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['interface'],['interface']
Integrability,"/// This method returns the address of the specified function. As such it is; /// only useful for resolving library symbols, not code generated symbols.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.; ///; /// This function is deprecated for memory managers to be used with; /// MCJIT or RuntimeDyld. Use getSymbolAddress instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:310,message,message,310,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,1,['message'],['message']
Integrability,"/// This method returns the address of the specified function.; /// Our implementation will attempt to find functions in other; /// modules associated with the MCJITHelper to cross link functions; /// from one generated module to another.; ///; /// If \p AbortOnFailure is false and no function with the given name is; /// found, this function returns a null pointer. Otherwise, it prints a; /// message to stderr and aborts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:396,message,message,396,interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp,4,['message'],['message']
Integrability,"/// This method returns the address of the specified symbol if it exists; /// within the logical dynamic library represented by this JITSymbolResolver.; /// Unlike findSymbol, queries through this interface should return addresses; /// for hidden symbols.; ///; /// This is of particular importance for the Orc JIT APIs, which support lazy; /// compilation by breaking up modules: Each of those broken out modules; /// must be able to resolve hidden symbols provided by the others. Clients; /// writing memory managers for MCJIT can usually ignore this method.; ///; /// This method will be queried by RuntimeDyld when checking for previous; /// definitions of common symbols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:197,interface,interface,197,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,1,['interface'],['interface']
Integrability,"/// This method will do fixpoint iteration until fixpoint or the; /// maximum iteration count is reached.; ///; /// If the maximum iteration count is reached, This method will; /// indicate pessimistic fixpoint on attributes that transitively depend; /// on attributes that were scheduled for an update.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:243,depend,depend,243,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['depend'],['depend']
Integrability,"/// This might return std::nullopt even if isArray() returns true,; /// since there might not be an array size expression.; /// If the result is not std::nullopt, it will never wrap a nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:177,wrap,wrap,177,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,2,['wrap'],['wrap']
Integrability,/// This mode is used to compute the dependencies by running the preprocessor; /// over the source files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h:37,depend,dependencies,37,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,1,['depend'],['dependencies']
Integrability,/// This mode is used to compute the dependencies by running the preprocessor; /// with special kind of lexing after scanning header and source files to get; /// the minimum necessary preprocessor directives for evaluating includes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h:37,depend,dependencies,37,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,1,['depend'],['dependencies']
Integrability,"/// This option is used for writing test cases. Instead of crashing the program; /// when verification fails, report a message to the console (for FileCheck; /// usage) and continue execution as if nothing happened.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:119,message,message,119,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,1,['message'],['message']
Integrability,/// This outputs the dependency graph for standard c++ modules in P1689R5; /// format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h:21,depend,dependency,21,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,1,['depend'],['dependency']
Integrability,/// This outputs the full clang module dependency graph suitable for use for; /// explicitly building modules.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h:39,depend,dependency,39,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,1,['depend'],['dependency']
Integrability,/// This pass provides access to the codegen interfaces that are needed; /// for IR-level transformations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:45,interface,interfaces,45,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['interface'],['interfaces']
Integrability,"/// This performs customized parsing of pass name with parameters.; ///; /// We do not need parametrization of passes in textual pipeline very often,; /// yet on a rare occasion ability to specify parameters right there can be; /// useful.; ///; /// \p Name - parameterized specification of a pass from a textual pipeline; /// is a string in a form of :; /// PassName '<' parameter-list '>'; ///; /// Parameter list is being parsed by the parser callable argument, \p Parser,; /// It takes a string-ref of parameters and returns either StringError or a; /// parameter list in a form of a custom parameters type, all wrapped into; /// Expected<> template class.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:616,wrap,wrapped,616,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,1,['wrap'],['wrapped']
Integrability,"/// This provides the utilities for hashing an Instruction to an unsigned; /// integer. Two IRInstructionDatas produce the same hash value when their; /// underlying Instructions perform the same operation (even if they don't have; /// the same input operands.); /// As a more concrete example, consider the following:; ///; /// \code; /// %add1 = add i32 %a, %b; /// %add2 = add i32 %c, %d; /// %add3 = add i64 %e, %f; /// \endcode; ///; // Then the IRInstructionData wrappers for these Instructions may be hashed like; /// so:; ///; /// \code; /// ; These two adds have the same types and operand types, so they hash to the; /// ; same number.; /// %add1 = add i32 %a, %b ; Hash: 1; /// %add2 = add i32 %c, %d ; Hash: 1; /// ; This add produces an i64. This differentiates it from %add1 and %add2. So,; /// ; it hashes to a different number.; /// %add3 = add i64 %e, %f; Hash: 2; /// \endcode; ///; ///; /// This hashing scheme will be used to represent the program as a very long; /// string. This string can then be placed in a data structure which can be used; /// for similarity queries.; ///; /// TODO: Handle types of Instructions which can be equal even with different; /// operands. (E.g. comparisons with swapped predicates.); /// TODO: Handle CallInsts, which are only checked for function type; /// by \ref isSameOperationAs.; /// TODO: Handle GetElementPtrInsts, as some of the operands have to be the; /// exact same, and some do not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:469,wrap,wrappers,469,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['wrap'],['wrappers']
Integrability,"/// This represents '#pragma omp depobj' directive.; ///; /// \code; /// #pragma omp depobj(a) depend(in:x,y); /// \endcode; /// In this example directive '#pragma omp depobj' initializes a depobj object; /// 'a' with dependence type 'in' and a list with 'x' and 'y' locators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:95,depend,depend,95,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['depend'],"['depend', 'dependence']"
Integrability,"/// This represents '#pragma omp interop' directive.; ///; /// \code; /// #pragma omp interop init(target:obj) device(x) depend(inout:y) nowait; /// \endcode; /// In this example directive '#pragma omp interop' has; /// clauses 'init', 'device', 'depend' and 'nowait'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:121,depend,depend,121,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['depend'],['depend']
Integrability,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,message,message,21,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['message'],['message']
Integrability,"/// This represents 'update' clause in the '#pragma omp atomic'; /// directive.; ///; /// \code; /// #pragma omp atomic update; /// \endcode; /// In this example directive '#pragma omp atomic' has 'update' clause.; /// Also, this class represents 'update' clause in '#pragma omp depobj'; /// directive.; ///; /// \code; /// #pragma omp depobj(a) update(in); /// \endcode; /// In this example directive '#pragma omp depobj' has 'update' clause with 'in'; /// dependence kind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:458,depend,dependence,458,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependence']
Integrability,"/// This represents implicit clause 'depend' for the '#pragma omp task'; /// directive.; ///; /// \code; /// #pragma omp task depend(in:a,b); /// \endcode; /// In this example directive '#pragma omp task' with clause 'depend' with the; /// variables 'a' and 'b' with dependency 'in'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:37,depend,depend,37,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['depend'],"['depend', 'dependency']"
Integrability,"/// This represents the 'doacross' clause for the '#pragma omp ordered'; /// directive.; ///; /// \code; /// #pragma omp ordered doacross(sink: i-1, j-1); /// \endcode; /// In this example directive '#pragma omp ordered' with clause 'doacross' with; /// a dependence-type 'sink' and loop-iteration vector expressions i-1 and j-1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:256,depend,dependence-type,256,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['depend'],['dependence-type']
Integrability,/// This represents the common interface of the individual transaction.; /// Each class implements the logic for doing one specific modification on; /// the IR via the TypePromotionTransaction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:31,interface,interface,31,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['interface'],['interface']
Integrability,"/// This returns a reference to a raw_ostream for standard error.; /// Use it like: errs() << ""foo"" << ""bar"";; /// By default, the stream is tied to stdout to ensure stdout is flushed before; /// stderr is written, to ensure the error messages are written in their; /// expected place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:235,message,messages,235,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,1,['message'],['messages']
Integrability,"/// This routine collects list of properties to be implemented in the class.; /// This includes, class's and its conforming protocols' properties.; /// Note, the superclass's properties are not included in the list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:9,rout,routine,9,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,"['protocol', 'rout']","['protocols', 'routine']"
Integrability,/// This routine creates OpenRanges.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:9,rout,routine,9,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['rout'],['routine']
Integrability,"/// This routine declares and returns address of:; /// void objc_copyCppObjectAtomic(; /// void *dest, const void *src,; /// void (*copyHelper) (void *dest, const void *source));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:9,rout,routine,9,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['rout'],['routine']
Integrability,/// This routine is called when a leading '__extension__' is seen and; /// consumed. This is necessary because the token gets consumed in the; /// process of disambiguating between an expression and a declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:9,rout,routine,9,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['rout'],['routine']
Integrability,"/// This routine is called when the '@' is seen and consumed.; /// Current token is an Identifier and is not a 'try'. This; /// routine is necessary to disambiguate \@try-statement from,; /// for example, \@encode-expression.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:9,rout,routine,9,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,2,['rout'],['routine']
Integrability,/// This routine joins the analysis results of all incoming edges in @MBB by; /// inserting a new DBG_VALUE instruction at the start of the @MBB - if the same; /// source variable in all the predecessors of @MBB reside in the same location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:9,rout,routine,9,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['rout'],['routine']
Integrability,"/// This routine notifies the Scheduler that a new cycle just started.; ///; /// It notifies the underlying ResourceManager that a new cycle just started.; /// Vector `Freed` is populated with resourceRef related to resources that; /// have changed in state, and that are now available to new instructions.; /// Instructions executed are added to vector Executed, while vector Ready is; /// populated with instructions that have become ready in this new cycle.; /// Vector Pending is popluated by instructions that have transitioned through; /// the pending stat during this cycle. The Pending and Ready sets may not be; /// disjoint. An instruction is allowed to transition from the WAIT state to; /// the READY state (going through the PENDING state) within a single cycle.; /// That means, instructions may appear in both the Pending and Ready set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:9,rout,routine,9,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,1,['rout'],['routine']
Integrability,"/// This routine records the entry values of function parameters. The values; /// could be used as backup values. If we loose the track of some unmodified; /// parameters, the backup values will be used as a primary locations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:9,rout,routine,9,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['rout'],['routine']
Integrability,"/// This routine returns 'true' if a user declared setter method was; /// found in the class, its protocols, its super classes or categories.; /// It also returns 'true' if one of its categories has declared a 'readwrite'; /// property. This is because, user must provide a setter method for the; /// category's 'readwrite' property.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp:9,rout,routine,9,interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,2,"['protocol', 'rout']","['protocols', 'routine']"
Integrability,"/// This routine scans the loop to find a branch or switch which occurs before; /// any side effects occur. These can potentially be unswitched without; /// duplicating the loop. If a branch or switch is successfully unswitched the; /// scanning continues to see if subsequent branches or switches have become; /// trivial. Once all trivial candidates have been unswitched, this routine; /// returns.; ///; /// The return value indicates whether anything was unswitched (and therefore; /// changed).; ///; /// If `SE` is not null, it will be updated based on the potential loop SCEVs; /// invalidated by this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:9,rout,routine,9,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,2,['rout'],['routine']
Integrability,"/// This routine uses the target specific ParseInstruction function to; /// parse an instruction into Operands, and then call the target specific; /// MatchAndEmit function to match and emit the instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:9,rout,routine,9,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,1,['rout'],['routine']
Integrability,"/// This struct pack the shape and tile data together for user. We suggest; /// initializing the struct as early as possible, because compiler depends; /// on the shape information to do configure. The constant value is preferred; /// for optimization by compiler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h:143,depend,depends,143,interpreter/llvm-project/clang/lib/Headers/amxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h,1,['depend'],['depends']
Integrability,/// This subclass uses memory dependence information to determine whether a; /// memory instruction can be moved to a delay slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp:30,depend,dependence,30,interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp,1,['depend'],['dependence']
Integrability,"/// This test covers a potential problem with the custom normalization ranges; /// of PDFs: the value of a RooProdPdf should not depend on the normalization; /// ranges of its clients. TODO: this is still a problem! It needs to be fixed,; /// and then the test can be enabled and this note should be removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:129,depend,depend,129,roofit/roofitcore/test/testRooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx,1,['depend'],['depend']
Integrability,"/// This test shows how push-pull is unsuited for load balancing; messages are just sent to the first available pull; /// socket without any dynamic load balancing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:66,message,messages,66,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,1,['message'],['messages']
Integrability,"/// This type includes all parts of RVariation that do not depend on the callable signature.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RVariationBase.hxx:59,depend,depend,59,tree/dataframe/inc/ROOT/RDF/RVariationBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RVariationBase.hxx,1,['depend'],['depend']
Integrability,"/// This variant can be used to generate ORE on demand (without the; /// analysis pass).; ///; /// Note that this ctor has a very different cost depending on whether; /// F->getContext().getDiagnosticsHotnessRequested() is on or not. If it's off; /// the operation is free.; ///; /// Whereas if DiagnosticsHotnessRequested is on, it is fairly expensive; /// operation since BFI and all its required analyses are computed. This is; /// for example useful for CGSCC passes that can't use function analyses; /// passes in the old PM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h:145,depend,depending,145,interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h,1,['depend'],['depending']
Integrability,"/// This wrapper is used to ensure that only StringRefs originating from the; /// CheckerRegistry are used as check names. We want to make sure all checker; /// name strings have a lifetime that keeps them alive at least until the path; /// diagnostics have been processed, since they are expected to be constexpr; /// string literals (most likely generated by TblGen).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:9,wrap,wrapper,9,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,1,['wrap'],['wrapper']
Integrability,"/// To ensure a pointer offset fits in an integer of size IndexSize; /// (in bits) when that size is smaller than the maximum index size. This is; /// an issue, for example, in particular for 32b pointers with negative indices; /// that rely on two's complement wrap-arounds for precise alias information; /// where the maximum index size is 64b.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:262,wrap,wrap-arounds,262,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['wrap'],['wrap-arounds']
Integrability,"/// To ensure that all protocols are seen by the runtime, we add a category on; /// a class defined in the runtime, declaring no methods, but adopting the; /// protocols. This is a horribly ugly hack, but it allows us to collect all; /// of the protocols without changing the ABI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:23,protocol,protocols,23,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,3,['protocol'],['protocols']
Integrability,"/// To mitigate LVI, every instruction that performs a load can be followed by; /// an LFENCE instruction to squash any potential mis-speculation. There are; /// some instructions that require additional considerations, and may requre; /// manual mitigation. For more details, see:; /// https://software.intel.com/security-software-guidance/insights/deep-dive-load-value-injection; ///; /// Returns `true` if a mitigation was applied or warning was emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:371,inject,injection,371,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['inject'],['injection']
Integrability,"/// To use KnownBitsInfo analysis in a pass,; /// KnownBitsInfo &Info = getAnalysis<GISelKnownBitsInfoAnalysis>().get(MF);; /// Add to observer if the Info is caching.; /// WrapperObserver.addObserver(Info);; /// Eventually add other features such as caching/ser/deserializing; /// to MIR etc. Those implementations can derive from GISelKnownBits; /// and override computeKnownBitsImpl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:173,Wrap,WrapperObserver,173,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,1,['Wrap'],['WrapperObserver']
Integrability,/// Token lexed as part of dependency directive scanning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h:27,depend,dependency,27,interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/DependencyDirectivesScanner.h,1,['depend'],['dependency']
Integrability,"/// Top-level lowering for x86 vector shuffles.; ///; /// This handles decomposition, canonicalization, and lowering of all x86; /// vector shuffles. Most of the specific lowering strategies are encapsulated; /// above in helper routines. The canonicalization attempts to widen shuffles; /// to involve fewer lanes of wider elements, consolidate symmetric patterns; /// s.t. only one of the two inputs needs to be tested, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:229,rout,routines,229,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routines']
Integrability,"/// Trace the predicate state through each of the blocks in the function,; /// hardening everything necessary along the way.; ///; /// We call this routine once the initial predicate state has been established; /// for each basic block in the function in the SSA updater. This routine traces; /// it through the instructions within each basic block, and for non-returning; /// blocks informs the SSA updater about the final state that lives out of the; /// block. Along the way, it hardens any vulnerable instruction using the; /// currently valid predicate state. We have to do these two things together; /// because the SSA updater only works across blocks. Within a block, we track; /// the current predicate state directly and update it as it changes.; ///; /// This operates in two passes over each block. First, we analyze the loads in; /// the block to determine which strategy will be used to harden them: hardening; /// the address or hardening the loaded value when loaded into a register; /// amenable to hardening. We have to process these first because the two; /// strategies may interact -- later hardening may change what strategy we wish; /// to use. We also will analyze data dependencies between loads and avoid; /// hardening those loads that are data dependent on a load with a hardened; /// address. We also skip hardening loads already behind an LFENCE as that is; /// sufficient to harden them against misspeculation.; ///; /// Second, we actively trace the predicate state through the block, applying; /// the hardening steps we determined necessary in the first pass as we go.; ///; /// These two passes are applied to each basic block. We operate one block at a; /// time to simplify reasoning about reachability and sequencing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:148,rout,routine,148,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,4,"['depend', 'rout']","['dependencies', 'dependent', 'routine']"
Integrability,/// Track the status of the c++20 module decl.; ///; /// module-declaration:; /// 'export'[opt] 'module' module-name module-partition[opt]; /// attribute-specifier-seq[opt] ';'; ///; /// module-name:; /// module-name-qualifier[opt] identifier; ///; /// module-partition:; /// ':' module-name-qualifier[opt] identifier; ///; /// module-name-qualifier:; /// identifier '.'; /// module-name-qualifier identifier '.'; ///; /// Transition state:; ///; /// NotAModuleDecl --- export ---> FoundExport; /// NotAModuleDecl --- module ---> ImplementationCandidate; /// FoundExport --- module ---> InterfaceCandidate; /// ImplementationCandidate --- Identifier ---> ImplementationCandidate; /// ImplementationCandidate --- period ---> ImplementationCandidate; /// ImplementationCandidate --- colon ---> ImplementationCandidate; /// InterfaceCandidate --- Identifier ---> InterfaceCandidate; /// InterfaceCandidate --- period ---> InterfaceCandidate; /// InterfaceCandidate --- colon ---> InterfaceCandidate; /// ImplementationCandidate --- Semi ---> NamedModuleImplementation; /// NamedModuleInterface --- Semi ---> NamedModuleInterface; /// NamedModuleImplementation --- Anything ---> NamedModuleImplementation; /// NamedModuleInterface --- Anything ---> NamedModuleInterface; ///; /// FIXME: We haven't handle attribute-specifier-seq here. It may not be bad; /// soon since we don't support any module attributes yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:587,Interface,InterfaceCandidate,587,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,7,['Interface'],['InterfaceCandidate']
Integrability,"/// TrackDefUses - Tracking what registers are being defined and used by; /// instructions in the IT block. This also tracks ""dependencies"", i.e. uses; /// in the IT block that are defined before the IT instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2ITBlockPass.cpp:126,depend,dependencies,126,interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2ITBlockPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2ITBlockPass.cpp,1,['depend'],['dependencies']
Integrability,"/// Tracker for '<' tokens that might have been intended to be treated as an; /// angle bracket instead of a less-than comparison.; ///; /// This happens when the user intends to form a template-id, but typoes the; /// template-name or forgets a 'template' keyword for a dependent template; /// name.; ///; /// We track these locations from the point where we see a '<' with a; /// name-like expression on its left until we see a '>' or '>>' that might; /// match it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:271,depend,dependent,271,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['depend'],['dependent']
Integrability,/// Tracks register operand latency in cycles.; ///; /// A read may be dependent on more than one write. This occurs when some; /// writes only partially update the register associated to this read.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:71,depend,dependent,71,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,1,['depend'],['dependent']
Integrability,"/// Tracks responsibility for materialization, and mediates interactions between; /// MaterializationUnits and JDs.; ///; /// An instance of this class is passed to MaterializationUnits when their; /// materialize method is called. It allows MaterializationUnits to resolve and; /// emit symbols, or abandon materialization by notifying any unmaterialized; /// symbols of an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:51,mediat,mediates,51,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['mediat'],['mediates']
Integrability,"/// Tracks the expressions that are a control dependency of the node that was; /// supplied to the constructor.; /// For example:; ///; /// cond = 1;; /// if (cond); /// 10 / 0;; ///; /// An error is emitted at line 3. This visitor realizes that the branch; /// on line 2 is a control dependency of line 3, and tracks it's condition via; /// trackExpressionValue().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:46,depend,dependency,46,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,2,['depend'],['dependency']
Integrability,/// Tracks uses of a register definition (e.g. register write).; ///; /// Each implicit/explicit register write is associated with an instance of; /// this class. A WriteState object tracks the dependent users of a; /// register write. It also tracks how many cycles are left before the write; /// back stage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:194,depend,dependent,194,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,1,['depend'],['dependent']
Integrability,/// Tracks whether a ODR hash has been computed for this interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:57,interface,interface,57,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// Tracks whether a ODR hash has been computed for this protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:57,protocol,protocol,57,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['protocol'],['protocol']
Integrability,"/// Transform the given attribute.; ///; /// By default, this routine transforms a statement by delegating to the; /// appropriate TransformXXXAttr function to transform a specific kind; /// of attribute. Subclasses may override this function to transform; /// attributed statements/types using some other mechanism.; ///; /// \returns the transformed attribute",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:62,rout,routine,62,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transform the given expression.; ///; /// By default, this routine transforms an expression by delegating to the; /// appropriate TransformXXXExpr function to build a new expression.; /// Subclasses may override this function to transform expressions using some; /// other mechanism.; ///; /// \returns the transformed expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:63,rout,routine,63,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transform the given initializer.; ///; /// By default, this routine transforms an initializer by stripping off the; /// semantic nodes added by initialization, then passing the result to; /// TransformExpr or TransformExprs.; ///; /// \returns the transformed initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:64,rout,routine,64,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transform the given list of expressions.; ///; /// This routine transforms a list of expressions by invoking; /// \c TransformExpr() for each subexpression. However, it also provides; /// support for variadic templates by expanding any pack expansions (if the; /// derived class permits such expansion) along the way. When pack expansions; /// are present, the number of outputs may not equal the number of inputs.; ///; /// \param Inputs The set of expressions to be transformed.; ///; /// \param NumInputs The number of expressions in \c Inputs.; ///; /// \param IsCall If \c true, then this transform is being performed on; /// function-call arguments, and any arguments that should be dropped, will; /// be.; ///; /// \param Outputs The transformed input expressions will be added to this; /// vector.; ///; /// \param ArgChanged If non-NULL, will be set \c true if any argument changed; /// due to transformation.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:60,rout,routine,60,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transform the given set of template arguments.; ///; /// By default, this operation transforms all of the template arguments; /// in the input set using \c TransformTemplateArgument(), and appends; /// the transformed arguments to the output list.; ///; /// Note that this overload of \c TransformTemplateArguments() is merely; /// a convenience function. Subclasses that wish to override this behavior; /// should override the iterator-based member template version.; ///; /// \param Inputs The set of template arguments to be transformed.; ///; /// \param NumInputs The number of template arguments in \p Inputs.; ///; /// \param Outputs The set of transformed template arguments output by this; /// routine.; ///; /// Returns true if an error occurred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:706,rout,routine,706,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transform the given set of template arguments.; ///; /// By default, this operation transforms all of the template arguments; /// in the input set using \c TransformTemplateArgument(), and appends; /// the transformed arguments to the output list.; ///; /// \param First An iterator to the first template argument.; ///; /// \param Last An iterator one step past the last template argument.; ///; /// \param Outputs The set of transformed template arguments output by this; /// routine.; ///; /// Returns true if an error occurred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:482,rout,routine,482,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transform the given statement.; ///; /// By default, this routine transforms a statement by delegating to the; /// appropriate TransformOMPXXXClause function to transform a specific kind; /// of clause. Subclasses may override this function to transform statements; /// using some other mechanism.; ///; /// \returns the transformed OpenMP clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:62,rout,routine,62,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transform the given statement.; ///; /// By default, this routine transforms a statement by delegating to the; /// appropriate TransformXXXStmt function to transform a specific kind of; /// statement or the TransformExpr() function to transform an expression.; /// Subclasses may override this function to transform statements using some; /// other mechanism.; ///; /// \returns the transformed statement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:62,rout,routine,62,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transforms the given type into another type.; ///; /// By default, this routine transforms a type by creating a; /// TypeSourceInfo for it and delegating to the appropriate; /// function. This is expensive, but we don't mind, because; /// this method is deprecated anyway; all users should be; /// switched to storing TypeSourceInfos.; ///; /// \returns the transformed type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:76,rout,routine,76,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transforms the given type-with-location into a new; /// type-with-location.; ///; /// By default, this routine transforms a type by delegating to the; /// appropriate TransformXXXType to build a new type. Subclasses; /// may override this function (to take over all type; /// transformations) or some set of the TransformXXXType functions; /// to alter the transformation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:107,rout,routine,107,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// Transitional API for extracting constants from Metadata.; ///; /// This namespace contains transitional functions for metadata that points to; /// \a Constants.; ///; /// In prehistory -- when metadata was a subclass of \a Value -- \a MDNode; /// operands could refer to any \a Value. There's was a lot of code like this:; ///; /// \code; /// MDNode *N = ...;; /// auto *CI = dyn_cast<ConstantInt>(N->getOperand(2));; /// \endcode; ///; /// Now that \a Value and \a Metadata are in separate hierarchies, maintaining; /// the semantics for \a isa(), \a cast(), \a dyn_cast() (etc.) requires three; /// steps: cast in the \a Metadata hierarchy, extraction of the \a Value, and; /// cast in the \a Value hierarchy. Besides creating boiler-plate, this; /// requires subtle control flow changes.; ///; /// The end-goal is to create a new type of metadata, called (e.g.) \a MDInt,; /// so that metadata can refer to numbers without traversing a bridge to the \a; /// Value hierarchy. In this final state, the code above would look like this:; ///; /// \code; /// MDNode *N = ...;; /// auto *MI = dyn_cast<MDInt>(N->getOperand(2));; /// \endcode; ///; /// The API in this namespace supports the transition. \a MDInt doesn't exist; /// yet, and even once it does, changing each metadata schema to use it is its; /// own mini-project. In the meantime this API prevents us from introducing; /// complex and bug-prone control flow that will disappear in the end. In; /// particular, the above code looks like this:; ///; /// \code; /// MDNode *N = ...;; /// auto *CI = mdconst::dyn_extract<ConstantInt>(N->getOperand(2));; /// \endcode; ///; /// The full set of provided functions includes:; ///; /// mdconst::hasa <=> isa; /// mdconst::extract <=> cast; /// mdconst::extract_or_null <=> cast_or_null; /// mdconst::dyn_extract <=> dyn_cast; /// mdconst::dyn_extract_or_null <=> dyn_cast_or_null; ///; /// The target of the cast must be a subclass of \a Constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:943,bridg,bridge,943,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['bridg'],['bridge']
Integrability,"/// Translate a Clang source range into a CIndex source range.; ///; /// Clang internally represents ranges where the end location points to the; /// start of the token at the end. However, for external clients it is more; /// useful to have a CXSourceRange be a proper half-open interval. This routine; /// does the appropriate translation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:295,rout,routine,295,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,2,['rout'],['routine']
Integrability,"/// Translate an entry index to a column element index of the principal column and viceversa. These functions; /// take into account the role and number of repetitions on each level of the field hierarchy as follows:; /// - Top level fields: element index == entry index; /// - Record fields propagate their principal column index to the principal columns of direct descendant fields; /// - Collection and variant fields set the principal column index of their childs to 0; ///; /// The column element index also depends on the number of repetitions of each field in the hierarchy, e.g., given a; /// field with type `std::array<std::array<float, 4>, 2>`, this function returns 8 for the inner-most field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:513,depend,depends,513,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['depend'],['depends']
Integrability,/// Translates internal dependency kind into the runtime kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:24,depend,dependency,24,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['depend'],['dependency']
Integrability,/// Traverse all matching rel relocation records in the given section.; /// Convenience wrapper to allow passing a member function for the handler.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h:88,wrap,wrapper,88,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h,1,['wrap'],['wrapper']
Integrability,/// Traverse all matching rela relocation records in the given section.; /// Convenience wrapper to allow passing a member function for the handler.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h:89,wrap,wrapper,89,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h,1,['wrap'],['wrapper']
Integrability,/// Traverse all matching relocation records in the given section. Convenience; /// wrapper to allow passing a member function for the handler.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/COFFLinkGraphBuilder.h:84,wrap,wrapper,84,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/COFFLinkGraphBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/COFFLinkGraphBuilder.h,1,['wrap'],['wrapper']
Integrability,/// Traverses the previously collected direct modular dependencies to discover; /// transitive modular dependencies and fills the parent \c ModuleDepCollector; /// with both.; /// Returns the ID or nothing if the dependency is spurious and is ignored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:54,depend,dependencies,54,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,3,['depend'],"['dependencies', 'dependency']"
Integrability,/// TreePredicateFn - This is an abstraction that represents the predicates on; /// a PatFrag node. This is a simple one-word wrapper around a pointer to; /// provide nice accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:126,wrap,wrapper,126,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['wrap'],['wrapper']
Integrability,"/// Tries to canonicalize condition described by:; ///; /// br (LHS pred RHS), label IfTrue, label IfFalse; ///; /// into its equivalent where `Pred` is something that we support for injected; /// invariants (so far it is limited to ult), LHS in canonicalized form is; /// non-invariant and RHS is an invariant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:183,inject,injected,183,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['injected']
Integrability,"/// Trigger the invalidation of some other analysis pass if not already; /// handled and return whether it was in fact invalidated.; ///; /// This is expected to be called from within a given analysis result's \c; /// invalidate method to trigger a depth-first walk of all inter-analysis; /// dependencies. The same \p IR unit and \p PA passed to that result's \c; /// invalidate method should in turn be provided to this routine.; ///; /// The first time this is called for a given analysis pass, it will call; /// the corresponding result's \c invalidate method. Subsequent calls will; /// use a cache of the results of that initial call. It is an error to form; /// cyclic dependencies between analysis results.; ///; /// This returns true if the given analysis's result is invalid. Any; /// dependecies on it will become invalid as a result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:293,depend,dependencies,293,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,4,"['depend', 'rout']","['dependecies', 'dependencies', 'routine']"
Integrability,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:698,wrap,wrapper,698,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['wrap'],['wrapper']
Integrability,/// True if block command is a container API; such as \@interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CommentCommandTraits.h:56,interface,interface,56,interpreter/llvm-project/clang/include/clang/AST/CommentCommandTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CommentCommandTraits.h,1,['interface'],['interface']
Integrability,"/// True if in raw mode.; ///; /// Raw mode disables interpretation of tokens and is a far faster mode to; /// lex in than non-raw-mode. This flag:; /// 1. If EOF of the current lexer is found, the include stack isn't popped.; /// 2. Identifier information is not looked up for identifier tokens. As an; /// effect of this, implicit macro expansion is naturally disabled.; /// 3. ""#"" tokens at the start of a line are treated as normal tokens, not; /// implicitly transformed by the lexer.; /// 4. All diagnostic messages are disabled.; /// 5. No callbacks are made into the preprocessor.; ///; /// Note that in raw mode that the PP pointer may be null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h:513,message,messages,513,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorLexer.h,1,['message'],['messages']
Integrability,/// True if redeclared in the same interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:35,interface,interface,35,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,"/// True if the index should be subtracted rather than added. We don't simply; /// negate the Scale, to avoid losing the NSW flag: X - INT_MIN*1 may be; /// non-wrapping, while X + INT_MIN*(-1) wraps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:161,wrap,wrapping,161,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,2,['wrap'],"['wrapping', 'wraps']"
Integrability,/// True if the integrated assembler should interpret 'a >> b' constant; /// expressions as logical rather than arithmetic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:16,integrat,integrated,16,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,1,['integrat'],['integrated']
Integrability,/// True if the last binary operator on this level was wrapped to the; /// next line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h:55,wrap,wrapped,55,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,1,['wrap'],['wrapped']
Integrability,"/// True if the offset field of DS instructions works as expected. On SI, the; /// offset uses a 16-bit adder and does not always wrap properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h:130,wrap,wrap,130,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,1,['wrap'],['wrap']
Integrability,/// True if the property reference will result in a message to the; /// getter.; /// This applies to both implicit and explicit property references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:52,message,message,52,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,/// True if the property reference will result in a message to the; /// setter.; /// This applies to both implicit and explicit property references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:52,message,message,52,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,/// True if these lookup results should be extended by; /// argument-dependent lookup if this is the operand of a function call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:69,depend,dependent,69,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['depend'],['dependent']
Integrability,/// True if this declaration should be extended by; /// argument-dependent lookup.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:65,depend,dependent,65,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['depend'],['dependent']
Integrability,/// True if this is a method redeclaration in the same interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:55,interface,interface,55,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// True if this is equivalent to 'Class<P>' for some non-empty set of; /// protocols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:76,protocol,protocols,76,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocols']
Integrability,/// True if this is equivalent to 'id<P>' for some non-empty set of; /// protocols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:73,protocol,protocols,73,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocols']
Integrability,"/// True if this is equivalent to the 'Class' type,; /// i.e. if its object tive is the primitive 'Class' type with no protocols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:119,protocol,protocols,119,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocols']
Integrability,"/// True if this is equivalent to the 'id' type, i.e. if; /// its object type is the primitive 'id' type with no protocols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:113,protocol,protocols,113,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['protocol'],['protocols']
Integrability,/// True unless we're running spp-no-calls in which case we need to disable; /// the call-dependent placement opts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:90,depend,dependent,90,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['depend'],['dependent']
Integrability,/// True when DB dominates all uses of DI except UI.; /// UI must be in the same block as DI.; /// The routine checks that the DI parent and DB are different.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:103,rout,routine,103,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['rout'],['routine']
Integrability,/// True when the preprocessor is in 'dependency scanning lexing mode' and; /// created this \p Lexer for lexing a set of dependency directive tokens.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:38,depend,dependency,38,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,2,['depend'],['dependency']
Integrability,"/// Try to ""correct"" a typo in the source code by finding; /// visible declarations whose names are similar to the name that was; /// present in the source code.; ///; /// \param TypoName the \c DeclarationNameInfo structure that contains; /// the name that was present in the source code along with its location.; ///; /// \param LookupKind the name-lookup criteria used to search for the name.; ///; /// \param S the scope in which name lookup occurs.; ///; /// \param SS the nested-name-specifier that precedes the name we're; /// looking for, if present.; ///; /// \param CCC A CorrectionCandidateCallback object that provides further; /// validation of typo correction candidates. It also provides flags for; /// determining the set of keywords permitted.; ///; /// \param MemberContext if non-NULL, the context in which to look for; /// a member access expression.; ///; /// \param EnteringContext whether we're entering the context described by; /// the nested-name-specifier SS.; ///; /// \param OPT when non-NULL, the search for visible declarations will; /// also walk the protocols in the qualified interfaces of \p OPT.; ///; /// \returns a \c TypoCorrection containing the corrected name if the typo; /// along with information such as the \c NamedDecl where the corrected name; /// was declared, and any additional \c NestedNameSpecifier needed to access; /// it (C++ only). The \c TypoCorrection is empty if there is no correction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:1083,protocol,protocols,1083,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,2,"['interface', 'protocol']","['interfaces', 'protocols']"
Integrability,"/// Try to ""correct"" a typo in the source code by finding; /// visible declarations whose names are similar to the name that was; /// present in the source code.; ///; /// \param TypoName the \c DeclarationNameInfo structure that contains; /// the name that was present in the source code along with its location.; ///; /// \param LookupKind the name-lookup criteria used to search for the name.; ///; /// \param S the scope in which name lookup occurs.; ///; /// \param SS the nested-name-specifier that precedes the name we're; /// looking for, if present.; ///; /// \param CCC A CorrectionCandidateCallback object that provides further; /// validation of typo correction candidates. It also provides flags for; /// determining the set of keywords permitted.; ///; /// \param TDG A TypoDiagnosticGenerator functor that will be used to print; /// diagnostics when the actual typo correction is attempted.; ///; /// \param TRC A TypoRecoveryCallback functor that will be used to build an; /// Expr from a typo correction candidate.; ///; /// \param MemberContext if non-NULL, the context in which to look for; /// a member access expression.; ///; /// \param EnteringContext whether we're entering the context described by; /// the nested-name-specifier SS.; ///; /// \param OPT when non-NULL, the search for visible declarations will; /// also walk the protocols in the qualified interfaces of \p OPT.; ///; /// \returns a new \c TypoExpr that will later be replaced in the AST with an; /// Expr representing the result of performing typo correction, or nullptr if; /// typo correction is not possible. If nullptr is returned, no diagnostics will; /// be emitted and it is the responsibility of the caller to emit any that are; /// needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:1354,protocol,protocols,1354,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,2,"['interface', 'protocol']","['interfaces', 'protocols']"
Integrability,"/// Try to capture the given variable.; ///; /// \param Var The variable to capture.; ///; /// \param Loc The location at which the capture occurs.; ///; /// \param Kind The kind of capture, which may be implicit (for either a; /// block or a lambda), or explicit by-value or by-reference (for a lambda).; ///; /// \param EllipsisLoc The location of the ellipsis, if one is provided in; /// an explicit lambda capture.; ///; /// \param BuildAndDiagnose Whether we are actually supposed to add the; /// captures or diagnose errors. If false, this routine merely check whether; /// the capture can occur without performing the capture itself or complaining; /// if the variable cannot be captured.; ///; /// \param CaptureType Will be set to the type of the field used to capture; /// this variable in the innermost block or lambda. Only valid when the; /// variable can be captured.; ///; /// \param DeclRefType Will be set to the type of a reference to the capture; /// from within the current scope. Only valid when the variable can be; /// captured.; ///; /// \param FunctionScopeIndexToStopAt If non-null, it points to the index; /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.; /// This is useful when enclosing lambdas must speculatively capture; /// variables that may or may not be used in certain specializations of; /// a nested generic lambda.; ///; /// \returns true if an error occurred (i.e., the variable cannot be; /// captured) and false if the capture succeeded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:546,rout,routine,546,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['rout'],['routine']
Integrability,"/// Try to convert the fminnum/fmaxnum to a compare/select sequence. This is; /// required for correctness since InstCombine might have canonicalized a; /// fcmp+select sequence to a FMINNUM/FMAXNUM intrinsic. If we were to fall; /// through to the default expansion/soften to libcall, we might introduce a; /// link-time dependency on libm into a file that originally did not have one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:322,depend,dependency,322,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['depend'],['dependency']
Integrability,"/// Try to create a COFFVCRuntimeBootstrapper instance. An optional; /// RuntimePath can be given to specify the location of directory that; /// contains all vc runtime library files such as ucrt.lib and msvcrt.lib. If; /// no path was given, it will try to search the MSVC toolchain and Windows; /// SDK installation and use the found library files automatically.; ///; /// Note that depending on the build setting, a different library; /// file must be used. In general, if vc runtime was statically linked to the; /// object file that is to be jit-linked, LoadStaticVCRuntime and; /// InitializeStaticVCRuntime must be used with libcmt.lib, libucrt.lib,; /// libvcruntimelib. If vc runtime was dynamically linked LoadDynamicVCRuntime; /// must be used along with msvcrt.lib, ucrt.lib, vcruntime.lib.; ///; /// More information is on:; /// https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-library-features",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h:385,depend,depending,385,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/COFFVCRuntimeSupport.h,1,['depend'],['depending']
Integrability,"/// Try to create a ELFNixPlatform instance, adding the ORC runtime to the; /// given JITDylib.; ///; /// The ORC runtime requires access to a number of symbols in; /// libc++. It is up to the caller to ensure that the required; /// symbols can be referenced by code added to PlatformJD. The; /// standard way to achieve this is to first attach dynamic library; /// search generators for either the given process, or for the; /// specific required libraries, to PlatformJD, then to create the; /// platform instance:; ///; /// \code{.cpp}; /// auto &PlatformJD = ES.createBareJITDylib(""stdlib"");; /// PlatformJD.addGenerator(; /// ExitOnErr(EPCDynamicLibrarySearchGenerator; /// ::GetForTargetProcess(EPC)));; /// ES.setPlatform(; /// ExitOnErr(ELFNixPlatform::Create(ES, ObjLayer, EPC, PlatformJD,; /// ""/path/to/orc/runtime"")));; /// \endcode; ///; /// Alternatively, these symbols could be added to another JITDylib that; /// PlatformJD links against.; ///; /// Clients are also responsible for ensuring that any JIT'd code that; /// depends on runtime functions (including any code using TLV or static; /// destructors) can reference the runtime symbols. This is usually achieved; /// by linking any JITDylibs containing regular code against; /// PlatformJD.; ///; /// By default, ELFNixPlatform will add the set of aliases returned by the; /// standardPlatformAliases function. This includes both required aliases; /// (e.g. __cxa_atexit -> __orc_rt_elf_cxa_atexit for static destructor; /// support), and optional aliases that provide JIT versions of common; /// functions (e.g. dlopen -> __orc_rt_elf_jit_dlopen). Clients can; /// override these defaults by passing a non-None value for the; /// RuntimeAliases function, in which case the client is responsible for; /// setting up all aliases (including the required ones).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h:1037,depend,depends,1037,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,1,['depend'],['depends']
Integrability,"/// Try to create a MachOPlatform instance, adding the ORC runtime to the; /// given JITDylib.; ///; /// The ORC runtime requires access to a number of symbols in libc++, and; /// requires access to symbols in libobjc, and libswiftCore to support; /// Objective-C and Swift code. It is up to the caller to ensure that the; /// required symbols can be referenced by code added to PlatformJD. The; /// standard way to achieve this is to first attach dynamic library search; /// generators for either the given process, or for the specific required; /// libraries, to PlatformJD, then to create the platform instance:; ///; /// \code{.cpp}; /// auto &PlatformJD = ES.createBareJITDylib(""stdlib"");; /// PlatformJD.addGenerator(; /// ExitOnErr(EPCDynamicLibrarySearchGenerator; /// ::GetForTargetProcess(EPC)));; /// ES.setPlatform(; /// ExitOnErr(MachOPlatform::Create(ES, ObjLayer, EPC, PlatformJD,; /// ""/path/to/orc/runtime"")));; /// \endcode; ///; /// Alternatively, these symbols could be added to another JITDylib that; /// PlatformJD links against.; ///; /// Clients are also responsible for ensuring that any JIT'd code that; /// depends on runtime functions (including any code using TLV or static; /// destructors) can reference the runtime symbols. This is usually achieved; /// by linking any JITDylibs containing regular code against; /// PlatformJD.; ///; /// By default, MachOPlatform will add the set of aliases returned by the; /// standardPlatformAliases function. This includes both required aliases; /// (e.g. __cxa_atexit -> __orc_rt_macho_cxa_atexit for static destructor; /// support), and optional aliases that provide JIT versions of common; /// functions (e.g. dlopen -> __orc_rt_macho_jit_dlopen). Clients can; /// override these defaults by passing a non-None value for the; /// RuntimeAliases function, in which case the client is responsible for; /// setting up all aliases (including the required ones).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:1134,depend,depends,1134,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,1,['depend'],['depends']
Integrability,"/// Try to find a partition of the aggregate type passed in for a given; /// offset and size.; ///; /// This recurses through the aggregate type and tries to compute a subtype; /// based on the offset and size. When the offset and size span a sub-section; /// of an array, it will even compute a new array type for that sub-section,; /// and the same for structs.; ///; /// Note that this routine is very strict and tries to find a partition of the; /// type which produces the *exact* right offset and size. It is not forgiving; /// when the size or offset cause either end of type-based partition to be off.; /// Also, this is a best-effort routine. It is reasonable to give up and not; /// return a type if necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:389,rout,routine,389,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,['rout'],['routine']
Integrability,"/// Try to lower a shuffle as a permute of the inputs followed by an; /// UNPCK instruction.; ///; /// This specifically targets cases where we end up with alternating between; /// the two inputs, and so can permute them into something that feeds a single; /// UNPCK instruction. Note that this routine only targets integer vectors; /// because for floating point vectors we have a generalized SHUFPS lowering; /// strategy that handles everything that doesn't *exactly* match an unpack,; /// making this clever lowering unnecessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:295,rout,routine,295,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// Try to lower a vector shuffle as a byte rotation.; ///; /// SSSE3 has a generic PALIGNR instruction in x86 that will do an arbitrary; /// byte-rotation of the concatenation of two vectors; pre-SSSE3 can use; /// a PSRLDQ/PSLLDQ/POR pattern to get a similar effect. This routine will; /// try to generically lower a vector shuffle through such an pattern. It; /// does not check for the profitability of lowering either as PALIGNR or; /// PSRLDQ/PSLLDQ/POR, only whether the mask is valid to lower in that form.; /// This matches shuffle vectors that look like:; ///; /// v8i16 [11, 12, 13, 14, 15, 0, 1, 2]; ///; /// Essentially it concatenates V1 and V2, shifts right by some number of; /// elements, and takes the low elements as the result. Note that while this is; /// specified as a *right shift* because x86 is little-endian, it is a *left; /// rotate* of the vector lanes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:274,rout,routine,274,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// Try to lower a vector shuffle as a dword/qword rotation.; ///; /// AVX512 has a VALIGND/VALIGNQ instructions that will do an arbitrary; /// rotation of the concatenation of two vectors; This routine will; /// try to generically lower a vector shuffle through such an pattern.; ///; /// Essentially it concatenates V1 and V2, shifts right by some number of; /// elements, and takes the low elements as the result. Note that while this is; /// specified as a *right shift* because x86 is little-endian, it is a *left; /// rotate* of the vector lanes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:195,rout,routine,195,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// Try to lower a vector shuffle as a zero extension on any microarch.; ///; /// This routine will try to do everything in its power to cleverly lower; /// a shuffle which happens to match the pattern of a zero extend. It doesn't; /// check for the profitability of this lowering, it tries to aggressively; /// match this pattern. It will use all of the micro-architectural details it; /// can to emit an efficient lowering. It handles both blends with all-zero; /// inputs to explicitly zero-extend and undef-lanes (sometimes undef due to; /// masking out later).; ///; /// The reason we have dedicated lowering for zext-style shuffles is that they; /// are both incredibly common and often quite performance sensitive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:87,rout,routine,87,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rout'],['routine']
Integrability,"/// Try to match Instruction ""I"" as a comparison against a constant and; /// populates the array Vals with the set of values that match (or do not; /// match depending on isEQ).; /// Return false on failure. On success, the Value the comparison matched; /// against is placed in CompValue.; /// If CompValue is already set, the function is expected to fail if a match; /// is found but the value compared to is different.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:158,depend,depending,158,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['depend'],['depending']
Integrability,"/// Try to match M68kISD::Wrapper and M68kISD::WrapperPC nodes into an; /// addressing mode. These wrap things that will resolve down into a symbol; /// reference. If no match is possible, this returns true, otherwise it returns; /// false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelDAGToDAG.cpp:26,Wrap,Wrapper,26,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelDAGToDAG.cpp,3,"['Wrap', 'wrap']","['Wrapper', 'WrapperPC', 'wrap']"
Integrability,"/// Try to match X86ISD::Wrapper and X86ISD::WrapperRIP nodes into an addressing; /// mode. These wrap things that will resolve down into a symbol reference.; /// If no match is possible, this returns true, otherwise it returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:25,Wrap,Wrapper,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,3,"['Wrap', 'wrap']","['Wrapper', 'WrapperRIP', 'wrap']"
Integrability,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:511,Interface,Interface,511,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,7,['Interface'],['Interface']
Integrability,/// Try to replace DstReg with SrcReg or build a COPY instruction; /// depending on the register constraints.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:71,depend,depending,71,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,1,['depend'],['depending']
Integrability,/// Try to schedule the node at the specified StartCycle and continue; /// until the node is schedule or the EndCycle is reached. This function; /// returns true if the node is scheduled. This routine may search either; /// forward or backward for a place to insert the instruction based upon; /// the relative values of StartCycle and EndCycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:193,rout,routine,193,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['rout'],['routine']
Integrability,"/// TryAnnotateScopeToken - Like TryAnnotateTypeOrScopeToken but only; /// annotates C++ scope specifiers and template-ids. This returns; /// true if there was an error that could not be recovered from.; ///; /// Note that this routine emits an error if you call it with ::new or ::delete; /// as the current tokens, so only call it in contexts where these are invalid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:228,rout,routine,228,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,1,['rout'],['routine']
Integrability,"/// TryAnnotateTypeOrScopeToken - If the current token position is on a; /// typename (possibly qualified in C++) or a C++ scope specifier not followed; /// by a typename, TryAnnotateTypeOrScopeToken will replace one or more tokens; /// with a single annotation token representing the typename or C++ scope; /// respectively.; /// This simplifies handling of C++ scope specifiers and allows efficient; /// backtracking without the need to re-parse and resolve nested-names and; /// typenames.; /// It will mainly be called when we expect to treat identifiers as typenames; /// (if they are typenames). For example, in C we do not expect identifiers; /// inside expressions to be treated as typenames so it will not be called; /// for expressions in C.; /// The benefit for C/ObjC is that a typename will be annotated and; /// Actions.getTypeName will not be needed to be called again (e.g. getTypeName; /// will not be called twice, once to check whether we have a declaration; /// specifier, and another one to get the actual type inside; /// ParseDeclarationSpecifiers).; ///; /// This returns true if an error occurred.; ///; /// Note that this routine emits an error if you call it with ::new or ::delete; /// as the current tokens, so only call it in contexts where these are invalid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:1148,rout,routine,1148,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,1,['rout'],['routine']
Integrability,"/// TryImplicitConversion - Attempt to perform an implicit conversion; /// from the given expression (Expr) to the given type (ToType). This; /// function returns an implicit conversion sequence that can be used; /// to perform the initialization. Given; ///; /// void f(float f);; /// void g(int i) { f(i); }; ///; /// this routine would produce an implicit conversion sequence to; /// describe the initialization of f from i, which will be a standard; /// conversion sequence containing an lvalue-to-rvalue conversion (C++; /// 4.1) followed by a floating-integral conversion (C++ 4.9).; //; /// Note that this routine only determines how the conversion can be; /// performed; it does not actually perform the conversion. As such,; /// it will not produce any diagnostics if no conversion is available,; /// but will instead return an implicit conversion sequence of kind; /// ""BadConversion"".; ///; /// If @p SuppressUserConversions, then user-defined conversions are; /// not permitted.; /// If @p AllowExplicit, then explicit user-defined conversions are; /// permitted.; ///; /// \param AllowObjCWritebackConversion Whether we allow the Objective-C; /// writeback conversion, which allows __autoreleasing id* parameters to; /// be initialized with __strong id* or __weak id* arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:325,rout,routine,325,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,2,['rout'],['routine']
Integrability,/// Turn this message send into an instance message that; /// computes the receiver object with the given expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:14,message,message,14,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,2,['message'],['message']
Integrability,"/// Two sets of functions to operate on iterators, to be used depending on the access type. The direction preserves; /// the meaning from TVirtualCollectionProxy, i.e. read from disk / write to disk, respectively",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx:62,depend,depending,62,tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,1,['depend'],['depending']
Integrability,/// Type that provides information about the actions that depend on this; /// unbundling action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h:58,depend,depend,58,interpreter/llvm-project/clang/include/clang/Driver/Action.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Action.h,1,['depend'],['depend']
Integrability,/// Type to keep track of the status of the dependence check. The order of; /// the elements is important and has to be from most permissive to least; /// permissive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:44,depend,dependence,44,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['depend'],['dependence']
Integrability,/// Type typedef struct kmp_task {; /// void * shareds; /**< pointer to block of pointers to; /// shared vars */; /// kmp_routine_entry_t routine; /**< pointer to routine to call for; /// executing task */; /// kmp_int32 part_id; /**< part id for the task */; /// kmp_routine_entry_t destructors; /* pointer to function to invoke; /// deconstructors of firstprivate C++ objects */; /// } kmp_task_t;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:138,rout,routine,138,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['rout'],['routine']
Integrability,/// Type wrapper for integer ID for Variables. 0 is reserved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h:9,wrap,wrapper,9,interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,1,['wrap'],['wrapper']
Integrability,"/// Typed, array-like tuple of metadata.; ///; /// This is a wrapper for \a MDTuple that makes it act like an array holding a; /// particular type of metadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:61,wrap,wrapper,61,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['wrap'],['wrapper']
Integrability,"/// Types are partitioned into 3 broad categories (C99 6.2.5p1):; /// object types, function types, and incomplete types.; /// Return true if this is an incomplete type.; /// A type that can describe objects, but which lacks information needed to; /// determine its size (e.g. void, or a fwd declared struct). Clients of this; /// routine will need to determine if the size is actually required.; ///; /// Def If non-null, and the type refers to some kind of declaration; /// that can be completed (such as a C struct, C++ class, or Objective-C; /// class), will be set to the declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:331,rout,routine,331,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['rout'],['routine']
Integrability,"/// Under non-PCH compilation the consumer receives the objc methods; /// before receiving the implementation, and codegen depends on this.; /// We simulate this by deserializing and passing to consumer the methods of the; /// implementation before passing the deserialized implementation decl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:123,depend,depends,123,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['depend'],['depends']
Integrability,"/// Underlying constants for 'cost' values in this interface.; ///; /// Many APIs in this interface return a cost. This enum defines the; /// fundamental values that should be used to interpret (and produce) those; /// costs. The costs are returned as an int rather than a member of this; /// enumeration because it is expected that the cost of one IR instruction; /// may have a multiplicative factor to it or otherwise won't fit directly; /// into the enum. Moreover, it is common to sum or average costs which works; /// better as simple integral values. Thus this enum only provides constants.; /// Also note that the returned costs are signed integers to make it natural; /// to add, subtract, and test with zero (a common boundary condition). It is; /// not expected that 2^32 is a realistic cost to be modeling at any point.; ///; /// Note that these costs should usually reflect the intersection of code-size; /// cost and execution cost. A free instruction is typically one that folds; /// into another instruction. For example, reg-to-reg moves can often be; /// skipped by renaming the registers in the CPU, but they still are encoded; /// and thus wouldn't be considered 'free' here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:51,interface,interface,51,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,2,['interface'],['interface']
Integrability,"/// Union of live intervals that are strong candidates for coalescing into a; /// single register (either physical or virtual depending on the context). We; /// expect the constituent live intervals to be disjoint, although we may; /// eventually make exceptions to handle value-based interference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervalUnion.h:126,depend,depending,126,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervalUnion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervalUnion.h,1,['depend'],['depending']
Integrability,/// Unpack an ObjCProtocolRef cursor into the protocol it references; /// and optionally the location where the reference occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:46,protocol,protocol,46,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h,1,['protocol'],['protocol']
Integrability,/// Unpack an ObjCSuperClassRef cursor into the interface it references; /// and optionally the location where the reference occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:48,interface,interface,48,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h,1,['interface'],['interface']
Integrability,"/// Unqualified match routine.; ///; /// It is much faster than the full match, but it only works for unqualified; /// matches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:22,rout,routine,22,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['rout'],['routine']
Integrability,"/// Unswitch a trivial branch if the condition is loop invariant.; ///; /// This routine should only be called when loop code leading to the branch has; /// been validated as trivial (no side effects). This routine checks if the; /// condition is invariant and one of the successors is a loop exit. This; /// allows us to unswitch without duplicating the loop, making it trivial.; ///; /// If this routine fails to unswitch the branch it returns false.; ///; /// If the branch can be unswitched, this routine splits the preheader and; /// hoists the branch above that split. Preserves loop simplified form; /// (splitting the exit block as necessary). It simplifies the branch within; /// the loop to an unconditional branch but doesn't remove it entirely. Further; /// cleanup can be done with some simplifycfg like pass.; ///; /// If `SE` is not null, it will be updated based on the potential loop SCEVs; /// invalidated by this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:81,rout,routine,81,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,4,['rout'],['routine']
Integrability,"/// Unswitch a trivial switch if the condition is loop invariant.; ///; /// This routine should only be called when loop code leading to the switch has; /// been validated as trivial (no side effects). This routine checks if the; /// condition is invariant and that at least one of the successors is a loop; /// exit. This allows us to unswitch without duplicating the loop, making it; /// trivial.; ///; /// If this routine fails to unswitch the switch it returns false.; ///; /// If the switch can be unswitched, this routine splits the preheader and; /// copies the switch above that split. If the default case is one of the; /// exiting cases, it copies the non-exiting cases and points them at the new; /// preheader. If the default case is not exiting, it copies the exiting cases; /// and points the default at the preheader. It preserves loop simplified form; /// (splitting the exit blocks as necessary). It simplifies the switch within; /// the loop by removing now-dead cases. If the default case is one of those; /// unswitched, it replaces its destination with a new basic block containing; /// only unreachable. Such basic blocks, while technically loop exits, are not; /// considered for unswitching so this is a stable transform and the same; /// switch will not be revisited. If after unswitching there is only a single; /// in-loop successor, the switch is further simplified to an unconditional; /// branch. Still more cleanup can be done with some simplifycfg like pass.; ///; /// If `SE` is not null, it will be updated based on the potential loop SCEVs; /// invalidated by this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:81,rout,routine,81,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,4,['rout'],['routine']
Integrability,"/// UnwindOpcodeStreamer - The simple wrapper over SmallVector to emit bytes; /// with MSB to LSB per uint32_t ordering. For example, the first byte will; /// be placed in Vec[3], and the following bytes will be placed in 2, 1, 0,; /// 7, 6, 5, 4, 11, 10, 9, 8, and so on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMUnwindOpAsm.cpp:38,wrap,wrapper,38,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMUnwindOpAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMUnwindOpAsm.cpp,1,['wrap'],['wrapper']
Integrability,/// Update DBG_VALUE or DBG_PHI if dependency breaker is updating; /// other machine instruction to use NewReg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h:35,depend,dependency,35,interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h,1,['depend'],['dependency']
Integrability,/// Update Defs and Uses. Return true if there exist dependences that; /// disqualify the delay slot candidate between V and values in Uses and; /// Defs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp:53,depend,dependences,53,interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp,1,['depend'],['dependences']
Integrability,/// Update all DBG_VALUE instructions that may be affected by the dependency; /// breaker's update of ParentMI to use NewReg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h:66,depend,dependency,66,interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AntiDepBreaker.h,1,['depend'],['dependency']
Integrability,/// Update def-ages for registers defined by MI.; /// Also break dependencies on partial defs and undef uses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:65,depend,dependencies,65,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,2,['depend'],['dependencies']
Integrability,"/// Update internal caches that depend on the function name (such as the; /// intrinsic ID and libcall cache).; /// Note, this method does not need to be called directly, as it is called; /// from Value::setName() whenever the name of this function changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:32,depend,depend,32,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h,1,['depend'],['depend']
Integrability,/// Update no-wrap flags of an AddRec. This may drop the cached info about; /// this AddRec (such as range info) in case if new flags may potentially; /// sharpen it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:14,wrap,wrap,14,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['wrap'],['wrap']
Integrability,"/// Update the phi dependences to the DAG because ScheduleDAGInstrs no longer; /// processes dependences for PHIs. This function adds true dependences; /// from a PHI to a use, and a loop carried dependence from the use to the; /// PHI. The loop carried dependence is represented as an anti dependence; /// edge. This function also removes chain dependences between unrelated; /// PHIs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:19,depend,dependences,19,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,7,['depend'],"['dependence', 'dependences']"
Integrability,/// Update the state to include the provided host action \a HostAction as a; /// dependency of the current device action. By default it is inactive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:81,depend,dependency,81,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['depend'],['dependency']
Integrability,/// Update the symtab by adding \p FuncName to the table. This interface; /// is used by the raw and text profile readers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:63,interface,interface,63,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['interface'],['interface']
Integrability,/// Updates the dependency information of a bundle and of all instructions/; /// bundles which depend on the original bundle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:16,depend,dependency,16,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['depend'],"['depend', 'dependency']"
Integrability,/// Updates the dependency kind in the specified depobj object.; /// \param DepobjLVal LValue for the main depobj object.; /// \param NewDepKind New dependency kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:16,depend,dependency,16,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['depend'],['dependency']
Integrability,/// Upgrade a call to an old intrinsic. All argument and return casting must be; /// provided to seamlessly integrate with existing context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:108,integrat,integrate,108,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['integrat'],['integrate']
Integrability,"/// Use this to get all registered SubCommands from the provided parser.; ///; /// \return A range of all SubCommand pointers registered with the parser.; ///; /// Typical usage:; /// \code; /// main(int argc, char* argv[]) {; /// llvm::cl::ParseCommandLineOptions(argc, argv);; /// for (auto* S : llvm::cl::getRegisteredSubcommands()) {; /// if (*S) {; /// std::cout << ""Executing subcommand: "" << S->getName() << std::endl;; /// // Execute some function based on the name...; /// }; /// }; /// }; /// \endcode; ///; /// This interface is useful for defining subcommands in libraries and; /// the dispatch from a single point (like in the main function).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:527,interface,interface,527,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['interface'],['interface']
Integrability,/// Used by Sema to implement MSVC-compatible delayed name lookup.; /// (Usually Exprs themselves should set dependence).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:109,depend,dependence,109,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependence']
Integrability,/// Used for AVR interrupt routines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:27,rout,routines,27,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,1,['rout'],['routines']
Integrability,/// Used for AVR signal routines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:24,rout,routines,24,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,1,['rout'],['routines']
Integrability,/// Used for M68k interrupt routines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:28,rout,routines,28,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,1,['rout'],['routines']
Integrability,/// Used for MSP430 interrupt routines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:30,rout,routines,30,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,1,['rout'],['routines']
Integrability,"/// Used for cases where we expect an identifier-like token, but don't want to; /// give awkward error messages in cases where it is accidentially a keyword.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp:103,message,messages,103,interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,1,['message'],['messages']
Integrability,"/// Used for cases where we have a token we want to check against an; /// 'identifier-like' token, but don't want to give awkward error messages in; /// cases where it is accidentially a keyword.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp:136,message,messages,136,interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,1,['message'],['messages']
Integrability,/// Used in the streaming interface as the general argument type. It; /// internally converts everything into a key-value pair.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:26,interface,interface,26,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['interface'],['interface']
Integrability,"/// Used to encode a step in a register lane mask transformation.; /// Mask the bits specified in Mask, then rotate them Rol bits to the left; /// assuming a wraparound at 32bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:158,wrap,wraparound,158,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,1,['wrap'],['wraparound']
Integrability,/// Used to initialize Dwarf register to LLVM; /// register number mapping. Called by TableGen auto-generated routines.; /// *DO NOT USE*.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:110,rout,routines,110,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['rout'],['routines']
Integrability,/// Used to initialize LLVM register to Dwarf; /// register number mapping. Called by TableGen auto-generated routines.; /// *DO NOT USE*.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:110,rout,routines,110,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['rout'],['routines']
Integrability,/// Used to set IsVerbose via the stream interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:41,interface,interface,41,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['interface'],['interface']
Integrability,"/// Used to verify that wrapped return values are not unnecessarily copied",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/test/base_exception.cxx:24,wrap,wrapped,24,core/foundation/v7/test/base_exception.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/test/base_exception.cxx,1,['wrap'],['wrapped']
Integrability,"/// User-facing error message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx:22,message,message,22,core/foundation/v7/inc/ROOT/RError.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx,1,['message'],['message']
Integrability,"/// UsualArithmeticConversions - Performs various conversions that are common to; /// binary operators (C99 6.3.1.8). If both operands aren't arithmetic, this; /// routine returns the first non-arithmetic type found. The client is; /// responsible for emitting appropriate error diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:164,rout,routine,164,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['rout'],['routine']
Integrability,"/// UsualUnaryConversions - Performs various conversions that are common to most; /// operators (C99 6.3). The conversions of array and function types are; /// sometimes suppressed. For example, the array->pointer conversion doesn't; /// apply if the array is an argument to the sizeof or address (&) operators.; /// In these instances, this routine should *not* be called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:342,rout,routine,342,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['rout'],['routine']
Integrability,"/// Utility class for extracting code into a new function.; ///; /// This utility provides a simple interface for extracting some sequence of; /// code into its own function, replacing it with a call to that function. It; /// also provides various methods to query about the nature and result of; /// such a transformation.; ///; /// The rough algorithm used is:; /// 1) Find both the inputs and outputs for the extracted region.; /// 2) Pass the inputs as arguments, remapping them within the extracted; /// function to arguments.; /// 3) Add allocas for any scalar outputs, adding all of the outputs' allocas; /// as arguments, and inserting stores to the arguments for any scalars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:100,interface,interface,100,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,1,['interface'],['interface']
Integrability,"/// Utility class for the SSAUpdater interface: tracks blocks, PHIs and values; /// while SSAUpdater is exploring the CFG. It's passed as a handle / baton to; // SSAUpdaterTraits<LDVSSAUpdater>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:37,interface,interface,37,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['interface'],['interface']
Integrability,/// Utility class to control the collapse of dependent actions and select the; /// tools accordingly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:45,depend,dependent,45,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['depend'],['dependent']
Integrability,/// Utility for extracting the inline cost message to a string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h:43,message,message,43,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,1,['message'],['message']
Integrability,"/// Utility function for performing a given action on each lane of a vector; /// with \p EC elements. To simplify porting legacy code, this defaults to; /// unrolling the implied loop for non-scalable element counts, but this is; /// not considered to be part of the contract of this routine, and is; /// expected to change in the future. The callback takes as arguments an; /// IRBuilder whose insert point is correctly set for instantiating the; /// given index, and a value which is (at runtime) the index to access.; /// This index *may* be a constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:267,contract,contract,267,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,2,"['contract', 'rout']","['contract', 'routine']"
Integrability,"/// Utility function for performing a given action on each lane of a vector; /// with \p EVL effective length. EVL is assumed > 0. To simplify porting legacy; /// code, this defaults to unrolling the implied loop for non-scalable element; /// counts, but this is not considered to be part of the contract of this; /// routine, and is expected to change in the future. The callback takes as; /// arguments an IRBuilder whose insert point is correctly set for instantiating; /// the given index, and a value which is (at runtime) the index to access. This; /// index *may* be a constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:296,contract,contract,296,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,2,"['contract', 'rout']","['contract', 'routine']"
Integrability,"/// Utility function to decode a SLEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:115,message,message,115,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,1,['message'],['message']
Integrability,"/// Utility function to decode a ULEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:115,message,message,115,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,1,['message'],['message']
Integrability,/// VPPredInstPHIRecipe is a recipe for generating the phi nodes needed when; /// control converges back from a Branch-on-Mask. The phi nodes are needed in; /// order to merge values that are set under such a branch and feed their uses.; /// The phi nodes can be scalar or vector depending on the users of the value.; /// This recipe works in concert with VPBranchOnMaskRecipe.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:280,depend,depending,280,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['depend'],['depending']
Integrability,"/// VSRC, CHAIN = LOAD_VEC_BE CHAIN, Ptr - Occurs only for little endian.; /// Maps directly to one of lxvd2x/lxvw4x/lxvh8x/lxvb16x depending on; /// the vector type to load vector in big-endian element order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:132,depend,depending,132,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['depend'],['depending']
Integrability,/// VTableDispatchMethods - List of methods for which we generate; /// vtable-based message dispatch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:84,message,message,84,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['message'],['message']
Integrability,/// ValID - Represents a reference of a definition of some sort with no type.; /// There are several cases where we have to parse the value but where the; /// type can depend on later context. This may either be a numeric reference; /// or a symbolic (%var) reference. This is just a discriminated union.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/LLParser.h:168,depend,depend,168,interpreter/llvm-project/llvm/include/llvm/AsmParser/LLParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/LLParser.h,1,['depend'],['depend']
Integrability,"/// Validate any DPMarkers / DPValues attached to instructions in this block,; /// and block-level stored data too (TrailingDPValues).; /// \p Assert Should this method fire an assertion if a problem is found?; /// \p Msg Should this method print a message to errs() if a problem is found?; /// \p OS Output stream to write errors to.; /// \returns True if a problem is found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:249,message,message,249,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,1,['message'],['message']
Integrability,/// Validates the CompressPattern and create operand mapping.; /// These are the checks to validate a CompressPat pattern declarations.; /// Error out with message under these conditions:; /// - Dag Input opcode is an expanded instruction and Dag Output opcode is a; /// compressed instruction.; /// - Operands in Dag Input must be all used in Dag Output.; /// Register Operand type in Dag Input Type must be contained in the; /// corresponding Source Instruction type.; /// - Register Operand type in Dag Input must be the same as in Dag Ouput.; /// - Register Operand type in Dag Output must be the same as the; /// corresponding Destination Inst type.; /// - Immediate Operand type in Dag Input must be the same as in Dag Ouput.; /// - Immediate Operand type in Dag Ouput must be the same as the corresponding; /// Destination Instruction type.; /// - Fixed register must be contained in the corresponding Source Instruction; /// type.; /// - Fixed register must be contained in the corresponding Destination; /// Instruction type.; /// Warning message printed under these conditions:; /// - Fixed immediate in Dag Input or Dag Ouput cannot be checked at this time; /// and generate warning.; /// - Immediate operand type in Dag Input differs from the corresponding Source; /// Instruction type and generate a warning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:156,message,message,156,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,2,['message'],['message']
Integrability,/// Value handle that asserts if the Value is deleted.; ///; /// This is a Value Handle that points to a value and asserts out if the value; /// is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs and other things which can be non-obvious.; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// an AssertingVH ensures that an assert is triggered as soon as the bad; /// delete occurs.; ///; /// Note that an AssertingVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// AssertingVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:887,wrap,wrapper,887,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,1,['wrap'],['wrapper']
Integrability,/// Value handle that poisons itself if the Value is deleted.; ///; /// This is a Value Handle that points to a value and poisons itself if the; /// value is destroyed while the handle is still live. This is very useful for; /// catching dangling pointer bugs where an \c AssertingVH cannot be used; /// because the dangling handle needs to outlive the value without ever being; /// used.; ///; /// One particularly useful place to use this is as the Key of a map. Dangling; /// pointer bugs often lead to really subtle bugs that only occur if another; /// object happens to get allocated to the same address as the old one. Using; /// a PoisoningVH ensures that an assert is triggered if looking up a new value; /// in the map finds a handle from the old value.; ///; /// Note that a PoisoningVH handle does *not* follow values across RAUW; /// operations. This means that RAUW's need to explicitly update the; /// PoisoningVH's as it moves. This is required because in non-assert mode this; /// class turns into a trivial wrapper around a pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:1024,wrap,wrapper,1024,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,1,['wrap'],['wrapper']
Integrability,"/// Value wrapper in the Metadata hierarchy.; ///; /// This is a custom value handle that allows other metadata to refer to; /// classes in the Value hierarchy.; ///; /// Because of full uniquing support, each value is only wrapped by a single \a; /// ValueAsMetadata object, so the lookup maps are far more efficient than; /// those using ValueHandleBase.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:10,wrap,wrapper,10,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,2,['wrap'],"['wrapped', 'wrapper']"
Integrability,/// Value-dependent constant expressions should not be immediately; /// evaluated until they are instantiated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:10,depend,dependent,10,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['depend'],['dependent']
Integrability,/// Version of parse() that converts the parsed value to the type T.; /// RootName describes the root object and is used in error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:130,message,messages,130,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['message'],['messages']
Integrability,"/// Vertical whitespace ('\\n' or '\\r\\n', depending on the; /// platform).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:44,depend,depending,44,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['depend'],['depending']
Integrability,"/// Visit an Objective-C message whose receiver is nil.; ///; /// This will be called when the analyzer core processes a method call whose; /// receiver is definitely nil. In this case, check{Pre/Post}ObjCMessage and; /// check{Pre/Post}Call will not be called.; ///; /// check::ObjCMessageNil",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp:25,message,message,25,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,1,['message'],['message']
Integrability,"/// Visit each of the modules.; ///; /// This routine visits each of the modules, starting with the; /// ""root"" modules that no other loaded modules depend on, and; /// proceeding to the leaf modules, visiting each module only once; /// during the traversal.; ///; /// This traversal is intended to support various ""lookup""; /// operations that can find data in any of the loaded modules.; ///; /// \param Visitor A visitor function that will be invoked with each; /// module. The return value must be convertible to bool; when false, the; /// visitation continues to modules that the current module depends on. When; /// true, the visitation skips any modules that the current module depends on.; ///; /// \param ModuleFilesHit If non-NULL, contains the set of module files; /// that we know we need to visit because the global module index told us to.; /// Any module that is known to both the global module index and the module; /// manager that is *not* in this set can be skipped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:46,rout,routine,46,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,4,"['depend', 'rout']","['depend', 'depends', 'routine']"
Integrability,/// Visit the elements via ExprOperand wrappers.; ///; /// These range iterators visit elements through \a ExprOperand wrappers.; /// This is not guaranteed to be a valid range unless \a isValid() gives \c; /// true.; ///; /// \pre \a isValid() gives \c true.; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:39,wrap,wrappers,39,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,2,['wrap'],['wrappers']
Integrability,"/// VisitGlobalVariableForEmission - Add \p GV to the list of GlobalVariable; /// instances to be emitted, but only after any dependents have been added; /// first.s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:126,depend,dependents,126,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['depend'],['dependents']
Integrability,/// VisitedDependentRecords - Records the dependent records that have been; /// already visited.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h:42,depend,dependent,42,interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,1,['depend'],['dependent']
Integrability,"/// Walk the list of protocol references from a class, category or; /// protocol to traverse the DAG formed from it's inheritance hierarchy. Find; /// the list of protocols that ends each walk at either a runtime; /// protocol or a non-runtime protocol with no parents. For the common case of; /// just a list of standard runtime protocols this just returns the same list; /// that was passed in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:21,protocol,protocol,21,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,6,['protocol'],"['protocol', 'protocols']"
Integrability,/// Walk the operands of a GEP and adjust the offset as appropriate.; ///; /// This routine does the heavy lifting of the pointer walk by computing; /// offsets and looking through GEPs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h:84,rout,routine,84,interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,1,['rout'],['routine']
Integrability,/// Walk up the CFG from StartPos (which is in StartBB) and find local and; /// non-local dependencies on Arg.; ///; /// TODO: Cache results?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp:90,depend,dependencies,90,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.cpp,1,['depend'],['dependencies']
Integrability,"/// Warn about an unlock function call that attempts to unlock a lock with; /// the incorrect lock kind. For instance, a shared lock being unlocked; /// exclusively, or vice versa.; /// \param LockName -- A StringRef name for the lock expression, to be printed; /// in the error message.; /// \param Kind -- the capability's name parameter (role, mutex, etc).; /// \param Expected -- the kind of lock expected.; /// \param Received -- the kind of lock received.; /// \param LocLocked -- The SourceLocation of the Lock.; /// \param LocUnlock -- The SourceLocation of the Unlock.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:279,message,message,279,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['message'],['message']
Integrability,"/// Warn about lock function calls for locks which are already held.; /// \param Kind -- the capability's name parameter (role, mutex, etc).; /// \param LockName -- A StringRef name for the lock expression, to be printed; /// in the error message.; /// \param LocLocked -- The location of the first lock expression.; /// \param LocDoubleLock -- The location of the second lock expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:239,message,message,239,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['message'],['message']
Integrability,"/// Warn about situations where a mutex is sometimes held and sometimes not.; /// The three situations are:; /// 1. a mutex is locked on an ""if"" branch but not the ""else"" branch,; /// 2, or a mutex is only held at the start of some loop iterations,; /// 3. or when a mutex is locked but not unlocked inside a function.; /// \param Kind -- the capability's name parameter (role, mutex, etc).; /// \param LockName -- A StringRef name for the lock expression, to be printed; /// in the error message.; /// \param LocLocked -- The location of the lock expression where the mutex is; /// locked; /// \param LocEndOfScope -- The location of the end of the scope where the; /// mutex is no longer held; /// \param LEK -- which of the three above cases we should warn for",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:489,message,message,489,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['message'],['message']
Integrability,"/// Warn about unlock function calls that do not have a prior matching lock; /// expression.; /// \param Kind -- the capability's name parameter (role, mutex, etc).; /// \param LockName -- A StringRef name for the lock expression, to be printed; /// in the error message.; /// \param Loc -- The SourceLocation of the Unlock; /// \param LocPreviousUnlock -- If valid, the location of a previous Unlock.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:263,message,message,263,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['message'],['message']
Integrability,/// Warn that there is a cycle in acquired_before/after dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:56,depend,dependencies,56,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['depend'],['dependencies']
Integrability,"/// Warn when a function is called while an excluded mutex is locked. For; /// example, the mutex may be locked inside the function.; /// \param Kind -- the capability's name parameter (role, mutex, etc).; /// \param FunName -- The name of the function; /// \param LockName -- A StringRef name for the lock expression, to be printed; /// in the error message.; /// \param Loc -- The location of the function call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:351,message,message,351,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['message'],['message']
Integrability,"/// Warn when a mutex is held exclusively and shared at the same point. For; /// example, if a mutex is locked exclusively during an if branch and shared; /// during the else branch.; /// \param Kind -- the capability's name parameter (role, mutex, etc).; /// \param LockName -- A StringRef name for the lock expression, to be printed; /// in the error message.; /// \param Loc1 -- The location of the first lock expression.; /// \param Loc2 -- The location of the second lock expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:353,message,message,353,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['message'],['message']
Integrability,"/// Warn when a protected operation occurs while the specific mutex protecting; /// the operation is not locked.; /// \param Kind -- the capability's name parameter (role, mutex, etc).; /// \param D -- The decl for the protected variable or function; /// \param POK -- The kind of protected operation (e.g. variable access); /// \param LockName -- A StringRef name for the lock expression, to be printed; /// in the error message.; /// \param LK -- The kind of access (i.e. read or write) that occurred; /// \param Loc -- The location of the protected operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:422,message,message,422,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['message'],['message']
Integrability,/// WarnExactTypedMethods - This routine issues a warning if method; /// implementation declaration matches exactly that of its declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,rout,routine,33,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['rout'],['routine']
Integrability,/// Wavefront synchronization scope ID (cross address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:14,synchroniz,synchronization,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// Wavefront synchronization scope ID (single address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:14,synchroniz,synchronization,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// We are trying to inject an anonymous member into the given scope;; /// check if there's an existing declaration that can't be overloaded.; ///; /// \return true if this is a forbidden redeclaration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:21,inject,inject,21,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inject'],['inject']
Integrability,"/// We can't (at least, at this moment with C++14) declare CastInfo; /// as a friend of PointerUnion like this:; /// ```; /// template<typename To>; /// friend struct CastInfo<To, PointerUnion<PTs...>>;; /// ```; /// The compiler complains 'Partial specialization cannot be declared as a; /// friend'.; /// So we define this struct to be a bridge between CastInfo and; /// PointerUnion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:340,bridg,bridge,340,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,1,['bridg'],['bridge']
Integrability,"/// We certainly don't want to shrink wrap functions if we've emitted a; /// MovePCtoLR8 as that has to go into the entry, so the prologue definitely; /// has to go into the entry block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h:38,wrap,wrap,38,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,1,['wrap'],['wrap']
Integrability,/// We collect dependences up to this threshold.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:15,depend,dependences,15,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['depend'],['dependences']
Integrability,/// We decided that no dependence analysis would be used. Reset the state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:23,depend,dependence,23,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['depend'],['dependence']
Integrability,"/// We have a call to a function like __sync_fetch_and_add, which is an; /// overloaded function based on the pointer type of its first argument.; /// The main BuildCallExpr routines have already promoted the types of; /// arguments because all of these calls are prototyped as void(...).; ///; /// This function goes through and does final semantic checking for these; /// builtins, as well as generating any warnings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:174,rout,routines,174,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['rout'],['routines']
Integrability,"/// We know comparison with both branches of select can be simplified, but they; /// are not equal. This routine handles some logical simplifications.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:105,rout,routine,105,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['rout'],['routine']
Integrability,"/// We know that a debug info condition should be true, if not print; /// an error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:83,message,message,83,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['message'],['message']
Integrability,/// We must provide a default constructor for the pass but it should; /// never be used.; ///; /// Use the constructor below or call one of the creation routines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:153,rout,routines,153,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['rout'],['routines']
Integrability,"/// We need the output of clang-scan-deps to be deterministic. However,; /// the dependency graph may contain two modules with the same name. How; /// do we decide which one to print first? If we made that decision based; /// on the context hash, the ordering would be deterministic, but; /// different across machines. This can happen for example when the inputs; /// or the SDKs (which both contribute to the ""context"" hash) live in; /// different absolute locations. We solve that by tracking the index of; /// the first input TU that (transitively) imports the dependency, which; /// is always the same for the same input, resulting in deterministic; /// sorting that's also reproducible across machines.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp:81,depend,dependency,81,interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp,2,['depend'],['dependency']
Integrability,"/// We need to be careful about the offset of the first block in the function; /// because it might not have the function's alignment. This happens because,; /// under the ELFv2 ABI, for functions which require a TOC pointer, we add a; /// two-instruction sequence to the start of the function.; /// Note: This needs to be synchronized with the check in; /// PPCLinuxAsmPrinter::EmitFunctionBodyStart.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchSelector.cpp:323,synchroniz,synchronized,323,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchSelector.cpp,1,['synchroniz'],['synchronized']
Integrability,"/// We provide a function which tries to compute the (demangled) name of a type; /// statically.; ///; /// This routine may fail on some platforms or for particularly unusual types.; /// Do not use it for anything other than logging and debugging aids. It isn't; /// portable or dependendable in any real sense.; ///; /// The returned StringRef will point into a static storage duration string.; /// However, it may not be null terminated and may be some strangely aligned; /// inner substring of a larger string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h:112,rout,routine,112,interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h,2,"['depend', 'rout']","['dependendable', 'routine']"
Integrability,"/// We store a pointer to the ASTContext in the UninitializedLatest; /// pointer, but to avoid circular type dependencies when we steal the low; /// bits of this pointer, we use a raw void* here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:109,depend,dependencies,109,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,1,['depend'],['dependencies']
Integrability,"/// We use this class to visit different types of expressions in; /// CFGBlocks, and build up the lockset.; /// An expression may cause us to add or remove locks from the lockset, or else; /// output error messages related to missing locks.; /// FIXME: In future, we may be able to not inherit from a visitor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:206,message,messages,206,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['message'],['messages']
Integrability,"/// We'd like to check the predicate on every iteration of the most dominated; /// loop between loops used in LHS and RHS.; /// To do this we use the following list of steps:; /// 1. Collect set S all loops on which either LHS or RHS depend.; /// 2. If S is non-empty; /// a. Let PD be the element of S which is dominated by all other elements.; /// b. Let E(LHS) be value of LHS on entry of PD.; /// To get E(LHS), we should just take LHS and replace all AddRecs that are; /// attached to PD on with their entry values.; /// Define E(RHS) in the same way.; /// c. Let B(LHS) be value of L on backedge of PD.; /// To get B(LHS), we should just take LHS and replace all AddRecs that are; /// attached to PD on with their backedge values.; /// Define B(RHS) in the same way.; /// d. Note that E(LHS) and E(RHS) are automatically available on entry of PD,; /// so we can assert on that.; /// e. Return true if isLoopEntryGuardedByCond(Pred, E(LHS), E(RHS)) &&; /// isLoopBackedgeGuardedByCond(Pred, B(LHS), B(RHS))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:234,depend,depend,234,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['depend'],['depend']
Integrability,"/// We've found that the (upward scanning) memory dependence of \p MemCpy is; /// \p MemSet. Try to simplify \p MemSet to only set the trailing bytes that; /// weren't copied over by \p MemCpy.; ///; /// In other words, transform:; /// \code; /// memset(dst, c, dst_size);; /// ...; /// memcpy(dst, src, src_size);; /// \endcode; /// into:; /// \code; /// ...; /// memset(dst + src_size, c, dst_size <= src_size ? 0 : dst_size - src_size);; /// memcpy(dst, src, src_size);; /// \endcode; ///; /// The memset is sunk to just before the memcpy to ensure that src_size is; /// present when emitting the simplified memset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:50,depend,dependence,50,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['depend'],['dependence']
Integrability,/// We've found that the (upward scanning) memory dependence of memcpy 'M' is; /// the memcpy 'MDep'. Try to simplify M to copy from MDep's input if we can.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:50,depend,dependence,50,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['depend'],['dependence']
Integrability,"/// WebAssembly-specific streamer interface, to implement support; /// WebAssembly-specific assembly directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/MCTargetDesc/WebAssemblyTargetStreamer.h:34,interface,interface,34,interpreter/llvm-project/llvm/lib/Target/WebAssembly/MCTargetDesc/WebAssemblyTargetStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/MCTargetDesc/WebAssemblyTargetStreamer.h,1,['interface'],['interface']
Integrability,"/// What type of match result does this diagnostic describe?; ///; /// A directive's supplied pattern is said to be either expected or excluded; /// depending on whether the pattern must have or must not have a match in; /// order for the directive to succeed. For example, a CHECK directive's; /// pattern is expected, and a CHECK-NOT directive's pattern is excluded.; ///; /// There might be more than one match result for a single pattern. For; /// example, there might be several discarded matches; /// (MatchFoundButDiscarded) before either a good match; /// (MatchFoundAndExpected) or a failure to match (MatchNoneButExpected),; /// and there might be a fuzzy match (MatchFuzzy) after the latter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:149,depend,depending,149,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,1,['depend'],['depending']
Integrability,"/// When Kind = SK_RewrapInitList, the syntactic form of the; /// wrapping list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:66,wrap,wrapping,66,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['wrap'],['wrapping']
Integrability,"/// When all predecessor dependencies have been resolved, free this node for; /// top-down scheduling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:25,depend,dependencies,25,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['depend'],['dependencies']
Integrability,"/// When all successor dependencies have been resolved, free this node for; /// bottom-up scheduling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:23,depend,dependencies,23,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['depend'],['dependencies']
Integrability,"/// When overload resolution fails, prints diagnostic messages containing the; /// candidates in the candidate set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:54,message,messages,54,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['message'],['messages']
Integrability,"/// When performing dependency directives scan, this is the caching (and; /// dependency-directives-extracting) filesystem overlaid on top of \c FS; /// (passed in the constructor).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h:20,depend,dependency,20,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h,2,['depend'],"['dependency', 'dependency-directives-extracting']"
Integrability,"/// When the message expression is a send to 'super', this is; /// the location of the 'super' keyword.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:13,message,message,13,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,"/// When the receiver has a tracked type, use that type to validate the; /// argumments of the message expression and the return value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:95,message,message,95,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['message'],['message']
Integrability,"/// When the receiver in property access is 'super', this is; /// the location of the 'super' keyword. When it's an interface,; /// this is that interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:116,interface,interface,116,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,2,['interface'],['interface']
Integrability,"/// When the shortest interval using Keys PDF could not be found to have; /// the desired confidence level +/- the accuracy (see; /// SetKeysConfidenceAccuracy()), the interval determination algorithm; /// will have to terminate with an unsatisfactory confidence level when; /// the bottom and top of the cutoff search range are very close to being; /// equal. This scenario comes into play when there seems to be an error; /// in the accuracy of the Keys PDF integration, so the search range; /// continues to shrink without converging to a cutoff value that will; /// give an acceptable confidence level. To choose how small to allow the; /// search range to be before terminating, set the fraction delta such; /// that the search will terminate when topCutoff (a) and bottomCutoff (b); /// satisfy this condition:; ///; /// std::abs(a - b) < std::abs(delta * (a + b)/2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:460,integrat,integration,460,roofit/roostats/inc/RooStats/MCMCCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h,1,['integrat'],['integration']
Integrability,"/// When true, we are directly inside an Objective-C message; /// send expression.; ///; /// This is managed by the \c InMessageExpressionRAIIObject class, and; /// should not be set directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:53,message,message,53,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['message'],['message']
Integrability,"/// When using the Integrate() command argument in chi2FitTo, the result should; /// be identical to a fit without bin integration if the fit function is; /// linear. This is a good cross check to see if the integration works.; /// Inspired by the rf609_xychi2fit tutorial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:19,Integrat,Integrate,19,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,3,"['Integrat', 'integrat']","['Integrate', 'integration']"
Integrability,"/// When we have an expression with type ""id"", we may assume; /// that it has some more-specific class type based on knowledge of; /// common uses of Objective-C. This routine returns that class type,; /// or NULL if no better result could be determined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:168,rout,routine,168,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['rout'],['routine']
Integrability,"/// When we're compiling N-bit code, and the user uses parameters that are; /// greater than N bits (e.g. uint64_t on a 32-bit build), we can run into; /// trouble with APInt size issues. This function handles resizing + overflow; /// checks for us. Check and zext or trunc \p I depending on IntTyBits and; /// I's value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryBuiltins.cpp:279,depend,depending,279,interpreter/llvm-project/llvm/lib/Analysis/MemoryBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryBuiltins.cpp,1,['depend'],['depending']
Integrability,"/// When writing a profile with size limit, user may want to use a different; /// strategy to reduce function count other than dropping functions with fewest; /// samples first. In this case a class implementing the same interfaces should; /// be provided to SampleProfileWriter::writeWithSizeLimit().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:221,interface,interfaces,221,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,1,['interface'],['interfaces']
Integrability,/// Whether \p A is control dependent on \p B.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h:28,depend,dependent,28,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,1,['depend'],['dependent']
Integrability,"/// Whether the diagnostic message can be deferred.; ///; /// For single source offloading languages, a diagnostic message occurred; /// in a device host function may be deferred until the function is sure; /// to be emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:27,message,message,27,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,2,['message'],['message']
Integrability,"/// Whether the file should be cached before reading. Only available for; /// ""remote"" file protocols. If the download fails, the file will be opened; /// remotely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:92,protocol,protocols,92,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['protocol'],['protocols']
Integrability,"/// Whether this declaration declares a type that is; /// dependent, i.e., a type that somehow depends on template; /// parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:58,depend,dependent,58,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['depend'],"['dependent', 'depends']"
Integrability,"/// Whether this expression is instantiation-dependent, meaning that; /// it depends in some way on; /// - a template parameter (even if neither its type nor (constant) value; /// can change due to the template instantiation); /// - or an error; ///; /// In the following example, the expression \c sizeof(sizeof(T() + T())) is; /// instantiation-dependent (since it involves a template parameter \c T), but; /// is neither type- nor value-dependent, since the type of the inner; /// \c sizeof is known (\c std::size_t) and therefore the size of the outer; /// \c sizeof is known.; ///; /// \code; /// template<typename T>; /// void f(T x, T y) {; /// sizeof(sizeof(T() + T());; /// }; /// \endcode; ///; /// \code; /// void func(int) {; /// func(); // the expression is instantiation-dependent, because it depends; /// // on an error.; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:45,depend,dependent,45,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,6,['depend'],"['dependent', 'depends']"
Integrability,/// Whether this generic selection is result-dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:45,depend,dependent,45,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependent']
Integrability,"/// Whether this lambda is known to be dependent, even if its; /// context isn't dependent.; ///; /// A lambda with a non-dependent context can be dependent if it occurs; /// within the default argument of a function template, because the; /// lambda will have been created with the enclosing context as its; /// declaration context, rather than function. This is an unfortunate; /// artifact of having to parse the default arguments before.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:39,depend,dependent,39,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,4,['depend'],['dependent']
Integrability,"/// Whether this message send is a ""delegate init call"",; /// i.e. a call of an init method on self from within an init method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:17,message,message,17,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,/// Whether this message send was implicitly generated by; /// the implementation rather than explicitly written by the user.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:17,message,message,17,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,"/// Whether this method overrides any other in the class hierarchy.; ///; /// A method is said to override any method in the class's; /// base classes, its protocols, or its categories' protocols, that has; /// the same selector and is of the same kind (class or instance).; /// A method in an implementation is not considered as overriding the same; /// method in the interface or its categories.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:156,protocol,protocols,156,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,6,"['interface', 'protocol']","['interface', 'protocols']"
Integrability,/// Whether this nested name specifier refers to a dependent; /// type or not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:51,depend,dependent,51,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,1,['depend'],['dependent']
Integrability,"/// Whether this parameter pack is a pack expansion.; ///; /// A non-type template parameter pack is a pack expansion if its type; /// contains an unexpanded parameter pack. In this case, we will have; /// built a PackExpansionType wrapping the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:232,wrap,wrapping,232,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['wrap'],['wrapping']
Integrability,/// Whether this partition contains a dependence cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp:38,depend,dependence,38,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,1,['depend'],['dependence']
Integrability,/// Whether this template argument is dependent on a template; /// parameter such that its result can change from one instantiation to; /// another.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:38,depend,dependent,38,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,1,['depend'],['dependent']
Integrability,/// Whether this template argument is dependent on a template; /// parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:38,depend,dependent,38,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,1,['depend'],['dependent']
Integrability,"/// Whether this type is a dependent type, meaning that its definition; /// somehow depends on a template parameter (C++ [temp.dep.type]).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:27,depend,dependent,27,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['depend'],"['dependent', 'depends']"
Integrability,"/// Whether this type is or contains an unexpanded parameter; /// pack, used to support C++0x variadic templates.; ///; /// A type that contains a parameter pack shall be expanded by the; /// ellipsis operator at some point. For example, the typedef in the; /// following example contains an unexpanded parameter pack 'T':; ///; /// \code; /// template<typename ...T>; /// struct X {; /// typedef T* pointer_types; // ill-formed; T is a parameter pack.; /// };; /// \endcode; ///; /// Note that this routine does not specify which",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:500,rout,routine,500,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['rout'],['routine']
Integrability,"/// Whether this type is represented natively as a pointer. This includes; /// pointers, references, block pointers, and Objective-C interface,; /// qualified id, and qualified interface types, as well as nullptr_t.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:133,interface,interface,133,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['interface'],['interface']
Integrability,"/// Whether this type somehow involves; /// - a template parameter, even if the resolution of the type does not; /// depend on a template parameter.; /// - or an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:117,depend,depend,117,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,1,['depend'],['depend']
Integrability,"/// Whether this type; /// - is a dependent type (C++ [temp.dep.type]); /// - or it somehow involves an error, e.g. decltype(recovery-expr)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:34,depend,dependent,34,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,1,['depend'],['dependent']
Integrability,/// Whether to entirely skip writing diagnostic options.; /// Primarily used to speed up deserialization during dependency scanning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:112,depend,dependency,112,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['depend'],['dependency']
Integrability,/// Whether to entirely skip writing header search paths.; /// Primarily used to speed up deserialization during dependency scanning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:113,depend,dependency,113,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['depend'],['dependency']
Integrability,/// Whether to entirely skip writing pragma diagnostic mappings.; /// Primarily used to speed up deserialization during dependency scanning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:120,depend,dependency,120,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['depend'],['dependency']
Integrability,"/// Whether to print an InjectedClassNameType with template arguments or as; /// written. When a template argument is unnamed, printing it results in; /// invalid C++ code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:24,Inject,InjectedClassNameType,24,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,1,['Inject'],['InjectedClassNameType']
Integrability,/// Workgroup synchronization scope ID (cross address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:14,synchroniz,synchronization,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// Workgroup synchronization scope ID (single address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:14,synchroniz,synchronization,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// Working set of direct modular dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:34,depend,dependencies,34,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['depend'],['dependencies']
Integrability,"/// Wrap ExtractAPIAction on top of a pre-existing action; ///; /// Used when the ExtractAPI action needs to be executed as a side effect of a; /// regular compilation job. Unlike ExtarctAPIAction, this is meant to be used; /// on regular source files ( .m , .c files) instead of header files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/FrontendActions.h,1,['Wrap'],['Wrap']
Integrability,"/// Wrap ObjC definitions (interfaces, implementations...).; /// \note; /// @autoreleasepool and @synchronized blocks are wrapped; /// according to ``AfterControlStatement`` flag.; /// \endnote",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,4,"['Wrap', 'interface', 'synchroniz', 'wrap']","['Wrap', 'interfaces', 'synchronized', 'wrapped']"
Integrability,"/// Wrap TExecutor::Map functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:4,Wrap,Wrap,4,tmva/tmva/inc/TMVA/Executor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h,1,['Wrap'],['Wrap']
Integrability,"/// Wrap TExecutor::MapReduce functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:4,Wrap,Wrap,4,tmva/tmva/inc/TMVA/Executor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h,1,['Wrap'],['Wrap']
Integrability,"/// Wrap a 128-bit AES key from __key into a key handle and output in; /// ((__m128i*)__h) to ((__m128i*)__h) + 2 and a 32-bit value as return.; /// The explicit source operand __htype specifies handle restrictions.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> ENCODEKEY128 </c> instructions.; ///; /// \code{.operation}; /// InputKey[127:0] := __key[127:0]; /// KeyMetadata[2:0] := __htype[2:0]; /// KeyMetadata[23:3] := 0 // Reserved for future usage; /// KeyMetadata[27:24] := 0 // KeyType is AES-128 (value of 0); /// KeyMetadata[127:28] := 0 // Reserved for future usage; /// Handle[383:0] := WrapKey128(InputKey[127:0], KeyMetadata[127:0],; /// IWKey.Integrity Key[127:0], IWKey.Encryption Key[255:0]); /// dst[0] := IWKey.NoBackup; /// dst[4:1] := IWKey.KeySource[3:0]; /// dst[31:5] := 0; /// MEM[__h+127:__h] := Handle[127:0] // AAD; /// MEM[__h+255:__h+128] := Handle[255:128] // Integrity Tag; /// MEM[__h+383:__h+256] := Handle[383:256] // CipherText; /// OF := 0; /// SF := 0; /// ZF := 0; /// AF := 0; /// PF := 0; /// CF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,1,['Wrap'],['Wrap']
Integrability,"/// Wrap a 256-bit AES key from __key_hi:__key_lo into a key handle, then; /// output handle in ((__m128i*)__h) to ((__m128i*)__h) + 3 and; /// a 32-bit value as return.; /// The explicit source operand __htype specifies handle restrictions.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> ENCODEKEY256 </c> instructions.; ///; /// \code{.operation}; /// InputKey[127:0] := __key_lo[127:0]; /// InputKey[255:128] := __key_hi[255:128]; /// KeyMetadata[2:0] := __htype[2:0]; /// KeyMetadata[23:3] := 0 // Reserved for future usage; /// KeyMetadata[27:24] := 1 // KeyType is AES-256 (value of 1); /// KeyMetadata[127:28] := 0 // Reserved for future usage; /// Handle[511:0] := WrapKey256(InputKey[255:0], KeyMetadata[127:0],; /// IWKey.Integrity Key[127:0], IWKey.Encryption Key[255:0]); /// dst[0] := IWKey.NoBackup; /// dst[4:1] := IWKey.KeySource[3:0]; /// dst[31:5] := 0; /// MEM[__h+127:__h] := Handle[127:0] // AAD; /// MEM[__h+255:__h+128] := Handle[255:128] // Tag; /// MEM[__h+383:__h+256] := Handle[383:256] // CipherText[127:0]; /// MEM[__h+511:__h+384] := Handle[511:384] // CipherText[255:128]; /// OF := 0; /// SF := 0; /// ZF := 0; /// AF := 0; /// PF := 0; /// CF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap a class method that takes concrete argument types (and a sender for; /// a concrete return type) to produce an AsyncHandlerWrapperFunction. Uses; /// SPS to unpack the arguments and pack the result.; ///; /// This function is intended to support easy construction of; /// AsyncHandlerWrapperFunctions that can be associated with a tag; /// (using registerJITDispatchHandler) and called from the executor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap a handler that takes concrete argument types (and a sender for a; /// concrete return type) to produce an AsyncHandlerWrapperFunction. Uses SPS; /// to unpack the arguments and pack the result.; ///; /// This function is intended to support easy construction of; /// AsyncHandlerWrapperFunctions that can be associated with a tag; /// (using registerJITDispatchHandler) and called from the executor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['Wrap'],['Wrap']
Integrability,"/// Wrap a machine instruction, MI, into a FAULTING machine instruction.; /// The FAULTING instruction does the same load/store as MI; /// (defining the same register), and branches to HandlerMBB if the mem access; /// faults. The FAULTING instruction is inserted at the end of MBB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['Wrap'],['Wrap']
Integrability,/// Wrap a non-scheduled instruction in an SU and emit it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.h:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap a preinitialized SlotTracker.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSlotTracker.h,1,['Wrap'],['Wrap']
Integrability,"/// Wrap an object into a TObject. Sometimes needed to avoid reinterpret_cast or enable RTTI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:4,Wrap,Wrap,4,roofit/roofitcore/inc/RooHelpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap before ``else``.; /// \code; /// true:; /// if (foo()) {; /// }; /// else {; /// }; ///; /// false:; /// if (foo()) {; /// } else {; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap before ``while``.; /// \code; /// true:; /// do {; /// foo();; /// }; /// while (1);; ///; /// false:; /// do {; /// foo();; /// } while (1);; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap call to (typically tablegenerated CCAssignFn). This may be; /// overridden to track additional state information as arguments are; /// assigned or apply target specific hacks around the legacy; /// infrastructure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap case labels.; /// \code; /// false: true:; /// switch (foo) { vs. switch (foo) {; /// case 1: { case 1:; /// bar(); {; /// break; bar();; /// } break;; /// default: { }; /// plop(); default:; /// } {; /// } plop();; /// }; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap class definitions.; /// \code; /// true:; /// class foo; /// {};; ///; /// false:; /// class foo {};; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap control statements (``if``/``for``/``while``/``switch``/..).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap enum definitions.; /// \code; /// true:; /// enum X : int; /// {; /// B; /// };; ///; /// false:; /// enum X : int { B };; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,"/// Wrap extern blocks.; /// \code; /// true:; /// extern ""C""; /// {; /// int foo();; /// }; ///; /// false:; /// extern ""C"" {; /// int foo();; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap function definitions.; /// \code; /// true:; /// void foo(); /// {; /// bar();; /// bar2();; /// }; ///; /// false:; /// void foo() {; /// bar();; /// bar2();; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap lambda block.; /// \code; /// true:; /// connect(; /// [](); /// {; /// foo();; /// bar();; /// });; ///; /// false:; /// connect([]() {; /// foo();; /// bar();; /// });; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap namespace definitions.; /// \code; /// true:; /// namespace; /// {; /// int foo();; /// int bar();; /// }; ///; /// false:; /// namespace {; /// int foo();; /// int bar();; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap phiTranslateImpl to provide caching functionality.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['Wrap'],['Wrap']
Integrability,"/// Wrap predicated VPReplicateRecipes with a mask operand in an if-then; /// region block and remove the mask operand. Optimize the created regions by; /// iteratively sinking scalar operands into the region, followed by merging; /// regions until no improvements are remaining.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap serialize(void) and write out the serialized JSON object to \p os.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap struct definitions.; /// \code; /// true:; /// struct foo; /// {; /// int x;; /// };; ///; /// false:; /// struct foo {; /// int x;; /// };; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap the Task in a std::function<void()> that sets the result of the; /// corresponding future.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,1,['Wrap'],['Wrap']
Integrability,/// Wrap the expression in a ConstantExpr if it is a potential immediate; /// invocation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Wrap'],['Wrap']
Integrability,"/// Wrap the integer in a struct in order to avoid template specialization clash with std::uint64_t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:4,Wrap,Wrap,4,tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,1,['Wrap'],['Wrap']
Integrability,/// Wrap union definitions.; /// \code; /// true:; /// union foo; /// {; /// int x;; /// }; ///; /// false:; /// union foo {; /// int x;; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Wrap,Wrap,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Wrap'],['Wrap']
Integrability,"/// Wrap version of getBitsSet.; /// If \p hiBit is bigger than \p loBit, this is same with getBitsSet.; /// If \p hiBit is not bigger than \p loBit, the set bits ""wrap"". For example,; /// with parameters (32, 28, 4), you would get 0xF000000F.; /// If \p hiBit is equal to \p loBit, you would get a result with all bits; /// set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Wrap,Wrap,4,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,"['Wrap', 'wrap']","['Wrap', 'wrap']"
Integrability,"/// Wrapper - A wrapper node for TargetConstantPool, TargetExternalSymbol,; /// and TargetGlobalAddress.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.h,2,"['Wrap', 'wrap']","['Wrapper', 'wrapper']"
Integrability,/// Wrapper Method to do all the necessary work when an Instruction is; /// deleted.; /// Optimizations should use this to make sure that deleted instructions; /// are always accounted for.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper around FoldingSetNodeID that it can be used as the template; /// argument of the StmtDataCollector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper around LazyValueInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyValueInfo.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyValueInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyValueInfo.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper around MCStreamer::emitInstruction(). Possibly adds; /// instrumentation around Inst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper around MappedBlockStream::createIndexedStream() that checks if a; /// stream with that index actually exists. If it does not, the return value; /// will have an MSFError with code msf_error_code::no_stream. Else, the return; /// value will contain the stream returned by createIndexedStream().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBFile.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBFile.cpp,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper around a raw file descriptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper around boolean types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Boolean.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/lib/AST/Interp/Boolean.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Boolean.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper around checkUInt32Argument, with an extra check to be sure; /// that the result will fit into a regular (signed) int. All args have the same; /// purpose as they do in checkUInt32Argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper around extendRegister to ensure we extend to a full 32-bit register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper around numeric types.; ///; /// These wrappers are required to shared an interface between APSint and; /// builtin primitive numeral types, while optimising for storage and; /// allowing methods operating on primitive type to compile to fast code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/lib/AST/Interp/Integral.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h,3,"['Wrap', 'interface', 'wrap']","['Wrapper', 'interface', 'wrappers']"
Integrability,/// Wrapper around the above for cases which don't care if the bound; /// is precise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper around zmq_ppoll; /// This function can throw, so wrap in try-catch!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp:4,Wrap,Wrapper,4,roofit/roofitZMQ/src/ppoll.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp,4,"['Wrap', 'wrap']","['Wrapper', 'wrap']"
Integrability,/// Wrapper class for AMDGPULIbFuncImpl,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper class for IR location info (IR ordering and DebugLoc) to be passed; /// into SDNode creation functions.; /// When an SDNode is created from the DAGBuilder, the DebugLoc is extracted; /// from the original Instruction, and IROrder is the ordinal position of; /// the instruction.; /// When an SDNode is created after the DAG is being built, both DebugLoc and; /// the IROrder are propagated from the original SDNode.; /// So SDLoc class provides two constructors besides the default one, one to; /// be used by the DAGBuilder, the other to be used by others.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper class representing a matrix as a set of vectors, either in row or; /// column major layout. All vectors must have the same vector type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper class representing physical registers. Should be passed by value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegister.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/MC/MCRegister.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegister.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper class representing virtual and physical registers. Should be passed; /// by value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper class to LoopBlocksDFS that provides a standard begin()/end(); /// interface for the DFS reverse post-order traversal of blocks in a loop body.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopIterator.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopIterator.h,2,"['Wrap', 'interface']","['Wrapper', 'interface']"
Integrability,"/// Wrapper class to handle memory instructions, including loads,; /// stores and intrinsic loads and stores defined by the target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper class which calls ParseLexedAttribute, after setting up the; /// scope appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseCXXInlineMethods.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/lib/Parse/ParseCXXInlineMethods.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseCXXInlineMethods.cpp,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper encapsulating separate constraint systems and corresponding value; /// mappings for both unsigned and signed information. Facts are added to and; /// conditions are checked against the corresponding system depending on the; /// signed-ness of their predicates. While the information is kept separate; /// based on signed-ness, certain conditions can be transferred between the two; /// systems.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,2,"['Wrap', 'depend']","['Wrapper', 'depending']"
Integrability,/// Wrapper for FunctionAnalysisManager.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for MCInstLowering.lowerOperand() for the tblgen'erated; /// pseudo lowering.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for MCInstLowering.lowerOperand() for the; /// tblgen'erated pseudo lowering.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for Z3 context,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper for a function that represents a value that; /// functionally represents the original function. This can be a function,; /// global alias to a function, or an ifunc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for a value that won't be replaced with a CFI jump table; /// pointer in LowerTypeTestsModule.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper for findRegisterDefOperandIdx, it returns; /// a pointer to the MachineOperand rather than an index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper for findRegisterUseOperandIdx, it returns; /// a pointer to the MachineOperand rather than an index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for ObjC interfaces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,2,"['Wrap', 'interface']","['Wrapper', 'interfaces']"
Integrability,/// Wrapper for source info for arrays.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for block pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for builtin types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for enum types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for injected class names of class; /// templates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,2,"['Wrap', 'inject']","['Wrapper', 'injected']"
Integrability,/// Wrapper for source info for member pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for pointers decayed from arrays and; /// functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for record types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for tag types. Note that this only; /// records source info for the name itself; a type written 'struct foo'; /// should be represented as an ElaboratedTypeLoc. We currently; /// only do that when C++ is enabled because of the expense of; /// creating an ElaboratedType node for so many type references in C.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for typedefs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for types used via transparent aliases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for source info for unresolved typename using decls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper for substituted template type parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,2,['Wrap'],['Wrapper']
Integrability,/// Wrapper for template type parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper for void* pointer.; /// \tparam PtrTy Either a pointer type like 'T*' or a type that behaves like; /// a pointer.; ///; /// This is a very simple POD type that wraps a pointer that the Parser; /// doesn't know about but that Sema or another client does. The PtrTy; /// template argument is used to make sure that ""Decl"" pointers are not; /// compatible with ""Type"" pointers for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,2,"['Wrap', 'wrap']","['Wrapper', 'wraps']"
Integrability,/// Wrapper function around std::count to count the number of times an element; /// \p Element occurs in the given range \p Range.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper function around std::count_if to count the number of times an; /// element satisfying a given predicate occurs in a range.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper function around std::equal to detect if pair-wise elements between; /// two ranges are the same.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper function around std::is_sorted to check if elements in a range \p R; /// are sorted in non-descending order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper function around std::is_sorted to check if elements in a range \p R; /// are sorted with respect to a comparator \p C.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper function around std::transform to apply a function to a range and; /// store the result elsewhere.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper function for readFileAndProcessRemarks which handles errors.; ///; /// \param[in] InputFileName - Name of file to read from.; /// \param[out] FuncNameToSizeInfo - Populated with information from size; /// remarks in the input file.; ///; /// \returns true if readFileAndProcessRemarks returned no errors. False; /// otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper function to append range `R` to container `C`.; ///; /// C.insert(C.end(), R.begin(), R.end());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper function to remove a value from a container:; ///; /// C.erase(remove(C.begin(), C.end(), V), C.end());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper method for \see LiveIntervals::shrinkToUses.; /// This method does the proper fixing of the live-ranges when the afore; /// mentioned method returns true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper of a MatcherInterface<T> *that allows copying.; ///; /// A Matcher<Base> can be used anywhere a Matcher<Derived> is; /// required. This establishes an is-a relationship which is reverse; /// to the AST hierarchy. In other words, Matcher<T> is contravariant; /// with respect to T. The relationship is built via a type conversion; /// operator rather than a type hierarchy to be able to templatize the; /// type hierarchy instead of spelling it out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper of type source information for a type with; /// no direct qualifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper of type source information for a type with; /// non-trivial direct qualifiers.; ///; /// Currently, we intentionally do not provide source location for; /// type qualifiers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wrapper,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper pass for TargetTransformInfo.; ///; /// This pass can be constructed from a TTI object which it stores internally; /// and is queried by passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper pass for the legacy pass manager,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PhiValues.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/Analysis/PhiValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PhiValues.h,1,['Wrap'],['Wrapper']
Integrability,/// Wrapper pass for the legacy pass manager.; ///; /// This is required because the passes that will depend on this are codegen; /// passes which run through the legacy pass manager.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DXILShaderFlags.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Target/DirectX/DXILShaderFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DXILShaderFlags.h,2,"['Wrap', 'depend']","['Wrapper', 'depend']"
Integrability,/// Wrapper to account for known fast math flags at the use instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper to interface LowerOperation with a vector of Results.; /// Returns false if the target wants to use default expansion. Otherwise; /// returns true. If return is true and the Results are empty, then the; /// target wants to keep the input node as is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,2,"['Wrap', 'interface']","['Wrapper', 'interface']"
Integrability,/// Wrapper to model the analysis pass concept.; ///; /// Can wrap any type which implements a suitable \c run method. The method; /// must accept an \c IRUnitT& and an \c AnalysisManager<IRUnitT>& as arguments; /// and produce an object which can be wrapped in a \c AnalysisResultModel.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,3,"['Wrap', 'wrap']","['Wrapper', 'wrap', 'wrapped']"
Integrability,"/// Wrapper to model the analysis result concept.; ///; /// By default, this will implement the invalidate method with a trivial; /// implementation so that the actual analysis result doesn't need to provide; /// an invalidation handler. It is only selected when the invalidation handler; /// is not part of the ResultT's interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,2,"['Wrap', 'interface']","['Wrapper', 'interface']"
Integrability,/// Wrapper to pass all the arguments to computeKnownFPClass,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['Wrap'],['Wrapper']
Integrability,"/// Wrapper to unify ""old style"" CallGraph and ""new style"" LazyCallGraph. This; /// simplifies the interface and the call sites, e.g., new and old pass manager; /// passes can share the same code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:4,Wrap,Wrapper,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,2,"['Wrap', 'interface']","['Wrapper', 'interface']"
Integrability,/// WrapperFunctionCalls convert to true if the callee is non-null.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h:4,Wrap,WrapperFunctionCalls,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/WrapperFunctionUtils.h,1,['Wrap'],['WrapperFunctionCalls']
Integrability,/// Wrappers for getting the \c Use of a call argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:4,Wrap,Wrappers,4,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['Wrap'],['Wrappers']
Integrability,/// Wrapping flags may allow combining constants separated by an extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:4,Wrap,Wrapping,4,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,1,['Wrap'],['Wrapping']
Integrability,/// Wraps a BFI to allow lazy computation of the block frequencies.; ///; /// A pass that only conditionally uses BFI can uncondtionally require the; /// analysis without paying for the overhead if BFI doesn't end up being used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h,1,['Wrap'],['Wraps']
Integrability,/// Wraps a BPI to allow lazy computation of the branch probabilities.; ///; /// A pass that only conditionally uses BPI can uncondtionally require the; /// analysis without paying for the overhead if BPI doesn't end up being used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h,1,['Wrap'],['Wraps']
Integrability,"/// Wraps a \c MatchConsumer in a \c Stencil, so that it can be used in a \c; /// Stencil. This supports user-defined extensions to the \c Stencil language.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h:4,Wrap,Wraps,4,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h,1,['Wrap'],['Wraps']
Integrability,"/// Wraps a macro expansion cursor and provides a common interface; /// for a normal macro expansion cursor or a ""pseudo"" one.; ///; /// ""Pseudo"" macro expansion cursors (essentially a macro definition along with; /// a source location) are created in special cases, for example they can be; /// created for identifiers inside macro definitions, if these identifiers are; /// macro names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:4,Wrap,Wraps,4,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h,2,"['Wrap', 'interface']","['Wraps', 'interface']"
Integrability,/// Wraps an ObjCPointerType with source location information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Wrap,Wraps,4,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['Wrap'],['Wraps']
Integrability,/// Wraps llvm::Type::getIntNTy with some implicit arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:4,Wrap,Wraps,4,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,1,['Wrap'],['Wraps']
Integrability,/// Wraps state for a lookup-in-progress.; /// DefinitionGenerators can optionally take ownership of a LookupState object; /// to suspend a lookup-in-progress while they search for definitions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['Wrap'],['Wraps']
Integrability,"/// Wraps the components of this RooSimultaneous in RooBinSamplingPdfs, with a; /// different precision parameter for each component.; /// \param[in] data The dataset to be used in the eventual fit, used to figure; /// out the observables and whether the dataset is binned.; /// \param[in] precisions The map that gives the precision argument for each; /// component in the RooSimultaneous. The keys are the pdf names. If; /// there is no value for a given component, it will not use the bin; /// integration. Otherwise, the value has the same meaning than in; /// the IntegrateBins() command argument for RooAbsPdf::fitTo().; /// \param[in] useCategoryNames If this flag is set, the category names will be; /// used to look up the precision in the precisions map instead of; /// the pdf names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:4,Wrap,Wraps,4,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,3,"['Integrat', 'Wrap', 'integrat']","['IntegrateBins', 'Wraps', 'integration']"
Integrability,"/// Wraps the components of this RooSimultaneous in RooBinSamplingPdfs.; /// \param[in] data The dataset to be used in the eventual fit, used to figure; /// out the observables and whether the dataset is binned.; /// \param[in] precision Precision argument for all created RooBinSamplingPdfs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:4,Wrap,Wraps,4,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['Wrap'],['Wraps']
Integrability,/// Wraps the content provider with HTTP Status code and headers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/HTTPServer.h,1,['Wrap'],['Wraps']
Integrability,/// Wraps the destination register name with AVX512 mask/maskz filtering.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86InstComments.cpp:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86InstComments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86InstComments.cpp,1,['Wrap'],['Wraps']
Integrability,/// Wraps the input bundled image into the module \p M as global symbols and; /// registers the images with the HIP runtime.; /// \param EntryArray Optional pair pointing to the `__start` and `__stop`; /// symbols holding the `__tgt_offload_entry` array.; /// \param Suffix An optional suffix appended to the emitted symbols.; /// \param EmitSurfacesAndTextures Whether to emit surface and textures; /// registration code. It defaults to false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h,1,['Wrap'],['Wraps']
Integrability,/// Wraps the input device images into the module \p M as global symbols and; /// registers the images with the OpenMP Offloading runtime libomptarget.; /// \param EntryArray Optional pair pointing to the `__start` and `__stop`; /// symbols holding the `__tgt_offload_entry` array.; /// \param Suffix An optional suffix appended to the emitted symbols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h,1,['Wrap'],['Wraps']
Integrability,/// Wraps the input fatbinary image into the module \p M as global symbols and; /// registers the images with the CUDA runtime.; /// \param EntryArray Optional pair pointing to the `__start` and `__stop`; /// symbols holding the `__tgt_offload_entry` array.; /// \param Suffix An optional suffix appended to the emitted symbols.; /// \param EmitSurfacesAndTextures Whether to emit surface and textures; /// registration code. It defaults to false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/OffloadWrapper.h,1,['Wrap'],['Wraps']
Integrability,/// Wraps the returned DIEs for a given address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,1,['Wrap'],['Wraps']
Integrability,/// Wraps up getting a CFI index and building a MachineInstr for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h:4,Wrap,Wraps,4,interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h,3,['Wrap'],['Wraps']
Integrability,"/// Write a \p DebugMsg about vectorization to the debug output stream. If \p I; /// is passed, the message relates to that particular instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:100,message,message,100,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['message'],['message']
Integrability,/// Write all error messages (if any) in E to a string. The newline character; /// is used to separate error messages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:20,message,messages,20,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,4,['message'],['messages']
Integrability,"/// Write an UPDATE_VISIBLE block for the given context.; ///; /// UPDATE_VISIBLE blocks contain the declarations that are added to an existing; /// DeclContext in a dependent AST file. As such, they only exist for the TU; /// (in C++), for namespaces, and for classes with forward-declared unscoped; /// enumeration members (in C++11).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:166,depend,dependent,166,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['depend'],['dependent']
Integrability,"/// Write appropriate line information as either #line directives or GNU line; /// markers depending on what mode we're in, including the \p Filename and; /// \p Line we are located at, using the specified \p EOL line separator, and; /// any \p Extra context specifiers in GNU line directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp:91,depend,depending,91,interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,1,['depend'],['depending']
Integrability,"/// Write the object file and returns the number of bytes written.; ///; /// This routine is called by the assembler after layout and relaxation is; /// complete, fixups have been evaluated and applied, and relocations; /// generated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h:82,rout,routine,82,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,1,['rout'],['routine']
Integrability,/// Write_ProtocolExprReferencedMetadata - This routine writer out the; /// protocol reference symbols in the for of:; /// struct _protocol_t *PROTOCOL_REF = &PROTOCOL_METADATA.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:48,rout,routine,48,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,"['protocol', 'rout']","['protocol', 'routine']"
Integrability,"/// Writes MessagePack objects to an output stream, one at a time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackWriter.h:11,Message,MessagePack,11,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackWriter.h,1,['Message'],['MessagePack']
Integrability,"/// Zippy iterator that uses the second iterator for comparisons. For the; /// increment to be safe, the second range has to be the shortest.; /// Returns `enumerator_result` on dereference to provide `.index()` and; /// `.value()` member functions.; /// Note: Because the dereference operator returns `enumerator_result` as a; /// value instead of a reference and does not strictly conform to the C++17's; /// definition of forward iterator. However, it satisfies all the; /// forward_iterator requirements that the `zip_common` and `zippy` depend on; /// and fully conforms to the C++20 definition of forward iterator.; /// This is similar to `std::vector<bool>::iterator` that returns bit reference; /// wrappers on dereference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:542,depend,depend,542,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,2,"['depend', 'wrap']","['depend', 'wrappers']"
Integrability,/// [ObjC] protocol-qualifiers:; //// '<' identifier-list '>',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:11,protocol,protocol-qualifiers,11,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['protocol'],['protocol-qualifiers']
Integrability,/// [SU]INT_TO_FP - These operators convert integers (whose interpreted sign; /// depends on the first letter) to floating point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:82,depend,depends,82,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['depend'],['depends']
Integrability,"/// \ brief Results of the completer to be printed by the text interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/ClingCodeCompleteConsumer.h:63,interface,interface,63,interpreter/cling/include/cling/Interpreter/ClingCodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/ClingCodeCompleteConsumer.h,1,['interface'],['interface']
Integrability,/// \#pragma message has been invoked.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:13,message,message,13,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['message'],['message']
Integrability,"/// \brief Assert in case of an unsupported type. Outlined to reduce include; /// dependencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h:82,depend,dependencies,82,interpreter/cling/include/cling/Interpreter/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h,1,['depend'],['dependencies']
Integrability,"/// \brief Build a new Objective-C boxed expression.; ///; /// By default, performs semantic analysis to build the new expression.; /// Subclasses may override this routine to provide different behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:165,rout,routine,165,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,"/// \brief Build a new requires expression.; ///; /// By default, performs semantic analysis to build the new expression.; /// Subclasses may override this routine to provide different behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:156,rout,routine,156,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rout'],['routine']
Integrability,/// \brief CUDA action builder. It injects device code in the host backend; /// action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:35,inject,injects,35,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['inject'],['injects']
Integrability,"/// \brief Check whether the given non-dependent constraint expression is; /// satisfied. Returns false and updates Satisfaction with the satisfaction; /// verdict if successful, emits a diagnostic and returns true if an error; /// occurred and satisfaction could not be determined.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,depend,dependent,39,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['depend'],['dependent']
Integrability,"/// \brief Construct a type requirement from a type. If the given type is not; /// dependent, this indicates that the type exists and the requirement will be; /// satisfied. Otherwise, the SubstitutionDiagnostic constructor is to be; /// used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:83,depend,dependent,83,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,1,['depend'],['dependent']
Integrability,/// \brief Get elaborated satisfaction info about the template arguments'; /// satisfaction of the named concept.; /// The expression must not be dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:146,depend,dependent,146,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,1,['depend'],['dependent']
Integrability,/// \brief HIP action builder. It injects device code in the host backend; /// action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:34,inject,injects,34,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['inject'],['injects']
Integrability,"/// \brief Information about the satisfaction of the named concept with the; /// given arguments. If this expression is value dependent, this is to be; /// ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:126,depend,dependent,126,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,1,['depend'],['dependent']
Integrability,"/// \brief Interface function signaling a request to perform constant term optimization.; ///; /// The default implementation takes no action other than to forward the calls to all servers. May be overridden in; /// likelihood classes without a cached dataset, like RooSubsidiaryL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h:11,Interface,Interface,11,roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,1,['Interface'],['Interface']
Integrability,"/// \brief Invalidate previous function definition. If `D` is a wrapper,; /// local declararations may be moved by DeclExtractor; in that case,; /// invalidate all those before DeclExtractor runs.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DefinitionShadower.h:64,wrap,wrapper,64,interpreter/cling/lib/Interpreter/DefinitionShadower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DefinitionShadower.h,1,['wrap'],['wrapper']
Integrability,"/// \brief Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx:22,wrap,wrapping,22,tree/dataframe/inc/ROOT/RTrivialDS.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx,1,['wrap'],['wrapping']
Integrability,"/// \brief Make a RDF wrapping a RTrivialDS with the specified amount of entries.; ///; /// Constructing an RDataFrame as `RDataFrame(nEntries)` is a superior alternative.; /// If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source:; /// it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx:22,wrap,wrapping,22,tree/dataframe/inc/ROOT/RTrivialDS.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx,1,['wrap'],['wrapping']
Integrability,"/// \brief Produce all required systematic variations for the given result.; /// \param[in] resPtr The result for which variations should be produced.; /// \return A \ref ROOT::RDF::Experimental::RResultMap ""RResultMap"" object with full variation names as strings; /// (e.g. ""pt:down"") and the corresponding varied results as values.; ///; /// A given input RResultPtr<T> produces a corresponding RResultMap<T> with a ""nominal""; /// key that will return a value identical to the one contained in the original RResultPtr.; /// Other keys correspond to the varied values of this result, one for each variation; /// that the result depends on.; /// VariationsFor does not trigger the event loop. The event loop is only triggered; /// upon first access to a valid key, similarly to what happens with RResultPtr.; ///; /// If the result does not depend, directly or indirectly, from any registered systematic variation, the; /// returned RResultMap will contain only the ""nominal"" key.; ///; /// See RDataFrame's \ref ROOT::RDF::RInterface::Vary() ""Vary"" method for more information and example usages.; ///; /// \note Currently, producing variations for the results of \ref ROOT::RDF::RInterface::Display() ""Display"",; /// \ref ROOT::RDF::RInterface::Report() ""Report"" and \ref ROOT::RDF::RInterface::Snapshot() ""Snapshot""; /// actions is not supported.; //; // An overview of how systematic variations work internally. Given N variations (including the nominal):; //; // RResultMap owns RVariedAction; // N results N action helpers; // N previous filters; // N*#input_cols column readers; //; // ...and each RFilter and RDefine knows for what universe it needs to construct column readers (""nominal"" by default).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:629,depend,depends,629,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,2,['depend'],"['depend', 'depends']"
Integrability,"/// \brief Sets the output value with an offset.; ///; /// This function sets the output value with an offset for the given argument.; /// It should only be used in reducer nodes. Depending on the current; /// OffsetMode, the result will either be just the value, the value minus the; /// offset, of just the offset.; ///; /// \param arg Pointer to the RooAbsArg object.; /// \param val The value to be set.; /// \param offset The offset value.; ///; /// \throws std::runtime_error if the argument is not a reducer node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/EvalContext.cxx:180,Depend,Depending,180,roofit/roofitcore/src/RooFit/EvalContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/EvalContext.cxx,1,['Depend'],['Depending']
Integrability,"/// \brief Some of clang's routines rely on valid source locations and; /// source ranges. This member can be looked up and source locations and; /// ranges can be passed in as parameters to these routines.; ///; /// Use instead of SourceLocation() and SourceRange(). This might help,; /// when clang emits diagnostics on artificially inserted AST node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h:27,rout,routines,27,interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/RuntimeUniverse.h,2,['rout'],['routines']
Integrability,"/// \brief Test whether push-pull sockets are working; ///; /// \note This function tests the PUSH-PULL socket pairs only. The PUB-SUB sockets are already tested in the; /// constructor.; ///; /// \param process_manager ProcessManager object used to instantiate this object. Used to identify which process we are; /// running on and hence which sockets need to be tested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Messenger.cxx:127,PUB-SUB,PUB-SUB,127,roofit/multiprocess/src/Messenger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Messenger.cxx,1,['PUB-SUB'],['PUB-SUB']
Integrability,"/// \brief The queue process's event loop; ///; /// Polls for incoming messages from other processes and handles them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Queue.cxx:71,message,messages,71,roofit/multiprocess/src/Queue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Queue.cxx,1,['message'],['messages']
Integrability,"/// \brief The value's type, stored as opaque void* to reduce; /// dependencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h:67,depend,dependencies,67,interpreter/cling/include/cling/Interpreter/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h,1,['depend'],['dependencies']
Integrability,"/// \brief The worker processes' event loop; ///; /// Asks the queue process for tasks, polls for incoming messages from other; /// processes and handles them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/worker.cxx:107,message,messages,107,roofit/multiprocess/src/worker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/worker.cxx,1,['message'],['messages']
Integrability,"/// \brief This callback is invoked whenever the interpreter failed to load a library.; ///; /// \param[in] - Error message and parameters passed to loadLibrary; /// \returns true if the error was handled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h:116,message,message,116,interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,1,['message'],['message']
Integrability,"/// \brief This interface provides a way to observe the actions of the; /// interpreter as it does its thing. Clients can define their hooks here to; /// implement interpreter level tools.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h:16,interface,interface,16,interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,1,['interface'],['interface']
Integrability,"/// \brief Transforms a declaration with initializer of dependent type.; /// If an object on the free store is being initialized we use the; /// EvaluateT; /// If an object on the stack is being initialized it is transformed into; /// reference and an object on the free store is created in order to; /// avoid the copy constructors, which might be private; ///; /// For example:; /// @code; /// int i = 5;; /// MyClass my(dep->Symbol(i)); /// @endcode; /// where dep->Symbol() is of artificially dependent type it is being; /// transformed into:; /// @code; /// cling::runtime::internal::LifetimeHandler; /// __unique(""dep->Sybmol(*(int*)@)"",(void*[]){&i}, DC, ""MyClass"");; /// MyClass &my(*(MyClass*)__unique.getMemory());; /// @endcode; ///; /// Note: here our main priority is to preserve equivalent behavior. We have; /// to clean the heap memory afterwords.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.h:56,depend,dependent,56,interpreter/cling/lib/Interpreter/DynamicLookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.h,2,['depend'],['dependent']
Integrability,"/// \brief Virtual function to update any necessary state on workers; ///; /// This function is called from the worker loop when something is received; /// over the ZeroMQ ""SUB"" socket. The master process sends messages to workers; /// on its ""PUB"" socket. Thus, we can update, for instance, parameter values; /// on the worker that were updated since the last call on the master side.; /// \note Implementers: make sure to also update the state_id_ member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Job.cxx:211,message,messages,211,roofit/multiprocess/src/Job.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Job.cxx,1,['message'],['messages']
Integrability,/// \brief Whether or not the concept with the given arguments was satisfied; /// when the expression was created.; /// The expression must not be dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:147,depend,dependent,147,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,1,['depend'],['dependent']
Integrability,/// \brief Whether or not the requires clause is satisfied.; /// The expression must not be dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:92,depend,dependent,92,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,1,['depend'],['dependent']
Integrability,"/// \brief Wrap around a `daos_oclass_id_t`. An object class describes the schema of data distribution; /// and protection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx:11,Wrap,Wrap,11,tree/ntuple/v7/inc/ROOT/RDaos.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx,1,['Wrap'],['Wrap']
Integrability,"/// \brief Wrapper over a `void *` that may help to detect the use of invalid handles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/libdaos_mock/libdaos_mock.cxx:11,Wrap,Wrapper,11,tree/ntuple/v7/src/libdaos_mock/libdaos_mock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/libdaos_mock/libdaos_mock.cxx,1,['Wrap'],['Wrapper']
Integrability,/// \brief true if there conditionnal was wrapped on the first operator (the; /// question mark),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h:42,wrap,wrapped,42,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,1,['wrap'],['wrapped']
Integrability,"/// \brief wraps an ExternalASTSource in an ExternalSemaSource. No functional; /// difference between the original source and this wrapper intended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp:11,wrap,wraps,11,interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp,2,['wrap'],"['wrapper', 'wraps']"
Integrability,/// \c NameStrings is a string composed of one of more sub-strings; /// encoded in the format described in \c collectPGOFuncNameStrings.; /// This method is a wrapper to \c readPGOFuncNameStrings method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:159,wrap,wrapper,159,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['wrap'],['wrapper']
Integrability,/// \class NilReceiverBRVisitor; /// Prints path notes when a message is sent to a nil receiver.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:62,message,message,62,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,1,['message'],['message']
Integrability,"/// \class WrappedAtomic.; /// \brief Provides copy constructor for `atomic` and `+=` even for floats.; ///; /// It provides the operations needed for `Hist` with atomic bin content.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx:11,Wrap,WrappedAtomic,11,hist/histv7/test/atomics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx,1,['Wrap'],['WrappedAtomic']
Integrability,"/// \cond ROOFIT_INTERNAL; /*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGrid.cxx; \class RooGrid; \ingroup Roofitcore. Utility class for RooMCIntegrator which; implements an adaptive multi-dimensional Monte Carlo numerical; integration, following the VEGAS algorithm.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGrid.cxx:888,integrat,integration,888,roofit/roofitcore/src/RooGrid.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGrid.cxx,1,['integrat'],['integration']
Integrability,"/// \cond ROOFIT_INTERNAL; /*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooSentinel.cxx; \class RooSentinel; \ingroup Roofitcore. RooSentinel is a special purpose singleton class that terminates; all other RooFit singleton services when the process exits. All function RooFit singleton services are created on the heap with; a static wrapper function to avoid the 'static initialization order fiasco'; but are not automatically destroyed at the end of the session. This class; installs an atexit() function that takes care of this; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSentinel.cxx:995,wrap,wrapper,995,roofit/roofitcore/src/RooSentinel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSentinel.cxx,1,['wrap'],['wrapper']
Integrability,"/// \cond ROOFIT_INTERNAL; /*; * Project: RooFit; * Authors:; * Carsten D. Burgard, DESY/ATLAS, Dec 2021; *; * Copyright (c) 2022, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class RooStats::HistFactory::JSONTool; * \ingroup HistFactory; The RooStats::HistFactory::JSONTool can be used to export a HistFactory; measurement to HS3 JSON. It is not part of the public user interface, but a; pretty useful tool for unit test, validating if a measurement object can be; directly translated to HS3 without going over RooFit. If this translation turns; out to be important for users, it can be considered in the future to make the; class part of the public interface.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/JSONTool.cxx:533,interface,interface,533,roofit/histfactory/src/JSONTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/JSONTool.cxx,2,['interface'],['interface']
Integrability,"/// \cond ROOFIT_INTERNAL; /*; * Project: RooFit; * Authors:; * Jonas Rembser, CERN 2023; *; * Copyright (c) 2023, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /**; \internal; \file RooEvaluatorWrapper.cxx; \class RooEvaluatorWrapper; \ingroup Roofitcore. Wraps a RooFit::Evaluator that evaluates a RooAbsReal back into a RooAbsReal.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooEvaluatorWrapper.cxx:413,Wrap,Wraps,413,roofit/roofitcore/src/RooEvaluatorWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooEvaluatorWrapper.cxx,1,['Wrap'],['Wraps']
Integrability,"/// \cond ROOFIT_INTERNAL; // register integrator class; // create a derived class in order to call the protected method of the; // RoodaptiveGaussKronrodIntegrator1D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:39,integrat,integrator,39,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,1,['integrat'],['integrator']
Integrability,"/// \defgroup ASTAST AST file AST constants; ///; /// The constants in this group describe various components of the; /// abstract syntax tree within an AST file.; ///; /// @{; /// Predefined type IDs.; ///; /// These type IDs correspond to predefined types in the AST; /// context, such as built-in types (int) and special place-holder; /// types (the \<overload> and \<dependent> type markers). Such; /// types are never actually serialized, since they will be built; /// by the AST context when it is created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:371,depend,dependent,371,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['depend'],['dependent']
Integrability,/// \defgroup VFDatabase query interface.; ///; /// @{; /// Retrieve the Function with VFShape \p Shape.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:31,interface,interface,31,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['interface'],['interface']
Integrability,"/// \defgroup cocoa Cocoa backend; /// \brief Interface to MacOS native graphics system.; /// \ingroup GraphicsBackends; /** \class TGCocoa; \ingroup cocoa. This class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D. TVirtualX is a typical fat interface, it's a ""C++ wrapper"" for; X11 library. It's a union of several orthogonal interfaces like:; color management, window management, pixmap management, cursors,; events, images, drag and drop, font management, gui-rendering,; non-gui graphics, etc. etc.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:46,Interface,Interface,46,graf2d/cocoa/inc/TGCocoa.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h,5,"['Interface', 'interface', 'wrap']","['Interface', 'interface', 'interfaces', 'wrapper']"
Integrability,"/// \endcond; /**; * @class Array; * @brief A templated class for managing an array of data using a specified memory type.; *; * The Array class provides a convenient interface for managing an array of; * data using different memory types (e.g., memory on the host or device).; * The memory is automatically freed at the end of the lifetime.; *; * @tparam Data_t The type of data elements to be stored in the array.; * @tparam Memory_t The type of memory that provides storage for the array.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/CudaInterface.h:167,interface,interface,167,roofit/batchcompute/src/CudaInterface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/CudaInterface.h,1,['interface'],['interface']
Integrability,/// \endcond; /*; * Wrapper around cudaEvent_t.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/CudaInterface.h:20,Wrap,Wrapper,20,roofit/batchcompute/src/CudaInterface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/CudaInterface.h,1,['Wrap'],['Wrapper']
Integrability,"/// \endcond; ////////////////////////////////////////////////////////////////////////////////; /// \brief Merge multiple RMergeableValue objects into one.; /// \param[in] OutputMergeable The mergeable object where all the information; /// will be aggregated.; /// \param[in] InputMergeables Other mergeables containing the partial results.; /// \returns An RMergeableValue holding the aggregated value wrapped in an; /// `std::unique_ptr`.; ///; /// This is the recommended way of merging multiple RMergeableValue objects.; /// This overload takes ownership of the mergeables and gives back to the user; /// a mergeable with the aggregated information. All the mergeables with the; /// partial results get destroyed in the process.; ///; /// Example usage:; /// ~~~{.cpp}; /// using namespace ROOT::Detail::RDF;; /// // mh1, mh2, mh3 are std::unique_ptr<RMergeableValue<TH1D>>; /// auto mergedptr = MergeValues(std::move(mh1), std::move(mh2), std::move(mh3));; /// const auto &mergedhisto = mergedptr->GetValue(); // Final merged histogram; /// // Do stuff with it; /// mergedhisto.Draw();; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RMergeableValue.hxx:403,wrap,wrapped,403,tree/dataframe/inc/ROOT/RDF/RMergeableValue.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RMergeableValue.hxx,1,['wrap'],['wrapped']
Integrability,"/// \endcond; //////////////////////////////////////////////////////////////////////////; /// One of the template functions used to read objects from messages.; /// Different implementations are provided for different types of objects:; /// classes, non-pointer built-ins and const char*. Reading pointers is; /// not implemented (at the time of writing, sending pointers is not either).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/MPSendRecv.h:150,message,messages,150,core/multiproc/inc/MPSendRecv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/MPSendRecv.h,1,['message'],['messages']
Integrability,/// \enum DependenceKind; /// Defines different dependence kinds among various ARC constructs.; ///; /// There are several kinds of dependence-like concepts in use here.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.h:10,Depend,DependenceKind,10,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/DependencyAnalysis.h,3,"['Depend', 'depend']","['DependenceKind', 'dependence', 'dependence-like']"
Integrability,"/// \file CladDerivator.h; ///; /// \brief The file is a bridge between ROOT and clad automatic differentiation; /// plugin.; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date July, 2018; /*************************************************************************; * Copyright (C) 1995-2018, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/CladDerivator.h:57,bridg,bridge,57,math/mathcore/inc/Math/CladDerivator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/CladDerivator.h,1,['bridg'],['bridge']
Integrability,"/// \file; /// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; /// - Package : TMVA; /// - Exectuable: TMVACrossValidation; ///; ///; /// Performs a verification that the cross evaluation splitting was performed as; /// intended. If the input data has ids (EventNumbers); ///; /// 0,1,2,3,4,5,6,7,8,9,10; ///; /// these will be split into e.g. 3 parts; ///; /// Part 0: 0,3,6,9; /// Part 1: 1,4,7,10; /// Part 2: 2,5,8; ///; /// This file verifies that each fold is calculated so that the test data for; /// each fold is equal to the equivalent part. That is the test set for fold 0; /// is part 0 and the train set is part 1 + part 2.; ///; /// Fold 0:; /// Train: 1,2,4,5,7,8,10,; /// Test : 0,3,6,9; ///; /// Et.c.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:41,integrat,integrated,41,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,1,['integrat'],['integrated']
Integrability,"/// \file; /// \brief This file contains a specialised ROOT message handler to test for diagnostic in unit tests.; ///; /// \author Stephan Hageboeck <stephan.hageboeck@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx:60,message,message,60,core/testsupport/src/TestSupport.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/src/TestSupport.cxx,1,['message'],['message']
Integrability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro demonstrate usage of ROOT7 graphics from many threads; /// Three different canvases in three different threads are started and regularly updated.; /// Extra thread created in background and used to run http protocol, in/out websocket communications and process http; /// requests; /// Main application thread (CLING interactive session) remains fully functional; ///; /// \macro_code; ///; /// \date 2018-08-16; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rcanvas_mt.cxx:269,protocol,protocol,269,tutorials/rcanvas/rcanvas_mt.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rcanvas_mt.cxx,1,['protocol'],['protocol']
Integrability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro shows how ROOT RCanvas::Update method is working.; /// One can do sync and/or async depending how important is that graphics is updated before next action will be performed; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2021-07-05; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rcanvas_update.cxx:146,depend,depending,146,tutorials/rcanvas/rcanvas_update.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rcanvas_update.cxx,1,['depend'],['depending']
Integrability,"/// \name High-Level API; /// @{; /// Perform any late binding of symbols (for example, to assign symbol; /// indices for use when generating relocations).; ///; /// This routine is called by the assembler after layout and relaxation is; /// complete.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h:171,rout,routine,171,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectWriter.h,1,['rout'],['routine']
Integrability,/// \name Hooks for symbolic disassembly via the public 'C' interface.; /// @{; /// The function to get the symbolic information for operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCExternalSymbolizer.h:60,interface,interface,60,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCExternalSymbolizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCExternalSymbolizer.h,1,['interface'],['interface']
Integrability,"/// \name Iterate slices that start within the partition.; /// These may be splittable or unsplittable. They have a begin offset >= the; /// partition begin offset.; /// @{; // FIXME: We should probably define a ""concat_iterator"" helper and use that; // to stitch together pointee_iterators over the split tails and the; // contiguous iterators of the partition. That would give a much nicer; // interface here. We could then additionally expose filtered iterators for; // split, unsplit, and unsplittable splices based on the usage patterns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:396,interface,interface,396,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['interface'],['interface']
Integrability,"/// \name Legacy interface; /// In ROOT versions before 6.22, RooFit didn't have this typed proxy. Therefore, a number of functions; /// for forwarding calls to the proxied objects were necessary. The functions in this group can all be; /// replaced by directly accessing the proxied objects using e.g. the member access operator like; /// `proxy->function()` or by dereferencing like `*proxy = value`.; /// For this to work, choose the template argument appropriately. That is, if the; /// proxy stores a PDF, use `RooTemplateProxy<RooAbsPdf>`, *etc.*.; /// @{; /// Get the label of the current category state. This function only makes sense for category proxies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:17,interface,interface,17,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['interface'],['interface']
Integrability,/// \name MCAsmParser Proxy Interfaces; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h:28,Interface,Interfaces,28,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,1,['Interface'],['Interfaces']
Integrability,/// \name MCStreamer Interface; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFStreamer.h:21,Interface,Interface,21,interpreter/llvm-project/llvm/include/llvm/MC/MCELFStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFStreamer.h,3,['Interface'],['Interface']
Integrability,/// \name MCStreamer interface; /// \{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWinCOFFStreamer.h:21,interface,interface,21,interpreter/llvm-project/llvm/include/llvm/MC/MCWinCOFFStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCWinCOFFStreamer.h,1,['interface'],['interface']
Integrability,"/// \name Name lookup; ///; /// These routines provide name lookup that is used during semantic; /// analysis to resolve the various kinds of names (identifiers,; /// overloaded operator names, constructor names, etc.) into zero or; /// more declarations within a particular scope. The major entry; /// points are LookupName, which performs unqualified name lookup,; /// and LookupQualifiedName, which performs qualified name lookup.; ///; /// All name lookup is performed based on some specific criteria,; /// which specify what names will be visible to name lookup and how; /// far name lookup should work. These criteria are important both; /// for capturing language semantics (certain lookups will ignore; /// certain names, for example) and for performance, since name; /// lookup is often a bottleneck in the compilation of C++. Name; /// lookup criteria is specified via the LookupCriteria enumeration.; ///; /// The results of name lookup can vary based on the kind of name; /// lookup performed, the current language, and the translation; /// unit. In C, for example, name lookup will either return nothing; /// (no entity found) or a single declaration. In C++, name lookup; /// can additionally refer to a set of overloaded functions or; /// result in an ambiguity. All of the possible results of name; /// lookup are captured by the LookupResult class, which provides; /// the ability to distinguish among them.; //@{; /// Describes the kind of name lookup to perform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:38,rout,routines,38,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['rout'],['routines']
Integrability,"/// \name RooFit interface; /// @{; /// Tell whether we can be stored in a dataset. Always true for RooCategory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:17,interface,interface,17,roofit/roofitcore/inc/RooCategory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h,1,['interface'],['interface']
Integrability,/// \name Target Fixup Interfaces; /// @{; /// Get the number of target specific fixup kinds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:23,Interface,Interfaces,23,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,1,['Interface'],['Interfaces']
Integrability,"/// \p Fn is the function where the diagnostic is being emitted. \p Loc is; /// the location information to use in the diagnostic. If line table; /// information is available, the diagnostic will include the source code; /// location. \p Msg is the message to show. Note that this class does not; /// copy this message, so this reference must be valid for the whole life time; /// of the diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:249,message,message,249,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,4,['message'],['message']
Integrability,"/// \p Instr gives the original instruction that triggered the diagnostic.; /// \p MsgStr gives the message.; /// This class does not copy \p MsgStr, therefore the reference must be valid; /// for the whole life time of the Diagnostic.; /// Same for \p I.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:100,message,message,100,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['message'],['message']
Integrability,"/// \p LocCookie if non-zero gives the line number for this report.; /// \p MsgStr gives the message.; /// This class does not copy \p MsgStr, therefore the reference must be valid; /// for the whole life time of the Diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:93,message,message,93,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['message'],['message']
Integrability,"/// \p MsgStr is the message to be reported to the frontend.; /// This class does not copy \p MsgStr, therefore the reference must be valid; /// for the whole life time of the Diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:21,message,message,21,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['message'],['message']
Integrability,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-analysis=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark (single-word, camel-case). \p Loc is the debug location and \p; /// CodeRegion is the region that the optimization operates on (currently only; /// block is supported). The front-end will append its own message related to; /// options that address floating-point non-commutativity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:445,message,message,445,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['message'],['message']
Integrability,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-analysis=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark (single-word, camel-case). \p Loc is the debug location and \p; /// CodeRegion is the region that the optimization operates on (currently only; /// block is supported). The front-end will append its own message related to; /// options that address pointer aliasing legality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:445,message,message,445,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['message'],['message']
Integrability,"/// \param[in] callingClass Class that's calling. Needed to include name and type name of the class in error message.; /// \param[in] pars List of all parameters to be checked.; /// \param[in] min Minimum of allowed range. `min` itself counts as disallowed.; /// \param[in] max Maximum of allowed range. `max` itself counts as disallowed.; /// \param[in] limitsInAllowedRange If true, the limits passed as parameters are part of the allowed range.; /// \param[in] extraMessage Message that should be appended to the warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHelpers.cxx:109,message,message,109,roofit/roofitcore/src/RooHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHelpers.cxx,2,"['Message', 'message']","['Message', 'message']"
Integrability,"/// \param[in] constrainedParameters Set of parameters that are constrained.; /// Pdf components dependent on these alone are added to the; /// subsidiary likelihood.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx:97,depend,dependent,97,roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,1,['depend'],['dependent']
Integrability,"/// \param[in] globalObservables Observables that have a constant value,; /// independent of the dataset events. Pdf components dependent on; /// these alone are added to the subsidiary likelihood.; /// \note Overrides all other likelihood parameters (like those in; /// NLLFactory::ConstrainedParameters()) if present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx:128,depend,dependent,128,roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,1,['depend'],['dependent']
Integrability,"/// \pre Return a non-unique reference to the type for a dependently-sized; /// vector of the specified element type.; ///; /// FIXME: We will need these to be uniqued, or at least comparable, at some; /// point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:57,depend,dependently-sized,57,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['depend'],['dependently-sized']
Integrability,"/// \return STOREcnt or VScnt bit mask for given isa \p Version.; /// returns 0 for versions that do not support STOREcnt or VScnt.; /// STOREcnt and VScnt are the same counter, the name used; /// depends on the ISA version.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.h:197,depend,depends,197,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.h,1,['depend'],['depends']
Integrability,/// \return The maximum interleave factor that any transform should try to; /// perform for this target. This number depends on the level of parallelism; /// and the number of execution units in the CPU.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:117,depend,depends,117,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['depend'],['depends']
Integrability,/// \return a hash that depends on the set of instrumented blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h:24,depend,depends,24,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h,1,['depend'],['depends']
Integrability,"/// \return the expected cost of a memcpy, which could e.g. depend on the; /// source/destination type and alignment and the number of bytes copied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:60,depend,depend,60,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['depend'],['depend']
Integrability,/// \return the return type of the message being sent.; /// This is not always the type of the message expression itself because; /// of references (the expression would not have a reference type).; /// It is also not always the declared return type of the method because; /// of `instancetype` (in that case it's an expression type).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:35,message,message,35,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,2,['message'],['message']
Integrability,/// \returns Agent synchronization scope ID (cross address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:19,synchroniz,synchronization,19,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// \returns Agent synchronization scope ID (single address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:19,synchroniz,synchronization,19,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// \returns Atomic synchronization scope of the machine instruction used to; /// create this SIMemOpInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:20,synchroniz,synchronization,20,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,1,['synchroniz'],['synchronization']
Integrability,/// \returns Single thread synchronization scope ID (single address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:27,synchroniz,synchronization,27,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,"/// \returns Storecnt or Vscnt bit width, depending on VersionMajor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp:42,depend,depending,42,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp,1,['depend'],['depending']
Integrability,/// \returns System synchronization scope ID (single address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:20,synchroniz,synchronization,20,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// \returns The ImplicitParamDecl associated with \c self if this; /// AnalysisDeclContext wraps an ObjCMethodDecl or nullptr otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/AnalysisDeclContext.h:92,wrap,wraps,92,interpreter/llvm-project/clang/include/clang/Analysis/AnalysisDeclContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/AnalysisDeclContext.h,1,['wrap'],['wraps']
Integrability,/// \returns Wavefront synchronization scope ID (cross address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:23,synchroniz,synchronization,23,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// \returns Wavefront synchronization scope ID (single address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:23,synchroniz,synchronization,23,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// \returns Workgroup synchronization scope ID (cross address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:23,synchroniz,synchronization,23,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// \returns Workgroup synchronization scope ID (single address space).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h:23,synchroniz,synchronization,23,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineModuleInfo.h,1,['synchroniz'],['synchronization']
Integrability,/// \returns the \c ExecutorAddr of a \c GlobalDecl. This interface uses; /// the CodeGenModule's internal mangling cache to avoid recomputing the; /// mangled name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:58,interface,interface,58,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,1,['interface'],['interface']
Integrability,"/// \returns the root DomTreeNode, which is the wrapper for CFGBlock.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h:48,wrap,wrapper,48,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Dominators.h,1,['wrap'],['wrapper']
Integrability,"/// \{; /// \name Iterator interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:27,interface,interface,27,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['interface'],['interface']
Integrability,"/// ```; ///; /// For files hosted by Google Storage, use the following forms:; ///; /// ```; /// gs://storage.googleapis.com/bucket/path/to/my/file; /// gshttp://storage.googleapis.com/bucket/path/to/my/file; /// gsthttps://storage.googleapis.com/bucket/path/to/my/file; /// ```; ///; /// The 'as3' scheme is accepted for backwards compatibility but its usage is; /// deprecated.; ///; /// The recommended way to create an instance of this class is through; /// TFile::Open, for instance:; ///; /// ```c++; /// TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); /// TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""); /// ```; ///; /// The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; /// transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; /// The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; /// protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; /// protocol.; ///; /// The 'options' argument can contain 'NOPROXY' if you want to bypass; /// the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; /// object, the URL of the web proxy can be specified by setting an environmental; /// variable 'http_proxy'. If this variable is set, we ask that proxy to route our; /// requests HTTP(S) requests to the file server.; ///; /// In addition, you can also use the 'options' argument to provide the access key; /// and secret key to be used for authentication purposes for this file by using a; /// string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; /// open several files hosted by different providers in the same program/macro,; /// where the environemntal variables solution is not convenient (see below).; ///; /// To use AWS temporary security credentials you need to specify the session; /// token. This can be added to the options argument with a string of the for",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:1441,protocol,protocol,1441,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['protocol'],['protocol']
Integrability,"/// adapter for packed arrays (to SMatrix indexing conventions)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h:4,adapter,adapter,4,math/smatrix/inc/Math/CholeskyDecomp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h,1,['adapter'],['adapter']
Integrability,"/// addScopeChangesHandling - appends information about destruction, lifetime; /// and cfgScopeEnd for variables in the scope that was left by the jump, and; /// appends cfgScopeBegin for all scopes that where entered.; /// We insert the cfgScopeBegin at the end of the jump node, as depending on; /// the sourceBlock, each goto, may enter different amount of scopes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:284,depend,depending,284,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['depend'],['depending']
Integrability,/// areLoadsFromSameBasePtr - This is used by the pre-regalloc scheduler to; /// determine if two loads are loading from the same base address. It should; /// only return true if the base pointers are the same and the only differences; /// between the two addresses is the offset. It also returns the offsets by; /// reference.; ///; /// FIXME: remove this in favor of the MachineInstr interface once pre-RA-sched; /// is permanently disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:386,interface,interface,386,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['interface'],['interface']
Integrability,/// arg_operands - iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:29,adapter,adapter,29,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,2,['adapter'],['adapter']
Integrability,/// banerjeeMIVtest - Tests an MIV subscript pair for dependence.; /// Returns true if any possible dependence is disproved.; /// Marks the result as inconsistent.; /// Computes directions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:54,depend,dependence,54,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,"/// buildBitmap - This routine does the horsework of taking the offsets of; /// strong/weak references and creating a bitmap. The bitmap is also; /// returned in the given buffer, suitable for being passed to \c dump().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:23,rout,routine,23,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['rout'],['routine']
Integrability,"/// calcMaxScratches - Returns an cost estimate of the worse case requirement; /// for scratch registers, i.e. number of data dependencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:126,depend,dependencies,126,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,2,['depend'],['dependencies']
Integrability,"/// calculate function and derivative at same time (required by IGradient interface)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h:74,interface,interface,74,hist/hist/inc/Math/WrappedTF1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Math/WrappedTF1.h,1,['interface'],['interface']
Integrability,"/// canAddPseudoFlagDep - For A9 (and other out-of-order) implementations,; /// the 's' 16-bit instruction partially update CPSR. Abort the; /// transformation to avoid adding false dependency on last CPSR setting; /// instruction which hurts the ability for out-of-order execution engine; /// to do register renaming magic.; /// This function checks if there is a read-of-write dependency between the; /// last instruction that defines the CPSR and the current instruction. If there; /// is, then there is no harm done since the instruction cannot be retired; /// before the CPSR setting instruction anyway.; /// Note, we are not doing full dependency analysis here for the sake of compile; /// time. We're not looking for cases like:; /// r0 = muls ...; /// r1 = add.w r0, ...; /// ...; /// = mul.w r1; /// In this case it would have been ok to narrow the mul.w to muls since there; /// are indirect RAW dependency between the muls and the mul.w",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2SizeReduction.cpp:182,depend,dependency,182,interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2SizeReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2SizeReduction.cpp,4,['depend'],['dependency']
Integrability,/// canAssignObjCInterfaces - Return true if the two interface types are; /// compatible for assignment from RHS to LHS. This handles validation of any; /// protocol qualifiers on the LHS or RHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:53,interface,interface,53,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,"['interface', 'protocol']","['interface', 'protocol']"
Integrability,"/// canAssignObjCInterfacesInBlockPointer - This routine is specifically written; /// for providing type-safety for objective-c pointers used to pass/return; /// arguments in block literals. When passed as arguments, passing 'A*' where; /// 'id' is expected is not OK. Passing 'Sub *"" where 'Super *"" is expected is; /// not OK. For the return type, the opposite is not OK.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:49,rout,routine,49,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['rout'],['routine']
Integrability,/// checkBlockPointerTypesForAssignment - This routine determines whether two; /// block pointer types are compatible or whether a block and normal pointer; /// are compatible. It is more restrict than comparing two function pointer; // types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:47,rout,routine,47,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['rout'],['routine']
Integrability,"/// checkExpectAnnotations - compares PGO counters to the thresholds used; /// for llvm.expect and warns if the PGO counters are outside of the expected; /// range. It extracts the expected weights from the MD_prof weights attatched; /// to the instruction, which are assumed to come from lowered llvm.expect; /// intrinsics. The RealWeights parameter and the extracted expected weights are; /// then passed to verifyMisexpect() for verification. It is a thin wrapper; /// around the checkFrontendInstrumentation and checkBackendInstrumentation APIs; ///; /// \param I The Instruction being checked; /// \param ExistingWeights A vector of profile weights for each target block; /// \param IsFrontend A boolean describing if this is Frontend instrumentation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MisExpect.h:460,wrap,wrapper,460,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MisExpect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MisExpect.h,1,['wrap'],['wrapper']
Integrability,/// checkRetainCycles - Check whether an Objective-C message send; /// might create an obvious retain cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:53,message,message,53,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['message'],['message']
Integrability,"/// class to compute the Cholesky decomposition of a matrix; /** class to compute the Cholesky decomposition of a symmetric; * positive definite matrix when the dimensionality of the problem is not known; * at compile time; *; * provides routines to check if the decomposition succeeded (i.e. if; * matrix is positive definite and non-singular), to solve a linear; * system for the given matrix and to obtain its inverse; *; * the actual functionality is implemented in templated helper; * classes which have specializations for dimensions N = 1 to 6; * to achieve a gain in speed for common matrix sizes; *; * usage example:; * @code; * // let m be a symmetric positive definite SMatrix (use type float; * // for internal computations, matrix size is 4x4); * CholeskyDecompGenDim<float> decomp(4, m);; * // check if the decomposition succeeded; * if (!decomp) {; * std::cerr << ""decomposition failed!"" << std::endl;; * } else {; * // let rhs be a vector; we seek a vector x such that m * x = rhs; * decomp.Solve(rhs);; * // rhs now contains the solution we are looking for; *; * // obtain the inverse of m, put it into m itself; * decomp.Invert(m);; * }; * @endcode; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h:238,rout,routines,238,math/smatrix/inc/Math/CholeskyDecomp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h,1,['rout'],['routines']
Integrability,"/// class to compute the Cholesky decomposition of a matrix; /** class to compute the Cholesky decomposition of a symmetric; * positive definite matrix; *; * provides routines to check if the decomposition succeeded (i.e. if; * matrix is positive definite and non-singular), to solve a linear; * system for the given matrix and to obtain its inverse; *; * the actual functionality is implemented in templated helper; * classes which have specializations for dimensions N = 1 to 6; * to achieve a gain in speed for common matrix sizes; *; * usage example:; * @code; * // let m be a symmetric positive definite SMatrix (use type float; * // for internal computations, matrix size is 4x4); * CholeskyDecomp<float, 4> decomp(m);; * // check if the decomposition succeeded; * if (!decomp) {; * std::cerr << ""decomposition failed!"" << std::endl;; * } else {; * // let rhs be a vector; we seek a vector x such that m * x = rhs; * decomp.Solve(rhs);; * // rhs now contains the solution we are looking for; *; * // obtain the inverse of m, put it into m itself; * decomp.Invert(m);; * }; * @endcode; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h:167,rout,routines,167,math/smatrix/inc/Math/CholeskyDecomp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h,1,['rout'],['routines']
Integrability,"/// classify - Determine the x86_64 register classes in which the; /// given type T should be passed.; ///; /// \param Lo - The classification for the parts of the type; /// residing in the low word of the containing object.; ///; /// \param Hi - The classification for the parts of the type; /// residing in the high word of the containing object.; ///; /// \param OffsetBase - The bit offset of this type in the; /// containing object. Some parameters are classified different; /// depending on whether they straddle an eightbyte boundary.; ///; /// \param isNamedArg - Whether the argument in question is a ""named""; /// argument, as used in AMD64-ABI 3.5.7.; ///; /// \param IsRegCall - Whether the calling conversion is regcall.; ///; /// If a word is unused its result will be NoClass; if a type should; /// be passed in Memory then at least the classification of \arg Lo; /// will be Memory.; ///; /// The \arg Lo class will be NoClass iff the argument is ignored.; ///; /// If the \arg Lo class is ComplexX87, then the \arg Hi class will; /// also be ComplexX87.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:484,depend,depending,484,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['depend'],['depending']
Integrability,"/// clear - Reset per-query data, but preserve frequencies that only depend on; /// the CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp:69,depend,depend,69,interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp,1,['depend'],['depend']
Integrability,"/// clearIsEmitted - Reset Emitted flag, for certain special cases where; /// SDDbgValue is emitted twice. DBG_INSTR_REF depends on this behaviour.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:121,depend,depends,121,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,1,['depend'],['depends']
Integrability,"/// convenience typedef for poll() interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:35,interface,interface,35,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['interface'],['interface']
Integrability,/// convertFunctionTypeOfBlocks - This routine converts a function type; /// whose result type may be a block pointer or whose argument type(s); /// might be block pointers to an equivalent function type replacing; /// all block pointers to function pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:39,rout,routine,39,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rout'],['routine']
Integrability,"/// convertObjCTypeToCStyleType - This routine converts such objc types; /// as qualified objects, and blocks to their closest c/c++ types that; /// it can. It returns true if input type was modified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:39,rout,routine,39,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,1,['rout'],['routine']
Integrability,/// createScalarTypeNode - A wrapper function to create a metadata node; /// describing a scalar type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:29,wrap,wrapper,29,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['wrap'],['wrapper']
Integrability,"/// dbgs() - This returns a reference to a raw_ostream for debugging; /// messages. If debugging is disabled it returns errs(). Use it; /// like: dbgs() << ""foo"" << ""bar"";",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Debug.h:74,message,messages,74,interpreter/llvm-project/llvm/include/llvm/Support/Debug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Debug.h,1,['message'],['messages']
Integrability,"/// decode ZMQ message, string version",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:15,message,message,15,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,1,['message'],['message']
Integrability,"/// decode message with ZMQ, POD version",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:11,message,message,11,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,1,['message'],['message']
Integrability,"/// depends - Tests for a dependence between the Src and Dst instructions.; /// Returns NULL if no dependence; otherwise, returns a Dependence (or a; /// FullDependence) with as much information as can be gleaned.; /// The flag PossiblyLoopIndependent should be set by the caller; /// if it appears that control flow can reach from Src to Dst; /// without traversing a loop back edge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:4,depend,depends,4,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,4,"['Depend', 'depend']","['Dependence', 'dependence', 'depends']"
Integrability,"/// dump - For debugging purposes, dumps a dependence to OS.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:43,depend,dependence,43,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,"/// emitError - Emit an error message to the currently installed error handler; /// with optional location information. This function returns, so code should; /// be prepared to drop the erroneous construct on the floor and ""not crash"".; /// The generated code need not be correct. The error message will be; /// implicitly prefixed with ""error: "" and should not end with a ""."".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:30,message,message,30,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,2,['message'],['message']
Integrability,"/// encode message to ZMQ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:11,message,message,11,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,1,['message'],['message']
Integrability,"/// enumeration specifying the integration types.; /// @ingroup Integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AllIntegrationTypes.h:31,integrat,integration,31,math/mathcore/inc/Math/AllIntegrationTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AllIntegrationTypes.h,2,"['Integrat', 'integrat']","['Integration', 'integration']"
Integrability,"/// enumeration specifying the integration types.; /// @ingroup MCIntegration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AllIntegrationTypes.h:31,integrat,integration,31,math/mathcore/inc/Math/AllIntegrationTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AllIntegrationTypes.h,1,['integrat'],['integration']
Integrability,"/// establishNestingLevels - Examines the loop nesting of the Src and Dst; /// instructions and establishes their shared loops. Sets the variables; /// CommonLevels, SrcLevels, and MaxLevels.; /// The source and destination instructions needn't be contained in the same; /// loop. The routine establishNestingLevels finds the level of most deeply; /// nested loop that contains them both, CommonLevels. An instruction that's; /// not contained in a loop is at level = 0. MaxLevels is equal to the level; /// of the source plus the level of the destination, minus CommonLevels.; /// This lets us allocate vectors MaxLevels in length, with room for every; /// distinct loop referenced in both the source and destination subscripts.; /// The variable SrcLevels is the nesting depth of the source instruction.; /// It's used to help calculate distinct loops referenced by the destination.; /// Here's the map from loops to levels:; /// 0 - unused; /// 1 - outermost common loop; /// ... - other common loops; /// CommonLevels - innermost common loop; /// ... - loops containing Src but not Dst; /// SrcLevels - innermost loop containing Src but not Dst; /// ... - loops containing Dst but not Src; /// MaxLevels - innermost loop containing Dst but not Src; /// Consider the follow code fragment:; /// for (a = ...) {; /// for (b = ...) {; /// for (c = ...) {; /// for (d = ...) {; /// A[] = ...;; /// }; /// }; /// for (e = ...) {; /// for (f = ...) {; /// for (g = ...) {; /// ... = A[];; /// }; /// }; /// }; /// }; /// }; /// If we're looking at the possibility of a dependence between the store; /// to A (the Src) and the load from A (the Dst), we'll note that they; /// have 2 loops in common, so CommonLevels will equal 2 and the direction; /// vector for Result will have 2 entries. SrcLevels = 4 and MaxLevels = 7.; /// A map from loop names to level indices would look like; /// a - 1; /// b - 2 = CommonLevels; /// c - 3; /// d - 4 = SrcLevels; /// e - 5; /// f - 6; /// g - 7 = MaxLevels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:285,rout,routine,285,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,"['depend', 'rout']","['dependence', 'routine']"
Integrability,"/// evaluate the function given values and parameters (requested interface)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:65,interface,interface,65,math/mathcore/inc/Math/WrappedParamFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h,1,['interface'],['interface']
Integrability,"/// exactRDIVtest - Tests the RDIV subscript pair for dependence.; /// Things of the form [c1 + a*i] and [c2 + b*j],; /// where i and j are induction variable, c1 and c2 are loop invariant,; /// and a and b are constants.; /// Returns true if any possible dependence is disproved.; /// Marks the result as inconsistent.; /// Works in some cases that symbolicRDIVtest doesn't,; /// and vice versa.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:54,depend,dependence,54,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,"/// expandAddToGEP - Expand an addition expression with a pointer type into; /// a GEP instead of using ptrtoint+arithmetic+inttoptr. This helps; /// BasicAliasAnalysis and other passes analyze the result. See the rules; /// for getelementptr vs. inttoptr in; /// http://llvm.org/docs/LangRef.html#pointeraliasing; /// for details.; ///; /// Design note: The correctness of using getelementptr here depends on; /// ScalarEvolution not recognizing inttoptr and ptrtoint operators, as; /// they may introduce pointer arithmetic which may not be safely converted; /// into getelementptr.; ///; /// Design note: It might seem desirable for this function to be more; /// loop-aware. If some of the indices are loop-invariant while others; /// aren't, it might seem desirable to emit multiple GEPs, keeping the; /// loop-invariant portions of the overall computation outside the loop.; /// However, there are a few reasons this is not done here. Hoisting simple; /// arithmetic is a low-level optimization that often isn't very; /// important until late in the optimization process. In fact, passes; /// like InstructionCombining will combine GEPs, even if it means; /// pushing loop-invariant computation down into loops, so even if the; /// GEPs were split here, the work would quickly be undone. The; /// LoopStrengthReduction pass, which is usually run quite late (and; /// after the last InstructionCombining pass), takes care of hoisting; /// loop-invariant portions of expressions, after considering what; /// can be folded using target addressing modes.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:399,depend,depends,399,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['depend'],['depends']
Integrability,"/// exploreDirections - Hierarchically expands the direction vector; /// search space, combining the directions of discovered dependences; /// in the DirSet field of Bound. Returns the number of distinct; /// dependences discovered. If the dependence is disproved,; /// it will return 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:126,depend,dependences,126,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,3,['depend'],"['dependence', 'dependences']"
Integrability,"/// fLeftSideTailFraction*fSize defines lower edge of acceptance region.; /// Unified limits use 0, central limits use 0.5,; /// for upper/lower limits it is 0/1 depends on sign of test statistic w.r.t. parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:162,depend,depends,162,roofit/roostats/inc/RooStats/NeymanConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h,1,['depend'],['depends']
Integrability,"/// finalizeBundle - Finalize a machine instruction bundle which includes; /// a sequence of instructions starting from FirstMI to LastMI (exclusive).; /// This routine adds a BUNDLE instruction to represent the bundle, it adds; /// IsInternalRead markers to MachineOperands which are defined inside the; /// bundle, and it copies externally visible defs and uses to the BUNDLE; /// instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundle.h:161,rout,routine,161,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundle.h,2,['rout'],['routine']
Integrability,"/// finalizeObject - ensure the module is fully processed and is usable.; ///; /// It is the user-level function for completing the process of making the; /// object usable for execution. It should be called after sections within an; /// object have been relocated using mapSectionAddress. When this method is; /// called the MCJIT execution engine will reapply relocations for a loaded; /// object. This method has no effect for the interpreter.; ///; /// Returns true on success, false on failure. Error messages can be retrieved; /// by calling getError();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:506,message,messages,506,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['message'],['messages']
Integrability,"/// find_first_in - Returns the index of the first set / unset bit,; /// depending on \p Set, in the range [Begin, End).; /// Returns -1 if all bits in the range are unset / set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:73,depend,depending,73,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,1,['depend'],['depending']
Integrability,"/// for poll() interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:15,interface,interface,15,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['interface'],['interface']
Integrability,"/// formatted_raw_ostream - A raw_ostream that wraps another one and keeps track; /// of line and column position, allowing padding out to specific column; /// boundaries and querying the number of lines written to the stream. This; /// assumes that the contents of the stream is valid UTF-8 encoded text. This; /// doesn't attempt to handle everything Unicode can do (combining characters,; /// right-to-left markers, etc), but should cover the cases likely to appear in; /// source code or diagnostic messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:47,wrap,wraps,47,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,2,"['message', 'wrap']","['messages', 'wraps']"
Integrability,"/// forward interface of MnStrategy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h:12,interface,interface,12,math/minuit2/inc/Minuit2/MnHesse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h,1,['interface'],['interface']
Integrability,"/// function wrapper for the function to be minimized",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/rtools/src/RMinimizer.cxx:13,wrap,wrapper,13,math/rtools/src/RMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/rtools/src/RMinimizer.cxx,1,['wrap'],['wrapper']
Integrability,"/// function wrapper for the gradient of the function to be minimized",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/rtools/src/RMinimizer.cxx:13,wrap,wrapper,13,math/rtools/src/RMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/rtools/src/RMinimizer.cxx,1,['wrap'],['wrapper']
Integrability,"/// functions needed by interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MultiDimParamFunctionAdapter.h:24,interface,interface,24,math/mathcore/inc/Math/MultiDimParamFunctionAdapter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MultiDimParamFunctionAdapter.h,1,['interface'],['interface']
Integrability,"/// gcdMIVtest - Tests an MIV subscript pair for dependence.; /// Returns true if any possible dependence is disproved.; /// Marks the result as inconsistent.; /// Can sometimes disprove the equal direction for 1 or more loops.; // Can handle some symbolics that even the SIV tests don't get,; /// so we use it as a backup for everything.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:49,depend,dependence,49,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,"/// generate a double random number (faster interface)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MixMaxEngine.h:44,interface,interface,44,math/mathcore/inc/Math/MixMaxEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MixMaxEngine.h,1,['interface'],['interface']
Integrability,"/// generateCodeForModule - Run code generation for the specified module and; /// load it into memory.; ///; /// When this function has completed, all code and data for the specified; /// module, and any module on which this module depends, will be generated; /// and loaded into memory, but relocations will not yet have been applied; /// and all memory will be readable and writable but not executable.; ///; /// This function is primarily useful when generating code for an external; /// target, allowing the client an opportunity to remap section addresses; /// before relocations are applied. Clients that intend to execute code; /// locally can use the getFunctionAddress call, which will generate code; /// and apply final preparations all in one step.; ///; /// This method has no effect for the interpreter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:232,depend,depends,232,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['depend'],['depends']
Integrability,"/// get the option used for the integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h:32,integrat,integration,32,math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,4,['integrat'],['integration']
Integrability,"/// get the option used for the integration; /// implement by derived class otherwise return default ones",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/VirtualIntegrator.h:32,integrat,integration,32,math/mathcore/inc/Math/VirtualIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/VirtualIntegrator.h,1,['integrat'],['integration']
Integrability,"/// get the option used for the integration; /// must be implemented by derived class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/VirtualIntegrator.h:32,integrat,integration,32,math/mathcore/inc/Math/VirtualIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/VirtualIntegrator.h,1,['integrat'],['integration']
Integrability,"/// getAdjustedAnalysisPointer - This method is used when a pass implements; /// an analysis interface through multiple inheritance. If needed, it should; /// override this to adjust the this pointer as needed for the specified pass; /// info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:93,interface,interface,93,interpreter/llvm-project/llvm/include/llvm/Pass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h,1,['interface'],['interface']
Integrability,"/// getAnalysis<AnalysisType>() - This function is used by subclasses to get; /// to the analysis information that they claim to use by overriding the; /// getAnalysisUsage function. If as part of the dependencies, an IR; /// transformation is triggered (e.g. because the analysis requires; /// BreakCriticalEdges), and Changed is non null, *Changed is updated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:201,depend,dependencies,201,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,1,['depend'],['dependencies']
Integrability,"/// getAsFunctionDecl - If this SVal is a MemRegionVal and wraps a; /// CodeTextRegion wrapping a FunctionDecl, return that FunctionDecl.; /// Otherwise return 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:59,wrap,wraps,59,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,2,['wrap'],"['wrapping', 'wraps']"
Integrability,"/// getAutoType - Return the uniqued reference to the 'auto' type which has been; /// deduced to the given type, or to the canonical undeduced 'auto' type, or the; /// canonical deduced-but-dependent 'auto' type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:190,depend,dependent,190,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['depend'],['dependent']
Integrability,/// getBlockCaptureLifetime - This routine returns life time of the captured; /// block variable for the purpose of block layout meta-data generation. FQT is; /// the type of the variable captured in the block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:35,rout,routine,35,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['rout'],['routine']
Integrability,"/// getCharAndSizeSlow - Peek a single 'character' from the specified buffer,; /// get its size, and return it. This is tricky in several cases:; /// 1. If currently at the start of a trigraph, we warn about the trigraph,; /// then either return the trigraph (skipping 3 chars) or the '?',; /// depending on whether trigraphs are enabled or not.; /// 2. If this is an escaped newline (potentially with whitespace between; /// the backslash and newline), implicitly skip the newline and return; /// the char after it.; ///; /// This handles the slow/uncommon case of the getCharAndSize method. Here we; /// know that we can accumulate into Size, and that we have already incremented; /// Ptr by Size bytes.; ///; /// NOTE: When this method is updated, getCharAndSizeSlowNoWarn (below) should; /// be updated to match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:295,depend,depending,295,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,1,['depend'],['depending']
Integrability,"/// getCustomDiagID - Return an ID for a diagnostic with the specified message; /// and level. If this is the first request for this diagnostic, it is; /// registered and created, otherwise the existing ID is returned.; ///; /// \param FormatString A fixed diagnostic format string that will be hashed and; /// mapped to a unique DiagID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:71,message,message,71,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,1,['message'],['message']
Integrability,/// getDependentSizedArrayType - Returns a non-unique reference to; /// the type for a dependently-sized array of the specified element; /// type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:87,depend,dependently-sized,87,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['depend'],['dependently-sized']
Integrability,/// getDst - Returns the destination instruction for this dependence.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:58,depend,dependence,58,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,"/// getEffectiveCallingConvention - Return the actual calling convention to; /// use, which may depend on the ABI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:96,depend,depend,96,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,1,['depend'],['depend']
Integrability,/// getFloatingRank - Return a relative rank for floating point types.; /// This routine will assert if passed a built-in type that isn't a float.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:81,rout,routine,81,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['rout'],['routine']
Integrability,"/// getHostCPUFeatures - Get the LLVM names for the host CPU features.; /// The particular format of the names are target dependent, and suitable for; /// passing as -mattr to the target which matches the host.; ///; /// \param Features - A string mapping feature names to either; /// true (if enabled) or false (if disabled). This routine makes no guarantees; /// about exactly which features may appear in this map, except that they are; /// all valid LLVM feature names.; ///; /// \return - True on success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:122,depend,dependent,122,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,2,"['depend', 'rout']","['dependent', 'routine']"
Integrability,"/// getHostCPUName - Get the LLVM name for the host CPU. The particular format; /// of the name is target dependent, and suitable for passing as -mcpu to the; /// target which matches the host.; ///; /// \return - The host CPU name, or empty if the CPU could not be determined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:106,depend,dependent,106,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,1,['depend'],['dependent']
Integrability,/// getIdentifier - Get the identifier that names the class; /// interface associated with this implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:65,interface,interface,65,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// getInjectedClassNameType - Return the unique reference to the; /// injected class name type for the specified templated declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:71,inject,injected,71,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['inject'],['injected']
Integrability,"/// getIntegerRank - Return an integer conversion rank (C99 6.3.1.1p1). This; /// routine will assert if passed a built-in type that isn't an integer or enum,; /// or if it is not canonicalized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:82,rout,routine,82,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['rout'],['routine']
Integrability,/// getInterfacesImplemented - Return a list of all of the analysis group; /// interfaces implemented by this pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassInfo.h:79,interface,interfaces,79,interpreter/llvm-project/llvm/include/llvm/PassInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassInfo.h,1,['interface'],['interfaces']
Integrability,/// getIntersectionOfProtocols - This routine finds the intersection of set; /// of protocols inherited from two distinct objective-c pointer objects with; /// the given common base.; /// It is used to build composite qualifier list of the composite type of; /// the conditional expression involving two objective-c pointer objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:38,rout,routine,38,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,"['protocol', 'rout']","['protocols', 'routine']"
Integrability,"/// getKnownConstant - Helper method to determine if we can thread over a; /// terminator with the given value as its condition, and if so what value to; /// use for that. What kind of value this is depends on whether we want an; /// integer or a block address, but an undef is always accepted.; /// Returns null if Val is null or not an appropriate constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:199,depend,depends,199,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['depend'],['depends']
Integrability,/// getLevels - Returns the number of common loops surrounding the; /// source and destination of the dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:102,depend,dependence,102,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,"/// getLocationOfByte - Return a source location that points to the specified; /// byte of this string literal.; ///; /// Strings are amazingly complex. They can be formed from multiple tokens and; /// can have escape sequences in them in addition to the usual trigraph and; /// escaped newline business. This routine handles this complexity.; ///; /// The *StartToken sets the first token to be searched in this function and; /// the *StartTokenByteOffset is the byte offset of the first token. Before; /// returning, it updates the *StartToken to the TokNo of the token being found; /// and sets *StartTokenByteOffset to the byte offset of the token in the; /// string.; /// Using these two parameters can reduce the time complexity from O(n^2) to; /// O(n) if one wants to get the location of byte for all the tokens in a; /// string.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:310,rout,routine,310,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['rout'],['routine']
Integrability,/// getLocationOfByte - Return a source location that points to the specified; /// byte of this string literal.; ///; /// Strings are amazingly complex. They can be formed from multiple tokens; /// and can have escape sequences in them in addition to the usual trigraph; /// and escaped newline business. This routine handles this complexity.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:310,rout,routine,310,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['rout'],['routine']
Integrability,"/// getName - Get the name of identifier for the class interface associated; /// with this implementation as a StringRef.; //; // FIXME: This is a bad API, we are hiding NamedDecl::getName with a different; // meaning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:55,interface,interface,55,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,"/// getNonFieldDeclScope - Retrieves the innermost scope, starting; /// from S, where a non-field would be declared. This routine copes; /// with the difference between C and C++ scoping rules in structs and; /// unions. For example, the following code is well-formed in C but; /// ill-formed in C++:; /// @code; /// struct S6 {; /// enum { BAR } e;; /// };; ///; /// void test_S6() {; /// struct S6 a;; /// a.e = BAR;; /// }; /// @endcode; /// For the declaration of BAR, this routine will return a different; /// scope. The scope S will be the scope of the unnamed enumeration; /// within S6. In C++, this routine will return the scope associated; /// with S6, because the enumeration's scope is a transparent; /// context but structures can contain non-field names. In C, this; /// routine will return the translation unit scope, since the; /// enumeration's scope is a transparent context and structures cannot; /// contain non-field names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:122,rout,routine,122,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,4,['rout'],['routine']
Integrability,"/// getObjCEncodingForPropertyDecl - Return the encoded type for this; /// property declaration. If non-NULL, Container must be either an; /// ObjCCategoryImplDecl or ObjCImplementationDecl; it should only be; /// NULL when getting encodings for protocol properties.; /// Property attributes are stored as a comma-delimited C string. The simple; /// attributes readonly and bycopy are encoded as single characters. The; /// parametrized attributes, getter=name, setter=name, and ivar=name, are; /// encoded as single characters, followed by an identifier. Property types; /// are also encoded as a parametrized attribute. The characters used to encode; /// these attributes are defined by the following enumeration:; /// @code; /// enum PropertyAttributes {; /// kPropertyReadOnly = 'R', // property is read-only.; /// kPropertyBycopy = 'C', // property is a copy of the value last assigned; /// kPropertyByref = '&', // property is a reference to the value last assigned; /// kPropertyDynamic = 'D', // property is dynamic; /// kPropertyGetter = 'G', // followed by getter selector name; /// kPropertySetter = 'S', // followed by setter selector name; /// kPropertyInstanceVariable = 'V' // followed by instance variable name; /// kPropertyType = 'T' // followed by old-style type encoding.; /// kPropertyWeak = 'W' // 'weak' property; /// kPropertyStrong = 'P' // property GC'able; /// kPropertyNonAtomic = 'N' // property non-atomic; /// kPropertyOptional = '?' // property optional; /// };; /// @endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:246,protocol,protocol,246,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['protocol'],['protocol']
Integrability,"/// getObjCEncodingForPropertyDecl - Return the encoded type for; /// this method declaration. If non-NULL, Container must be either; /// an ObjCCategoryImplDecl or ObjCImplementationDecl; it should; /// only be NULL when getting encodings for protocol properties.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:244,protocol,protocol,244,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['protocol'],['protocol']
Integrability,/// getObjCInterfaceType - Return the unique reference to the type for the; /// specified ObjC interface decl. The list of protocols is optional.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:95,interface,interface,95,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,"['interface', 'protocol']","['interface', 'protocols']"
Integrability,"/// getObjCLayout - Get or compute information about the layout of the; /// given interface.; ///; /// \param Impl - If given, also include the layout of the interface's; /// implementation. This may differ by including synthesized ivars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:82,interface,interface,82,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,2,['interface'],['interface']
Integrability,"/// getOperandLatency - Compute and return the use operand latency of a given; /// pair of def and use.; /// In most cases, the static scheduling itinerary was enough to determine the; /// operand latency. But it may not be possible for instructions with variable; /// number of defs / uses.; ///; /// This is a raw interface to the itinerary that may be directly overriden by; /// a target. Use computeOperandLatency to get the best estimate of latency.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:316,interface,interface,316,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,2,['interface'],['interface']
Integrability,/// getOrInsertSyncScopeID - Maps synchronization scope name to; /// synchronization scope ID. Every synchronization scope registered with; /// LLVMContext has unique ID except pre-defined ones.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:34,synchroniz,synchronization,34,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,6,['synchroniz'],['synchronization']
Integrability,"/// getPointerToNamedFunction - This method returns the address of the; /// specified function by using the dlsym function call. As such it is only; /// useful for resolving library symbols, not code generated symbols.; ///; /// If AbortOnFailure is false and no function with the given name is; /// found, this function silently returns a null pointer. Otherwise,; /// it prints a message to stderr and aborts.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h:382,message,message,382,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,1,['message'],['message']
Integrability,"/// getPointerToNamedFunction - This method returns the address of the; /// specified function by using the dlsym function call. As such it is only; /// useful for resolving library symbols, not code generated symbols.; ///; /// If AbortOnFailure is false and no function with the given name is; /// found, this function silently returns a null pointer. Otherwise,; /// it prints a message to stderr and aborts.; ///; /// This function is deprecated for the MCJIT execution engine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:382,message,message,382,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['message'],['message']
Integrability,"/// getPreviousInstr - Given a reference to an instruction in a basic; /// block, return a reference to the previous instruction in the block,; /// wrapping around to the last instruction of the block if the block; /// branches to itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupLEAs.cpp:148,wrap,wrapping,148,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupLEAs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupLEAs.cpp,1,['wrap'],['wrapping']
Integrability,"/// getPrimaryContext - There may be many different; /// declarations of the same entity (including forward declarations; /// of classes, multiple definitions of namespaces, etc.), each with; /// a different set of declarations. This routine returns the; /// ""primary"" DeclContext structure, which will contain the; /// information needed to perform name lookup into this context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:234,rout,routine,234,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['rout'],['routine']
Integrability,"/// getPrimaryDecl - Helper function for CheckAddressOfOperand().; /// This routine allows us to typecheck complex/recursive expressions; /// where the declaration is needed for type checking. We only need to; /// handle cases when the expression references a function designator; /// or is an lvalue. Here are some examples:; /// - &(x) => x; /// - &*****f => f for f a function designator.; /// - &s.xx => s; /// - &s.zz[1].yy -> s, if zz is an array; /// - *(x + 1) -> x, if x is an array; /// - &""123""[2] -> 0; /// - & __real__ x -> x; ///; /// FIXME: We don't recurse to the RHS of a comma, nor handle pointers to; /// members.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:76,rout,routine,76,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['rout'],['routine']
Integrability,"/// getSizeType - Return the unique type for ""size_t"" (C99 7.17), the result; /// of the sizeof operator (C99 6.5.3.4p4). The value is target dependent and; /// needs to agree with the definition in <stddef.h>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:142,depend,dependent,142,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['depend'],['dependent']
Integrability,"/// getSplitIteration - Give a dependence that's splittable at some; /// particular level, return the iteration that should be used to split; /// the loop.; ///; /// Generally, the dependence analyzer will be used to build; /// a dependence graph for a function (basically a map from instructions; /// to dependences). Looking for cycles in the graph shows us loops; /// that cannot be trivially vectorized/parallelized.; ///; /// We can try to improve the situation by examining all the dependences; /// that make up the cycle, looking for ones we can break.; /// Sometimes, peeling the first or last iteration of a loop will break; /// dependences, and there are flags for those possibilities.; /// Sometimes, splitting a loop at some other iteration will do the trick,; /// and we've got a flag for that case. Rather than waste the space to; /// record the exact iteration (since we rarely know), we provide; /// a method that calculates the iteration. It's a drag that it must work; /// from scratch, but wonderful in that it's possible.; ///; /// Here's an example:; ///; /// for (i = 0; i < 10; i++); /// A[i] = ...; /// ... = A[11 - i]; ///; /// There's a loop-carried flow dependence from the store to the load,; /// found by the weak-crossing SIV test. The dependence will have a flag,; /// indicating that the dependence can be broken by splitting the loop.; /// Calling getSplitIteration will return 5.; /// Splitting the loop breaks the dependence, like so:; ///; /// for (i = 0; i <= 5; i++); /// A[i] = ...; /// ... = A[11 - i]; /// for (i = 6; i < 10; i++); /// A[i] = ...; /// ... = A[11 - i]; ///; /// breaks the dependence and allows us to vectorize/parallelize; /// both loops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:31,depend,dependence,31,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,11,['depend'],"['dependence', 'dependences']"
Integrability,/// getSrc - Returns the source instruction for this dependence.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:53,depend,dependence,53,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,/// getSyncScopeNames - Populates client supplied SmallVector with; /// synchronization scope names registered with LLVMContext. Synchronization; /// scope names are ordered by increasing synchronization scope IDs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:72,synchroniz,synchronization,72,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,6,"['Synchroniz', 'synchroniz']","['Synchronization', 'synchronization']"
Integrability,/// hasAnyTypeDependentArguments - Determines if any of the expressions; /// in Exprs is type-dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:94,depend,dependent,94,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['depend'],['dependent']
Integrability,/// helper routine to convert instructions into SC,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp:11,rout,routine,11,interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,1,['rout'],['routine']
Integrability,"/// if the 'for' loop has a dispatch schedule (e.g. dynamic, guided) then; /// we need to use the LB and UB expressions generated by the worksharing; /// code generation support, whereas in non combined situations we would; /// just emit 0 and the LastIteration expression; /// This function is necessary due to the difference of the LB and UB; /// types for the RT emission routines for 'for_static_init' and; /// 'for_dispatch_init'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:375,rout,routines,375,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['rout'],['routines']
Integrability,"/// im2col : efficient function to re-arrange input data of convolution to a matrix; /// that can be used by BLAS; /// Use trick to loop on each element of filtered region first and follow input data layout; /// By doing this reads and writes are of consecutive data in memory and one gains in efficiency; /// The resulting matrix will be already transposed and can be used directly in BLAS; /// since output will be a matrix : (channels*kernel_h*kernel_w , output_h*output_w); /// Example: with an input matrix; /// a1 a2 a3; /// b1 b2 b3 and a 2x2 kernel (k1,k2,k3,k4) and padding 1 :; /// c1 c2 c3; /// outpout will be a matrix (4 x 16); /// the routine will follow output order :; // first all elements which will be operated by k1 then k2 then k3; /// -> ( 0 0 0 0 0 a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 ) all elements for k1; /// ( 0 0 0 0 a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 0 ) for k2; /// ( 0 a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 0 0 0 0 ) for k3; /// ( a1 a2 a3 0 b1 b2 b3 0 c1 c2 c3 0 0 0 0 0 ) for k4; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx:649,rout,routine,649,tmva/sofie/inc/TMVA/SOFIE_common.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/SOFIE_common.hxx,1,['rout'],['routine']
Integrability,"/// in addition to interface we also need:; /// Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:19,interface,interface,19,roofit/roostats/inc/RooStats/NeymanConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h,1,['interface'],['interface']
Integrability,"/// inherited methods from HypoTestCalculator interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h:46,interface,interface,46,roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h,1,['interface'],['interface']
Integrability,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:223,message,message,223,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,2,['message'],['message']
Integrability,/// interface to do reserve() for Blocks,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:4,interface,interface,4,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,1,['interface'],['interface']
Integrability,"/// interface to reverse Blocks[from, end of loop] in this loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:4,interface,interface,4,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,1,['interface'],['interface']
Integrability,"/// interface to set conditional observables. If a test statistics needs them it will re-implement this function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:4,interface,interface,4,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,1,['interface'],['interface']
Integrability,"/// interface to set global observables. If a test statistics needs them it will re-implement this function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:4,interface,interface,4,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,1,['interface'],['interface']
Integrability,"/// internal interface; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h:13,interface,interface,13,math/minuit2/inc/Minuit2/MnHesse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h,1,['interface'],['interface']
Integrability,"/// invalidateRegions - Clears out the specified regions from the store,; /// marking their values as unknown. Depending on the store, this may also; /// invalidate additional regions that may have changed based on accessing; /// the given regions. Optionally, invalidates non-static globals as well.; /// \param[in] store The initial store; /// \param[in] Values The values to invalidate.; /// \param[in] E The current statement being evaluated. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Count The current block count. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Call The call expression which will be used to determine which; /// globals should get invalidated.; /// \param[in,out] IS A set to fill with any symbols that are no longer; /// accessible. Pass \c NULL if this information will not be used.; /// \param[in] ITraits Information about invalidation for a particular; /// region/symbol.; /// \param[in,out] InvalidatedTopLevel A vector to fill with regions; //// explicitly being invalidated. Pass \c NULL if this; /// information will not be used.; /// \param[in,out] Invalidated A vector to fill with any regions being; /// invalidated. This should include any regions explicitly invalidated; /// even if they do not currently have bindings. Pass \c NULL if this; /// information will not be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:111,Depend,Depending,111,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,1,['Depend'],['Depending']
Integrability,/// isAnti - Returns true if this is an anti dependence.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:45,depend,dependence,45,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,"/// isBitcode - Return true if the given bytes are the magic bytes for; /// LLVM IR bitcode, either with or without a wrapper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h:118,wrap,wrapper,118,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,1,['wrap'],['wrapper']
Integrability,/// isBitcodeWrapper - Return true if the given bytes are the magic bytes; /// for an LLVM IR bitcode wrapper.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h:102,wrap,wrapper,102,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,1,['wrap'],['wrapper']
Integrability,/// isConfused - Returns true if this dependence is confused; /// (the compiler understands nothing and makes worst-case; /// assumptions).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:38,depend,dependence,38,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,/// isConsistent - Returns true if this dependence is consistent; /// (occurs every time the source and destination are executed).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:40,depend,dependence,40,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,"/// isConstantSizeType - Return true if this is not a variable sized type,; /// according to the rules of C99 6.7.5p3. It is not legal to call this on; /// incomplete types or dependent types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:176,depend,dependent,176,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['depend'],['dependent']
Integrability,/// isDeclarationSpecifier() - Return true if the current token is part of a; /// declaration specifier.; ///; /// \param AllowImplicitTypename whether this is a context where T::type [T; /// dependent] can appear.; /// \param DisambiguatingWithExpression True to indicate that the purpose of; /// this check is to disambiguate between an expression and a declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:192,depend,dependent,192,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['depend'],['dependent']
Integrability,"/// isDelegateInitCall - Answers whether this message send has been; /// tagged as a ""delegate init call"", i.e. a call to a method in the; /// -init family on self from within an -init method implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:46,message,message,46,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['message'],['message']
Integrability,"/// isExtendedBUILD_VECTOR - Check if N is a constant BUILD_VECTOR where each; /// element has been zero/sign-extended, depending on the isSigned parameter,; /// from an integer type half its size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:120,depend,depending,120,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['depend'],['depending']
Integrability,/// isFlow - Returns true if this is a flow (aka true) dependence.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:55,depend,dependence,55,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,/// isFuncTypeConvertible - Utility to check whether a function type can; /// be converted to an LLVM type (i.e. doesn't depend on an incomplete tag; /// type).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:121,depend,depend,121,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,1,['depend'],['depend']
Integrability,/// isImplicitInterfaceDecl - check that this is an implicitly declared; /// ObjCInterfaceDecl node. This is for legacy objective-c \@implementation; /// declaration without an \@interface declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:179,interface,interface,179,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// isInput - Returns true if this is an input dependence.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:47,depend,dependence,47,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,"/// isIntegerConstantExpr - this recursive routine will test if an expression is; /// an integer constant expression.; /// FIXME: Pass up a reason why! Invalid operation in i-c-e, division by zero,; /// comma, etc; // CheckICE - This function does the fundamental ICE checking: the returned; // ICEDiag contains an ICEKind indicating whether the expression is an ICE,; // and a (possibly null) SourceLocation indicating the location of the problem.; //; // Note that to reduce code duplication, this helper does no evaluation; // itself; the caller checks whether the expression is evaluatable, and; // in the rare cases where CheckICE actually cares about the evaluated; // value, it calls into Evaluate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:43,rout,routine,43,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['rout'],['routine']
Integrability,"/// isIsomorphicTo - Return true if this node is recursively; /// isomorphic to the specified node. For this comparison, the node's; /// entire state is considered. The assigned name is ignored, since; /// nodes with differing names are considered isomorphic. However, if; /// the assigned name is present in the dependent variable set, then; /// the assigned name is considered significant and the node is; /// isomorphic if the names match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:313,depend,dependent,313,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['depend'],['dependent']
Integrability,"/// isKnownLessThan - Compare to see if S is less than Size; /// Another wrapper for isKnownNegative(S - max(Size, 1)) with some extra; /// checking if S is an AddRec and we can prove lessthan using the loop; /// bounds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:73,wrap,wrapper,73,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['wrap'],['wrapper']
Integrability,"/// isKnownNonNegative - Compare to see if S is known not to be negative; /// Uses the fact that S comes from Ptr, which may be an inbound GEP,; /// Proving there is no wrapping going on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:169,wrap,wrapping,169,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['wrap'],['wrapping']
Integrability,"/// isKnownPredicate - Compare X and Y using the predicate Pred.; /// Basically a wrapper for SCEV::isKnownPredicate,; /// but tries harder, especially in the presence of sign and zero; /// extensions and symbolics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:82,wrap,wrapper,82,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['wrap'],['wrapper']
Integrability,/// isLoopIndependent - Returns true if this is a loop-independent; /// dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:72,depend,dependence,72,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,"/// isMachineConstantPoolEntry - Return true if the MachineConstantPoolEntry; /// is indeed a target specific constantpool entry, not a wrapper over a; /// Constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineConstantPool.h:136,wrap,wrapper,136,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineConstantPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineConstantPool.h,1,['wrap'],['wrapper']
Integrability,/// isNewFormat - Return true iff the wrapped access tag is in the new; /// size-aware format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:38,wrap,wrapped,38,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['wrap'],['wrapped']
Integrability,/// isNewFormat - Return true iff the wrapped type node is in the new; /// size-aware format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:38,wrap,wrapped,38,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,2,['wrap'],['wrapped']
Integrability,"/// isOrdered - Returns true if dependence is Output, Flow, or Anti; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:32,depend,dependence,32,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,/// isOutput - Returns true if this is an output dependence.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:49,depend,dependence,49,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,/// isPeelFirst - Returns true if peeling the first iteration from; /// this loop will break this dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:98,depend,dependence,98,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,/// isPeelLast - Returns true if peeling the last iteration from; /// this loop will break this dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:96,depend,dependence,96,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,/// isRawBitcode - Return true if the given bytes are the magic bytes for; /// raw LLVM IR bitcode (without a wrapper).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h:110,wrap,wrapper,110,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,1,['wrap'],['wrapper']
Integrability,"/// isRenamable - Returns true if this register may be renamed, i.e. it does; /// not generate a value that is somehow read in a way that is not represented; /// by the Machine IR (e.g. to meet an ABI or ISA requirement). This is only; /// valid on physical register operands. Virtual registers are assumed to; /// always be renamable regardless of the value of this field.; ///; /// Operands that are renamable can freely be changed to any other register; /// that is a member of the register class returned by; /// MI->getRegClassConstraint().; ///; /// isRenamable can return false for several different reasons:; ///; /// - ABI constraints (since liveness is not always precisely modeled). We; /// conservatively handle these cases by setting all physical register; /// operands that didn’t start out as virtual regs to not be renamable.; /// Also any physical register operands created after register allocation or; /// whose register is changed after register allocation will not be; /// renamable. This state is tracked in the MachineOperand::IsRenamable; /// bit.; ///; /// - Opcode/target constraints: for opcodes that have complex register class; /// requirements (e.g. that depend on other operands/instructions), we set; /// hasExtraSrcRegAllocReq/hasExtraDstRegAllocReq in the machine opcode; /// description. Operands belonging to instructions with opcodes that are; /// marked hasExtraSrcRegAllocReq/hasExtraDstRegAllocReq return false from; /// isRenamable(). Additionally, the AllowRegisterRenaming target property; /// prevents any operands from being marked renamable for targets that don't; /// have detailed opcode hasExtraSrcRegAllocReq/hasExtraDstRegAllocReq; /// values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:1185,depend,depend,1185,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['depend'],['depend']
Integrability,/// isSplitable - Returns true if splitting the loop will break; /// the dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:73,depend,dependence,73,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,/// isSplitable - Returns true if splitting this loop will break; /// the dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:74,depend,dependence,74,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,/// isSuperClassOf - Return true if this class is the specified class or is a; /// super class of the specified interface class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:112,interface,interface,112,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['interface'],['interface']
Integrability,/// isUnordered - Returns true if dependence is Input; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:34,depend,dependence,34,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,"/// isVTableDispatchedSelector - Returns true if SEL is not in the list of; /// VTableDispatchMethods; false otherwise. What this means is that; /// except for the 19 selectors in the list, we generate 32bit-style; /// message dispatch call for all the rest.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:219,message,message,219,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['message'],['message']
Integrability,/// iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:14,adapter,adapter,14,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['adapter'],['adapter']
Integrability,/// iterator - Iterate over the decls of a specified declaration name.; /// It will walk or not the parent declaration contexts depending on how; /// it was instantiated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h:128,depend,depending,128,interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/IdentifierResolver.h,1,['depend'],['depending']
Integrability,/// iterator/begin/end - The interface to the top-level loops in the current; /// function.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:29,interface,interface,29,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,1,['interface'],['interface']
Integrability,"/// just wrapper to deliver websockets call-backs to the RWebWindow class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:9,wrap,wrapper,9,gui/webdisplay/src/RWebWindowWSHandler.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx,1,['wrap'],['wrapper']
Integrability,"/// lintModule - Check a module for errors, printing messages on stderr.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp:53,message,messages,53,interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,1,['message'],['messages']
Integrability,"/// lookup - Find the declarations (if any) with the given Name in; /// this context. Returns a range of iterators that contains all of; /// the declarations with this name, with object, function, member,; /// and enumerator names preceding any tag name. Note that this; /// routine will not look into parent contexts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:275,rout,routine,275,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['rout'],['routine']
Integrability,"/// main interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:9,interface,interface,9,roofit/roostats/inc/RooStats/ToyMCSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h,1,['interface'],['interface']
Integrability,"/// main interface to get a HypoTestResult, pure virtual",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:9,interface,interface,9,roofit/roostats/inc/RooStats/CombinedCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h,2,['interface'],['interface']
Integrability,/// mergeClassExtensionProtocolList - Merge class extension's protocol list; /// into the protocol list for this class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:62,protocol,protocol,62,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['protocol'],['protocol']
Integrability,/// mergeObjCGCQualifiers - This routine merges ObjC's GC attribute of 'LHS' and; /// 'RHS' attributes and returns the merged version; including for function; /// return types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:33,rout,routine,33,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['rout'],['routine']
Integrability,"/// name of 1D integrator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h:15,integrat,integrator,15,math/mathcore/inc/Math/IntegratorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h,2,['integrat'],['integrator']
Integrability,"/// name of multi-dim integrator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h:22,integrat,integrator,22,math/mathcore/inc/Math/IntegratorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h,1,['integrat'],['integrator']
Integrability,"/// needed by the interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MultiDimParamFunctionAdapter.h:18,interface,interface,18,math/mathcore/inc/Math/MultiDimParamFunctionAdapter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MultiDimParamFunctionAdapter.h,1,['interface'],['interface']
Integrability,/// objc-interface-decl-list:; /// empty; /// objc-interface-decl-list objc-property-decl [OBJC2]; /// objc-interface-decl-list objc-method-requirement [OBJC2]; /// objc-interface-decl-list objc-method-proto ';'; /// objc-interface-decl-list declaration; /// objc-interface-decl-list ';'; ///; /// objc-method-requirement: [OBJC2]; /// @required; /// @optional; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:9,interface,interface-decl-list,9,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,6,['interface'],['interface-decl-list']
Integrability,/// objc-message-expr:; /// '[' objc-receiver objc-message-args ']'; ///; /// objc-receiver: [C]; /// 'super'; /// expression; /// class-name; /// type-name; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:9,message,message-expr,9,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,2,['message'],"['message-args', 'message-expr']"
Integrability,"/// objc-protocol-declaration:; /// objc-protocol-definition; /// objc-protocol-forward-reference; ///; /// objc-protocol-definition:; /// \@protocol identifier; /// objc-protocol-refs[opt]; /// objc-interface-decl-list; /// \@end; ///; /// objc-protocol-forward-reference:; /// \@protocol identifier-list ';'; ///; /// ""\@protocol identifier ;"" should be resolved as ""\@protocol; /// identifier-list ;"": objc-interface-decl-list may not start with a; /// semicolon in the first alternative if objc-protocol-refs are omitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:9,protocol,protocol-declaration,9,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,13,"['interface', 'protocol']","['interface-decl-list', 'protocol', 'protocol-declaration', 'protocol-definition', 'protocol-forward-reference', 'protocol-refs']"
Integrability,/// objc-protocol-expression; /// \@protocol ( protocol-name ),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:9,protocol,protocol-expression,9,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,3,['protocol'],"['protocol', 'protocol-expression', 'protocol-name']"
Integrability,/// objc-protocol-refs:; /// '<' identifier-list '>'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:9,protocol,protocol-refs,9,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['protocol'],['protocol-refs']
Integrability,/// objc-synchronized-statement:; /// @synchronized '(' expression ')' compound-statement; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:9,synchroniz,synchronized-statement,9,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,2,['synchroniz'],"['synchronized', 'synchronized-statement']"
Integrability,/// parseAssemblyFile and parseAssemblyString are wrappers around this function.; /// Parse LLVM Assembly from a MemoryBuffer.; /// \param F The MemoryBuffer containing assembly; /// \param Err Error result info.; /// \param Slots The optional slot mapping that will be initialized during; /// parsing.; /// \param DataLayoutCallback Override datalayout in the llvm assembly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h:50,wrap,wrappers,50,interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/AsmParser/Parser.h,1,['wrap'],['wrappers']
Integrability,/// parseDirectiveAbort; /// ::= .abort [... message ...],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:45,message,message,45,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,1,['message'],['message']
Integrability,"/// parseDirectiveEcho; /// ::= ""echo"" message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:39,message,message,39,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,1,['message'],['message']
Integrability,/// parseDirectiveError; /// ::= .err [message],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:39,message,message,39,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,1,['message'],['message']
Integrability,"/// parseDirectiveErrorIfb; /// ::= .errb textitem[, message]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:53,message,message,53,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,1,['message'],['message']
Integrability,"/// parseDirectiveErrorIfdef; /// ::= .errdef name[, message]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:53,message,message,53,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,1,['message'],['message']
Integrability,"/// parseDirectiveErrorIfe; /// ::= .erre expression[, message]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:55,message,message,55,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,1,['message'],['message']
Integrability,"/// parseDirectiveErrorIfidn; /// ::= .erridn textitem, textitem[, message]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:67,message,message,67,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,1,['message'],['message']
Integrability,"/// parseScalarValue - A common parsing routine for all flow scalar styles.; /// It handles line break characters by itself, adds regular content characters; /// to the result, and forwards escaped sequences to the provided routine for; /// the style-specific processing.; ///; /// \param UnquotedValue - An input value without quotation marks.; /// \param Storage - A storage for the result if the input value is multiline or; /// contains escaped characters.; /// \param LookupChars - A set of special characters to search in the input; /// string. Should include line break characters and the escape character; /// specific for the processing scalar style, if any.; /// \param UnescapeCallback - This is called when the escape character is found; /// in the input.; /// \returns - The unfolded and unescaped value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:40,rout,routine,40,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,2,['rout'],['routine']
Integrability,"/// parseScope; /// ::= syncscope(""singlethread"" | ""<target scope>"")?; ///; /// This sets synchronization scope ID to the ID of the parsed value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:90,synchroniz,synchronization,90,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['synchroniz'],['synchronization']
Integrability,"/// propagate - Review the constraints, looking for opportunities; /// to simplify a subscript pair (Src and Dst).; /// Return true if some simplification occurs.; /// If the simplification isn't exact (that is, if it is conservative; /// in terms of dependence), set consistent to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:251,depend,dependence,251,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,"/// propagateDistance - Attempt to propagate a distance; /// constraint into a subscript pair (Src and Dst).; /// Return true if some simplification occurs.; /// If the simplification isn't exact (that is, if it is conservative; /// in terms of dependence), set consistent to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:245,depend,dependence,245,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,"/// propagateLine - Attempt to propagate a line; /// constraint into a subscript pair (Src and Dst).; /// Return true if some simplification occurs.; /// If the simplification isn't exact (that is, if it is conservative; /// in terms of dependence), set consistent to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:237,depend,dependence,237,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['depend'],['dependence']
Integrability,/// range adapter for GC transition arguments,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,adapter,adapter,10,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,1,['adapter'],['adapter']
Integrability,/// range adapter for actual call arguments,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,adapter,adapter,10,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,1,['adapter'],['adapter']
Integrability,/// range adapter for gc arguments,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,adapter,adapter,10,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,1,['adapter'],['adapter']
Integrability,/// range adapter for vm state arguments,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:10,adapter,adapter,10,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,1,['adapter'],['adapter']
Integrability,"/// receive message with ZMQ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:12,message,message,12,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,1,['message'],['message']
Integrability,"/// receive message with ZMQ, general version; // FIXME: what to do with flags=nullptr.... more is a pointer, that might prevent conversion",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:12,message,message,12,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,1,['message'],['message']
Integrability,/// referenced protocols in this category.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:15,protocol,protocols,15,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['protocol'],['protocols']
Integrability,/// replaceCongruentIVs - Check for congruent phis in this loop header and; /// replace them with their most canonical representative. Return the number of; /// phis eliminated.; ///; /// This does not depend on any SCEVExpander state but should be used in; /// the same context that SCEVExpander is used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:202,depend,depend,202,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['depend'],['depend']
Integrability,"/// return a TGraphErrors with the obtained observed p-values; /// resultinf from the scan; /// By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set; /// If Option = ""CLb"" return CLb plot; /// = ""CLs+b"" return CLs+b plot independently of the flag; /// = ""CLs"" return CLs plot independently of the flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h:140,depend,depending,140,roofit/roostats/inc/RooStats/HypoTestInverterPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h,1,['depend'],['depending']
Integrability,"/// return a pointer to integrator object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h:24,integrat,integrator,24,math/mathcore/inc/Math/IntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h,1,['integrat'],['integrator']
Integrability,"/// return integration error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h:11,integrat,integration,11,math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,2,['integrat'],['integration']
Integrability,"/// return name of integrator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Integrator.h:19,integrat,integrator,19,math/mathcore/inc/Math/Integrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Integrator.h,2,['integrat'],['integrator']
Integrability,"/// return result of integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h:21,integrat,integration,21,math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,1,['integrat'],['integration']
Integrability,"/// return result of last integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h:26,integrat,integration,26,math/mathcore/inc/Math/IntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h,1,['integrat'],['integration']
Integrability,"/// return status of integration; /// - status = 0 successful integration; /// - status = 1; /// MAXPTS is too small for the specified accuracy EPS.; /// The result contain the values; /// obtainable for the specified value of MAXPTS.; /// - status = 2; /// size is too small for the specified number MAXPTS of function evaluations.; /// - status = 3; /// wrong dimension , N<2 or N > 15. Returned result and error are zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h:21,integrat,integration,21,math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,2,['integrat'],['integration']
Integrability,"/// return type of integrator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/VirtualIntegrator.h:19,integrat,integrator,19,math/mathcore/inc/Math/VirtualIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/VirtualIntegrator.h,2,['integrat'],['integrator']
Integrability,"/// returns content of default web-page; /// THttpWSHandler interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx:60,interface,interface,60,gui/webdisplay/src/RWebWindowWSHandler.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowWSHandler.hxx,1,['interface'],['interface']
Integrability,"/// runFunctionAsMain - This is a helper function which wraps runFunction to; /// handle the common task of starting up main with the specified argc, argv,; /// and envp parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:56,wrap,wraps,56,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['wrap'],['wraps']
Integrability,"/// runPasses - Run the specified passes on Program, outputting a bitcode file; /// and writing the filename into OutputFile if successful. If the; /// optimizations fail for some reason (optimizer crashes), return true,; /// otherwise return false. If DeleteOutput is set to true, the bitcode is; /// deleted on success, and the filename string is undefined. This prints to; /// outs() a single line message indicating whether compilation was successful; /// or failed.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/OptimizerDriver.cpp:401,message,message,401,interpreter/llvm-project/llvm/tools/bugpoint/OptimizerDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/OptimizerDriver.cpp,1,['message'],['message']
Integrability,"/// runPasses - Run the specified passes on Program, outputting a bitcode; /// file and writting the filename into OutputFile if successful. If the; /// optimizations fail for some reason (optimizer crashes), return true,; /// otherwise return false. If DeleteOutput is set to true, the bitcode is; /// deleted on success, and the filename string is undefined. This prints to; /// outs() a single line message indicating whether compilation was successful; /// or failed, unless Quiet is set. ExtraArgs specifies additional arguments; /// to pass to the child bugpoint instance.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:402,message,message,402,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['message'],['message']
Integrability,"/// same method as before but using any function implementing; /// the operator(), so can be wrapped in a IMultiGenFunction interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:93,wrap,wrapped,93,math/mathmore/inc/Math/GSLMultiRootFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h,2,"['interface', 'wrap']","['interface', 'wrapped']"
Integrability,"/// set 1D integrator name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h:11,integrat,integrator,11,math/mathcore/inc/Math/IntegratorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h,1,['integrat'],['integrator']
Integrability,"/// set integration function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/VirtualIntegrator.h:8,integrat,integration,8,math/mathcore/inc/Math/VirtualIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/VirtualIntegrator.h,1,['integrat'],['integration']
Integrability,"/// set multi-dim integrator name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h:18,integrat,integrator,18,math/mathcore/inc/Math/IntegratorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h,1,['integrat'],['integrator']
Integrability,"/// set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h:12,integrat,integration,12,math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h,2,"['integrat', 'interface']","['integration', 'interface']"
Integrability,"/// set the integration type (possible type are) :",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:12,integrat,integration,12,roofit/roostats/inc/RooStats/BayesianCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h,1,['integrat'],['integration']
Integrability,"/// set the number of iterations when running a MC integration algorithm; /// If not set use default algorithmic values; /// In case of ToyMC sampling of the nuisance the value is 100; /// In case of using the GSL MCintegrations types the default value is; /// defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:51,integrat,integration,51,roofit/roostats/inc/RooStats/BayesianCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h,2,"['Integrat', 'integrat']","['IntegratorMultiDimOptions', 'integration']"
Integrability,"/// setArg - Set the specified argument.; /// ! the dependence bits might be stale after calling this setter, it is; /// *caller*'s responsibility to recompute them by calling; /// computeDependence().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:52,depend,dependence,52,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['depend'],['dependence']
Integrability,"/// setImpliedPropertyAttributeForReadOnlyProperty -; /// This routine evaludates life-time attributes for a 'readonly'; /// property with no known lifetime of its own, using backing; /// 'ivar's attribute, if any. If no backing 'ivar', property's; /// life-time is assumed 'strong'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp:63,rout,routine,63,interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,1,['rout'],['routine']
Integrability,/// setProtocolList - Set the list of protocols that this interface; /// implements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:38,protocol,protocols,38,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,6,"['interface', 'protocol']","['interface', 'protocols']"
Integrability,"/// shouldScheduleLoadsNear - This is a used by the pre-regalloc scheduler to; /// determine (in conjunction with areLoadsFromSameBasePtr) if two loads should; /// be scheduled togther. On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.; ///; /// FIXME: remove this in favor of the MachineInstr interface once pre-RA-sched; /// is permanently disabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:649,interface,interface,649,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['interface'],['interface']
Integrability,"/// specialization that queues first parts of multipart messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/Messenger.h:56,message,messages,56,roofit/multiprocess/res/RooFit/MultiProcess/Messenger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/Messenger.h,2,['message'],['messages']
Integrability,"/// specialization that sends the final message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/Messenger.h:40,message,message,40,roofit/multiprocess/res/RooFit/MultiProcess/Messenger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/Messenger.h,1,['message'],['message']
Integrability,"/// static_assert(<condition>, <message>); /// static_assert(<condition>)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h:32,message,message,32,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,1,['message'],['message']
Integrability,"/// strongSIVtest - Tests the strong SIV subscript pair (Src and Dst); /// for dependence.; /// Things of the form [c1 + a*i] and [c2 + a*i],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a is a constant; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction and distance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:79,depend,dependence,79,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,3,['depend'],['dependence']
Integrability,/// struct objc_super*. The type of the argument to the superclass message; /// lookup functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:67,message,message,67,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['message'],['message']
Integrability,/// strut objc_super. Used for sending messages to super. This structure; /// contains the receiver (object) and the expected class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:39,message,messages,39,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['message'],['messages']
Integrability,/// subtree - Access the i'th subtree reference in a branch node.; /// This depends on branch nodes storing the NodeRef array as their first; /// member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:76,depend,depends,76,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['depend'],['depends']
Integrability,"/// symbolicRDIVtest - Tests the RDIV subscript pair for dependence.; /// Things of the form [c1 + a*i] and [c2 + b*j],; /// where i and j are induction variable, c1 and c2 are loop invariant,; /// and a and b are constants.; /// Returns true if any possible dependence is disproved.; /// Marks the result as inconsistent.; /// Works in some cases that exactRDIVtest doesn't,; /// and vice versa. Can also be used as a backup for; /// ordinary SIV tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:57,depend,dependence,57,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,/// testMIV - Tests the MIV subscript pair (Src and Dst) for dependence.; /// Returns true if dependence disproved.; /// Can sometimes refine direction vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:61,depend,dependence,61,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['depend'],['dependence']
Integrability,"/// testRDIV - Tests the RDIV subscript pair (Src and Dst) for dependence.; /// Things of the form [c1 + a1*i] and [c2 + a2*j]; /// where i and j are induction variables, c1 and c2 are loop invariant,; /// and a1 and a2 are constant.; /// With minor algebra, this test can also be used for things like; /// [c1 + a1*i + a2*j][c2].; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Marks the Result as inconsistent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:63,depend,dependence,63,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,3,['depend'],['dependence']
Integrability,"/// testSIV - Tests the SIV subscript pair (Src and Dst) for dependence.; /// Things of the form [c1 + a1*i] and [c2 + a2*j], where; /// i and j are induction variables, c1 and c2 are loop invariant,; /// and a1 and a2 are constant.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction vector entry and, when possible,; /// the distance vector entry.; /// If the dependence isn't proven to exist,; /// marks the Result as inconsistent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:61,depend,dependence,61,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,4,['depend'],['dependence']
Integrability,"/// testZIV - Tests the ZIV subscript pair (Src and Dst) for dependence.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// If the dependence isn't proven to exist,; /// marks the Result as inconsistent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:61,depend,dependence,61,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,4,['depend'],['dependence']
Integrability,/// the Memory Dependence Checker which can determine the; /// loop-independent and loop-carried dependences between memory accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:15,Depend,Dependence,15,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,4,"['Depend', 'depend']","['Dependence', 'dependences']"
Integrability,"/// true if the attribute is owned, e.g. it is in a body and not just; /// in an interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/Transforms.h:81,interface,interface,81,interpreter/llvm-project/clang/lib/ARCMigrate/Transforms.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/Transforms.h,1,['interface'],['interface']
Integrability,"/// true, if the lower bound depends on the outer loop control var.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:29,depend,depends,29,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['depend'],['depends']
Integrability,"/// true, if the upper bound depends on the outer loop control var.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:29,depend,depends,29,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['depend'],['depends']
Integrability,"/// type of the integrator (return the enumeration type)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h:16,integrat,integrator,16,math/mathcore/inc/Math/IntegratorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h,2,['integrat'],['integrator']
Integrability,"/// use directly the approximate posterior function obtained by binning it in nbins; /// by default the cdf is used by integrating the posterior; /// if a value of nbin <= 0 the cdf function will be used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:119,integrat,integrating,119,roofit/roostats/inc/RooStats/BayesianCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h,1,['integrat'],['integrating']
Integrability,"/// used to send control messages to clients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:25,message,messages,25,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,1,['message'],['messages']
Integrability,"/// viewCFG - This function is meant for use from the debugger. You can just; /// say 'call F->viewCFG()' and a ghostview window should pop up from the; /// program, displaying the CFG of the current function with the code for each; /// basic block inside. This depends on there being a 'dot' and 'gv' program; /// in your path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:262,depend,depends,262,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['depend'],['depends']
Integrability,"/// viewCFG - This function is meant for use from the debugger. You can just; /// say 'call F->viewCFG()' and a ghostview window should pop up from the; /// program, displaying the CFG of the current function with the code for each; /// basic block inside. This depends on there being a 'dot' and 'gv' program; /// in your path.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:262,depend,depends,262,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h,1,['depend'],['depends']
Integrability,"/// viewCFG - This function is meant for use from the debugger. You can just; /// say 'call F->viewCFG()' and a ghostview window should pop up from the; /// program, displaying the CFG of the current function. This depends on there; /// being a 'dot' and 'gv' program in your path.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CFGPrinter.cpp:215,depend,depends,215,interpreter/llvm-project/llvm/lib/Analysis/CFGPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CFGPrinter.cpp,1,['depend'],['depends']
Integrability,"/// weakCrossingSIVtest - Tests the weak-crossing SIV subscript pair; /// (Src and Dst) for dependence.; /// Things of the form [c1 + a*i] and [c2 - a*i],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a is a constant.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction entry.; /// Set consistent to false.; /// Marks the dependence as splitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:92,depend,dependence,92,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,4,['depend'],['dependence']
Integrability,"/// weakZeroDstSIVtest - Tests the weak-zero SIV subscript pair; /// (Src and Dst) for dependence.; /// Things of the form [c1 + a*i] and [c2],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a is a constant. See also weakZeroSrcSIVtest.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction entry.; /// Set consistent to false.; /// If loop peeling will break the dependence, mark appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:87,depend,dependence,87,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,4,['depend'],['dependence']
Integrability,"/// weakZeroSrcSIVtest - Tests the weak-zero SIV subscript pair; /// (Src and Dst) for dependence.; /// Things of the form [c1] and [c2 + a*i],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a is a constant. See also weakZeroDstSIVtest.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction entry.; /// Set consistent to false.; /// If loop peeling will break the dependence, mark appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:87,depend,dependence,87,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,4,['depend'],['dependence']
Integrability,"/// wrap TExecutor::Foreach",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h:4,wrap,wrap,4,tmva/tmva/inc/TMVA/Executor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Executor.h,1,['wrap'],['wrap']
Integrability,"/// x86 hardware interrupt context. Callee may take one or two parameters,; /// where the 1st represents a pointer to hardware context frame and the 2nd; /// represents hardware error code, the presence of the later depends on the; /// interrupt vector taken. Valid for both 32- and 64-bit subtargets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:216,depend,depends,216,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,1,['depend'],['depends']
Integrability,/// }; // public interface of the MCTargetAsmParser.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/AsmParser/SparcAsmParser.cpp:17,interface,interface,17,interpreter/llvm-project/llvm/lib/Target/Sparc/AsmParser/SparcAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/AsmParser/SparcAsmParser.cpp,2,['interface'],['interface']
Integrability,//// True if Dependences reflects the dependences in the; //// loop. If false we exceeded MaxDependences and; //// Dependences is invalid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:13,Depend,Dependences,13,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,3,"['Depend', 'depend']","['Dependences', 'dependences']"
Integrability,//// temporary - rewrite interface to use type,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:25,interface,interface,25,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['interface'],['interface']
Integrability,"////// static functions providing interface to raw WinNT ////////////////////; //---- RPC -------------------------------------------------------------------; //*-* Error codes set by the Windows Sockets implementation are not made available; //*-* via the errno variable. Additionally, for the getXbyY class of functions,; //*-* error codes are NOT made available via the h_errno variable. Instead, error; //*-* codes are accessed by using the WSAGetLastError . This function is provided; //*-* in Windows Sockets as a precursor (and eventually an alias) for the Win32; //*-* function GetLastError. This is intended to provide a reliable way for a thread; //*-* in a multithreaded process to obtain per-thread error information.; /////////////////////////////////////////////////////////////////////////////; /// Receive exactly length bytes into buffer. Returns number of bytes; /// received. Returns -1 in case of error, -2 in case of MSG_OOB; /// and errno == EWOULDBLOCK, -3 in case of MSG_OOB and errno == EINVAL; /// and -4 in case of kNonBlock and errno == EWOULDBLOCK.; /// Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:34,interface,interface,34,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['interface'],['interface']
Integrability,"///////////////////// debug & profile interface /////////////////////////////; //; // - recompile with gDebugProxy = 1; //; // root [0] gDebug = -123 // start profiling; //or; // root [0] gDebug = -1234 // start profiling and debugging(call trace); //; // root [1] .x macro.C // profile macro.C; // root [2] gDebug = 0 // stop profiling; // root [3] .x macro.C // print results; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/inc/TGWin32ProxyDefs.h:38,interface,interface,38,graf2d/win32gdk/inc/TGWin32ProxyDefs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/inc/TGWin32ProxyDefs.h,1,['interface'],['interface']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////////////////////////; /// Fixture class to set up a toy hist factory model.; /// In the SetUp() phase; /// - A file with histograms is created. Depending on the value of MakeModelMode,; /// equidistant or custom bins are used, and shape systematics are added.; /// - A Measurement with the histograms in the file is created.; /// - The corresponding workspace is created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:238,Depend,Depending,238,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['Depend'],['Depending']
Integrability,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Produce vector of file names for specified file pattern; /// Depending from supported file forma",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:166,Depend,Depending,166,gui/webdisplay/src/RWebDisplayHandle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx,1,['Depend'],['Depending']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add control message for specified connection; /// Same control message can be overwritten many time before it really sends to the client; /// If connid == 0, message will be add to all connections; /// After ctrl message is add to the output, short timer is activated and message send afterwards",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:116,message,message,116,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,5,['message'],['message']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Add message to send queue for specified connection; /// If connid == 0, message will be add to all connections",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:108,message,message,108,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,2,['message'],['message']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Send initial message with buttons configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx:117,message,message,117,gui/webgui6/src/TWebControlBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebControlBar.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////////////////////; /// Almost a no-op, many slots can in fact reduce the performance due to thread synchronization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx:178,synchroniz,synchronization,178,tree/dataframe/src/RSqliteDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx,1,['synchroniz'],['synchronization']
Integrability,"///////////////////////////////////////////////////////////////////////////////////////////////; // Absolute Deviation loss function with boosted decision tree functionality; ///////////////////////////////////////////////////////////////////////////////////////////////; // The bdt loss function implements the LossFunctionBDT interface and inherits the AbsoluteDeviationLossFunction; // functionality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:328,interface,interface,328,tmva/tmva/inc/TMVA/LossFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h,1,['interface'],['interface']
Integrability,"///////////////////////////////////////////////////////////////////////////////////////////////; // Huber loss function with boosted decision tree functionality; ///////////////////////////////////////////////////////////////////////////////////////////////; // The bdt loss function implements the LossFunctionBDT interface and inherits the HuberLossFunction; // functionality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:315,interface,interface,315,tmva/tmva/inc/TMVA/LossFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h,1,['interface'],['interface']
Integrability,"///////////////////////////////////////////////////////////////////////////////////////////////; // Least Squares loss function with boosted decision tree functionality; ///////////////////////////////////////////////////////////////////////////////////////////////; // The bdt loss function implements the LossFunctionBDT interface and inherits the LeastSquaresLossFunction; // functionality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:323,interface,interface,323,tmva/tmva/inc/TMVA/LossFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h,1,['interface'],['interface']
Integrability,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface defining base class for general error calculations in; // regression/classification; ///////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:114,interface,interface,114,tmva/tmva/inc/TMVA/LossFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h,1,['interface'],['interface']
Integrability,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:114,interface,interface,114,tmva/tmva/inc/TMVA/LossFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h,3,['interface'],"['interface', 'interfaces']"
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Create message which send to client to create new widget",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx:107,message,message,107,gui/browserv7/src/RBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx,1,['message'],['message']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Create new widget and send init message to the client",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx:132,message,message,132,gui/browserv7/src/RBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx,1,['message'],['message']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Process disconnect event; /// Clear cache data and dependent connections",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomViewer.cxx:151,depend,dependent,151,geom/webviewer/src/RGeomViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomViewer.cxx,1,['depend'],['dependent']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Process received message from the client",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx:117,message,message,117,gui/browserv7/src/RBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx,1,['message'],['message']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Send generic progress message to the web window; /// Should show progress bar on client side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx:122,message,message,122,gui/browserv7/src/RBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx,1,['message'],['message']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Sends initial message to the client",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RFileDialog.cxx:114,message,message,114,gui/browserv7/src/RFileDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RFileDialog.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////////////////; /// A one-time forward iterator working on RooLinkedList or RooAbsCollection.; /// This wrapper separates the interface visible to the outside from the actual; /// implementation of the iterator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:182,wrap,wrapper,182,roofit/roofitcore/inc/RooLinkedListIter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"////////////////////////////////////////////////////////////////////////////////////////////; /// A wrapper around TIterator derivatives.; ///; /// It is called RooLinkedListIter because all classes assume that the RooAbsCollections use; /// a RooLinkedList, which is not true, any more.; /// The purpose of this wrapper is to act on the outside like a RooLinkedListIter, even though; /// the underlying implementation may work an a different container, like e.g.; /// an STL container. This is needed to not break user code that is using a RooLinkedList or; /// a RooAbsCollection.; ///; /// \note All code using this iterator as an iterator over a RooAbsCollection should move; /// to begin() and end() or range-based for loops. These are faster.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:100,wrap,wrapper,100,roofit/roofitcore/inc/RooLinkedListIter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h,2,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////////////////; /// Implementation of the GenericRooFIter interface for the RooLinkedList",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:136,interface,interface,136,roofit/roofitcore/inc/RooLinkedListIter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h,1,['interface'],['interface']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////; /// Creates http server, if required - with real http engine (civetweb); /// One could configure concrete HTTP port, which should be used for the server,; /// provide following entry in rootrc file:; ///; /// WebGui.HttpPort: 8088; ///; /// or specify range of http ports, which can be used:; ///; /// WebGui.HttpPortMin: 8800; /// WebGui.HttpPortMax: 9800; ///; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If requi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:831,protocol,protocol,831,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['protocol'],['protocol']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////; /// Handle data from web browser; /// Returns kFALSE if message was not processed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:148,message,message,148,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,2,['message'],['message']
Integrability,"//////////////////////////////////////////////////////////////////////////////////////////; /// If ROOT_LISTENER_SOCKET variable is configured,; /// message will be sent to that unix socket",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:149,message,message,149,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['message'],['message']
Integrability,"///////////////////////////////////////////////////////////////////////////////////////; // all following messages are not allowed in readonly mode or for secondary connections",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:106,message,messages,106,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,1,['message'],['messages']
Integrability,"/////////////////////////////////////////////////////////////////////////////////////; /// Calculate HMAC checksum for provided key and message; /// Key combained from connection key and session key",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:136,message,message,136,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['message'],['message']
Integrability,"/////////////////////////////////////////////////////////////////////////////////////; /// Check if this could be the message send by client to start new file dialog; /// If returns true, one can call RFileDialog::Embedded() to really create file dialog; /// instance inside existing widget",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RFileDialog.cxx:118,message,message,118,gui/browserv7/src/RFileDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RFileDialog.cxx,1,['message'],['message']
Integrability,"/////////////////////////////////////////////////////////////////////////////////////; /// Check if this could be the message send by client to start new file dialog; /// If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog; /// instance inside existing widget",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:118,message,message,118,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['message'],['message']
Integrability,"/////////////////////////////////////////////////////////////////////////////////////; /// Create dialog instance to use as embedded dialog inside other widget; /// Embedded dialog started on the client side where FileDialogController.SaveAs() method called; /// Such method immediately send message with ""FILEDIALOG:"" prefix; /// On the server side widget should detect such message and call RFileDialog::Embed(); /// providing received string as second argument.; /// Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RFileDialog.cxx:292,message,message,292,gui/browserv7/src/RFileDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RFileDialog.cxx,2,['message'],['message']
Integrability,"/////////////////////////////////////////////////////////////////////////////////////; /// Create dialog instance to use as embedded dialog inside provided widget; /// Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method; /// Embedded dialog started on the client side where FileDialogController.SaveAs() method called; /// Such method immediately send message with ""FILEDIALOG:"" prefix; /// On the server side widget should detect such message and call RFileDialog::Embedded(); /// providing received string as second argument.; /// Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:372,message,message,372,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,2,['message'],['message']
Integrability,"///////////////////////////////////////////////////////////////////////////////////; /// Configures recording of communication data in protocol file; /// Provided filename will be used to store JSON array with names of written files - text or binary; /// If data was send from client, ""send"" entry will be placed. JSON file will look like:; ///; /// [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; ///; /// If empty file name is provided, data recording will be disabled; /// Recorded data can be used in JSROOT directly to test client code without running C++ server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:135,protocol,protocol,135,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['protocol'],['protocol']
Integrability,"///////////////////////////////////////////////////////////////////////////////////; /// Internal method to send data; /// \param connid connection id, when 0 - data will be send to all connections; /// \param txt is text message that should be sent; /// \param data data to be std-moved to SubmitData function; /// \param chid channel id, 1 - normal communication, 0 - internal with highest priority",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:222,message,message,222,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['message'],['message']
Integrability,"///////////////////////////////////////////////////////////////////////////////////; /// Wrapper for NewElementPickedStr that takes secondary indices as C-style string.; /// Needed to be able to use TMethodCall interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx:89,Wrap,Wrapper,89,graf3d/eve7/src/REveSelection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx,2,"['Wrap', 'interface']","['Wrapper', 'interface']"
Integrability,"//////////////////////////////////////////////////////////////////////////////////; /// Evaluate object. Returns either cached value or triggers a recalculation.; /// The recalculation happens by calling getValV(), which in the end calls the; /// virtual evaluate() functions of the respective PDFs.; /// \param[in] normalisationSet getValV() reacts differently depending on the value of the normalisation set.; /// If the set is `nullptr`, an unnormalised value is returned.; /// \note The normalisation is arbitrary, because it is up to the implementation; /// of the PDF to e.g. leave out normalisation constants for speed reasons. The range; /// of the variables is also ignored.; ///; /// To normalise the result properly, a RooArgSet has to be passed, which contains; /// the variables to normalise over.; /// These are integrated over their current ranges to compute the normalisation constant,; /// and the unnormalised result is divided by this value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:362,depend,depending,362,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,2,"['depend', 'integrat']","['depending', 'integrated']"
Integrability,"//////////////////////////////////////////////////////////////////////////////////; /// Wrapper for getting the safety from the parallel world. Takes care of; /// caching mechanics + talking to the parallel world.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx:88,Wrap,Wrapper,88,geom/geom/src/TGeoNavigator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx,1,['Wrap'],['Wrapper']
Integrability,"//////////////////////////////////////////////////////////////////////////////////; /// \brief Prepares a ROperator object for Keras Conv Layer; ///; /// \param[in] fLayer Python Keras layer as a Dictionary object; /// \return Unique pointer to ROperator object; ///; /// For Keras's Conv layer, the names of the input tensor, output tensor, and; /// weight tensors are extracted, along with attributes like dilation_rate,; /// groups, kernel size, padding, strides. Padding attribute is then; /// computed for ROperator depending on Keras' attribute parameter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:521,depend,depending,521,tmva/pymva/src/RModelParser_Keras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx,1,['depend'],['depending']
Integrability,"/////////////////////////////////////////////////////////////////////////////////; /// The function generates and executes a command that loads the Doxygen URL in; /// a browser. It works for Mac, Windows and Linux. In the case of Linux, the; /// function also checks if the DISPLAY is set. If it isn't, a warning message; /// and the URL will be displayed on the terminal.; ///; /// \param[in] url web page to be displayed in a browser",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:314,message,message,314,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraph; \ingroup Graphs; A TGraph is an object made of two arrays X and Y with npoints each.; The TGraph painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. #### Notes. - Unlike histogram or tree (or even TGraph2D), TGraph objects; are not automatically attached to the current TFile, in order to keep the; management and size of the TGraph as small as possible.; - The TGraph constructors do not have the TGraph title and name as parameters.; A TGraph has the default title and name ""Graph"". To change the default title; and name `SetTitle` and `SetName` should be called on the TGraph after its creation.; TGraph was a light weight object to start with, like TPolyline or TPolyMarker.; That’s why it did not have any title and name parameters in the constructors. #### Example. The picture below gives an example:. Begin_Macro(source); {; double x[100], y[100];; int n = 20;; for (int i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; auto g = new TGraph(n,x,y);; g->SetTitle(""Graph title;X title;Y title"");; g->Draw(""AC*"");; }; End_Macro. #### Default X-Points. If one doesn't specify the points in the x-axis, they will get the default values 0, 1, 2, 3, (etc. depending; on the length of the y-points):. Begin_Macro(source); {; double y[6] = {3, 8, 1, 10, 5, 7};; auto g = new TGraph(6,y);; g->SetTitle(""A Graph with default X points"");; g->Draw();; }; End_Macro. */; ////////////////////////////////////////////////////////////////////////////////; /// Graph default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:1346,depend,depending,1346,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /**; Calculates the boundaries for a Bayesian confidence interval (shortest or central interval depending on the option). \param[in] total number of total events; \param[in] passed 0 <= number of passed events <= total; \param[in] level confidence level; \param[in] alpha shape parameter > 0 for the prior distribution (fBeta_alpha); \param[in] beta shape parameter > 0 for the prior distribution (fBeta_beta); \param[in] bUpper; - true - upper boundary is returned; - false - lower boundary is returned; \param[in] bShortest ??. Note: In the case central confidence interval is calculated.; when passed = 0 (or passed = total) the lower (or upper); interval values will be larger than 0 (or smaller than 1). Calculation:. The posterior probability in bayesian statistics is given by:; \f[; P(\varepsilon |k,N) \propto L(\varepsilon|k,N) \times Prior(\varepsilon); \f]; As an efficiency can be interpreted as probability of a positive outcome of; a Bernoullli trial the likelihood function is given by the binomial; distribution:; \f[; L(\varepsilon|k,N) = Binomial(N,k) \varepsilon ^{k} (1 - \varepsilon)^{N-k}; \f]; At the moment only beta distributions are supported as prior probabilities; of the efficiency (\f$ B(\alpha,\beta)\f$ is the beta function):; \f[; Prior(\varepsilon) = \frac{1}{B(\alpha,\beta)} \varepsilon ^{\alpha - 1} (1 - \varepsilon)^{\beta - 1}; \f]; The posterior probability is therefore again given by a beta distribution:; \f[; P(\varepsilon |k,N) \propto \varepsilon ^{k + \alpha - 1} (1 - \varepsilon)^{N - k + \beta - 1}; \f]; In case of central intervals; the lower boundary for the equal-tailed confidence interval is given by the; inverse cumulative (= quantile) function for the quantile \f$ \frac{1 - level}{2} \f$.; The upper boundary for the equal-tailed confidence interval is given by the; inverse cumulative (= quantile) function for the quantile \f$ \frac{1 + level}{2} \f$.; He",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:178,depend,depending,178,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // //; // TContextMenu //; // //; // This class provides an interface to context sensitive popup menus. //; // These menus pop up when the user hits the right mouse button, and //; // are destroyed when the menu pops downs. //; // //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/TContextMenu.h:142,interface,interface,142,core/gui/inc/TContextMenu.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/TContextMenu.h,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // //; // TContextMenuImp //; // //; // This class provides an interface to GUI independent //; // context sensitive popup menus. //; // //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/TContextMenuImp.h:145,interface,interface,145,core/gui/inc/TContextMenuImp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/TContextMenuImp.h,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // //; // TNetXNGSystem //; // //; // Authors: Justin Salmon, Lukasz Janyst //; // CERN, 2013 //; // //; // Enables access to XRootD filesystem interface using the new client. //; // //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/TNetXNGSystem.h:226,interface,interface,226,net/netxng/inc/TNetXNGSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/TNetXNGSystem.h,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // //; // TPythia8 //; // //; // TPythia is an interface class to C++ version of Pythia 8.1 //; // event generators, written by T.Sjostrand. //; ////////////////////////////////////////////////////////////////////////////////; /*; *------------------------------------------------------------------------------------*; | |; | *------------------------------------------------------------------------------* |; | | | |; | | | |; | | PPP Y Y TTTTT H H III A Welcome to the Lund Monte Carlo! | |; | | P P Y Y T H H I A A This is PYTHIA version 8.100 | |; | | PPP Y T HHHHH I AAAAA Last date of change: 20 Oct 2007 | |; | | P Y T H H I A A | |; | | P Y T H H III A A Now is 27 Oct 2007 at 18:26:53 | |; | | | |; | | Main author: Torbjorn Sjostrand; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Department of Theoretical Physics, Lund University, Lund, Sweden; | |; | | phone: + 41 - 22 - 767 82 27; e-mail: torbjorn@thep.lu.se | |; | | Author: Stephen Mrenna; Computing Division, Simulations Group, | |; | | Fermi National Accelerator Laboratory, MS 234, Batavia, IL 60510, USA; | |; | | phone: + 1 - 630 - 840 - 2556; e-mail: mrenna@fnal.gov | |; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S. Mrenna and P. Skands, arXiv:0710.3820 | |; | | | |; | | The main physics reference is the 'PYTHIA 6.4 Physics and Manual', | |; | | T. Sjostrand, S. Mrenna and P. Skands, JHEP05 (2006) 026 [hep-ph/0603175]. | |; | | | |; | | An archive of program versions and documentation is found on the web: | |; | | http://www.thep.lu.se/~torbjorn/Pythia.html | |; | | | |; | | This program is released under the GN",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/inc/TPythia8.h:129,interface,interface,129,montecarlo/pythia8/inc/TPythia8.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/inc/TPythia8.h,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // Notifiy dependent; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveRGBAPalette.cxx:93,depend,dependent,93,graf3d/eve7/src/REveRGBAPalette.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveRGBAPalette.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // TClassEdit will call this routine as soon as any of its static variable (used; // for caching) is destroyed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:111,rout,routine,111,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // Wrapper to numeric_limits; ////////////////////////////////////////////////////////////////////////////////; /// Returns a quiet NaN as [defined by IEEE 754](http://en.wikipedia.org/wiki/NaN#Quiet_NaN).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h:85,Wrap,Wrapper,85,math/mathcore/inc/TMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h,1,['Wrap'],['Wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // Wrapper to only selectively write one branch of the volume hierarchy to file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx:85,Wrap,Wrapper,85,geom/gdml/src/TGDMLWrite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx,1,['Wrap'],['Wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // Wrapper to turn Branch call with an std::array into the relevant leaf list; // call",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:85,Wrap,Wrapper,85,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['Wrap'],['Wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; // wrapper of all main methods for extraction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx:85,wrap,wrapper,85,geom/gdml/src/TGDMLWrite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx,1,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// (Re)Initialize numerical integration engine if necessary. Return true if; /// successful, or otherwise false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:111,integrat,integration,111,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// *** This function is deprecated and will disappear in future versions ***; /// *** It is just a wrapper around TFile::Cp.; /// *** Please use TProofMgr::UploadFiles.; ///; /// Upload a set of files and save the list of files by name dataSetName.; /// The 'files' argument is a list of TFileInfo objects describing the files; /// as first url.; /// The mask 'opt' is a combination of EUploadOpt:; /// kAppend (0x1) if set true files will be appended to; /// the dataset existing by given name; /// kOverwriteDataSet (0x2) if dataset with given name exited it; /// would be overwritten; /// kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists; /// kOverwriteAllFiles (0x8) overwrite all files that may exist; /// kOverwriteNoFiles (0x10) overwrite none; /// kAskUser (0x0) ask user before overwriteng dataset/files; /// The default value is kAskUser.; /// The user will be asked to confirm overwriting dataset or files unless; /// specified opt provides the answer!; /// If kOverwriteNoFiles is set, then a pointer to TList must be passed as; /// skippedFiles argument. The function will add to this list TFileInfo; /// objects describing all files that existed on the cluster and were; /// not uploaded.; ///; /// Communication Summary; /// Client Master; /// |------------>DataSetName----------->|; /// |<-------kMESS_OK/kMESS_NOTOK<-------| (Name OK/file exist); /// (*)|-------> call RegisterDataSet ------->|; /// (*) - optional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:182,wrap,wrapper,182,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// *** This function is deprecated and will disappear in future versions ***; /// *** It is just a wrapper around TFile::Cp.; /// *** Please use TProofMgr::UploadFiles.; ///; /// Upload a set of files and save the list of files by name dataSetName.; /// The mask 'opt' is a combination of EUploadOpt:; /// kAppend (0x1) if set true files will be appended to; /// the dataset existing by given name; /// kOverwriteDataSet (0x2) if dataset with given name exited it; /// would be overwritten; /// kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists; /// kOverwriteAllFiles (0x8) overwrite all files that may exist; /// kOverwriteNoFiles (0x10) overwrite none; /// kAskUser (0x0) ask user before overwriteng dataset/files; /// The default value is kAskUser.; /// The user will be asked to confirm overwriting dataset or files unless; /// specified opt provides the answer!; /// If kOverwriteNoFiles is set, then a pointer to TList must be passed as; /// skippedFiles argument. The function will add to this list TFileInfo; /// objects describing all files that existed on the cluster and were; /// not uploaded.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:182,wrap,wrapper,182,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// *** This function is deprecated and will disappear in future versions ***; /// *** It is just a wrapper around TFile::Cp.; /// *** Please use TProofMgr::UploadFiles.; ///; /// Upload files listed in ""file"" to PROOF cluster.; /// Where file = name of file containing list of files and; /// dataset = dataset name and opt is a combination of EUploadOpt bits.; /// Each file description (line) can include wildcards.; /// Check TFileInfo compatibility",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:182,wrap,wrapper,182,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// - For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; /// - For axis = 11, 12 or 13 returns the approximate standard error of skewness; /// of the histogram along x, y or z axis; ///; ///Note, that since third and fourth moment are not calculated; ///at the fill time, skewness and its standard error are computed bin by bin; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. See TH1::GetMean and TH1::GetStdDev.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:482,depend,depends,482,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// - For axis =1, 2 or 3 returns kurtosis of the histogram along x, y or z axis.; /// Kurtosis(gaussian(0, 1)) = 0.; /// - For axis =11, 12 or 13 returns the approximate standard error of kurtosis; /// of the histogram along x, y or z axis; ////; /// Note, that since third and fourth moment are not calculated; /// at the fill time, kurtosis and its standard error are computed bin by bin; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. See TH1::GetMean and TH1::GetStdDev.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:518,depend,depends,518,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:266,rout,routine,266,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:349,rout,routine,349,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// A new palette is created, depending on the id.; /// It is called by the combo box. Protected method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPaletteEditor.cxx:112,depend,depending,112,graf2d/asimage/src/TASPaletteEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPaletteEditor.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// A wrapper function for the more complicated interface of MeasureChars.; /// Computes how much space the given simple string needs.; ///; /// The return value is the width (in pixels) of the given string.; ///; /// string -- String whose width will be computed.; /// numChars -- Number of characters to consider from string, or < 0 for; /// strlen().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx:88,wrap,wrapper,88,gui/gui/src/TGFont.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Activate cache mode optimization with given definition of observables.; /// The cache operation mode of all objects in the expression tree will; /// modified such that all nodes that depend directly or indirectly on; /// any of the listed observables will be set to ADirty, as they are; /// expected to change every time. This save change tracking overhead for; /// nodes that are a priori known to change every time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:269,depend,depend,269,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,2,['depend'],['depend']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Activate warning messages if number of function calls needed for evaluation of convolution integral; /// exceeds given threshold",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx:103,message,messages,103,roofit/roofitcore/src/RooNumConvolution.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add a class to the list and map of classes.; /// This routine is deprecated, use TClass::AddClass directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:140,rout,routine,140,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add a column with the values of the given (function) argument; /// to this dataset. The function value is calculated for each; /// event using the observable values of each event in case the; /// function depends on variables with names that are identical; /// to the observable names in the dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:291,depend,depends,291,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add a column with the values of the given list of (function); /// argument to this dataset. Each function value is calculated for; /// each event using the observable values of the event in case the; /// function depends on variables with names that are identical to; /// the observable names in the dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:299,depend,depends,299,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add a configuration section for a particular integrator. Integrator name and capabilities are; /// automatically determined from instance passed as 'proto'. The defaultConfig object is associated; /// as the default configuration for the integrator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenConfig.cxx:131,integrat,integrator,131,roofit/roofitcore/src/RooNumGenConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenConfig.cxx,6,"['Integrat', 'integrat']","['Integrator', 'integrator']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add a message logging stream for message with given RooFit::MsgLevel or higher.; /// Higher means that messages with higher priority/severity are issued.; ///; /// This method accepts the following arguments to configure the stream:; /// <table>; /// <tr><th> Output Style options <th>; /// <tr><td> Prefix(bool flag=true) <td> Prefix all messages in this stream with Topic/Originator information; /// <tr><th> Filtering options <th>; /// <tr><td> Topic() <td> Restrict stream to messages on given topic; /// <tr><td> ObjectName(const char*) <td> Restrict stream to messages from object with given name; /// <tr><td> ClassName(const char*) <td> Restrict stream to messages from objects with given class name; /// <tr><td> BaseClassName(const char*)<td> Restrict stream to messages from objects with given base class name; /// <tr><td> LabelName(const chat*) <td> Restrict stream to messages from objects setAttribute(const char*) tag with given name; /// <tr><th> Output redirection options <th>; /// <tr><td> OutputFile(const char*) <td> Send output to file with given name. Multiple streams can write to same file.; /// <tr><td> OutputStream(ostream&) <td> Send output to given C++ stream. Multiple message streams can write to same c++ stream; /// </table>; /// The return value is the unique ID of the defined stream.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:92,message,message,92,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,10,['message'],"['message', 'messages']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the test sample to be used for the; /// test of the parameterization.; /// This sample needn't be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:161,depend,dependent,161,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,3,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add a row consisting of fNVariables independent variables, the; /// known, dependent quantity, and optionally, the square error in; /// the dependent quantity, to the training sample to be used for the; /// parameterization.; /// The mean of the variables and quantity is calculated on the fly,; /// as outlined in TPrincipal::AddRow.; /// This sample should be representative of the problem at hand.; /// Please note, that if no error is given Poisson statistics is; /// assumed and the square error is set to the value of dependent; /// quantity. See also the; /// <a href=""#TMultiDimFit:description"">class description</a>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:161,depend,dependent,161,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,3,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add all parameters of the function and its daughters to `params`.; /// \param[in] params Collection that stores all parameters. Add all new parameters to this.; /// \param[in] nset Normalisation set (optional). If a value depends on this set, it's not a parameter.; /// \param[in] stripDisconnected Passed on to getParametersHook().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:308,depend,depends,308,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add an error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TStatus.cxx:99,message,message,99,proof/proofplayer/src/TStatus.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TStatus.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add an info message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TStatus.cxx:98,message,message,98,proof/proofplayer/src/TStatus.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TStatus.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add an object to the scene, using an external physical ID; /// TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; /// for description of viewer architecture",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:166,interface,interface,166,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add an object to the viewer, using internal physical IDs; /// TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; /// for description of viewer architecture",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:165,interface,interface,165,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add button to toolbar. All buttons added via this method will be deleted; /// by the toolbar, w is the window to which the button messages will be send.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGToolBar.cxx:216,message,messages,216,gui/gui/src/TGToolBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGToolBar.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add button to toolbar. All buttons added via this method will be; /// deleted by the toolbar. On return the TGButton field of the; /// ToolBarData_t struct is filled in (if fPixmap was valid).; /// Window w is the window to which the button messages will be send.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGToolBar.cxx:327,message,messages,327,gui/gui/src/TGToolBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGToolBar.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add composite operation used to combine objects added via AddObject; /// TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; /// for description of viewer architecture",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:176,interface,interface,176,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add container frame to the viewport. We must make sure that the added; /// container is at least a TGCompositeFrame (TGCanvas::AddFrame depends; /// on it).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:222,depend,depends,222,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add el as dependent element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjectionManager.cxx:96,depend,dependent,96,graf3d/eve/src/TEveProjectionManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjectionManager.cxx,2,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add entry with specified string and id to listbox sorted by increasing id.; /// This sorting works properly only if EntrySort functions are used to add; /// entries without mixing them with other add or insert functions. The id will be; /// used in the event processing routine when the item is selected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx:356,rout,routine,356,gui/gui/src/TGListBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add entry with specified string and id to listbox sorted by increasing id.; /// This sorting works properly only if EntrySort functions are used to add; /// entries without mixing them with other add or insert functions. The id will be; /// used in the event processing routine when the item is selected.; /// The string will be adopted by the listbox.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx:356,rout,routine,356,gui/gui/src/TGListBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add entry with specified string and id to listbox. The id will be; /// used in the event processing routine when the item is selected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx:186,rout,routine,186,gui/gui/src/TGListBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add entry with specified string and id to listbox. The id will be; /// used in the event processing routine when the item is selected.; /// The string will be adopted by the listbox.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx:186,rout,routine,186,gui/gui/src/TGListBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListBox.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add field name to result set. This is an internal method that is not; /// exported via the abstract interface and that should not be user called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeResult.cxx:186,interface,interface,186,tree/tree/src/TTreeResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeResult.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add formula expression as meta argument in printing interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormulaVar.cxx:138,interface,interface,138,roofit/roofitcore/src/RooFormulaVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormulaVar.cxx,2,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add nWorkersToAdd workers to current list of workers. This function is; /// works on the master only, and only when an analysis is ongoing. A message; /// is sent back to the client when we go ""more"" parallel.; /// Returns -1 on error, number of total (not added!) workers on success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:228,message,message,228,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add the top level interface to the frame 'cf'. This part of the; /// interface will provide all enable functionalities, excluding the; /// edition of styles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx:104,interface,interface,104,gui/ged/src/TStyleManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx,2,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Add this message handler to the list of messages handlers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:95,message,message,95,core/base/src/TMessageHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx,2,['message'],"['message', 'messages']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Adopt a row to result set. This is an internal method that is not; /// exported via the abstract interface and that should not be user called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeResult.cxx:183,interface,interface,183,tree/tree/src/TTreeResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeResult.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:170,integrat,integration,170,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,3,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Advertise that we can internally integrate over x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPolyVar.cxx:119,integrat,integrate,119,roofit/roofitcore/src/RooPolyVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPolyVar.cxx,1,['integrat'],['integrate']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Advertise to RooFit that this function can be analytically integrated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooPolynomial.cxx:145,integrat,integrated,145,roofit/roofit/src/RooPolynomial.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooPolynomial.cxx,2,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Advertises internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:119,integrat,integration,119,roofit/roofitcore/src/RooAbsCachedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Analyze the received message.; /// Returns 0 on success (1 if this the last message from this socket), -1 if; /// any failure occurs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:107,message,message,107,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// As worker ranks exit, they send the collector empty messages.; /// This counter keeps track of the number of empty messages the collector; /// has received. Thereby the collector knows when all workers have exited; /// and it can exit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/mpi/src/TMPIFile.cxx:138,message,messages,138,io/mpi/src/TMPIFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/mpi/src/TMPIFile.cxx,2,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Ask for remote logs in the range [start, end]. If start == -1 all the; /// messages not yet received are sent back.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:161,message,messages,161,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Assign given value to linear transformation: sets input variable to (value-offset)/slope; /// If slope is zerom an error message is printed and no assignment is made",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinearVar.cxx:207,message,message,207,roofit/roofitcore/src/RooLinearVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinearVar.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Assign to the assembly a collection of identical volumes positioned according; /// a predefined pattern. The option can be spaced out or touching depending on the empty; /// space between volumes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:232,depend,depending,232,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Assignment operator implementation, increases reference count to original class object.; /// This routines assumes that the copy actually need to be done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClassRef.cxx:184,rout,routines,184,core/meta/src/TClassRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClassRef.cxx,1,['rout'],['routines']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Assignment operator, increases reference count to original class object.; /// This routines assumes that the copy actually need to be done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClassRef.cxx:169,rout,routines,169,core/meta/src/TClassRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClassRef.cxx,1,['rout'],['routines']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Attempt to recover file if not correctly closed; ///; /// The function returns the number of keys that have been recovered.; /// If no keys can be recovered, the file will be declared Zombie by; /// the calling function. This function is automatically called when; /// opening a file.; /// If the file is open in read only mode, the file is not modified.; /// If open in update mode and the function finds something to recover,; /// a new directory header is written to the file. When opening the file gain; /// no message from Recover will be reported.; /// If keys have been recovered, the file is usable and you can safely; /// read the corresponding objects.; /// If the file is not usable (a zombie), you can test for this case; /// with code like:; ///; /// ~~~{.cpp}; /// TFile f(""myfile.root"");; /// if (f.IsZombie()) {<actions to take if file is unusable>}; /// ~~~; ///; /// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; /// You can test if the file has been recovered with; ///; /// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; ///; /// When writing TTrees to a file, it is important to save the Tree header; /// at regular intervals (see TTree::AutoSave). If a file containing a Tree; /// is recovered, the last Tree header written to the file will be used.; /// In this case all the entries in all the branches written before writing; /// the header are valid entries.; /// One can disable the automatic recovery procedure by setting; ///; /// TFile.Recover 0; ///; /// in the <em>system.rootrc</em> file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:601,message,message,601,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Automatic repositioning and resizing of every MDI child window.; /// depending on mode : tile horizontal, tile vertical, or cascade.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMdiMainFrame.cxx:155,depend,depending,155,gui/gui/src/TGMdiMainFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMdiMainFrame.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Back-end for plotOn() implementation on RooSimultaneous which; /// needs special handling because a RooSimultaneous PDF cannot; /// project out its index category via integration. plotOn() will; /// abort if this is requested without providing a projection dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:253,integrat,integration,253,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Binding used by the integrator to evaluate the PDF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:106,integrat,integrator,106,roofit/roofitcore/src/RooBinSamplingPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx,1,['integrat'],['integrator']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Break markup is any kind of markup that might force a line-break. This; /// routine handles a single element of break markup and returns a pointer; /// to the first element past that markup. If p doesn't point to break; /// markup, then p is returned. If p is an incomplete table (a `<TABLE>`; /// that lacks a `</TABLE>`), then `NULL` is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx:162,rout,routine,162,gui/guihtml/src/TGHtmlLayout.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Broadcast a character string buffer to all slaves in the specified; /// list (either all slaves or only the active slaves). Use kind to; /// set the TMessage what field. Returns the number of slaves the message; /// was sent to. Returns -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:289,message,message,289,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Broadcast a character string buffer to all slaves in the specified; /// list. Use kind to set the TMessage what field. Returns the number of; /// slaves the message was sent to. Returns -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:243,message,message,243,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Broadcast a message to all slaves in the specified list (either; /// all slaves or only the active slaves). Returns the number of slaves; /// the message was successfully sent to. Returns -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:98,message,message,98,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Broadcast a message to all slaves in the specified list. Returns; /// the number of slaves the message was successfully sent to.; /// Returns -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:98,message,message,98,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Broadcast a message to the remote session.; /// Returns 0 on success, -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:98,message,message,98,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Broadcast an object to all slaves in the specified list. Use kind to; /// set the TMEssage what field. Returns the number of slaves the message; /// was sent to. Returns -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:222,message,message,222,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Broadcast the group priority to all workers in the specified list. Returns; /// the number of workers the message was successfully sent to.; /// Returns -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:192,message,message,192,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Browser interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookBranch.cxx:94,interface,interface,94,hist/hbook/src/THbookBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hbook/src/THbookBranch.cxx,2,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Build a clone of the prototype executing all registered 'replace' rules.; /// If verbose is set, a message is printed for each leaf or branch node; /// modification. The returned head node owns all cloned branch nodes; /// that were created in the cloning process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:185,message,message,185,roofit/roofitcore/src/RooCustomizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Build a clone of the prototype executing all registered 'replace'; /// rules and 'split' rules for the masterCat state named; /// 'masterCatState'. If verbose is set a message is printed for; /// each leaf or branch node modification. The returned composite arg; /// is owned by the customizer. This function cannot be called on; /// customizer build with the sterile constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:254,message,message,254,roofit/roofitcore/src/RooCustomizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Build and return the posterior function (not normalized) as a RooAbsReal; /// the posterior is obtained from the product of the likelihood function and the; /// prior pdf which is then integrated in the nuisance parameters (if existing).; /// A prior function for the nuisance can be specified either in the prior pdf object; /// or in the model itself. If no prior nuisance is specified, but prior parameters are then; /// the integration is performed assuming a flat prior for the nuisance parameters.; ///; /// NOTE: the return object is managed by the BayesianCalculator class, users do not need to delete it,; /// but the object will be deleted when the BayesiabCalculator object is deleted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:271,integrat,integrated,271,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,2,['integrat'],"['integrated', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Build and return the posterior pdf (i.e posterior function normalized to all range of poi); /// Note that an extra integration in the POI is required for the normalization; /// NOTE: user must delete the returned object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:201,integrat,integration,201,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Build the include dependency graph for one class in; /// GraphViz/Dot format; ///; /// Input: filename - output dot file incl. path",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx:104,depend,dependency,104,html/src/TClassDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx,1,['depend'],['dependency']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Build the library dependency graph for one class in; /// GraphViz/Dot format; ///; /// Input: filename - output dot file incl. path",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx:104,depend,dependency,104,html/src/TClassDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx,1,['depend'],['dependency']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// By default returns a pointer to the Delaunay histogram. If fHistogram; /// doesn't exist, books the 2D histogram fHistogram with a margin around; /// the hull. Calls TGraphDelaunay::Interpolate at each bin centre to build up; /// an interpolated 2D histogram.; ///; /// If the ""empty"" option is selected, returns an empty histogram booked with; /// the limits of fX, fY and fZ. This option is used when the data set is; /// drawn with markers only. In that particular case there is no need to; /// find the Delaunay triangles.; ///; /// By default use the new interpolation routine based on Triangles; /// If the option ""old"" the old interpolation is used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:660,rout,routine,660,hist/hist/src/TGraph2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// By default the interpretation of the fraction coefficients is; /// performed in the contextual choice of observables. This makes the; /// shape of the p.d.f explicitly dependent on the choice of; /// observables. This method instructs RooAddModel to freeze the; /// interpretation of the coefficients to be done in the given set of; /// observables. If frozen, fractions are automatically transformed; /// from the reference normalization set to the contextual normalization; /// set by ratios of integrals",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:254,depend,dependent,254,roofit/roofitcore/src/RooAddModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// By default the interpretation of the fraction coefficients is; /// performed in the contextual choice of observables. This makes the; /// shape of the p.d.f explicitly dependent on the choice of; /// observables. This method instructs RooAddPdf to freeze the; /// interpretation of the coefficients to be done in the given set of; /// observables. If frozen, fractions are automatically transformed; /// from the reference normalization set to the contextual normalization; /// set by ratios of integrals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:254,depend,dependent,254,roofit/roofitcore/src/RooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// By default the interpretation of the fraction coefficients is; /// performed in the default range. This make the shape of a RooAddModel; /// explicitly dependent on the range of the observables. To allow; /// a range independent definition of the fraction this function; /// instructs RooAddModel to freeze its interpretation in the given; /// named range. If the current normalization range is different; /// from the reference range, the appropriate fraction coefficients; /// are automatically calculated from the reference fractions using; /// ratios of integrals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:238,depend,dependent,238,roofit/roofitcore/src/RooAddModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// By default, fraction coefficients are assumed to refer to the default; /// fit range. This makes the shape of a RooAddPdf; /// explicitly dependent on the range of the observables. Calling this function; /// allows for a range-independent definition of the fractions, because it; /// ties all coefficients to the given; /// named range. If the normalisation range is different; /// from this reference range, the appropriate fraction coefficients; /// are automatically calculated from the reference fractions by; /// integrating over the ranges, and comparing these integrals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:224,depend,dependent,224,roofit/roofitcore/src/RooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx,2,"['depend', 'integrat']","['dependent', 'integrating']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as Int_t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooAbsArg reference found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooAbsCategory reference found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooAbsCategoryLValue reference found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooAbsData object found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooAbsPdf reference found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooAbsReal reference found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooAbsRealLValue reference found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooArgList of objects found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooArgSet of objects found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooCategory reference found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooDataHist object found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooDataSet object found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooRealVar reference found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as RooResolutionModel reference found in workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as const char*",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// CINT constructor interface, return constructor string argument `#idx` as double",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:103,interface,interface,103,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); /// This is a similarity transform when B is orthogonal . It is more; /// efficient than applying the actual multiplication because this; /// routine realizes that the final matrix is symmetric .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:298,rout,routine,298,math/matrix/src/TMatrixTSym.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx,2,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb); /// It is more efficient than applying the actual multiplication because this; /// routine realizes that the final matrix is symmetric .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:239,rout,routine,239,math/matrix/src/TMatrixTSym.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate current value of object, with error tracing wrapper",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:140,wrap,wrapper,140,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate if the an object defined by world frame bounding box; /// is 'of interest' to the camera. This is defined as box:; ///; /// 1. intersecting completely or partially (kInside/kPartial) with; /// cameras interest box (fInterestBox); /// 2. having significant length OR volume ratio compared to this; /// interest box; ///; /// If a box is 'of interest' returns kTRUE, kFALSE otherwise. See; /// TGLCamera::UpdateInterest() for more details of camera interest; /// box.; ///; /// Note: Length/volume ratios NOT dependent on the projected size; /// of box at current camera configuration as we do not want; /// continual changes. This is used when (re) populating the scene; /// with objects from external client.; ///; /// TODO: Might be more logical to move this test out to client -; /// and have accessor for fInterestBox instead?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:603,depend,dependent,603,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate view-dependent grid density.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveCaloLegoGL.cxx:101,depend,dependent,101,graf3d/eve/src/TEveCaloLegoGL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveCaloLegoGL.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates all values needed by the candle definition depending on the; /// candle options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCandle.cxx:140,depend,depending,140,graf2d/graf/src/TCandle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCandle.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:375,depend,depending,375,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the ROC integral (AUC); ///; /// @param num_points Granularity of the resulting curve used for integration.; /// The curve will be subdivided into num_points - 1 regions; /// where the performance of the classifier is sampled.; /// Larger number means more accurate, but more costly,; /// evaluation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx:192,integrat,integration,192,tmva/tmva/src/ROCCurve.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCurve.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Call this routine to cause all of the rendered HTML at the; /// virtual canvas coordinate of Y and beyond to be redrawn.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:96,rout,routine,96,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Call this routine to force the entire widget to be redrawn.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:96,rout,routine,96,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Called by TSocketHandler::Notify() to signal which socket is ready; /// to be read or written. User should not call this routine. The ready; /// socket will be returned via the Select() user function.; /// The Ready(TSocket *sock) signal is emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMonitor.cxx:207,rout,routine,207,net/net/src/TMonitor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMonitor.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Called via TCanvasImp interface by TCanvas.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootCanvas.cxx:108,interface,interface,108,gui/gui/src/TRootCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootCanvas.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Called when an element is unselected.; /// XXXX Old interface, not used in EVE-7.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx:138,interface,interface,138,graf3d/eve7/src/REveSelection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Called when element selection is repeated.; /// XXXX Old interface, not used in EVE-7.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx:143,interface,interface,143,graf3d/eve7/src/REveSelection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Called when node should be closed; ///; /// depending from number of childs different xml format is applied",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSnifferStore.cxx:130,depend,depending,130,net/http/src/TRootSnifferStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSnifferStore.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Called when user picks/clicks on an element. If multi is true,; /// the user is requiring a multiple selection (usually this is; /// associated with control-key being pressed at the time of pick; /// event).; /// XXXX Old interface, not used in EVE-7.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx:308,interface,interface,308,graf3d/eve7/src/REveSelection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Calls the corresponding method, depending on the selected tab.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TAdvancedGraphicsDialog.cxx:118,depend,depending,118,gui/fitpanel/src/TAdvancedGraphicsDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TAdvancedGraphicsDialog.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Capture viewer to file. Arguments are:; /// - 'viewer' - viewer object to capture from; /// - 'format' - output format - only postscript types presently.; /// One of kEPS_SIMPLE, kEPS_BSP, kPDF_SIMPLE or kPDF_BSP; /// See TGLOutput::CapturePostscript() for meanings; /// - 'filePath' - file output name. If null defaults to './viewer.eps' or './viewer.pdf'; /// depending on format requested; ///; /// Note : Output files can be large and take considerable time (up to mins); /// to generate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLOutput.cxx:448,depend,depending,448,graf3d/gl/src/TGLOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLOutput.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Capture viewer to postscript file. Arguments are:; /// - 'viewer' - viewer object to capture from; /// - 'format' - output format; /// - kEPS_SIMPLE - lower quality EPS; /// - kEPS_BSP - higher quality EPS; /// - kPDF_SIMPLE - lower quality PDF; /// - kPDF_BSP - higher quality PDF; /// - 'filePath' - file output name. If null defaults to './viewer.eps' or './viewer.pdf'; /// depending on format requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLOutput.cxx:464,depend,depending,464,graf3d/gl/src/TGLOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLOutput.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Change a buffer that was received into one that can be send, i.e.; /// forward a just received message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx:181,message,message,181,net/net/src/TMessage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Change category state by specifying a state name.; /// If printError is set, a message will be printed if; /// the specified state name does not represent a valid state.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:165,message,message,165,roofit/roofitcore/inc/RooAbsCategoryLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Change category state to state specified by another category state.; /// If printError is set, a message will be printed if; /// the specified index does not represent a valid state.; /// \note The state name of the other category is ignored.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:183,message,message,183,roofit/roofitcore/inc/RooAbsCategoryLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Change category state to the state name of another category.; /// If printError is set, a message will be printed if; /// the specified state name does not represent a valid state.; /// \note The state index of the other category is ignored.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:176,message,message,176,roofit/roofitcore/inc/RooAbsCategoryLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Change layout of objects in xml file; /// Can be changed only for newly created file.; ///; /// Currently there are two supported layouts:; ///; /// TXMLSetup::kSpecialized = 2; /// This is default layout of the file, when xml nodes names class names and data member; /// names are used. For instance:; /// `<TAttLine version=""1"">`; /// `<fLineColor v=""1""/>`; /// `<fLineStyle v=""1""/>`; /// `<fLineWidth v=""1""/>`; /// `</TAttLine>`; ///; /// TXMLSetup::kGeneralized = 3; /// For this layout all nodes name does not depend from class definitions.; /// The same class looks like; /// `<Class name=""TAttLine"" version=""1"">`; /// `<Member name=""fLineColor"" v=""1""/>`; /// `<Member name=""fLineStyle"" v=""1""/>`; /// `<Member name=""fLineWidth"" v=""1""/>`; /// `</Member>`; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLFile.cxx:601,depend,depend,601,io/xml/src/TXMLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLFile.cxx,1,['depend'],['depend']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Change our integration limits. Return true if the new limits are; /// ok, or otherwise false. Always returns false and does nothing; /// if this object was constructed to always use our integrand's limits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:97,integrat,integration,97,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,6,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Change the cursor shape depending on the slider area.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDoubleSlider.cxx:110,depend,depending,110,gui/gui/src/TGDoubleSlider.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDoubleSlider.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Change used variables to those with the same name in given list.; /// \param[in] newDeps New dependents to replace the old ones.; /// \param[in] mustReplaceAll Will yield an error if one dependent does not have a replacement.; /// \param[in] nameChange Passed down to RooAbsArg::findNewServer(const RooAbsCollection&, bool) const.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx:179,depend,dependents,179,roofit/roofitcore/src/RooFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx,2,['depend'],"['dependent', 'dependents']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Changes the Min and Max default values of the scan method,; /// depending on the selected parameter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TAdvancedGraphicsDialog.cxx:150,depend,depending,150,gui/fitpanel/src/TAdvancedGraphicsDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TAdvancedGraphicsDialog.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check if TProcessIDs must be sent. The list of TProcessIDs; /// in the object in the message is found by looking in the TMessage bits.; /// We send only the TProcessIDs not yet send on this socket.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:171,message,message,171,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; /// in the object in the message is in the fInfos list of the message.; /// We send only the TStreamerInfos not yet sent on this socket.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:186,message,message,186,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,4,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check if given observable can be safely generated using the; /// pdfs internal generator mechanism (if that existsP). Observables; /// on which a PDF depends via more than route are not safe; /// for use with internal generators because they introduce; /// correlations not known to the internal generator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:236,depend,depends,236,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,2,"['depend', 'rout']","['depends', 'route']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check if the ProcessID pid is already in the message.; /// If not, then:; /// - mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; /// - mark bit uid+1 where uid id the uid of the ProcessID",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx:131,message,message,131,net/net/src/TMessage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check if the limits are valid. For this integrator all limit configurations; /// are valid, but if the limits change between two calculate() calls it; /// may be necessary to reconfigure (e.g. if an open ended range becomes; /// a closed range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx:126,integrat,integrator,126,roofit/roofitcore/src/RooImproperIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx,1,['integrat'],['integrator']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check if we can integrate over the current domain. If return value; /// is true we cannot handle the current limits (e.g. where the domain; /// of one or more observables is open ended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx:102,integrat,integrate,102,roofit/roofitcore/src/RooMCIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx,1,['integrat'],['integrate']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check if we have a valid established sec context in memory; /// Retrieves relevant info and negotiates with server.; /// options = ""Opt,strlen(username),username.Data()""; /// message = kROOTD_USER, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:261,message,message,261,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:101,integrat,integration,101,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,5,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check whether a branch should have a corresponding reader added, depending; /// on the options provided by the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx:151,depend,depending,151,tree/treeplayer/src/TTreeReaderGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Check whether the branch (or the parent) contains a collection.; /// If it does, set ""contained"" to the contained type (if we can; /// retrieve it) and return the TClass for the collection. Set; /// ""contained"" to the branch's (or parent's) contained object's; /// class for non-collections, returning 0.; ///; /// Only one of ""branch"" or ""parent"" can ge given (depending on whether; /// we are creating browsable objects for a branch or for another; /// browsable object)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx:448,depend,depending,448,tree/tree/src/TBranchBrowsable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Checks if an entity with the specified name is defined in Cling.; /// Returns kUnknown if the entity is not defined.; /// Returns kWithClassDefInline if the entity exists and has a ClassDefInline; /// Returns kKnown if the entity is defined.; ///; /// By default, structs, namespaces, classes, enums and unions are looked for.; /// If the flag isClassOrNamespaceOnly is true, classes, structs and; /// namespaces only are considered. I.e. if the name is an enum or a union,; /// the returned value is false.; ///; /// In the case where the class is not loaded and belongs to a namespace; /// or is nested, looking for the full class name is outputting a lots of; /// (expected) error messages. Currently the only way to avoid this is to; /// specifically check that each level of nesting is already loaded.; /// In case of templates the idea is that everything between the outer; /// '<' and '>' has to be skipped, e.g.: `aap<pippo<noot>::klaas>::a_class`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:770,message,messages,770,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Checks the member MPI_REQEUST object to see if a message has been received.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/mpi/src/TMPIFile.cxx:135,message,message,135,io/mpi/src/TMPIFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/mpi/src/TMPIFile.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Clean up the message handler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:99,message,message,99,core/base/src/TMessageHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Cleanup Condor interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TCondor.cxx:101,interface,interface,101,proof/proof/src/TCondor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TCondor.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Clear a margin stack to reclaim memory. This routine just blindly; /// pops everything off the stack. Typically used when the screen is; /// cleared or the widget is deleted, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx:131,rout,routine,131,gui/guihtml/src/TGHtmlLayout.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Clear a wrap-around obstacle. The second option determines the; /// precise behavior.; ///; /// CLEAR_Left Clear all obstacles on the left.; ///; /// CLEAR_Right Clear all obstacles on the right.; ///; /// CLEAR_Both Clear all obstacles on both sides.; ///; /// CLEAR_First Clear only the first obstacle on either side.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx:94,wrap,wrap-around,94,gui/guihtml/src/TGHtmlLayout.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx,1,['wrap'],['wrap-around']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all data members which depend on the unfolding results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:115,depend,depend,115,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['depend'],['depend']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:124,rout,routine,124,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Use this routine when your objects allocate; /// memory (e.g. objects inheriting from TNamed or containing TStrings; /// allocate memory). If not you better use Clear() since if is faster.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:119,rout,routine,119,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the stack of evaluation error messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:122,message,messages,122,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Clipping routine: Cohen Sutherland algorithm.; ///; /// - If Clip ==2 the segment is outside the boundary.; /// - If Clip ==1 the segment has one point outside the boundary.; /// - If Clip ==0 the segment is inside the boundary.; ///; /// \param[inout] x[],y[] Segment coordinates (2 points); /// \param[in] xclipl,yclipb,xclipr,yclipt Clipping boundary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:95,rout,routine,95,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Close composite container; /// TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; /// for description of viewer architecture",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:134,interface,interface,134,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Close socket in case not HTTP/1.1 protocol or when explicitly requested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx:120,protocol,protocol,120,net/net/src/TWebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx,1,['protocol'],['protocol']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Collect responses from slave sl. Returns the number of slaves that; /// responded (=1).; /// If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; /// which means wait forever).; /// If defined (>= 0) endtype is the message that stops this collection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:321,message,message,321,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Collect responses from the remote server.; /// Returns the number of messages received.; /// If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; /// which means wait forever).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:155,message,messages,155,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Collect responses from the slave servers. Returns the number of messages; /// received. Can be 0 if there are no active slaves.; /// If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; /// which means wait forever).; /// If defined (>= 0) endtype is the message that stops this collection.; /// Collect also stops its execution from time to time to check for new; /// workers in Dynamic Startup mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:150,message,messages,150,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['message'],"['message', 'messages']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Collect responses from the slave servers. Returns the number of slaves; /// that responded.; /// If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; /// which means wait forever).; /// If defined (>= 0) endtype is the message that stops this collection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:325,message,message,325,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Combined implementation for GetDeclFileName(), GetImplFileName():; /// Return declaration / implementation file name (depending on decl);; /// return the full path if filesys is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx:204,depend,depending,204,html/src/THtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Combines an image with a rectangle of the specified drawable. The; /// section of the image defined by the x, y, width, and height arguments; /// is drawn on the specified part of the drawable.; ///; /// \param [in] id the drawable; /// \param [in] gc the GC; /// \param [in] img the image you want combined with the rectangle; /// \param [in] dx the offset in X from the left edge of the image; /// \param [in] dy the offset in Y from the top edge of the image; /// \param [in] x, y coordinates, which are relative to the origin of the; /// drawable and are the coordinates of the subimage; /// \param [in] w, h the width and height of the subimage, which define the; /// rectangle dimensions; ///; /// GC components in use: function, plane-mask, subwindow-mode,; /// clip-x-origin, clip-y-origin, and clip-mask.; /// GC mode-dependent components: foreground and background.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:913,depend,dependent,913,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Compare two message digests for equality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:98,message,message,98,core/base/src/TMD5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Compares the objects stored in the TObjLink objects.; /// Depending on the flag IsAscending() the function returns; /// true if the object in l1 <= l2 (ascending) or l2 <= l1 (descending).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:144,Depend,Depending,144,core/cont/src/TList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx,1,['Depend'],['Depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Compress the message. The message will only be compressed if the; /// compression level > 0 and the if the message is > 256 bytes.; /// Returns -1 in case of error (when compression fails or; /// when the message increases in size in some pathological cases),; /// otherwise returns 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx:99,message,message,99,net/net/src/TMessage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx,4,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Compute Correlation Ratio of 2D histogram to estimate functional dependency between two variables; /// Author: Moritz Backes, Geneva (2009)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:151,depend,dependency,151,tmva/tmva/src/Tools.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx,1,['depend'],['dependency']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Compute histogram parameters used by the drawing routines for a rotated pad.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:135,rout,routines,135,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['rout'],['routines']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Compute histogram parameters used by the drawing routines.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:135,rout,routines,135,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['rout'],['routines']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Compute integral (normalized cumulative sum of bins) w/o under/overflows; /// The result is stored in fIntegral and used by the GetRandom functions.; /// This function is automatically called by GetRandom when the fIntegral; /// array does not exist or when the number of entries in the histogram; /// has changed since the previous call to GetRandom.; /// The resulting integral is normalized to 1.; /// If the routine is called with the onlyPositive flag set an error will; /// be produced in case of negative bin content and a NaN value returned; /// \return 1 if success, 0 if integral is zero, NAN if onlyPositive-test fails",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:498,rout,routine,498,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Compute the asimov data set for an observable of a pdf.; /// It generates binned data following the binning of the observables.; // TODO: (possibility to change number of bins); // TODO: implement integration over bin content",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:283,integrat,integration,283,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Compute the size of all elements in the widget. Assume that a style has; /// already been assigned to all elements.; ///; /// Some of the elements might have already been sized. Refer to the; /// fLastSized and only compute sizes for elements that follow this one. If; /// fLastSized is 0, then size everything.; ///; /// This routine only computes the sizes of individual elements. The size of; /// aggregate elements (like tables) are computed separately.; ///; /// The HTML_Visible flag is also set on every element that results in ink on; /// the page.; ///; /// This routine may invoke a callback procedure which could delete the HTML; /// widget.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlSizer.cxx:413,rout,routine,413,gui/guihtml/src/TGHtmlSizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlSizer.cxx,2,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Computes the amount of screen space needed to display a multi-line,; /// justified string of text. Records all the measurements that were done; /// to determine to size and positioning of the individual lines of text;; /// this information can be used by the TGTextLayout::DrawText() procedure; /// to display the text quickly (without remeasuring it).; ///; /// This procedure is useful for simple widgets that want to display; /// single-font, multi-line text and want TGFont to handle the details.; ///; /// The return value is a TGTextLayout token that holds the measurement; /// information for the given string. The token is only valid for the given; /// string. If the string is freed, the token is no longer valid and must; /// also be deleted.; ///; /// The dimensions of the screen area needed to display the text are stored; /// in *width and *height.; ///; /// string -- String whose dimensions are to be computed.; /// numChars -- Number of characters to consider from string, or < 0 for; /// strlen().; /// wrapLength -- Longest permissible line length, in pixels. <= 0 means no; /// automatic wrapping: just let lines get as long as needed.; /// justify -- How to justify lines.; /// flags -- Flag bits OR-ed together. kTextIgnoreTabs means that tab; /// characters should not be expanded. kTextIgnoreNewlines; /// means that newline characters should not cause a line break.; /// width -- Filled with width of string.; /// height -- Filled with height of string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx:1107,wrap,wrapLength,1107,gui/gui/src/TGFont.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx,2,['wrap'],"['wrapLength', 'wrapping']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Connect every entry in the top level interface to the slot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx:123,interface,interface,123,gui/ged/src/TStyleManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Connect framework defined extension to the material. The material ""grabs"" a copy,; /// so the original object can be released by the producer. Release the previously; /// connected extension if any.; ///; /// NOTE: This interface is intended for the use by TGeo and the users should; /// NOT connect extensions using this method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMaterial.cxx:306,interface,interface,306,geom/geom/src/TGeoMaterial.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMaterial.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Connect framework defined extension to the node. The node ""grabs"" a copy,; /// so the original object can be released by the producer. Release the previously; /// connected extension if any.; ///; /// NOTE: This interface is intended for the use by TGeo and the users should; /// NOT connect extensions using this method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx:298,interface,interface,298,geom/geom/src/TGeoNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Connect framework defined extension to the volume. The volume ""grabs"" a copy,; /// so the original object can be released by the producer. Release the previously; /// connected extension if any.; ///; /// NOTE: This interface is intended for the use by TGeo and the users should; /// NOT connect extensions using this method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:302,interface,interface,302,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Connect user-defined extension to the material. The material ""grabs"" a copy, so; /// the original object can be released by the producer. Release the previously; /// connected extension if any.; ///; /// NOTE: This interface is intended for user extensions and is guaranteed not; /// to be used by TGeo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMaterial.cxx:301,interface,interface,301,geom/geom/src/TGeoMaterial.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMaterial.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Connect user-defined extension to the node. The node ""grabs"" a copy, so; /// the original object can be released by the producer. Release the previously; /// connected extension if any.; ///; /// NOTE: This interface is intended for user extensions and is guaranteed not; /// to be used by TGeo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx:293,interface,interface,293,geom/geom/src/TGeoNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Connect user-defined extension to the volume. The volume ""grabs"" a copy, so; /// the original object can be released by the producer. Release the previously; /// connected extension if any.; ///; /// NOTE: This interface is intended for user extensions and is guaranteed not; /// to be used by TGeo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:297,interface,interface,297,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct MINUIT interface to given function. Function can be anything,; /// but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; /// (implemented by RooChi2Var). Other frequent use cases are a RooAddition; /// of a RooNLLVar plus a penalty or constraint term. This class propagates; /// all RooFit information (floating parameters, their values and errors); /// to MINUIT before each MINUIT call and propagates all MINUIT information; /// back to the RooFit object at the end of each call (updated parameter; /// values, their (asymmetric errors) etc. The default MINUIT error level; /// for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); /// value of the input function.; /// Constructor that accepts all configuration in struct with RooAbsReal likelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:103,interface,interface,103,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct a new RooBinSamplingPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] observable Observable to integrate over (the one that is binned).; /// \param[in] inputPdf A PDF whose bins should be sampled with higher precision.; /// \param[in] epsilon Relative precision for the integrator, which is used to sample the bins.; /// Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches; /// relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:263,integrat,integrate,263,roofit/roofitcore/src/RooBinSamplingPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx,3,['integrat'],"['integrate', 'integrator']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct a numeric integrator instance that operates on function 'func' and is configured; /// with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; /// of the integration, otherwise it is queried from 'func'. This function iterators over list; /// of available prototype integrators and returns an clone attached to the given function of; /// the first class that matches the specifications of the requested integration considering; /// the number of dimensions, the nature of the limits (open ended vs closed) and the user; /// preference stated in 'config'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenFactory.cxx:106,integrat,integrator,106,roofit/roofitcore/src/RooNumGenFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenFactory.cxx,8,['integrat'],"['integration', 'integrator', 'integrators']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct an integrator over 'function' where the configuration details; /// are taken from 'config'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx:99,integrat,integrator,99,roofit/roofitcore/src/RooMCIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx,1,['integrat'],['integrator']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct an integrator over 'function' with given sampling mode; /// and generator type. The sampling mode can be 'Importance'; /// (default), 'ImportanceOnly' and 'Stratified'. The generator type; /// can be 'QuasiRandom' (default) and 'PseudoRandom'. Consult the original; /// VEGAS documentation on details of the mode and type parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx:99,integrat,integrator,99,roofit/roofitcore/src/RooMCIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx,1,['integrat'],['integrator']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct build configuration from single prototype 'pdfName' and list of arguments; /// that can be passed to RooSimWSTool::build() method. This routine parses SplitParam(); /// SplitParamConstrained() and Restrict() arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx:232,rout,routine,232,roofit/roofitcore/src/RooSimWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct fChain, also adding friends if needed and injecting knowledge of offsets if available.; /// \param[in] treeNames Name of the tree for each file in `fileNames`.; /// \param[in] fileNames Files to be opened.; /// \param[in] friendInfo Information about TTree friends, if any.; /// \param[in] nEntries Number of entries to be processed.; /// \param[in] friendEntries Number of entries in each friend. Expected to have same ordering as friendInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx:138,inject,injecting,138,tree/treeplayer/src/TTreeProcessorMT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx,1,['inject'],['injecting']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct integral of 'function' over observables in 'depList'; /// in range 'rangeName' with normalization observables 'funcNormSet'; /// (for p.d.f.s). In the integral is performed to the maximum extent; /// possible the internal (analytical) integrals advertised by function.; /// The other integrations are performed numerically. The optional; /// config object prescribes how these numeric integrations are configured.; ///; /// \Note If pdf component selection was globally overridden to always include; /// all components (either with RooAbsReal::globalSelectComp(bool) or a; /// RooAbsReal::GlobalSelectComponentRAII), then any created integral will; /// ignore component selections during its lifetime. This is especially useful; /// when creating normalization or projection integrals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:380,integrat,integrations,380,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,2,['integrat'],['integrations']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct integral on 'function' using given configuration object. The integration; /// range is taken from the definition in the function binding",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:157,integrat,integration,157,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct integrator on given function binding binding",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:96,integrat,integrator,96,roofit/roofitcore/src/RooBinIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx,2,['integrat'],['integrator']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct integrator on given function binding for given range,; /// using specified summation rule, maximum number of steps and; /// conversion tolerance. The integration limits are taken from the; /// function binding.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx:96,integrat,integrator,96,roofit/roofitcore/src/RooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx,2,['integrat'],"['integration', 'integrator']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct integrator on given function binding, using specified summation; /// rule, maximum number of steps and conversion tolerance. The integration; /// limits are taken from the function binding.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx:96,integrat,integrator,96,roofit/roofitcore/src/RooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx,2,['integrat'],"['integration', 'integrator']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct integrator on given function binding, using specified; /// configuration object and integration range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx:96,integrat,integrator,96,roofit/roofitcore/src/RooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx,2,['integrat'],"['integration', 'integrator']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct integrator on given function binding, using specified; /// configuration object. The integration limits are taken from the; /// function binding",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx:96,integrat,integrator,96,roofit/roofitcore/src/RooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx,2,['integrat'],"['integration', 'integrator']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct parser on given input stream. Use given errorPrefix to; /// prefix any parsing error messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooStreamParser.cxx:181,message,messages,181,roofit/roofitcore/src/RooStreamParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooStreamParser.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Construct string with unique suffix name to give to integral object that encodes; /// integrated observables, normalization observables and the integration range name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:172,integrat,integrated,172,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,2,['integrat'],"['integrated', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for a normalization projection of the product of p.d.f.s _prodSet; /// integrated over _intSet in range isetRangeName while normalized over _normSet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenProdProj.cxx:169,integrat,integrated,169,roofit/roofitcore/src/RooGenProdProj.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenProdProj.cxx,1,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a RooArgList. If the list contains multiple; /// objects with the same name, only the first is store in the set.; /// Warning messages will be printed for dropped items.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:229,message,messages,229,roofit/roofitcore/src/RooArgSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a RooArgSet / RooArgList and a pointer to another RooFit object.; ///; /// \param[in] collection Collection of RooFit objects to be added. If a list contains multiple; /// objects with the same name, only the first is stored in the set.; /// Warning messages will be printed for dropped items.; /// \param[in] var1 Further object to be added. If it is already in `collection`,; /// nothing happens, and the warning message is suppressed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:353,message,messages,353,roofit/roofitcore/src/RooArgSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx,2,['message'],"['message', 'messages']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a root TCollection. Elements in the collection that; /// do not inherit from RooAbsArg will be skipped. A warning message; /// will be printed for every skipped item.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx:217,message,message,217,roofit/roofitcore/src/RooArgList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from data set, model pdf, parameter of interests and prior pdf; /// If nuisance parameters are given they will be integrated according either to the prior or; /// their constraint term included in the model",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:212,integrat,integrated,212,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor needed by TVirtualFitter interface. Same behavior as default constructor.; /// initialize setting name and the global pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:123,interface,interface,123,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of a data set from (part of) an existing data; /// set. The dimensions of the data set are defined by the 'vars'; /// RooArgSet, which can be identical to 'dset' dimensions, or a; /// subset thereof. The 'cutVar' formula variable is used to select; /// the subset of data points to be copied. For subsets without; /// selection on the data points, or involving cuts operating; /// exclusively and directly on the data set dimensions, the; /// equivalent constructor with a string based cut expression is; /// recommended.; ///; /// For most uses the RooAbsData::reduce() wrapper function, which; /// uses this constructor, is the most convenient way to create a; /// subset of an existing data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:669,wrap,wrapper,669,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of a data set from (part of) an existing data; /// set. The dimensions of the data set are defined by the 'vars'; /// RooArgSet, which can be identical to 'dset' dimensions, or a; /// subset thereof. The 'cuts' string is an optional RooFormula; /// expression and can be used to select the subset of the data; /// points in 'dset' to be copied. The cut expression can refer to; /// any variable in the source dataset. For cuts involving variables; /// other than those contained in the source data set, such as; /// intermediate formula objects, use the equivalent constructor; /// accepting RooFormulaVar reference as cut specification.; ///; /// For most uses the RooAbsData::reduce() wrapper function, which; /// uses this constructor, is the most convenient way to create a; /// subset of an existing data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:785,wrap,wrapper,785,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of cache object which owns RooDataHist cache histogram,; /// RooHistPdf pdf that represents is shape and RooChangeTracker meta; /// object that tracks changes in listed dependent parameter of cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:267,depend,dependent,267,roofit/roofitcore/src/RooAbsCachedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of convolution operator PDF; ///; /// convVar : convolution variable (on which both pdf and resmodel should depend); /// pdf : input 'physics' pdf; /// resmodel : input 'resolution' pdf; ///; /// output is pdf(x) (X) resmodel(x) = Int [ pdf(x') resmodel (x-x') ] dx'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx:206,depend,depend,206,roofit/roofitcore/src/RooNumConvolution.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx,1,['depend'],['depend']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of integral on given function binding and with given configuration. The; /// integration limits are taken from the definition in the function binding; ///_func = function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:175,integrat,integration,175,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking a function binding, an integration range and a configuration object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:128,integrat,integration,128,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking descriptive name of owner/user which; /// is used as prefix for any warning or error messages; /// generated by this parser",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:190,message,messages,190,roofit/roofitcore/src/RooCmdConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to (const) real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:654,interface,interface,654,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using a pointer to a real function.; ///; /// \param[in] name object name; /// \param[in] fcn pointer to function; /// \param[in] xmin,xmax x axis limits; /// \param[in] npar is the number of free parameters used by the function; /// \param[in] ndim number of dimensions; /// \param[in] addToGlobList boolean marking if it should be added to global list; ///; /// This constructor creates a function of type C when invoked; /// with the normal C++ compiler.; ///; /// see test program test/stress.cxx (function stress1) for an example.; /// note the interface with an intermediate pointer.; ///; /// \warning A function created with this constructor cannot be Cloned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:648,interface,interface,648,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor using two existing histograms as input; ///; ///Input: passed - contains the events fulfilling some criteria; /// total - contains all investigated events; ///; ///Notes: - both histograms have to fulfill the conditions of CheckConsistency; /// - dimension of the resulting efficiency object depends; /// on the dimension of the given histograms; /// - Clones of both histograms are stored internally; /// - The function SetName(total.GetName() + ""_clone"") is called to set; /// the names of the new object and the internal histograms..; /// - The created TEfficiency object is NOT appended to a directory. It; /// will not be written to disk during the next TFile::Write() command; /// in order to prevent duplication of data. If you want to save this; /// TEfficiency object anyway, you can either append it to a; /// directory by calling SetDirectory(TDirectory*) or write it; /// explicitly to disk by calling Write().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:390,depend,depends,390,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with formula expression and list of input variables.; /// \param[in] name Name of the formula.; /// \param[in] title Title of the formula.; /// \param[in] inFormula Expression to be evaluated.; /// \param[in] dependents Variables that should be passed to the formula.; /// \param[in] checkVariables Check that all variables from `dependents` are used in the expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormulaVar.cxx:307,depend,dependents,307,roofit/roofitcore/src/RooFormulaVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormulaVar.cxx,2,['depend'],['dependents']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with formula expression, title and list of input variables.; /// \param[in] name Name of the formula.; /// \param[in] title Formula expression. Will also be used as the title.; /// \param[in] dependents Variables that should be passed to the formula.; /// \param[in] checkVariables Check that all variables from `dependents` are used in the expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormulaVar.cxx:290,depend,dependents,290,roofit/roofitcore/src/RooFormulaVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormulaVar.cxx,2,['depend'],['dependents']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with function binding and configuration object. The integration range is taken; /// from the definition in the function binding",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx:150,integrat,integration,150,roofit/roofitcore/src/RooImproperIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with function binding, definition of integration range and configuration object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx:135,integrat,integration,135,roofit/roofitcore/src/RooImproperIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with function binding. The integration range is taken from the; /// definition in the function binding",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx:125,integrat,integration,125,roofit/roofitcore/src/RooImproperIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with owner and proxied object, taking ownership of the proxied object.; ///; /// \param[in] theName Name of this proxy (for printing).; /// \param[in] desc Description what this proxy should act as.; /// \param[in] owner The object that owns the proxy. This is important for tracking; /// of client-server dependencies.; /// \param[in] ptr Owning smart pointer to the object that the proxy should hold. Ownership will be transferred to the proxy.; /// \param[in] valueServer Notify the owner if value changes.; /// \param[in] shapeServer Notify the owner if shape (e.g. binning) changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:404,depend,dependencies,404,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['depend'],['dependencies']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with owner and proxied object.; /// \param[in] theName Name of this proxy (for printing).; /// \param[in] desc Description what this proxy should act as.; /// \param[in] owner The object that owns the proxy. This is important for tracking; /// of client-server dependencies.; /// \param[in] ref Reference to the object that the proxy should hold.; /// \param[in] valueServer Notify the owner if value changes.; /// \param[in] shapeServer Notify the owner if shape (e.g. binning) changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:359,depend,dependencies,359,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['depend'],['dependencies']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with owner and proxied object.; ///; /// \deprecated Kept for backwards compatibility and will be removed in ROOT 6.36.; /// Please use RooTemplateProxy(const char*, const char*, RooAbsArg*, std::unique_ptr<T>, bool, bool); /// or RooTemplateProxy(const char*, const char*, RooAbsArg*, T&, bool, bool),; /// depending if you want to transfer ownership or not.; ///; /// \param[in] theName Name of this proxy (for printing).; /// \param[in] desc Description what this proxy should act as.; /// \param[in] owner The object that owns the proxy. This is important for tracking; /// of client-server dependencies.; /// \param[in] ref Reference to the object that the proxy should hold.; /// \param[in] valueServer Notify the owner if value changes.; /// \param[in] shapeServer Notify the owner if shape (e.g. binning) changes.; /// \param[in] proxyOwnsArg Proxy will delete the payload if owning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:406,depend,depending,406,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,2,['depend'],"['dependencies', 'depending']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. Defines names of message levels; /// and mapping of topic codes to topic names; /// Install default message streams.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:116,message,message,116,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. Register all known integrators by calling; /// their static registration functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenFactory.cxx:118,integrat,integrators,118,roofit/roofitcore/src/RooNumGenFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenFactory.cxx,1,['integrat'],['integrators']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Control routine to paint any kind of histograms.; ///; /// This function is automatically called by TCanvas::Update.; /// (see TH1::Draw for the list of options)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:94,rout,routine,94,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Convert a keysym to the appropriate keycode. For example keysym is; /// a letter and keycode is the matching keyboard key (which is dependend; /// on the current keyboard mapping).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:218,depend,dependend,218,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,1,['depend'],['dependend']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Convert a keysym to the appropriate keycode. For example keysym is; /// a letter and keycode is the matching keyboard key (which is dependent; /// on the current keyboard mapping).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/GX11Gui.cxx:218,depend,dependent,218,graf2d/x11/src/GX11Gui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/GX11Gui.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Convert fDatime from TDatime format to the standard time_t format.; /// If toGMT is true, the time offset of the current local time zone is; /// subtracted from the returned time_t. One use of such a non-standard time_t; /// value is to convert a TDatime object that contains local time to GMT,; /// as in this example:; /// ~~~ {.cpp}; /// TDatime now;; /// now.Set(now.Convert(kTRUE));; /// ~~~; /// Caution: the time_t returned from Convert(kTRUE) is incompatible with; /// regular Unix time - it contains an artificial, locale-dependent offset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:617,depend,dependent,617,core/base/src/TDatime.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Convert machine dependent pixel value (obtained via RGB2Pixel or; /// via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; /// This string can be directly passed to, for example,; /// TGClient::GetColorByName(). String will be reused so copy immediately; /// if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:102,depend,dependent,102,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Convert machine dependent pixel value (obtained via RGB2Pixel or; /// via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; /// The r,g,b triplet will be [0,1].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:102,depend,dependent,102,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Convert machine dependent pixel value (obtained via RGB2Pixel or; /// via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; /// The r,g,b triplet will be [0,255].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:102,depend,dependent,102,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Convert r,g,b to graphics system dependent pixel value.; /// The r,g,b triplet must be [0,1].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:119,depend,dependent,119,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Convert r,g,b to graphics system dependent pixel value.; /// The r,g,b triplet must be [0,255].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:119,depend,dependent,119,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Converts the ""keysym"" to the appropriate keycode. For example,; /// keysym is a letter and keycode is the matching keyboard key (which; /// is dependent on the current keyboard mapping). If the specified; /// ""keysym"" is not defined for any keycode, returns zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:229,depend,dependent,229,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Copy from an existing proxy.; /// It will accept any RooTemplateProxy instance, and attempt a dynamic_cast on its payload.; /// \param[in] theName Name of this proxy.; /// \param[in] owner Pointer to the owner this proxy should be registered to.; /// \param[in] other Instance of a different proxy whose payload should be copied.; /// \param[in] allowWrongTypes Instead of throwing a std::invalid_argument, only issue an; /// error message when payload with wrong type is found. This is unsafe, but may be necessary; /// when reading back legacy types. Defaults to false.; /// \throw std::invalid_argument if the types of the payloads are incompatible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:518,message,message,518,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Copy nentries from given tree to this tree.; /// This routines assumes that the branches that intended to be copied are; /// already connected. The typical case is that this tree was created using; /// tree->CloneTree(0).; ///; /// By default copy all entries.; ///; /// Returns number of bytes copied to this tree.; ///; /// If 'option' contains the word 'fast' and nentries is -1, the cloning will be; /// done without unzipping or unstreaming the baskets (i.e., a direct copy of the; /// raw bytes on disk).; ///; /// When 'fast' is specified, 'option' can also contains a sorting order for the; /// baskets in the output file.; ///; /// There are currently 3 supported sorting order:; ///; /// - SortBasketsByOffset (the default); /// - SortBasketsByBranch; /// - SortBasketsByEntry; ///; /// See TTree::CloneTree for a detailed explanation of the semantics of these 3 options.; ///; /// If the tree or any of the underlying tree of the chain has an index, that index and any; /// index in the subsequent underlying TTree objects will be merged.; ///; /// There are currently three 'options' to control this merging:; /// - NoIndex : all the TTreeIndex object are dropped.; /// - DropIndexOnError : if any of the underlying TTree object do no have a TTreeIndex,; /// they are all dropped.; /// - AsIsIndexOnError [default]: In case of missing TTreeIndex, the resulting TTree index has gaps.; /// - BuildIndexOnError : If any of the underlying TTree objects do not have a TTreeIndex,; /// all TTreeIndex are 'ignored' and the missing piece are rebuilt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:140,rout,routines,140,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['rout'],['routines']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create / open a file; ///; /// The type of the file can be either a; /// TFile, TNetFile, TWebFile or any TFile derived class for which an; /// plugin library handler has been registered with the plugin manager; /// (for the plugin manager see the TPluginManager class). The returned; /// type of TFile depends on the file name specified by 'url'.; /// If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried; /// sequentially in the specified order until a successful open.; /// If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object; /// will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile,; /// etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc; /// for regular expressions that will be checked) and as last a local file will; /// be tried.; /// Before opening a file via TNetFile a check is made to see if the URL; /// specifies a local file. If that is the case the file will be opened; /// via a normal TFile. To force the opening of a local file via a; /// TNetFile use either TNetFile directly or specify as host ""localhost"".; /// The netopt argument is only used by TNetFile. For the meaning of the; /// options and other arguments see the constructors of the individual; /// file classes. In case of error, it returns a nullptr.; ///; /// For TFile implementations supporting asynchronous file open, see; /// TFile::AsyncOpen(...), it is possible to request a timeout with the; /// option <b>`TIMEOUT=<secs>`</b>: the timeout must be specified in seconds and; /// it will be internally checked with granularity of one millisec.; /// For remote files there is the option: <b>CACHEREAD</b> opens an existing; /// file for reading through the file cache. The file will be downloaded to; /// the cache and opened from there. If the download fails, it will be opened remotely.; /// The file will be downloaded to the directory specified by",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:389,depend,depends,389,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create Condor interface object. Uses Condor apps since there is no; /// API yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TCondor.cxx:100,interface,interface,100,proof/proof/src/TCondor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TCondor.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a NetFile object. A net file is the same as a TFile; /// except that it is being accessed via a rootd server. The url; /// argument must be of the form: root[k]://host.dom.ain/file.root.; /// When protocol is ""rootk"" try using kerberos5 authentication.; /// If the file specified in the URL does not exist, is not accessable; /// or can not be created the kZombie bit will be set in the TNetFile; /// object. Use IsZombie() to see if the file is accessable.; /// If the remote daemon thinks the file is still connected, while you are; /// sure this is not the case you can force open the file by preceding the; /// option argument with an ""-"", e.g.: ""-recreate"". Do this only; /// in cases when you are very sure nobody else is using the file.; /// To bypass the writelock on a file, to allow the reading of a file; /// that is being written by another process, explicitly specify the; /// ""+read"" option (""read"" being the default option).; /// The netopt argument can be used to specify the size of the tcp window in; /// bytes (for more info see: http://www.psc.edu/networking/perf_tune.html).; /// The default and minimum tcp window size is 65535 bytes.; /// If netopt < -1 then |netopt| is the number of parallel sockets that will; /// be used to connect to rootd. This option should be used on fat pipes; /// (i.e. high bandwidth, high latency links). The ideal number of parallel; /// sockets depends on the bandwidth*delay product. Generally 5-7 is a good; /// number.; /// For a description of the option and other arguments see the TFile ctor.; /// The preferred interface to this constructor is via TFile::Open().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx:290,protocol,protocol,290,net/net/src/TNetFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx,3,"['depend', 'interface', 'protocol']","['depends', 'interface', 'protocol']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a TClass object. This object contains the full dictionary; /// of a class. It has list to baseclasses, datamembers and methods.; /// Use this ctor to create a standalone TClass object. Only useful; /// to get a temporary TClass interface to an interpreted class. Used by TTabCom.; ///; /// \note Use `TClass::GetClass(""ClassName"")` to get access to a TClass object for a certain class!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:321,interface,interface,321,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a TMessage object for reading objects. The objects will be; /// read from buf. Use the What() method to get the message type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx:205,message,message,205,net/net/src/TMessage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a TMessage object for storing objects. The ""what"" integer; /// describes the type of message. Predefined ROOT system message types; /// can be found in MessageTypes.h. Make sure your own message types are; /// unique from the ROOT defined message types (i.e. 0 - 10000 are; /// reserved by ROOT). In case you OR ""what"" with kMESS_ACK, the message; /// will wait for an acknowledgment from the remote side. This makes; /// the sending process synchronous. In case you OR ""what"" with kMESS_ZIP,; /// the message will be compressed in TSocket using the zip algorithm; /// (only if message is > 256 bytes).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx:178,message,message,178,net/net/src/TMessage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx,8,"['Message', 'message']","['MessageTypes', 'message']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a Web file object. A web file is the same as a read-only; /// TFile except that it is being read via a HTTP server. The url; /// argument must be of the form: http://host.dom.ain/file.root.; /// The opt can be ""NOPROXY"", to bypass any set ""http_proxy"" shell; /// variable. The proxy can be specified as (in sh, or equivalent csh):; /// export http_proxy=http://pcsalo.cern.ch:3128; /// The proxy can also be specified via the static method TWebFile::SetProxy().; /// Basic authentication (AuthType Basic) is supported. The user name and; /// passwd can be specified in the url like this:; /// http://username:mypasswd@pcsalo.cern.ch/files/aap.root; /// If the file specified in the URL does not exist or is not accessible; /// the kZombie bit will be set in the TWebFile object. Use IsZombie(); /// to see if the file is accessible. The preferred interface to this; /// constructor is via TFile::Open().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx:940,interface,interface,940,net/net/src/TWebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a \f$ \chi^2 \f$ from a series of x and y values stored in a dataset.; /// The y values can either be the event weights (default), or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// The following named arguments are supported; ///; /// | | Options to control construction of the \f$ \chi^2 \f$; /// |-|-----------------------------------------; /// | `YVar(RooRealVar& yvar)` | Designate given column in dataset as Y value; /// | `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:633,Integrat,Integrate,633,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,2,['Integrat'],['Integrate']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a cumulative distribution function of this p.d.f in terms; /// of the observables listed in iset. If no nset argument is given; /// the c.d.f normalization is constructed over the integrated; /// observables, so that its maximum value is precisely 1. It is also; /// possible to choose a different normalization for; /// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; /// construct a partial cdf c(x,y) that only when integrated itself; /// over z results in a maximum value of 1. To construct such a cdf pass; /// z as argument to the optional nset argument",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:273,integrat,integrated,273,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,2,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a dCache file object.; ///; /// A dCache file is the same as a TFile; /// except that it is being accessed via a dCache server. The url; /// argument must be of the form: `dcache:/pnfs/<path>/<file>.root` or; /// `dcap://<nodename.org>/<path>/<file>.root`. If the file specified in the; /// URL does not exist, is not accessable or can not be created the kZombie; /// bit will be set in the TDCacheFile object. Use IsZombie() to see if the; /// file is accessable. For a description of the option and other arguments; /// see the TFile ctor. The preferred interface to this constructor is; /// via TFile::Open().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx:649,interface,interface,649,io/dcache/src/TDCacheFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a dithered version of the color map and lightness images for; /// display modes with reduced number of colors. The Floyd-Steinberg error; /// diffusion dithering algorithm is used.; /// This routine is called in PseudoColor modes only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorDialog.cxx:284,rout,routine,284,gui/gui/src/TGColorDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorDialog.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a file selection dialog. Depending on the dlg_type it can be; /// used for opening or saving a file.; /// About the first two arguments, p is the parent Window, usually the; /// desktop (root) window, and main is the main (TGMainFrame) application; /// window (the one opening the dialog), onto which the dialog is; /// usually centered, and which is waiting for it to close.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFileDialog.cxx:118,Depend,Depending,118,gui/gui/src/TGFileDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFileDialog.cxx,1,['Depend'],['Depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a list of leaf nodes in the arg tree starting with; /// ourself as top node that don't match any of the names of the variable list; /// of the supplied data set (the dependents). The caller of this; /// function is responsible for deleting the returned argset.; /// The complement of this function is getObservables()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:259,depend,dependents,259,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['depend'],['dependents']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a list of leaf nodes in the arg tree starting with; /// ourself as top node that match any of the names of the variable list; /// of the supplied data set (the dependents). The caller of this; /// function is responsible for deleting the returned argset.; /// The complement of this function is getParameters().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:253,depend,dependents,253,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['depend'],['dependents']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a list of leaf nodes in the arg tree starting with; /// ourself as top node that match any of the names the args in the; /// supplied argset.; /// Returns `true` only if something went wrong.; /// The complement of this function is getParameters().; /// \param[in] dataList Set of leaf nodes to match.; /// \param[out] outputSet Output set.; /// \param[in] valueOnly If this parameter is true, we only match leaves that; /// depend on the value of any arg in `dataList`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:518,depend,depend,518,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['depend'],['depend']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a message dialog box with the following parameters:.; /// title: Window title; /// msg: Message to be shown ('\n' may be used to split it in lines); /// icon: Picture to be shown at the left on the dialog window.; /// It might take any of the following values:; /// kMBIconStop, kMBIconQuestion,; /// kMBIconExclamation, kMBIconAsterisk; /// buttons: Buttons to be shown at the botton of the dialog window.; /// Look at EMsgBoxButton for the different possible values.; /// ret_code: It will hold the value of the button pressed when the; /// dialog is closed; /// options: Frame options of this dialog window.; /// text_align: Align options for 'msg'. See ETextJustification for the values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMsgBox.cxx:95,message,message,95,gui/gui/src/TGMsgBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMsgBox.cxx,2,"['Message', 'message']","['Message', 'message']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a message dialog box.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMsgBox.cxx:95,message,message,95,gui/gui/src/TGMsgBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMsgBox.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a named TDSet object from existing TChain 'chain'.; /// If 'withfriends' is kTRUE add also friends.; /// This constructor substituted the static methods TChain::MakeTDSet; /// removing any residual dependence of 'tree' on 'proof'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:291,depend,dependence,291,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,1,['depend'],['dependence']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a named TDSet object. The ""type"" defines the class of which objects; /// will be processed (default 'TTree'). The optional ""objname"" argument; /// specifies the name of the objects of the specified class.; /// If the ""objname"" is not given the behaviour depends on the 'type':; /// for 'TTree' the first TTree is analyzed; for other types, all objects of; /// the class found in the specified directory are processed.; /// The ""dir"" argument specifies in which directory the objects are; /// to be found, the top level directory (""/"") is the default.; /// Directories can be specified using wildcards, e.g. ""*"" or ""/*""; /// means to look in all top level directories, ""/dir/*"" in all; /// directories under ""/dir"", and ""/*/*"" to look in all directories; /// two levels deep.; /// For backward compatibility the type can also be passed via 'name',; /// in which case 'type' is ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:347,depend,depends,347,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a new OS interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:102,interface,interface,102,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a new PDEFoam, set the PDEFoam options (nCells, nBin,; /// Xmin, Xmax, etc.) and initialize the PDEFoam by calling; /// pdefoam->Initialize().; ///; /// Parameters:; ///; /// - foamcaption - name of PDEFoam object; ///; /// - ft - type of PDEFoam; ///; /// Candidates are:; /// - kSeparate - creates TMVA::PDEFoamEvent; /// - kDiscr - creates TMVA::PDEFoamDiscriminant; /// - kMonoTarget - creates TMVA::PDEFoamTarget; /// - kMultiTarget - creates TMVA::MultiTarget; /// - kMultiClass - creates TMVA::PDEFoamDiscriminant; ///; /// If 'fDTSeparation != kFoam' then a TMVA::PDEFoamDecisionTree; /// is created (the separation type depends on fDTSeparation).; ///; /// - cls - marked event class (optional, default value = 0)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:722,depend,depends,722,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a new browser with a name, title. Width and height are by; /// default set to 640x400 and (optionally) adjusted by the screen factor; /// (depending on Rint.Canvas.UseScreenFactor to be true or false, default; /// is true).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/src/TBrowser.cxx:232,depend,depending,232,core/gui/src/TBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/src/TBrowser.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a new frame for a given variable in x. This is just a; /// wrapper for the RooPlot constructor with the same interface.; ///; /// More details.; /// \param[in] var The variable on the x-axis; /// \param[in] xmin Left edge of the x-axis; /// \param[in] xmax Right edge of the x-axis; /// \param[in] nBins number of bins on the x-axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx:152,wrap,wrapper,152,roofit/roofitcore/src/RooPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:99,message,message,99,core/base/src/TMessageHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class named cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:99,message,message,99,core/base/src/TMessageHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1645,integrat,integrateOverBinsPrecision,1645,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,4,['integrat'],"['integrateOverBinsPrecision', 'integrated']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create a window frame for log messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:116,message,messages,116,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,2,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an I/O buffer object. Mode should be either TBuffer::kRead or; /// TBuffer::kWrite. By default the I/O buffer has a size of; /// TBuffer::kInitialSize (1024) bytes. An external buffer can be passed; /// to TBuffer via the buf argument. By default this buffer will be adopted; /// unless adopt is false.; ///; /// If the new buffer is _not_ adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:466,rout,routine,466,core/base/src/TBuffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an I/O buffer object.; /// Mode should be either TBuffer::kRead or; /// TBuffer::kWrite. By default the I/O buffer has a size of; /// TBuffer::kInitialSize (1024) bytes. An external buffer can be passed; /// to TBuffer via the buf argument. By default this buffer will be adopted; /// unless adopt is false.; /// If the new buffer is <b>not</b> adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:471,rout,routine,471,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an application environment. The TRint environment provides an; /// interface to the WM manager functionality and eventloop via inheritance; /// of TApplication and in addition provides interactive access to; /// the Cling C++ interpreter via the command line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:160,interface,interface,160,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an application environment. The application environment; /// provides an interface to the graphics system and eventloop; /// (be it X, Windows, macOS or BeOS). After creating the application; /// object start the eventloop by calling its Run() method. The command; /// line options recognized by TApplication are described in the GetOptions(); /// method. The recognized options are removed from the argument array.; /// The original list of argument options can be retrieved via the Argc(); /// and Argv() methods. The appClassName ""proofserv"" is reserved for the; /// PROOF system. The ""options"" and ""numOptions"" arguments are not used,; /// except if you want to by-pass the argv processing by GetOptions(); /// in which case you should specify numOptions<0. All options will; /// still be available via the Argv() method for later use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:166,interface,interface,166,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty histogram with name and title with a given; /// set of axes. Create a TH1D/TH2D/TH3D, depending on the number; /// of elements in axes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:188,depend,depending,188,hist/hist/src/THnBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an image depending on the values of imageData.; /// For more information see function SetImage() which is called; /// by this constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:102,depend,depending,102,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an image depending on the values of imageData.; /// The size of the image is width X (imageData.fN / width).; /// For more information see function SetImage() which is called by; /// this constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:102,depend,depending,102,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,2,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an interface adaptor f(vars) that binds us to the specified variables; /// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; /// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; /// current values of x2 and x4. The caller takes ownership of the returned adaptor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:96,interface,interface,96,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an iterator over all bins. Public interface is THnIter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx:127,interface,interface,127,hist/hist/src/THn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THn.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:211,integrat,integration,211,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,5,['integrat'],"['integrates', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:211,integrat,integration,211,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,6,"['Integrat', 'integrat']","['Integrate', 'integrates', 'integrating', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:209,integrat,integration,209,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,5,['integrat'],"['integrated', 'integrates', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:295,integrat,integration,295,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,6,['integrat'],"['integrates', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create an output file with a graphical representation of the class; /// inheritance. If force, replace existing output file.; /// This routine does nothing if fHtml->HaveDot() is true - use; /// ClassDotCharts() instead!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx:221,rout,routine,221,html/src/TClassDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create histogram as sum of two existing histograms. If Poisson errors are selected the histograms are; /// added and Poisson confidence intervals are calculated for the summed content. If wgt1 and wgt2 are not; /// 1 in this mode, a warning message is printed. If SumW2 errors are selected the histograms are added; /// and the histograms errors are added in quadrature, taking the weights into account.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHist.cxx:327,message,message,327,roofit/roofitcore/src/RooHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHist.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create layout for canvas. Depending on the size of the container; /// we need to add the scrollbars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:112,Depend,Depending,112,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,1,['Depend'],['Depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create new object of type classname, with given name and title, and own-wrap it; /// i.e. the xRooNode will delete the object when the node (and any that reference it) is destroyed; ///; /// \param classname : the type of the object to create; /// \param name : the name to give the object; /// \param title : the title to give the object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:158,wrap,wrap,158,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['wrap'],['wrap']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create semaphore used for synchronizing access to shared memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TMapFile.cxx:112,synchroniz,synchronizing,112,io/io/src/TMapFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TMapFile.cxx,1,['synchroniz'],['synchronizing']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create the class index for each module, picking up documentation from the; /// module's TModuleDocInfo::GetInputPath() plus the (possibly relative); /// THtml::GetModuleDocPath(). Also creates the library dependency plot if dot; /// exists, see THtml::HaveDot().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx:291,depend,dependency,291,html/src/TDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx,1,['depend'],['dependency']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create the context menu depending on the selected object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootContextMenu.cxx:110,depend,depending,110,gui/gui/src/TRootContextMenu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootContextMenu.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create the message type and color maps",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:97,message,message,97,tmva/tmva/src/MsgLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Create transient TDirectory representation of this workspace. This directory; /// will appear as a subdirectory of the directory that contains the workspace; /// and will have the name of the workspace suffixed with ""Dir"". The TDirectory; /// interface is read-only. Any attempt to insert objects into the workspace; /// directory representation will result in an error message. Note that some; /// ROOT object like TH1 automatically insert themselves into the current directory; /// when constructed. This will give error messages when done in a workspace; /// directory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:329,interface,interface,329,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,3,"['interface', 'message']","['interface', 'message', 'messages']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Creates a TGraph object describing the n-sigma contour of a; /// TMinuit fit. The contour of the parameters pa1 and pa2 is calculated; /// using npoints (>=4) points. The TMinuit status will be; /// - 0 on success and; /// - -1 if errors in the calling sequence (pa1, pa2 not variable); /// - 1 if less than four points can be found; /// - 2 if npoints<4; /// - n>3 if only n points can be found (n < npoints); /// The status can be obtained via TMinuit::GetStatus().; ///; /// To get the n-sigma contour the ERRDEF parameter in Minuit has to set; /// to n^2. The fcn function has to be set before the routine is called.; ///; /// The TGraph object is created via the interpreter. The user must cast it; /// to a TGraph*. Note that the TGraph is created with npoints+1 in order to; /// close the contour (setting last point equal to first point).; ///; /// You can find an example in $ROOTSYS/tutorials/fit/fitcont.C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:688,rout,routine,688,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Creates a recorder with filename to replay or to record,; /// depending on option (NEW or RECREATE will start recording,; /// READ will start replaying)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:148,depend,depending,148,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Creates a socket or a parallel socket and authenticates to the; /// remote server specified in 'url' on remote 'port' as 'user'.; ///; /// url: [[proto][p][auth]://]host[/?options]; ///; /// where proto = ""sockd"", ""rootd"", ""proofd""; /// indicates the type of remote server; /// if missing ""sockd"" is assumed (""sockd"" indicates; /// any remote server session using TServerSocket); /// [p] = for parallel sockets (forced internally for; /// rootd); /// [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication; /// [options] = ""m"" or ""s"", when proto=proofd indicates whether; /// we are master or slave (used internally by TSlave); ///; /// An already opened connection can be used by passing its socket; /// in opensock.; ///; /// If 'err' is defined, '*err' on return from a failed call contains an error; /// code (see NetErrors.h).; ///; /// Example:; ///; /// TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); ///; /// creates an authenticated parallel socket of size 3 to a sockd; /// server running on remote machine machine.fq.dn on port 5052;; /// authentication will attempt protocol Kerberos first.; ///; /// NB: may hang if the remote server is not of the correct type;; /// at present TSocket has no way to find out the type of the; /// remote server automatically; ///; /// Returns pointer to an authenticated socket or 0 if creation or; /// authentication is unsuccessful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:1187,protocol,protocol,1187,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['protocol'],['protocol']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Creates a socket or a parallel socket and authenticates to the; /// remote server.; ///; /// url: [[proto][p][auth]://][user@]host[:port][/service][?options]; ///; /// where proto = ""sockd"", ""rootd"", ""proofd""; /// indicates the type of remote server;; /// if missing ""sockd"" is assumed (""sockd"" indicates; /// any remote server session using TServerSocket); /// [p] = for parallel sockets (forced internally for; /// rootd; ignored for proofd); /// [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication; /// [port] = is the remote port number; /// [service] = service name used to determine the port; /// (for backward compatibility, specification of; /// port as priority); /// options = ""m"" or ""s"", when proto=proofd indicates whether; /// we are master or slave (used internally by; /// TSlave); ///; /// An already opened connection can be used by passing its socket; /// in opensock.; ///; /// If 'err' is defined, '*err' on return from a failed call contains an error; /// code (see NetErrors.h).; ///; /// Example:; ///; /// TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); ///; /// creates an authenticated parallel socket of size 3 to a sockd; /// server running on remote machine machine.fq.dn on port 5052;; /// authentication will attempt protocol Kerberos first.; ///; /// NB: may hang if the remote server is not of the correct type;; /// at present TSocket has no way to find out the type of the; /// remote server automatically; ///; /// Returns pointer to an authenticated socket or 0 if creation or; /// authentication is unsuccessful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:1357,protocol,protocol,1357,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['protocol'],['protocol']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; /// integration operation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx:193,integrat,integration,193,roofit/roofitcore/src/RooProjectedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx,2,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Declare code to the interpreter, without any of the interpreter actions; /// that could trigger a re-interpretation of the code. I.e. make cling; /// behave like a compiler: no dynamic lookup, no input wrapping for; /// subsequent execution, no automatic provision of declarations but just a; /// plain `#include`.; /// Returns true on success, false on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:288,wrap,wrapping,288,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['wrap'],['wrapping']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Declare that we handle all integrations internally",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx:113,integrat,integrations,113,roofit/roofitcore/src/RooProduct.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx,1,['integrat'],['integrations']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Decode analytical integration/generation code into index map of integrated/generated (map2); /// and non-integrated/generated observables (map1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMultiVarGaussian.cxx:104,integrat,integration,104,roofit/roofitcore/src/RooMultiVarGaussian.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMultiVarGaussian.cxx,3,['integrat'],"['integrated', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Decompose 'expression' as pointing to something inside the leaf; /// Returns:; /// - -2 Error: some information is missing (message already printed); /// - -1 Error: Syntax is incorrect (message already printed); /// - 0; /// - >0 the value returns is the action code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:210,message,message,210,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Default constructor specifying a list of parameters; /// - param[0] = dz; /// - param[1] = rin; /// - param[2] = stin; /// - param[3] = rout; /// - param[4] = stout",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoHype.cxx:222,rout,rout,222,geom/geom/src/TGeoHype.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoHype.cxx,1,['rout'],['rout']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Default implementation of function advertising integration capabilities. The interface is; /// similar to that of getAnalyticalIntegral except that an integer code is added that; /// designates the coefficient number for which the integration capabilities are requested; ///; /// This default implementation advertises that no internal integrals are supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:133,integrat,integration,133,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,3,"['integrat', 'interface']","['integration', 'interface']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Default implementation of function implementing advertised integrals. Only; /// the pass-through scenario (no integration) is implemented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:196,integrat,integration,196,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Default thread cleanup routine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/src/TPosixThread.cxx:109,rout,routine,109,core/thread/src/TPosixThread.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/src/TPosixThread.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Define multiple states in a single call. Use like:; /// ```; /// myCat.defineTypes({ {""0Lep"", 0}, {""1Lep"", 1}, {""2Lep"", 2}, {""3Lep"", 3} });; /// ```; /// Note: When labels or indices are defined multiple times, an error message is printed,; /// and the corresponding state is ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:306,message,message,306,roofit/roofitcore/src/RooCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Defines parameters on which cache contents depends. Returns; /// subset of variables of self that is not contained in the; /// supplied nset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:129,depend,depends,129,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Delete the OS interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:100,interface,interface,100,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Delete the old image and creates a new image depending on the values; /// of imageData. The size of the image is width X (imageData.fN / width).; /// The color of each pixel depends on the imageData of the corresponding; /// pixel. The palette is used to convert an image value into its color.; /// If palette is not defined (palette = 0) a default palette is used.; /// Any previously defined zooming is reset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:131,depend,depending,131,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,4,['depend'],"['depending', 'depends']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Deletes the old image and creates a new image depending on the values; /// of imageData. The size of the image is width X height.; ///; /// The color of each pixel depends on the imageData of the corresponding; /// pixel. The palette is used to convert an image value into its color.; /// If palette is not defined (palette = 0) a default palette is used.; /// Any previously defined zooming is reset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:132,depend,depending,132,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,2,['depend'],"['depending', 'depends']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Demangle the name (from the typeinfo) and then request the class; /// via the usual name based interface (TClass::GetClass).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:181,interface,interface,181,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Deprecated and error prone model selection interface.; /// It's use is trongly discouraged. 'mid' is the model ID (1 to 7).; /// This method is provided for backwards compatibility/developer use only. */; /// - x : number of observed events in the experiment; /// - y : number of observed events in background region; /// - z : number of MC events observed; /// - bm : estimate of the background; /// - em : estimate of the efficiency; /// - e : true efficiency (considered known); /// - mid : internal model id (really, you should not use this method at all); /// - sde : efficiency estimate's standard deviation; /// - sdb : background estimate's standard deviation; /// - tau : ratio parameter (read TRolke.cxx for details); /// - b : background expectation value (considered known); /// - m : number of MC events generated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:129,interface,interface,129,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Destroy message dialog box.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMsgBox.cxx:94,message,message,94,gui/gui/src/TGMsgBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMsgBox.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Destroy the interpreter interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:110,interface,interface,110,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Destructor.; /// Destroys also dependent elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjectionManager.cxx:117,depend,dependent,117,graf3d/eve/src/TEveProjectionManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjectionManager.cxx,2,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Detailed printing interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataStore.cxx:104,interface,interface,104,roofit/roofitcore/src/RooAbsDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataStore.cxx,8,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Determine if message from given object at given level on given topic is logged",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:99,message,message,99,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Determine integration scenario. If no interpolation is used,; /// RooHistFunc can perform all integrals over its dependents; /// analytically via partial or complete summation of the input; /// histogram. If interpolation is used, only the integral; /// over all RooHistPdf observables is implemented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistFunc.cxx:96,integrat,integration,96,roofit/roofitcore/src/RooHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistFunc.cxx,2,"['depend', 'integrat']","['dependents', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Determine integration scenario. If no interpolation is used,; /// RooHistPdf can perform all integrals over its dependents; /// analytically via partial or complete summation of the input; /// histogram. If interpolation is used on the integral over; /// all histogram observables is supported",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistPdf.cxx:96,integrat,integration,96,roofit/roofitcore/src/RooHistPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistPdf.cxx,2,"['depend', 'integrat']","['dependents', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code.; ///; /// RooProdPdf implements two strategies in implementing analytical integrals; ///; /// First, PDF components whose entire set of dependents are requested to be integrated; /// can be dropped from the product, as they will integrate out to 1 by construction; ///; /// Second, RooProdPdf queries each remaining component PDF for its analytical integration; /// capability of the requested set ('allVars'). It finds the largest common set of variables; /// that can be integrated by all remaining components. If such a set exists, it reconfirms that; /// each component is capable of analytically integrating the common set, and combines the components; /// individual integration codes into a single integration code valid for RooProdPdf.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:188,integrat,integration,188,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,10,"['depend', 'integrat']","['dependents', 'integrate', 'integrated', 'integrating', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:188,integrat,integration,188,roofit/roofitcore/src/RooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx,7,['integrat'],"['integrated', 'integrating', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:130,integrat,integrator,130,roofit/roofitcore/src/RooBinSamplingPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx,10,"['Integrat', 'integrat']","['IntegratorOneDim', 'IntegratorOneDimOptions', 'integration', 'integrator']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Directives should contain the description on how to compile and link a; /// shared lib. This description can be any valid shell command, including; /// the use of ';' to separate several instructions. However, shell specific; /// construct should be avoided. In particular this description can contain; /// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; /// ~~~ {.cpp}; /// Five special variables will be expanded before execution:; /// Variable name Expands to; /// ------------- ----------; /// $SourceFiles Name of source files to be compiled; /// $SharedLib Name of the shared library being created; /// $LibName Name of shared library without extension; /// $BuildDir Directory where the files will be created; /// $IncludePath value of fIncludePath; /// $LinkedLibs value of fLinkedLibs; /// $DepLibs libraries on which this library depends on; /// $ObjectFiles Name of source files to be compiler with; /// their extension changed to .o or .obj; /// $Opt location of the optimization/debug options; /// set fFlagsDebug and fFlagsOpt; /// ~~~; /// e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeSharedLib(; /// ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; /// --no_exceptions --signed_chars --display_error_number; /// --diag_suppress 68 -o $SharedLib"");; ///; /// gSystem->setMakeSharedLib(; /// ""Cxx $IncludePath -c $SourceFile;; /// ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; /// \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; /// -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc""; ///; /// gSystem->SetMakeSharedLib(; /// ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; /// -shared -o $SharedLib"");; ///; /// gSystem->SetMakeSharedLib(; /// ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; /// -D_WINDOWS $IncludePath $SourceFile; /// /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLO",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:943,depend,depends,943,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Disconnect every entry in the top level interface of the slot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx:126,interface,interface,126,gui/ged/src/TStyleManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Display an informational message at the prompt.; /// Acts like a pop-up. Used e.g. for tab-completion.; ///; /// \param[in] Options options to write out",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplay.cpp:111,message,message,111,core/textinput/src/textinput/TerminalDisplay.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplay.cpp,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Display on screen the content of the temporary log file.; /// If qry == -2 show messages from the last (current) query.; /// If qry == -1 all the messages not yet displayed are shown (default).; /// If qry == 0, all the messages in the file are shown.; /// If qry > 0, only the messages related to query 'qry' are shown.; /// For qry != -1 the original file offset is restored at the end",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:166,message,messages,166,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,4,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Divides the top-level branches into two vectors: (i) branches to be; /// processed sequentially and (ii) branches to be processed in parallel.; /// Even if IMT is on, some branches might need to be processed first and in a; /// sequential fashion: in the parallelization of GetEntry, those are the; /// branches that store the size of another branch for every entry; /// (e.g. the size of an array branch). If such branches were processed; /// in parallel with the rest, there could be two threads invoking; /// TBranch::GetEntry on one of them at the same time, since a branch that; /// depends on a size (or count) branch will also invoke GetEntry on the latter.; /// This method can be invoked several times during the event loop if the TTree; /// is being written, for example when adding new branches. In these cases, the; /// `checkLeafCount` parameter is false.; /// \param[in] checkLeafCount True if we need to check whether some branches are; /// count leaves.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:674,depend,depends,674,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Download a PROOF archive (PAR file) from the master package repository.; /// The PAR file is downloaded in the current directory or in the directory; /// specified by 'dstdir'. If a package with the same name already exists; /// at destination, a check on the MD5 sum is done and the user warned or; /// prompted for action, depending is the file is equal or different.; /// Returns 0 in case of success and -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:411,depend,depending,411,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Draw a hot string in a column with width w. If string is longer than; /// w wrap it to next line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGString.cxx:162,wrap,wrap,162,gui/gui/src/TGString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGString.cxx,1,['wrap'],['wrap']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Draw a string in a column with width w. If string is longer than; /// w wrap it to next line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGString.cxx:158,wrap,wrap,158,gui/gui/src/TGString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGString.cxx,1,['wrap'],['wrap']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Draw feedback creation proxy. When accessed via TProof avoids; /// link dependency on libProofPlayer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:158,depend,dependency,158,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['depend'],['dependency']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Draws multiple line segments. Each line is specified by a pair of points.; ///; /// \param [in] id Drawable identifier; /// \param [in] gc graphics context; /// \param [in] *seg specifies an array of segments; /// \param [in] nseg specifies the number of segments in the array; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; /// clip-y-origin, clip-mask.; ///; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:561,depend,dependent,561,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; /// clip-y-origin, clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:339,depend,dependent,339,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Each character image, as defined by the font in the GC, is treated as an; /// additional mask for a fill operation on the drawable.; ///; /// \param [in] id the drawable; /// \param [in] gc the GC; /// \param [in] x, y coordinates, which are relative to the origin of the specified; /// drawable and define the origin of the first character; /// \param [in] s the character string; /// \param [in] len the number of characters in the string argument; ///; /// GC components in use: function, plane-mask, fill-style, font,; /// subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:687,depend,dependent,687,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Elementary routine to calculate matrix multiplication A*B",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:97,rout,routine,97,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Elementary routine to calculate matrix multiplication A*B^T",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:97,rout,routine,97,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Elementary routine to calculate matrix multiplication A^T*B",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:97,rout,routine,97,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// End building of the scene.; /// TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; /// for description of viewer architecture",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:135,interface,interface,135,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Entry point for updating scene contents via VirtualViewer3D; /// interface.; /// For now this is handled by TGLViewer as it remains; /// the 'Viewer3D' of given pad.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:151,interface,interface,151,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Entry point for updating viewer contents via VirtualViewer3D; /// interface.; /// We search and forward the request to appropriate TGLScenePad.; /// If it is not found we create a new TGLScenePad so this can; /// potentially also be used for registration of new pads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewer.cxx:152,interface,interface,152,graf3d/gl/src/TGLViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewer.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Equivalent of standard routine ""mktime"" but; /// using the assumption that tm struct is filled with UTC, not local, time.; ///; /// This version *ISN'T* configured to handle every possible; /// weirdness of out-of-range values in the case of normalizing; /// the tm struct.; ///; /// This version *DOESN'T* correctly handle values that can't be; /// fit into a time_t (i.e. beyond year 2038-01-18 19:14:07, or; /// before the start of Epoch).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:109,rout,routine,109,core/base/src/TTimeStamp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Eval for vectorized functions; // template <class T>; // T TF1::Eval(T x, T y, T z, T t) const; // {; // if (fType == EFType::kFormula); // return fFormula->Eval(x, y, z, t);; // T xx[] = {x, y, z, t};; // Double_t *pp = (Double_t *)fParams->GetParameters();; // return ((TF1 *)this)->EvalPar(xx, pp);; // }; // Internal to TF1. Evaluates Templated interfaces",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h:435,interface,interfaces,435,hist/hist/inc/TF1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TF1.h,1,['interface'],['interfaces']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate the integral using a fixed number of calls to evaluate the integrand; /// equal to about 10k per dimension. Use the first 5k calls to refine the grid; /// over 5 iterations of 1k calls each, and the remaining 5k calls for a single; /// high statistics integration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx:347,integrat,integration,347,roofit/roofitcore/src/RooMCIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Exclude TAttFillEditor from this interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TF1Editor.cxx:119,interface,interface,119,gui/ged/src/TF1Editor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TF1Editor.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Exclude TAttLineEditor from this interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPadEditor.cxx:119,interface,interface,119,gui/ged/src/TPadEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPadEditor.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Exclude TAttTextEditor from this interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPieEditor.cxx:119,interface,interface,119,gui/ged/src/TPieEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TPieEditor.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Execute a global function with arguments params.; ///; /// FIXME: The cint-based version of this code does not check if the; /// SetFunc() call works, and does not do any real checking; /// for errors from the Exec() call. It did fetch the most; /// recent cint security error and return that in error, but; /// this does not really translate well to cling/clang. We; /// should enhance these interfaces so that we can report; /// compilation and runtime errors properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:479,interface,interfaces,479,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['interface'],['interfaces']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Execute a method from class cl with arguments params.; ///; /// FIXME: The cint-based version of this code does not check if the; /// SetFunc() call works, and does not do any real checking; /// for errors from the Exec() call. It did fetch the most; /// recent cint security error and return that in error, but; /// this does not really translate well to cling/clang. We; /// should enhance these interfaces so that we can report; /// compilation and runtime errors properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:484,interface,interfaces,484,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['interface'],['interfaces']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Execute the command (Fortran Minuit compatible interface)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:133,interface,interface,133,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Expand or shrink the array to n elements and create the clone; /// objects by calling their default ctor. If n is less than the current size; /// the array is shrunk and the allocated space is freed.; /// This routine is typically used to create a clonesarray into which; /// one can directly copy object data without going via the; /// ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:296,rout,routine,296,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Expand or shrink the array to n elements and create the clone; /// objects by calling their default ctor. If n is less than the current size; /// the array is shrunk but the allocated space is _not_ freed.; /// This routine is typically used to create a clonesarray into which; /// one can directly copy object data without going via the; /// ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; /// This is a simplified version of ExpandCreate used in the TTree mechanism.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:302,rout,routine,302,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Explicitly synchronize RooAbsCategory internal cache",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:97,synchroniz,synchronize,97,roofit/roofitcore/src/RooAbsCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx,1,['synchroniz'],['synchronize']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Exports the NN as a function for any non-ROOT-dependant code; /// Supported languages are: only C++ , FORTRAN and Python (yet); /// This feature is also useful if you want to plot the NN as; /// a function (TF1 or TF2).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:132,depend,dependant,132,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['depend'],['dependant']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Extended interface to append to sampling distribution more samples",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:95,interface,interface,95,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Extract the proper autoload key for nested classes; /// The routine does not erase the name, just updates it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:146,rout,routine,146,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Extracted from CERN Program library routine DSEQN.; ///; /// Translated to C++ by Rene Brun",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:122,rout,routine,122,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Extrapolate track in a constant field oriented along X axis; /// translated to C++ from GEANT3 routine GHELX3.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:181,rout,routine,181,test/RootShower/MyEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Factorization routine, the workhorse for the decomposition step",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:100,rout,routine,100,math/matrix/src/TDecompSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Factorize product in irreducible terms for given choice of integration/normalization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:145,integrat,integration,145,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fast execution of 'new TBufferFile(TBuffer::kWrite,10000), without having; /// a compile time circular dependency ... alternatively we could (should?); /// introduce yet another abstract interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:189,depend,dependency,189,core/base/src/TDirectory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx,2,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in function fname.; ///; /// @param fname : Function name used for filling the histogram; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used to sample; ///; /// The distribution contained in the function fname (TF2) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated; ///; /// One can also call TF2::GetRandom2 to get a random variate from a function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:410,integrat,integrated,410,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in function fname.; ///; /// @param fname : Function name used for filling the histogram; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used to sample; ///; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents for the bin range of this histogram.; /// It is normalized to 1.; ///; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated; ///; /// One can also call TF1::GetRandom to get a random variate from a function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:415,integrat,integrated,415,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in function fname.; ///; /// @param fname : Function name used for filling the historam; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used to sample; ///; /// The distribution contained in the function fname (TF1) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated; ///; /// N.B. By dfault this methods approximates the integral of the function in each bin with the; /// function value at the center of the bin, mutiplied by the bin width; ///; /// One can also call TF1::GetRandom to get a random variate from a function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:409,integrat,integrated,409,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for sampling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH1) is integrated; /// over the channel contents for the bin range of this histogram.; /// It is normalized to 1.; ///; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel ntimes random numbers are generated; ///; /// SPECIAL CASE when the target histogram has the same binning as the source.; /// in this case we simply use a poisson distribution where; /// the mean value per bin = bincontent/integral.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:408,integrat,integrated,408,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for sampling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH2) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:408,integrat,integrated,408,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for smpling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH3) is integrated; /// over the channel contents.; /// It is normalized to 1.; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel; /// ntimes random numbers are generated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:407,integrat,integrated,407,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fill names with current branch volume names (4 char - used by GEANT3 interface).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCache.cxx:155,interface,interface,155,geom/geom/src/TGeoCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCache.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fill the ROOT histogram 'hist' with values sampled from this; /// function at the bin centers. Our value is calculated by first; /// integrating out any variables in projectedVars and then scaling; /// the result by scaleFactor. Returns a pointer to the input; /// histogram, or zero in case of an error. The input histogram can; /// be any TH1 subclass, and therefore of arbitrary; /// dimension. Variables are matched with the (x,y,...) dimensions of; /// the input histogram according to the order in which they appear; /// in the input plotVars list. If scaleForDensity is true the; /// histogram is filled with a the functions density rather than; /// the functions value (i.e. the value at the bin center is multiplied; /// with bin volume)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:219,integrat,integrating,219,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['integrat'],['integrating']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total; ///; /// This method serves two purposes:; ///; /// ### 1) calculating efficiencies:; ///; /// The assumption is that the entries in ""pass"" are a subset of those in; /// ""total"". That is, we create an ""efficiency"" graph, where each entry is; /// between 0 and 1, inclusive.; ///; /// If the histograms are not filled with unit weights, the number of effective; /// entries is used to normalise the bin contents which might lead to wrong results.; /// \f[; /// \text{effective entries} = \frac{(\sum w_{i})^{2}}{\sum w_{i}^{2}}; /// \f]; /// The points are assigned a x value at the center of each histogram bin.; /// The y values are \f$\text{eff} = \frac{\text{pass}}{\text{total}}\f$; /// for all options except for the; /// bayesian methods where the result depends on the chosen option.; ///; /// If the denominator becomes 0 or pass > total, the corresponding bin is; /// skipped.; ///; /// ### 2) calculating ratios of two Poisson means (option 'pois'):; ///; /// The two histograms are interpreted as independent Poisson processes and the ratio; /// \f[; /// \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; /// \f]; /// with \f$\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\f$.; /// The histogram 'pass' is interpreted as \f$n_{1}\f$ and the total histogram; /// is used for \f$n_{2}\f$.; ///; /// The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; /// of efficiency by a parameter transformation:; /// \f[; /// \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; /// \f]; ///; /// The x errors span each histogram bin (lowedge ... lowedge+width); /// The y errors depend on the chosen statistic methode which can be determined; /// by the options given below. For a detailed description of the used statistic; /// calculations please have a look ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx:928,depend,depends,928,hist/hist/src/TGraphAsymmErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphAsymmErrors.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fills HTTP header, which can be send at the beginning of reply on the http request; ///; /// @param name is HTTP protocol name (default ""HTTP/1.1"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpCallArg.cxx:199,protocol,protocol,199,net/http/src/THttpCallArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpCallArg.cxx,1,['protocol'],['protocol']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fills the list of functions depending on the type of fit; /// selected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:114,depend,depending,114,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fills the list of methods depending on the minimization library; /// selected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:112,depend,depending,112,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fills the region closed by the specified path. The path is closed; /// automatically if the last point in the list does not coincide with the; /// first point.; ///; /// \param [in] id window identifier; /// \param [in] gc graphics context; /// \param [in] *points specifies an array of points; /// \param [in] npnt specifies the number of points in the array; ///; /// GC components in use: function, plane-mask, fill-style, fill-rule,; /// subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC; /// mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:602,depend,dependent,602,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h].; /// using the GC you specify.; ///; /// GC components in use are: function, plane-mask, fill-style,; /// subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:336,depend,dependent,336,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Find a directory named ""apath"".; ///; /// It apath is null or empty, returns ""this"" directory.; /// Otherwise use the name ""apath"" to find a directory.; /// The absolute path syntax is:; ///; /// file.root:/dir1/dir2; ///; /// where file.root is the file and /dir1/dir2 the desired subdirectory; /// in the file. Relative syntax is relative to ""this"" directory. E.g:; /// ../aa.; /// Returns 0 in case path does not exist.; /// If printError is true, use Error with 'funcname' to issue an error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TDirectoryFile.cxx:581,message,message,581,io/io/src/TDirectoryFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TDirectoryFile.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Find a directory using apath.; /// It apath is null or empty, returns ""this"" directory.; /// Otherwise use apath to find a directory.; /// The absolute path syntax is: `file.root:/dir1/dir2`; ///; /// where file.root is the file and /dir1/dir2 the desired subdirectory; /// in the file. Relative syntax is relative to ""this"" directory. E.g: `../aa`.; /// Returns 0 in case path does not exist.; /// If printError is true, use Error with 'funcname' to issue an error message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:552,message,message,552,core/base/src/TDirectory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Find address of Color_t data-member with name varname in object; /// obj.; ///; /// This is used to access color information for TGListTreeItem; /// coloration from visualization macros that wrap TObjects into; /// REveElementObjectPtr instances.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveUtil.cxx:277,wrap,wrap,277,graf3d/eve7/src/REveUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveUtil.cxx,1,['wrap'],['wrap']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Find address of Color_t data-member with name varname in object; /// obj.; ///; /// This is used to access color information for TGListTreeItem; /// coloration from visualization macros that wrap TObjects into; /// TEveElementObjectPtr instances.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveUtil.cxx:277,wrap,wrap,277,graf3d/eve/src/TEveUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveUtil.cxx,1,['wrap'],['wrap']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Find bin number with label.; /// If the List of labels does not exist create it and make the axis alphanumeric; /// If one wants just to add a single label- just call TAxis::SetBinLabel; /// If label is not in the list of labels do the following depending on the; /// bit TAxis::kCanExtend; of the axis.; /// - if the bit is set add the new label and if the number of labels exceeds; /// the number of bins, double the number of bins via TH1::LabelsInflate; /// - if the bit is not set and the histogram has labels in each bin; /// set the bit automatically and consider the histogram as alphanumeric; /// if histogram has only some bins with labels then the histogram is not; /// consider alphanumeric and return -1; ///; /// -1 is returned only when the Axis has no parent histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:332,depend,depending,332,hist/hist/src/TAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Find the minimum of a function of whatever dimension.; /// While GetMinimum works only for 1D function , GetMinimumNDim works for all dimensions; /// since it uses the minimizer interface; /// vector x at beginning will contained the initial point, on exit will contain the result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:264,interface,interface,264,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Find the named object in our list of items and return a pointer; /// to it. Return zero and print a warning message if the named; /// object cannot be found. If no name is supplied the last object; /// added is returned.; ///; /// Note that the returned pointer is to a; /// TObject and so will generally need casting. Use the getAtt...(); /// methods to change the drawing style attributes of a contained; /// object directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx:194,message,message,194,roofit/roofitcore/src/RooPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Find the tree which contains entry, and set it as the current tree.; ///; /// Returns the entry number in that tree.; ///; /// The input argument entry is the entry serial number in the whole chain.; ///; /// In case of error, LoadTree returns a negative number:; /// * -1: The chain is empty.; /// * -2: The requested entry number is less than zero or too large for the chain.; /// * -3: The file corresponding to the entry could not be correctly open; /// * -4: The TChainElement corresponding to the entry is missing or; /// the TTree is missing from the file.; /// * -5: Internal error, please report the circumstance when this happen; /// as a ROOT issue.; /// * -6: An error occurred within the notify callback.; ///; /// Calls fNotify->Notify() (if fNotify is not null) when starting the processing of a new sub-tree.; /// See TNotifyLink for more information on the notification mechanism.; ///; /// \note This is the only routine which sets the value of fTree to a non-zero pointer.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:1017,rout,routine,1017,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fit this graph with function with name `fname`.; ///; /// This is a different interface to TGraph fitting using TGraph::Fit(TF1 *f1,Option_t *, Option_t *, Axis_t, Axis_t); /// See there for the details about fitting a TGraph.; ///; /// The parameter `fname` is the name of an already predefined function created by TF1 or TF2; /// Predefined functions such as gaus, expo and poln are automatically; /// created by ROOT.; ///; /// The parameter `fname` can also be a formula, accepted by the linear fitter (linear parts divided; /// by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:164,interface,interface,164,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Fit this graph with function with name fname.; ///; /// interface to TF1::Fit(TF1 *f1...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:142,interface,interface,142,hist/hist/src/TMultiGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Flush (mode = 0, default) or synchronize (mode = 1) X output buffer.; /// Flush flushes output buffer. Sync flushes buffer and waits till all; /// requests have been processed by X server.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:115,synchroniz,synchronize,115,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,2,['synchroniz'],['synchronize']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer.; /// Flush flushes output buffer. Sync flushes buffer and waits till all; /// requests have been processed by X server.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:117,synchroniz,synchronizes,117,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['synchroniz'],['synchronizes']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// For axis = 1,2 or 3 returns the mean value of the histogram along; /// X,Y or Z axis.; ///; /// For axis = 11, 12, 13 returns the standard error of the mean value; /// of the histogram along X, Y or Z axis; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.; ///; /// IMPORTANT NOTE: The returned value depends on how the histogram statistics; /// are calculated. By default, if no range has been set, the returned mean is; /// the (unbinned) one calculated at fill time. If a range has been set, however,; /// the mean is calculated using the bins in range, as described above; THIS; /// IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset; /// the range. To ensure that the returned mean (and all other statistics) is; /// always that of the binned data stored in the histogram, call TH1::ResetStats.; /// See TH1::GetStats.; ///; /// Return mean value of this histogram along the X axis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:734,depend,depends,734,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Force RooRealIntegral to offer all observables for internal integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:146,integrat,integration,146,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Force RooRealIntegral to offer all our actual observable for internal; /// integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:161,integrat,integration,161,roofit/roofitcore/src/RooAbsCachedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Force RooRealIntegral to relegate integration of all observables to internal logic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx:120,integrat,integration,120,roofit/roofitcore/src/RooProjectedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Force analytical integration for the given observable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:103,integrat,integration,103,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,1,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Force internal handling of integration of given observable if any; /// of the product terms depend on it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx:113,integrat,integration,113,roofit/roofitcore/src/RooProduct.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx,2,"['depend', 'integrat']","['depend', 'integration']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Force writing the TStreamerInfo to the message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx:125,message,message,125,net/net/src/TMessage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TMessage.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Forward determination of analytical integration capabilities to component p.d.f.s; /// A unique code is assigned to the combined integration capabilities of all associated; /// p.d.f.s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:122,integrat,integration,122,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,2,['integrat'],['integration']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Function that is called at the end of redirectServers(). Can be overloaded; /// to inject some class-dependent behavior after server redirection, e.g.; /// resetting of caches. The return value is meant to be an error flag, so in; /// case something goes wrong the function should return `true`. If you; /// overload this function, don't forget to also call the function of the; /// base class.; ///; /// \see redirectServers() For a detailed explanation of the function parameters.; ///; // \param[in] newServerList One of the original parameters passed to redirectServers().; // \param[in] mustReplaceAll One of the original parameters passed to redirectServers().; // \param[in] nameChange One of the original parameters passed to redirectServers().; // \param[in] isRecursiveStep One of the original parameters passed to redirectServers().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:169,inject,inject,169,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,2,"['depend', 'inject']","['dependent', 'inject']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// General purpose call to go through the existing datasets.; /// If `<user>` is 0 or ""*"", act on all datasets for the given `<group>`.; /// If `<group>` is 0 or ""*"", act on all datasets.; /// If `<dsName>` is defined, only the information about the specified dataset; /// is processed.; /// Action depends on option; available options:; ///; /// kExport Return a TMap object containing all the information about; /// datasets in the form:; /// { `<group>`, `<map of users>` }; /// |; /// { `<map of datasets>`, `<dataset>`}; /// (`<dataset>` are TFileCollection objects); /// kShowDefault as kExport with in addition a default selection including; /// the datasets from the current user, the ones from the group; /// and the common ones; ///; /// kPrint print the dataset content; no output is returned; /// kList get a list of available dataset names; /// kForceScan Re-open files while processing kPrint (do not use the; /// pre-processed information); /// kNoHeaderPrint Labelling header is not printed; /// kQuotaUpdate update {group, user} quotas; no output is returned; ///; /// NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; /// NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx:382,depend,depends,382,proof/proof/src/TDataSetManagerFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// Generate the specified number of events or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:950,message,messages,950,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); /// \return RooDataHist *, to be managed by caller.; ///; /// Generate the specified number of events or expectedEvents() if not specified.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error. The caller takes ownership of the returned; /// dataset.; ///; /// The following named arguments are supported; /// | Type of CmdArg | Effect on generation; /// |---------------------------|-----------------------; /// | `Name(const char* name)` | Name of the output dataset; /// | `Verbose(bool flag)` | Print informational messages during event generation; /// | `NumEvents(int nevt)` | Generate specified number of events; /// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; /// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1089,message,messages,1089,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Generate a single event of the product by generating the components; /// of the products sequentially. The subcontext have been order such; /// that all conditional dependencies are correctly taken into account; /// when processed in sequential order",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdGenContext.cxx:251,depend,dependencies,251,roofit/roofitcore/src/RooProdGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdGenContext.cxx,1,['depend'],['dependencies']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Generate kMouseEnter and kMouseLeave events depending on the previously; /// selected object and the currently selected object. Does nothing if the; /// selected object does not change.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:130,depend,depending,130,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Generate mix-state dependent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBCPGenDecay.cxx:105,depend,dependent,105,roofit/roofit/src/RooBCPGenDecay.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBCPGenDecay.cxx,2,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Generate one event. The 'remaining' integer is not used other than; /// for printing messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:171,message,messages,171,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Generates a random integer N according to a Poisson law.; /// Prob(N) = exp(-mean)*mean^N/Factorial(N); ///; /// Use a different procedure according to the mean value.; /// The algorithm is the same used by CLHEP.; /// For lower value (mean < 25) use the rejection method based on; /// the exponential.; /// For higher values use a rejection method comparing with a Lorentzian; /// distribution, as suggested by several authors.; /// This routine returns now an unsigned 64 bit integer; /// For large values, larger than 1.84e+19, we print an error message; /// advising to use the Trandom::PoissonD for such large values,; /// and return the max value UINT64_MAX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:525,rout,routine,525,math/mathcore/src/TRandom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx,2,"['message', 'rout']","['message', 'routine']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Generates a random integer N according to a Poisson law.; /// Prob(N) = exp(-mean)*mean^N/Factorial(N); ///; /// Use a different procedure according to the mean value.; /// The algorithm is the same used by CLHEP.; /// For lower value (mean < 25) use the rejection method based on; /// the exponential.; /// For higher values use a rejection method comparing with a Lorentzian; /// distribution, as suggested by several authors.; /// This routine since is returning 32 bits integer will not work for values; /// larger than 2*10**9.; /// One should then use the Trandom::PoissonD for such large values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RandomFunctions.cxx:525,rout,routine,525,math/mathcore/src/RandomFunctions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RandomFunctions.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Generates mix-state dependent.; /// \param[in] code",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBCPEffDecay.cxx:106,depend,dependent,106,roofit/roofit/src/RooBCPEffDecay.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBCPEffDecay.cxx,1,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get Internet Protocol (IP) address of host and port #.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:99,Protocol,Protocol,99,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['Protocol'],['Protocol']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get Internet Protocol (IP) address of remote host and port #.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:99,Protocol,Protocol,99,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['Protocol'],['Protocol']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get a map {server-name, list-of-files} for collection 'fc' to be used in; /// TPacketizerFile. Returns a pointer to the map (ownership of the caller).; /// Or (TMap *)0 and an error message in emsg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:268,message,message,268,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get a wrapper/accessor function around this class custom conversion streamer (member function).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:92,wrap,wrapper,92,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get a wrapper/accessor function around this class custom streamer (member function).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:92,wrap,wrapper,92,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['wrap'],['wrapper']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get and handle command line options. Fixed format:; /// ""protocol url""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:143,protocol,protocol,143,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,1,['protocol'],['protocol']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get graphics context from the gc pool. Context must be freed via; /// TGClient::FreeGC(). If rw is true a new read/write-able GC; /// is returned, otherwise a shared read-only context is returned.; /// For historical reasons it is also possible to create directly a; /// TGGC object, but it is advised to use this new interface only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGClient.cxx:404,interface,interface,404,gui/gui/src/TGClient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGClient.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get help message text.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:95,message,message,95,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get help message text; ///; /// typical length of text line:; /// ""|--------------------------------------------------------------|""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:95,message,message,95,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:214,message,messages,214,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get node identifier. Try first to get network address, if no; /// network interface try random info based on some machine parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:160,interface,interface,160,core/base/src/TUUID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:213,message,messages,213,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get string value of a RooStringVar stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:213,message,messages,213,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get submatrix [row_lwb..row_upb] x [col_lwb..col_upb]; The indexing range of the; /// returned matrix depends on the argument option:; ///; /// option == ""S"" : return [0..row_upb-row_lwb][0..col_upb-col_lwb] (default); /// else : return [row_lwb..row_upb][col_lwb..col_upb]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:188,depend,depends,188,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get submatrix [row_lwb..row_upb][col_lwb..col_upb]; The indexing range of the; /// returned matrix depends on the argument option:; ///; /// option == ""S"" : return [0..row_upb-row_lwb+1][0..col_upb-col_lwb+1] (default); /// else : return [row_lwb..row_upb][col_lwb..col_upb]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:185,depend,depends,185,math/matrix/src/TMatrixTSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx,2,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get submatrix [row_lwb..row_upb][row_lwb..row_upb]; The indexing range of the; /// returned matrix depends on the argument option:; ///; /// option == ""S"" : return [0..row_upb-row_lwb+1][0..row_upb-row_lwb+1] (default); /// else : return [row_lwb..row_upb][row_lwb..row_upb]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:185,depend,depends,185,math/matrix/src/TMatrixTSym.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get subvector [row_lwb..row_upb]; The indexing range of the; /// returned vector depends on the argument option:; ///; /// option == ""S"" : return [0..row_upb-row_lwb+1] (default); /// else : return [row_lwb..row_upb]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:167,depend,depends,167,math/matrix/src/TVectorT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the HTTP header. Depending on the return code we can see if; /// the file exists and if the server uses mod_root.; /// Returns -1 in case of an error, -2 in case the file does not exists,; /// -3 in case HEAD is not supported (dCache HTTP door) and; /// 0 in case of success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx:107,Depend,Depending,107,net/net/src/TWebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx,1,['Depend'],['Depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the best matching graphics context depending on values.; /// If rw is false only a readonly, not modifiable graphics context; /// is returned. If rw is true a new modifiable graphics context is; /// returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGGC.cxx:125,depend,depending,125,gui/gui/src/TGGC.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGGC.cxx,1,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the list a libraries on which the specified lib depends. The; /// returned string contains as first element the lib itself.; /// Returns 0 in case the lib does not exist or does not have; /// any dependencies. If useDyld is true, we iterate through all available; /// libraries and try to construct the dependency chain by resolving each; /// symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:138,depend,depends,138,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,3,['depend'],"['dependencies', 'dependency', 'depends']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the list of shared libraries containing the code for class cls.; /// The first library in the list is the one containing the class, the; /// others are the libraries the first one depends on. Returns 0; /// in case the library is not found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:270,depend,depends,270,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the list of shared libraries containing the code for class cls.; /// The first library in the list is the one containing the class, the; /// others are the libraries the first one depends on. Returns 0; /// in case the library is not found.; /// \param cls the name of the class; /// \param skipCore if true (default), remove ""Core"" from the returned list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:270,depend,depends,270,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the output of the calculation in the form of a graph. The type of; /// the return value depends on the input option that was given in the constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h:178,depend,depends,178,graf2d/gpad/inc/TRatioPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TRatioPlot.h,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the tree url or filename and other information from the name; ///; /// A treename and a url's query section is split off from name. The; /// splitting depends on whether the resulting filename is to be; /// subsequently treated for wildcards or not, since the question mark is; /// both the url query identifier and a wildcard. Wildcard matching is not; /// done in this method itself.; /// ~~~ {.cpp}; /// [xxx://host]/a/path/file_name[?query[#treename]]; /// ~~~; ///; /// The following way to specify the treename is still supported with the; /// constrain that the file name contains the sub-string '.root'.; /// This is now deprecated and will be removed in future versions.; /// ~~~ {.cpp}; /// [xxx://host]/a/path/file.root[.oext][/treename]; /// [xxx://host]/a/path/file.root[.oext][/treename][?query]; /// ~~~; ///; /// Note that in a case like this; /// ~~~ {.cpp}; /// [xxx://host]/a/path/file#treename; /// ~~~; /// i.e. anchor but no options (query), the filename will be the full path, as; /// the anchor may be the internal file name of an archive. Use '?#%treename' to; /// pass the treename if the query field is empty.; ///; /// \param[in] name is the original name; /// \param[out] filename the url or filename to be opened or matched; /// \param[out] treename the treename, which may be found in a url fragment section; /// as a trailing part of the name (deprecated).; /// If not found this will be empty.; /// Exception: a fragment containing the '=' character is _not_; /// interpreted as a treename; /// \param[out] query is the url query section, including the leading question; /// mark. If not found or the query section is only followed by; /// a fragment this will be empty.; /// \param[out] suffix the portion of name which was removed to from filename.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:241,depend,depends,241,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the x-axis of the histogram used to draw the stack.; ///; /// IMPORTANT NOTE; /// You must call Draw before calling this function. The returned histogram; /// depends on the selected Draw options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:249,depend,depends,249,hist/hist/src/THStack.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the y-axis of the histogram used to draw the stack.; ///; /// IMPORTANT NOTE; /// You must call Draw before calling this function. The returned histogram; /// depends on the selected Draw options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:249,depend,depends,249,hist/hist/src/THStack.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get the z-axis of the histogram used to draw the stack.; ///; /// IMPORTANT NOTE; /// You must call Draw before calling this function. The returned histogram; /// depends on the selected Draw options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx:249,depend,depends,249,hist/hist/src/THStack.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THStack.cxx,1,['depend'],['depends']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Get value of a RooAbsReal stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:204,message,messages,204,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Given the selection end-points in fSelBegin and fSelEnd, recompute; /// pSelBeginBlock and fPSelEndBlock, then call UpdateSelectionDisplay(); /// to update the display.; ///; /// This routine should be called whenever the selection changes or; /// whenever the set of TGHtmlBlock structures change.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:270,rout,routine,270,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Global switch to cache all integral values that integrate at least ndim dimensions numerically",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:134,integrat,integrate,134,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['integrat'],['integrate']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Got close message for this RootShower. The EventDislay and the; /// application will be terminated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:96,message,message,96,test/RootShower/RootShower.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Group observables into subsets in which the product factorizes; /// and that can thus be integrated separately",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx:175,integrat,integrated,175,roofit/roofitcore/src/RooProduct.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx,1,['integrat'],['integrated']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// HELP routine for MINUIT interactive commands; ///; /// - COMD ='*' or """" prints a global help for all commands; /// - COMD =Command_name: print detailed help for one command.; /// Note that at least 3 characters must be given for the command; /// name.; ///; /// Author: Rene Brun; /// comments extracted from the MINUIT documentation file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:91,rout,routine,91,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle DND related client messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDNDManager.cxx:112,message,messages,112,gui/gui/src/TGDNDManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDNDManager.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle a client message. Client messages are the ones sent via; /// TGFrame::SendMessage (typically by widgets).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx:102,message,message,102,gui/gui/src/TGFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx,2,['message'],"['message', 'messages']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle a message of type kPROOF_SUBMERGER",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:95,message,message,95,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle available message from the open file 'f'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:103,message,message,103,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,2,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle available message in the open file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:103,message,message,103,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,4,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle client message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldDragManager.cxx:100,message,message,100,gui/guibuilder/src/TGuiBldDragManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldDragManager.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle client messages sent to this frame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx:100,message,messages,100,gui/gui/src/TGFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle context menu messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootContextMenu.cxx:106,message,messages,106,gui/gui/src/TRootContextMenu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootContextMenu.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle controlbar button messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootControlBar.cxx:111,message,messages,111,gui/gui/src/TRootControlBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootControlBar.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle idle timeout. When this timer expires the registered idle command; /// will be executed by this routine and a signal will be emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:189,rout,routine,189,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle message generated by the canvas scrollbars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:93,message,message,93,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle messages for number entry widget according to the user input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:93,message,messages,93,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle messages generated by the list view components.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListView.cxx:93,message,messages,93,gui/gui/src/TGListView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListView.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle messages send to the RootShower object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:93,message,messages,93,test/RootShower/RootShower.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle messages send to the TSessionViewer object. E.g. all menu entries; /// messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,message,messages,93,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,2,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle shutter messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGShutter.cxx:101,message,messages,101,gui/gui/src/TGShutter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGShutter.cxx,1,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle startup message (connection progress) coming from Proof session.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:101,message,message,101,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Handle the button dependent states in this dialog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitParametersDialog.cxx:104,depend,dependent,104,gui/fitpanel/src/TFitParametersDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitParametersDialog.cxx,2,['depend'],['dependent']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for factorization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,rout,routine,91,math/matrix/src/TDecompSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx,3,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for pivoting setup",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,rout,routine,91,math/matrix/src/TDecompSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx,7,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for solving",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,rout,routine,91,math/matrix/src/TDecompSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx,2,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Helper function for plotting of composite p.d.fs. Given; /// a set of selected components that should be plotted,; /// find all nodes that (in)directly depend on these selected; /// nodes. Mark all directly and indirectly selected nodes; /// as 'selected' using the selectComp() method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:238,depend,depend,238,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['depend'],['depend']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Helper routine for TCling::AutoParse implementing the actual call to the; /// parser and looping over template parameters (if; /// any) and when they don't have a registered header to autoparse,; /// recurse over their template parameters.; ///; /// Returns the number of header parsed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:93,rout,routine,93,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Helper routine for TLeafX::SetAddress.; ///; /// The return value is non-zero if we owned the old; /// value buffer and must delete it now. The size; /// of the value buffer is recalculated and stored,; /// and a decision is made whether or not we own the; /// new value buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TLeaf.cxx:93,rout,routine,93,tree/tree/src/TLeaf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TLeaf.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Helper routine to compute chi-squared between distributions using the computed inverse of the covariance matrix for the unfolded spectrum as given in paper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx:93,rout,routine,93,hist/hist/src/TSVDUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Helper routine to ry hard to avoid looking up in the Cling database as; /// this could enduce an unwanted autoparsing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:93,rout,routine,93,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Hide tool tip depending on the event type. Typically tool tips; /// are hidden when event is not a kMouseEnter and not a kMouseMotion; /// event.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:100,depend,depending,100,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,2,['depend'],['depending']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Hook function interface for object to insert additional information; /// when printed in the context of a tree structure. This default; /// implementation prints nothing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:100,interface,interface,100,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['interface'],['interface']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// INTERNAL function!; /// Used by rootcling to inject interpreter arguments through a C-interface layer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:131,inject,inject,131,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,2,"['inject', 'interface']","['inject', 'interface']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// If all components that depend on obs are binned that so is the product",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:109,depend,depend,109,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,1,['depend'],['depend']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// If all components that depend on obs are binned, so is their sum.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:109,depend,depend,109,roofit/roofitcore/src/RooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx,1,['depend'],['depend']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// If any part of the screen needs to be redrawn, then call this routine; /// with the values of a box (in window coordinates) that needs to be; /// redrawn. This routine will schedule an idle handler to do the redraw.; ///; /// The box coordinates are relative to the clipping window (fCanvas).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:148,rout,routine,148,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,2,['rout'],['routine']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// If error messages are disabled, the interpreter should suppress its; /// failures and warning messages from stdout.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:95,message,messages,95,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,2,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// If error messages are disabled, the interpreter should suppress its; /// failures and warning messages from stdout. Return the previous state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:95,message,messages,95,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,2,['message'],['messages']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// If flag is true, a message will be printed at each; /// object creation or deletion",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTrace.cxx:105,message,message,105,roofit/roofitcore/src/RooTrace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTrace.cxx,1,['message'],['message']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// If this pdf is operated with a fixed set of observables, return; /// the subset of the fixed observables that are actual dependents; /// of the external input p.d.f. If this p.d.f is operated without; /// a fixed set of cache observables, return the actual observables; /// of the external input p.d.f given the choice of observables defined; /// in nset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:207,depend,dependents,207,roofit/roofitcore/src/RooCachedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx,2,['depend'],['dependents']
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Implement analytical integrations by deferring integration of component; /// functions to integrators of components.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealSumPdf.cxx:107,integrat,integrations,107,roofit/roofitcore/src/RooRealSumPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealSumPdf.cxx,3,['integrat'],"['integration', 'integrations', 'integrators']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Implement analytical integrations by doing appropriate weighting from component integrals; /// functions to integrators of components",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx:107,integrat,integrations,107,roofit/histfactory/src/ParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx,6,['integrat'],"['integrations', 'integrators']"
Integrability,"////////////////////////////////////////////////////////////////////////////////; /// Implements internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:119,integrat,integration,119,roofit/roofitcore/src/RooAbsCachedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx,1,['integrat'],['integration']
