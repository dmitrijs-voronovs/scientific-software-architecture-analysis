quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Deployability,update,updated,"ion computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp-1.html
Energy Efficiency,energy,energy,"﻿. Counterpoise Correct — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source.",MatchSource.WIKI,psi4manual/4.0b2/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp-1.html
Modifiability,variab,variables,"﻿. Counterpoise Correct — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source.",MatchSource.WIKI,psi4manual/4.0b2/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp-1.html
Performance,optimiz,optimize,"; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previo",MatchSource.WIKI,psi4manual/4.0b2/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp-1.html
Testability,test,tested,"﻿. Counterpoise Correct — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source.",MatchSource.WIKI,psi4manual/4.0b2/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp-1.html
Availability,error,error,"ion computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp.html
Deployability,update,updated,"ion computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp.html
Energy Efficiency,energy,energy,"﻿. Counterpoise Correct — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source.",MatchSource.WIKI,psi4manual/4.0b2/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp.html
Modifiability,variab,variables,"﻿. Counterpoise Correct — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source.",MatchSource.WIKI,psi4manual/4.0b2/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp.html
Performance,optimiz,optimize,"; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previo",MatchSource.WIKI,psi4manual/4.0b2/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp.html
Testability,test,tested,"﻿. Counterpoise Correct — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in kcal/mol. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source.",MatchSource.WIKI,psi4manual/4.0b2/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cp.html
Deployability,update,updated,"﻿. Customization: Adding Simple Extensions — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/customizing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/customizing-1.html
Security,access,accessible,"﻿. Customization: Adding Simple Extensions — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/customizing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/customizing-1.html
Deployability,update,updated,"﻿. Customization: Adding Simple Extensions — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/customizing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/customizing.html
Security,access,accessible,"﻿. Customization: Adding Simple Extensions — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/customizing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/customizing.html
Availability,avail,available,"rns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Avai",MatchSource.WIKI,psi4manual/4.0b2/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html
Deployability,continuous,continuous,"). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – 'on' || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be ",MatchSource.WIKI,psi4manual/4.0b2/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html
Energy Efficiency,energy,energy,"s; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions ",MatchSource.WIKI,psi4manual/4.0b2/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html
Integrability,wrap,wrapper,"tion energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('dfmp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; throu",MatchSource.WIKI,psi4manual/4.0b2/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html
Modifiability,variab,variables,"﻿. Database — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are",MatchSource.WIKI,psi4manual/4.0b2/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html
Performance,optimiz,optimize," MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Ind",MatchSource.WIKI,psi4manual/4.0b2/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html
Security,access,access,"﻿. Database — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are",MatchSource.WIKI,psi4manual/4.0b2/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html
Testability,benchmark,benchmark,"﻿. Database — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are",MatchSource.WIKI,psi4manual/4.0b2/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium'. HSG¶. Database (Merz) of interaction energies",MatchSource.WIKI,psi4manual/4.0b2/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html
Availability,avail,available,"rns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Avai",MatchSource.WIKI,psi4manual/4.0b2/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db.html
Deployability,continuous,continuous,"). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – 'on' || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be ",MatchSource.WIKI,psi4manual/4.0b2/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db.html
Energy Efficiency,energy,energy,"s; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions ",MatchSource.WIKI,psi4manual/4.0b2/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db.html
Integrability,wrap,wrapper,"tion energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('dfmp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; throu",MatchSource.WIKI,psi4manual/4.0b2/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db.html
Modifiability,variab,variables,"﻿. Database — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are",MatchSource.WIKI,psi4manual/4.0b2/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db.html
Performance,optimiz,optimize," MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Ind",MatchSource.WIKI,psi4manual/4.0b2/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db.html
Security,access,access,"﻿. Database — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are",MatchSource.WIKI,psi4manual/4.0b2/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db.html
Testability,benchmark,benchmark,"﻿. Database — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are",MatchSource.WIKI,psi4manual/4.0b2/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium'. HSG¶. Database (Merz) of interaction energies",MatchSource.WIKI,psi4manual/4.0b2/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db.html
Availability,avail,available," rules are included in the CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. Use of DETCI for CASSCF; wavefunctions is described in another section of this manual.; As just mentioned, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; The division of the molecular orbitals into various subspaces such as; RAS spaces, or frozen vs. active orbitals, etc., needs to be clear not; only to detci, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus, orbital; subspace keywords such as RAS1,; RAS2, RAS3, FROZEN_DOCC, FROZEN_UOCC,; ACTIVE, etc., should be set; in the global section of input so they may also be read by other modules.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. Higher order; single-refernce CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specifed by fci. More complicate",MatchSource.WIKI,psi4manual/4.0b2/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html
Deployability,configurat,configuration,"﻿. Configuration Interaction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based",MatchSource.WIKI,psi4manual/4.0b2/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html
Energy Efficiency,adapt,adapted,"﻿. Configuration Interaction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based",MatchSource.WIKI,psi4manual/4.0b2/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html
Integrability,interface,interface,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4manual/4.0b2/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html
Modifiability,adapt,adapted,"﻿. Configuration Interaction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based",MatchSource.WIKI,psi4manual/4.0b2/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html
Performance,optimiz,optimized,"a diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are include",MatchSource.WIKI,psi4manual/4.0b2/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html
Testability,test,testing,"rsion of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. Table Of Contents. Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; FROZEN_UOCC; MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Previous topic; Interface to MRCC by M. Kállay; Next topic; Geometry Optimization; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright ",MatchSource.WIKI,psi4manual/4.0b2/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html
Usability,simpl,simplest,"﻿. Configuration Interaction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based",MatchSource.WIKI,psi4manual/4.0b2/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html
Availability,avail,available," rules are included in the CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. Use of DETCI for CASSCF; wavefunctions is described in another section of this manual.; As just mentioned, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; The division of the molecular orbitals into various subspaces such as; RAS spaces, or frozen vs. active orbitals, etc., needs to be clear not; only to detci, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus, orbital; subspace keywords such as RAS1,; RAS2, RAS3, FROZEN_DOCC, FROZEN_UOCC,; ACTIVE, etc., should be set; in the global section of input so they may also be read by other modules.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. Higher order; single-refernce CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specifed by fci. More complicate",MatchSource.WIKI,psi4manual/4.0b2/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci.html
Deployability,configurat,configuration,"﻿. Configuration Interaction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based",MatchSource.WIKI,psi4manual/4.0b2/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci.html
Energy Efficiency,adapt,adapted,"﻿. Configuration Interaction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based",MatchSource.WIKI,psi4manual/4.0b2/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci.html
Integrability,interface,interface,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4manual/4.0b2/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci.html
Modifiability,adapt,adapted,"﻿. Configuration Interaction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based",MatchSource.WIKI,psi4manual/4.0b2/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci.html
Performance,optimiz,optimized,"a diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are include",MatchSource.WIKI,psi4manual/4.0b2/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci.html
Testability,test,testing,"rsion of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. Table Of Contents. Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; FROZEN_UOCC; MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Previous topic; Interface to MRCC by M. Kállay; Next topic; Geometry Optimization; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright ",MatchSource.WIKI,psi4manual/4.0b2/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci.html
Usability,simpl,simplest,"﻿. Configuration Interaction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based",MatchSource.WIKI,psi4manual/4.0b2/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci.html
Availability,robust,robust,"arrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted integrals and then builds the; full tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; re",MatchSource.WIKI,psi4manual/4.0b2/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2-1.html
Deployability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b2/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2-1.html
Energy Efficiency,efficient,efficient,"﻿. Density-Fitted Second-Order Møller-Plesset Perturbation Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Density-Fitted Second-Order Møller-Plesset Perturbation Theory¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF",MatchSource.WIKI,psi4manual/4.0b2/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2-1.html
Integrability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b2/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2-1.html
Modifiability,variab,variable,"ary; basis exists for the atom in question). If it does not, use the; DF_BASIS_MP2 keyword to manually specify the basis.; DFMP2 likes memory. At a minimum, doubles are required,; where is the size of the auxiliary basis set. However, there is; one disk transpose of the tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the DF_INTS_NUM_THREADS to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Table Of Contents. Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Previous topic; Density Functional Theory; Next topic; Ab Initio Polarization Propagator; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyrigh",MatchSource.WIKI,psi4manual/4.0b2/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2-1.html
Usability,simpl,simplification,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b2/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2-1.html
Availability,robust,robust,"arrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted integrals and then builds the; full tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; re",MatchSource.WIKI,psi4manual/4.0b2/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2.html
Deployability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b2/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2.html
Energy Efficiency,efficient,efficient,"﻿. Density-Fitted Second-Order Møller-Plesset Perturbation Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Density-Fitted Second-Order Møller-Plesset Perturbation Theory¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF",MatchSource.WIKI,psi4manual/4.0b2/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2.html
Integrability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b2/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2.html
Modifiability,variab,variable,"ary; basis exists for the atom in question). If it does not, use the; DF_BASIS_MP2 keyword to manually specify the basis.; DFMP2 likes memory. At a minimum, doubles are required,; where is the size of the auxiliary basis set. However, there is; one disk transpose of the tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the DF_INTS_NUM_THREADS to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Table Of Contents. Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Previous topic; Density Functional Theory; Next topic; Ab Initio Polarization Propagator; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyrigh",MatchSource.WIKI,psi4manual/4.0b2/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2.html
Usability,simpl,simplification,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b2/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dfmp2.html
Availability,failure,failures,"am matrix,. which is diagonalized to form the Kohn-Sham orbitals in the same manner as in; Hartree-Fock.; In practice the local functional kernel and its required; partial derivatives are exceedingly complex, and are not analytically; integrable. In this case, atom-centered numerical quadratures are used to; evaluate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn",MatchSource.WIKI,psi4manual/4.0b2/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html
Deployability,integrat,integrated,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; -D Functionals; We have several -D2 functionals implemented, and will shortly be adding many; more combinations of -D2 and -D3 functionals. For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results, please email Rob Parrish (robparrish@gmail.com); for immediate assistance. Additionally, if you have a request for a new; functional, please let us know. Grid Selection¶; PSI4 uses the standard Lebedev-Laikov spherical quadratures in concert w",MatchSource.WIKI,psi4manual/4.0b2/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html
Energy Efficiency,energy,energy,"﻿. Density Functional Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Density Functional Theory¶; Code author: Robert M. Parrish and Justin M. Turney; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBFUNCTIONAL, LIBFOCK, LIBSCF_SOLVER; Both density functional theory and Hartree–Fock theory are controlled; through the SCF module, and the SCF Introduction; section is also relevant here. Theory¶; Generalized Kohn-Sham Density Functional Theory (KS-DFT) is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio.; Pure Kohn-Sham DFT is based on the ideas that A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exch",MatchSource.WIKI,psi4manual/4.0b2/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html
Integrability,depend,depending,"ng the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density is incorporated. The most canonical variant; of these functionals rely on the spin kinetic energy density ; and ,. A generic local meta-GGA functional may then be written as,. The potential corresponding to this energy functional is,. This potential is u",MatchSource.WIKI,psi4manual/4.0b2/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html
Modifiability,extend,extended,"valuate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn-Sham; potential.; The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree-Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that",MatchSource.WIKI,psi4manual/4.0b2/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html
Performance,optimiz,optimization,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b2/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html
Testability,test,test,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b2/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html
Usability,simpl,simply," the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density i",MatchSource.WIKI,psi4manual/4.0b2/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html
Availability,failure,failures,"am matrix,. which is diagonalized to form the Kohn-Sham orbitals in the same manner as in; Hartree-Fock.; In practice the local functional kernel and its required; partial derivatives are exceedingly complex, and are not analytically; integrable. In this case, atom-centered numerical quadratures are used to; evaluate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn",MatchSource.WIKI,psi4manual/4.0b2/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft.html
Deployability,integrat,integrated,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; -D Functionals; We have several -D2 functionals implemented, and will shortly be adding many; more combinations of -D2 and -D3 functionals. For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results, please email Rob Parrish (robparrish@gmail.com); for immediate assistance. Additionally, if you have a request for a new; functional, please let us know. Grid Selection¶; PSI4 uses the standard Lebedev-Laikov spherical quadratures in concert w",MatchSource.WIKI,psi4manual/4.0b2/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft.html
Energy Efficiency,energy,energy,"﻿. Density Functional Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Density Functional Theory¶; Code author: Robert M. Parrish and Justin M. Turney; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBFUNCTIONAL, LIBFOCK, LIBSCF_SOLVER; Both density functional theory and Hartree–Fock theory are controlled; through the SCF module, and the SCF Introduction; section is also relevant here. Theory¶; Generalized Kohn-Sham Density Functional Theory (KS-DFT) is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio.; Pure Kohn-Sham DFT is based on the ideas that A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exch",MatchSource.WIKI,psi4manual/4.0b2/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft.html
Integrability,depend,depending,"ng the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density is incorporated. The most canonical variant; of these functionals rely on the spin kinetic energy density ; and ,. A generic local meta-GGA functional may then be written as,. The potential corresponding to this energy functional is,. This potential is u",MatchSource.WIKI,psi4manual/4.0b2/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft.html
Modifiability,extend,extended,"valuate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn-Sham; potential.; The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree-Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that",MatchSource.WIKI,psi4manual/4.0b2/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft.html
Performance,optimiz,optimization,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b2/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft.html
Testability,test,test,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b2/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft.html
Usability,simpl,simply," the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density i",MatchSource.WIKI,psi4manual/4.0b2/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft.html
Availability,avail,available,﻿. DFT Functionals — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». DFT Functionals¶. DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; Dispersion?; Dispersion Description. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP5; B3LYP5 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —. B3LYP5-D; B3LYP5 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. BLYP; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. BLYP-D; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. BP86; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. FT97; FT97 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. FT97B_X; Filitov and Theil 1997 Exchange; Y; —; —; —; —; —; —; —. FT97_C; FT97 Correlation (Involves Ei functions); Y; —; —; —; —; —; —; —. HCTH; HCTH Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. HCTH120; HCTH120 Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. HCTH147; HCTH147 Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. HCTH407; HCTH407 Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —,MatchSource.WIKI,psi4manual/4.0b2/dft_byfunctional-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft_byfunctional-1.html
Deployability,update,updated," —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —. PBE0; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —. Dispersion-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; Dispersion?; Dispersion Description. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP5-D; B3LYP5 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. BLYP-D; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/dft_byfunctional-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft_byfunctional-1.html
Availability,avail,available,﻿. DFT Functionals — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». DFT Functionals¶. DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; Dispersion?; Dispersion Description. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP5; B3LYP5 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —. B3LYP5-D; B3LYP5 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. BLYP; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. BLYP-D; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. BP86; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. FT97; FT97 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. FT97B_X; Filitov and Theil 1997 Exchange; Y; —; —; —; —; —; —; —. FT97_C; FT97 Correlation (Involves Ei functions); Y; —; —; —; —; —; —; —. HCTH; HCTH Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. HCTH120; HCTH120 Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. HCTH147; HCTH147 Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —. HCTH407; HCTH407 Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —,MatchSource.WIKI,psi4manual/4.0b2/dft_byfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft_byfunctional.html
Deployability,update,updated," —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —. PBE0; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —. Dispersion-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; Dispersion?; Dispersion Description. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP5-D; B3LYP5 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. BLYP-D; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/dft_byfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft_byfunctional.html
Availability,avail,availibility,"er; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx c",MatchSource.WIKI,psi4manual/4.0b2/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation-1.html
Deployability,install,installed,"﻿. Documentation — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. Ultimately, the docs will be served, either; from trac or psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto generated and explicitly composed documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Co",MatchSource.WIKI,psi4manual/4.0b2/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation-1.html
Integrability,depend,depending,"mately, the docs will be served, either; from trac or psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto generated and explicitly composed documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments i",MatchSource.WIKI,psi4manual/4.0b2/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation-1.html
Modifiability,plugin,plugin,"dience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re",MatchSource.WIKI,psi4manual/4.0b2/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation-1.html
Testability,test,tests,"dience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re",MatchSource.WIKI,psi4manual/4.0b2/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation-1.html
Usability,clear,clears,"ndex.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locat",MatchSource.WIKI,psi4manual/4.0b2/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation-1.html
Availability,avail,availibility,"er; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx c",MatchSource.WIKI,psi4manual/4.0b2/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation.html
Deployability,install,installed,"﻿. Documentation — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. Ultimately, the docs will be served, either; from trac or psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto generated and explicitly composed documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Co",MatchSource.WIKI,psi4manual/4.0b2/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation.html
Integrability,depend,depending,"mately, the docs will be served, either; from trac or psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto generated and explicitly composed documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments i",MatchSource.WIKI,psi4manual/4.0b2/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation.html
Modifiability,plugin,plugin,"dience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re",MatchSource.WIKI,psi4manual/4.0b2/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation.html
Testability,test,tests,"dience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re",MatchSource.WIKI,psi4manual/4.0b2/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation.html
Usability,clear,clears,"ndex.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locat",MatchSource.WIKI,psi4manual/4.0b2/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation.html
Deployability,configurat,configuration," fitting. dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. name; calls method (aliases to name = ‘scf’). hf; HF. rhf; HF with restricted reference. uhf; HF with unrestricted reference. rohf; HF with restricted open-shell reference. rscf; HF or DFT with restricted reference. uscf; HF or DFT with unrestricted reference. roscf; HF or DFT with restricted open-shell reference. df-scf; HF or DFT with density fitting. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp5; B3LYP5 Hybrid-GGA Exchange-Correlation Functional. b3lyp5-d; B3LYP5 Hybrid",MatchSource.WIKI,psi4manual/4.0b2/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/energy-1.html
Energy Efficiency,energy,energy,"﻿. Energy — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. name; calls meth",MatchSource.WIKI,psi4manual/4.0b2/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/energy-1.html
Modifiability,variab,variables,"﻿. Energy — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. name; calls meth",MatchSource.WIKI,psi4manual/4.0b2/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/energy-1.html
Deployability,configurat,configuration," fitting. dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. name; calls method (aliases to name = ‘scf’). hf; HF. rhf; HF with restricted reference. uhf; HF with unrestricted reference. rohf; HF with restricted open-shell reference. rscf; HF or DFT with restricted reference. uscf; HF or DFT with unrestricted reference. roscf; HF or DFT with restricted open-shell reference. df-scf; HF or DFT with density fitting. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp5; B3LYP5 Hybrid-GGA Exchange-Correlation Functional. b3lyp5-d; B3LYP5 Hybrid",MatchSource.WIKI,psi4manual/4.0b2/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/energy.html
Energy Efficiency,energy,energy,"﻿. Energy — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. name; calls meth",MatchSource.WIKI,psi4manual/4.0b2/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/energy.html
Modifiability,variab,variables,"﻿. Energy — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. name; calls meth",MatchSource.WIKI,psi4manual/4.0b2/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/energy.html
Availability,down,down,"﻿. Configuration: Preparing PSI4’s Environment — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Configuration: Preparing PSI4’s Environment¶. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherw",MatchSource.WIKI,psi4manual/4.0b2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html
Deployability,configurat,configuration,"﻿. Configuration: Preparing PSI4’s Environment — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Configuration: Preparing PSI4’s Environment¶. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherw",MatchSource.WIKI,psi4manual/4.0b2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html
Energy Efficiency,efficient,efficiently,"nt difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to e",MatchSource.WIKI,psi4manual/4.0b2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html
Integrability,depend,depending,"﻿. Configuration: Preparing PSI4’s Environment — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Configuration: Preparing PSI4’s Environment¶. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherw",MatchSource.WIKI,psi4manual/4.0b2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html
Modifiability,config,configuration,"﻿. Configuration: Preparing PSI4’s Environment — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Configuration: Preparing PSI4’s Environment¶. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherw",MatchSource.WIKI,psi4manual/4.0b2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html
Performance,perform,performing,"ary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file (note the trailing “/”):; psi4_io.set_default_path('/scratch/user/'). For batch jobs runnin",MatchSource.WIKI,psi4manual/4.0b2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html
Safety,safe,safe,",; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file (note the trailing “/”):; psi4_io.set_default_path('/scratch/user/'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be send to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using th",MatchSource.WIKI,psi4manual/4.0b2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html
Security,access,accessible,"tart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at",MatchSource.WIKI,psi4manual/4.0b2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html
Usability,simpl,simply,"default_path('/scratch/user/'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be send to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using Op",MatchSource.WIKI,psi4manual/4.0b2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html
Availability,down,down,"﻿. Configuration: Preparing PSI4’s Environment — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Configuration: Preparing PSI4’s Environment¶. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherw",MatchSource.WIKI,psi4manual/4.0b2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external.html
Deployability,configurat,configuration,"﻿. Configuration: Preparing PSI4’s Environment — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Configuration: Preparing PSI4’s Environment¶. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherw",MatchSource.WIKI,psi4manual/4.0b2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external.html
Energy Efficiency,efficient,efficiently,"nt difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to e",MatchSource.WIKI,psi4manual/4.0b2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external.html
Integrability,depend,depending,"﻿. Configuration: Preparing PSI4’s Environment — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Configuration: Preparing PSI4’s Environment¶. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherw",MatchSource.WIKI,psi4manual/4.0b2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external.html
Modifiability,config,configuration,"﻿. Configuration: Preparing PSI4’s Environment — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Configuration: Preparing PSI4’s Environment¶. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherw",MatchSource.WIKI,psi4manual/4.0b2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external.html
Performance,perform,performing,"ary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file (note the trailing “/”):; psi4_io.set_default_path('/scratch/user/'). For batch jobs runnin",MatchSource.WIKI,psi4manual/4.0b2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external.html
Safety,safe,safe,",; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file (note the trailing “/”):; psi4_io.set_default_path('/scratch/user/'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be send to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using th",MatchSource.WIKI,psi4manual/4.0b2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external.html
Security,access,accessible,"tart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at",MatchSource.WIKI,psi4manual/4.0b2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external.html
Usability,simpl,simply,"default_path('/scratch/user/'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be send to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using Op",MatchSource.WIKI,psi4manual/4.0b2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external.html
Availability,avail,available,"﻿. Frequency — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3",MatchSource.WIKI,psi4manual/4.0b2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/freq-1.html
Deployability,update,updated,"quency — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/freq-1.html
Energy Efficiency,energy,energy,"﻿. Frequency — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3",MatchSource.WIKI,psi4manual/4.0b2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/freq-1.html
Performance,perform,performed,"﻿. Frequency — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3",MatchSource.WIKI,psi4manual/4.0b2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/freq-1.html
Availability,avail,available,"﻿. Frequency — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3",MatchSource.WIKI,psi4manual/4.0b2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/freq.html
Deployability,update,updated,"quency — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/freq.html
Energy Efficiency,energy,energy,"﻿. Frequency — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3",MatchSource.WIKI,psi4manual/4.0b2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/freq.html
Performance,perform,performed,"﻿. Frequency — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3",MatchSource.WIKI,psi4manual/4.0b2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/freq.html
Availability,avail,available,"ABCD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). absolute_to_relative() (Table method). ACENES (module), [1]. activate() (in module molutil). ACTIVE (DETCI). (PSIMRCC). ADC. theory. ADD_AUXILIARY_BONDS (OPTKING). addChargeAngstrom() (QMMM method). addChargeBohr() (QMMM method). addDiffuse() (QMMM method). adding new; . basis set. database(). method alias. AEL (CCDENSITY). AIO_CPHF (SAPT). AIO_DF_INTS (SAPT). ALGORITHM (DCFT). aliases (module). ANALYZE (CCENERGY). (CCRESPONSE). AO_BASIS (CCDENSITY). (CCENERGY). (CCLAMBDA). (CCSORT). (DCFT). (PLUGIN_CCSORT), [1]. (TRANSQT). (TRANSQT2). arbitrary-order coupled-cluster theory; . CI. arbitrary-order perturbation theory; . CI. architectures. auto_fragments() (in module wrappers). AVG_STATES (DETCI). AVG_WEIGHTS (DETCI). B. B_RAS3_MAX (DETCI). BAKERJCC93 (module), [1]. BAKERJCC96 (module), [1]. banner() (in module text). BASIC (module), [1]. BASIS (DFMP2). (MINTS). (QCSCF), [1]. (SAPT). (SCF). basis set; . adding new. auxiliary. available by element. available by family. extrapolation. multiple within molecule. specification. BB_M_FILE (TRANSQT). BBB(T)CORRECTIONENERGY. BENCH (GLOBALS). BENDAZZOLI (DETCI). BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY). BRUECKNERCONVERGED. build_b3_x_functional() (in module functional). build_b3lyp5_superfunctional() (in module functional). build_b3lyp5d_superfunctional() (in module functional). build_b3lyp_superfunctional() (in module functional). build_b3lypd_superfunctional() (in module functional). build_b88_x_functional() (in module functional). build_b970_superfunctional() (in module functional). build_b971_superfunctional() (in module functional). build_b972_superfunctional() (in module functional). build_b97_x_functional() (in module functional). build_b97d_superfunctional() (in module functional). build_blyp_superfunctional() (in module functional). build_blypd_superfunctional() (in module functional). build_bp86_superfunctional() (in module functional). build_bp86d_superfunctional() ",MatchSource.WIKI,psi4manual/4.0b2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html
Deployability,update,updated,"dule wrappers). SS_E_CONVERGENCE (CCEOM). SS_R_CONVERGENCE (CCEOM). SS_SKIP_DIAG (CCEOM). SS_VECS_PER_ROOT (CCEOM). STEP_TYPE (OPTKING). success() (in module util). superfunctional_list() (in module functional). symmetry. molecule. T. T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table (class in text). TAU_SQUARED (DCFT). tblhead() (in module wrappers). TDHF_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() (in module functional). TEST_DERIVATIVE_B (OPTKING). text (module). theory; . ADC. CC. CI. DF-MP2. DFT. SAPT. SCF. cbs(), [1]. threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SIZE (PLUGIN_TEST_MATRIX), [1]. TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. units; . molecule. UNITS (GLOBALS). UPDATE (DETCI). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). util (module). V. VAL_EX_LEVEL (DETCI). validate_bracketed_basis() (in module wrappers). validate_scheme_args() (in module wrappers). ValidationError. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). W. WABEI_LOWDISK (CCHBAR). WFN (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CIS). (CLAG). (DETCI). (GLOBALS). (LMP2). (MP2). (SCF). (TRANSQT). (TRANSQT2). WFN_SYM (MCSCF). (PSIMRCC). wrappers (module). X. XI (CCDENSITY). XI_CONNECT (CCDENSITY). Z. ZAPTnCORRELATIONENERGY. ZAPTnTOTALENERGY. ZERO_INTERNAL_AMPS (PSIMRCC). ZETA (CCDENSITY). (CCLAMBDA). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html
Energy Efficiency,charge,charge,"LIZE_ACTIVE_FAVG (MCSCF). CANONICALIZE_INACTIVE_FAVG (MCSCF). CART_HESS_READ (OPTKING). CAS_FILES_WRITE (CLAG). cbs(); . extrapolation schemes. output. setting keywords. theory, [1]. CBSCORRELATIONENERGY. CBSREFERENCEENERGY. CBSTOTALENERGY. CC; . theory. CC (DETCI). CC, coupled cluster. CC2CORRELATIONENERGY. CC2TOTALENERGY. CC3_FOLLOW_ROOT (CCEOM). CC3CORRELATIONENERGY. CC3TOTALENERGY. CC_A_RAS3_MAX (DETCI). CC_B_RAS3_MAX (DETCI). CC_EX_LEVEL (DETCI). CC_FIX_EXTERNAL (DETCI). CC_FIX_EXTERNAL_MIN (DETCI). CC_MACRO (DETCI). CC_MAXITER (OMP2). CC_MIXED (DETCI). CC_NUM_THREADS (CCENERGY). (CCEOM). (CCTRIPLES). (PSIMRCC). CC_OS_SCALE (CCENERGY). CC_RAS34_MAX (DETCI). CC_RAS3_MAX (DETCI). CC_RAS4_MAX (DETCI). CC_SS_SCALE (CCENERGY). CC_UPDATE_EPS (DETCI). CC_VAL_EX_LEVEL (DETCI). CC_VARIATIONAL (DETCI). CC_VECS_READ (DETCI). CC_VECS_WRITE (DETCI). CCCORRELATIONENERGY. CCROOTnTOTALENERGY. CCSD(T)CORRELATIONENERGY. CCSD(T)TOTALENERGY. CCSDCORRELATIONENERGY. CCSDTOTALENERGY. CCTOTALENERGY. charge; . molecule. CHECK_C_ORTHONORM (TRANSQT). CI. arbitrary-order coupled-cluster theory. arbitrary-order perturbation theory. basic-keywords. theory. CI_DIIS (MCSCF). CI_NUM_THREADS (DETCI). CIBLKS_PRINT (DETCI). CICORRELATIONENERGY. CIDIPOLEX. CIDIPOLEY. CIDIPOLEZ. CInCORRELATIONENERGY. CInTOTALENERGY. CIQUADRUPOLEXX. CIQUADRUPOLEXY. CIQUADRUPOLEXZ. CIQUADRUPOLEYY. CIQUADRUPOLEYZ. CIQUADRUPOLEZZ. CIROOTn->ROOTmDIPOLEX. CIROOTn->ROOTmDIPOLEY. CIROOTn->ROOTmDIPOLEZ. CIROOTn->ROOTmQUADRUPOLEXX. CIROOTn->ROOTmQUADRUPOLEXY. CIROOTn->ROOTmQUADRUPOLEXZ. CIROOTn->ROOTmQUADRUPOLEYY. CIROOTn->ROOTmQUADRUPOLEYZ. CIROOTn->ROOTmQUADRUPOLEZZ. CIROOTnCORRELATIONENERGY. CIROOTnDIPOLEX. CIROOTnDIPOLEY. CIROOTnDIPOLEZ. CIROOTnQUADRUPOLEXX. CIROOTnQUADRUPOLEXY. CIROOTnQUADRUPOLEXZ. CIROOTnQUADRUPOLEYY. CIROOTnQUADRUPOLEYZ. CIROOTnQUADRUPOLEZZ. CIROOTnTOTALENERGY. CIS_AD_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_AMPLITUDE_CUTOFF (CPHF). (PLUGIN_FOCK), [1]. CIS_DOPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_ME",MatchSource.WIKI,psi4manual/4.0b2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html
Integrability,wrap,wrappers," . psi4 command line option. -V, --version; . psi4 command line option. -w, --wipe; . psi4 command line option. A. A_RAS3_MAX (DETCI). AA_M_FILE (TRANSQT). AAA(T)CORRECTIONENERGY. AAB(T)CORRECTIONENERGY. Ab initio Polarization Propagator. AB_M_FILE (TRANSQT). ABB(T)CORRECTIONENERGY. ABCD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). absolute_to_relative() (Table method). ACENES (module), [1]. activate() (in module molutil). ACTIVE (DETCI). (PSIMRCC). ADC. theory. ADD_AUXILIARY_BONDS (OPTKING). addChargeAngstrom() (QMMM method). addChargeBohr() (QMMM method). addDiffuse() (QMMM method). adding new; . basis set. database(). method alias. AEL (CCDENSITY). AIO_CPHF (SAPT). AIO_DF_INTS (SAPT). ALGORITHM (DCFT). aliases (module). ANALYZE (CCENERGY). (CCRESPONSE). AO_BASIS (CCDENSITY). (CCENERGY). (CCLAMBDA). (CCSORT). (DCFT). (PLUGIN_CCSORT), [1]. (TRANSQT). (TRANSQT2). arbitrary-order coupled-cluster theory; . CI. arbitrary-order perturbation theory; . CI. architectures. auto_fragments() (in module wrappers). AVG_STATES (DETCI). AVG_WEIGHTS (DETCI). B. B_RAS3_MAX (DETCI). BAKERJCC93 (module), [1]. BAKERJCC96 (module), [1]. banner() (in module text). BASIC (module), [1]. BASIS (DFMP2). (MINTS). (QCSCF), [1]. (SAPT). (SCF). basis set; . adding new. auxiliary. available by element. available by family. extrapolation. multiple within molecule. specification. BB_M_FILE (TRANSQT). BBB(T)CORRECTIONENERGY. BENCH (GLOBALS). BENDAZZOLI (DETCI). BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY). BRUECKNERCONVERGED. build_b3_x_functional() (in module functional). build_b3lyp5_superfunctional() (in module functional). build_b3lyp5d_superfunctional() (in module functional). build_b3lyp_superfunctional() (in module functional). build_b3lypd_superfunctional() (in module functional). build_b88_x_functional() (in module functional). build_b970_superfunctional() (in module functional). build_b971_superfunctional() (in module functional). build_b972_superfunctional() (in module functional). build_b97",MatchSource.WIKI,psi4manual/4.0b2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html
Modifiability,plugin,plugin,"﻿. Index — PSI4 [beta2] documentation. Navigation. index. modules |; PSI4 [beta2] » . Index. Symbols; | A; | B; | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W; | X; | Z. Symbols. (T)CORRECTIONENERGY. --new-plugin <name>; . psi4 command line option. -a, --append; . psi4 command line option. -d, --debug; . psi4 command line option. -h, --help; . psi4 command line option. -i <filename>, --input <filename>; . psi4 command line option. -m, --messy; . psi4 command line option. -n <threads>, --nthread <threads>; . psi4 command line option. -o <filename>, --output <filename>; . psi4 command line option. -p <prefix>, --prefix <prefix>; . psi4 command line option. -v, --verbose; . psi4 command line option. -V, --version; . psi4 command line option. -w, --wipe; . psi4 command line option. A. A_RAS3_MAX (DETCI). AA_M_FILE (TRANSQT). AAA(T)CORRECTIONENERGY. AAB(T)CORRECTIONENERGY. Ab initio Polarization Propagator. AB_M_FILE (TRANSQT). ABB(T)CORRECTIONENERGY. ABCD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). absolute_to_relative() (Table method). ACENES (module), [1]. activate() (in module molutil). ACTIVE (DETCI). (PSIMRCC). ADC. theory. ADD_AUXILIARY_BONDS (OPTKING). addChargeAngstrom() (QMMM method). addChargeBohr() (QMMM method). addDiffuse() (QMMM method). adding new; . basis set. database(). method alias. AEL (CCDENSITY). AIO_CPHF (SAPT). AIO_DF_INTS (SAPT). ALGORITHM (DCFT). aliases (module). ANALYZE (CCENERGY). (CCRESPONSE). AO_BASIS (CCDENSITY). (CCENERGY). (CCLAMBDA). (CCSORT). (DCFT). (PLUGIN_CCSORT), [1]. (TRANSQT). (TRANSQT2). arbitrary-order coupled-cluster theory; . CI. arbitrary-order perturbation theory; . CI. architectures. auto_fragments() (in module wrappers). AVG_STATES (DETCI). AVG_WEIGHTS (DETCI). B. B_RAS3_MAX (DETCI). BAKERJCC93 (module), [1]. BAKERJCC96 (module), [1]. banner() (in module text). BASIC (module), [1]. BASIS (DFMP2). (MINTS). (QCSCF), [1]. (SAPT). (SCF). basis set; . adding new. auxi",MatchSource.WIKI,psi4manual/4.0b2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html
Performance,optimiz,optimization,"TY). FOLLOW_ROOT (CLAG). (DETCI). (MCSCF). (PSIMRCC). FOLLOW_VECTOR (DETCI). FORCE_RESTART (CCENERGY). FORCE_TWOCON (MCSCF). format_kwargs_for_input() (in module procutil). format_label() (Table method). format_molecule_for_input() (in module procutil). format_options_for_input() (in module procutil). format_values() (Table method). frac (module). FRAC_DIIS (SCF). FRAC_LOAD (SCF). frac_nuke() (in module frac). FRAC_OCC (SCF). FRAC_RENORMALIZE (SCF). FRAC_START (SCF). frac_traverse() (in module frac). FRAC_VAL (SCF). FRAG_MODE (OPTKING). FREEZE_CORE (GLOBALS). (SAPT). FREEZE_INTERFRAG (OPTKING). FREEZE_INTRAFRAG (OPTKING). frequency() (in module driver). FROZEN_DOCC (GLOBALS). (PSIMRCC). FROZEN_UOCC (GLOBALS). (PSIMRCC). FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). functional (module). functional_list() (in module functional). FZC_A_FILE (TRANSQT). FZC_B_FILE (TRANSQT). FZC_FILE (TRANSQT). G. G_CONVERGENCE (OPTKING). GAUGE (CCDENSITY). (CCRESPONSE). GEOM_MAXITER (OPTKING). geometry optimization. IRC. constrained. convergence criteria. minima. output. transition state. geometry() (in module molutil). get_memory() (in module util). get_num_threads() (in module util). get_psifile() (in module procutil). getCartesian() (PubChemObj method). getMoleculeString() (PubChemObj method). getPubChemResults() (in module pubchem). getSDF() (PubChemObj method). getXYZFile() (PubChemObj method). gradient() (in module driver). GUESS (SCF). GUESS_VECTOR (DETCI). H. H0_BLOCK_COUPLING (DETCI). H0_BLOCK_COUPLING_SIZE (DETCI). H0_BLOCKSIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. HBC6 (module), [1]. HD_AVG (DETCI). HD_OTF (DETCI). HEFF4 (PSIMRCC). HEFF_PRINT (PSIMRCC). HESS_TYPE (OMP2). HESS_UPDATE (OPTKING). HESS_UPDATE_LIMIT (OPTKING). HESS_UPDATE_LIMIT_MAX (OPTKING). HESS_UPDATE_LIMIT_SCALE (OPTKING). HESS_UPDATE_USE_LAST (OPTKING). hessian() (in module driver). HF. highest_1() (in module wrappers). HSG (module), [1]. HTBH (module), [1]. I. ICORE (DETCI)",MatchSource.WIKI,psi4manual/4.0b2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html
Availability,avail,available,"lectronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DF-MP2 TOTAL ENERGY¶. DF-MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the density-fitted MP2 level of theory. DFT FUNCTIONAL ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity in Eq. (2). DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional; of the requested DFT method, without any dispersion",MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html
Deployability,configurat,configuration,down into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; The total electronic energy [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC2 level of theory. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC3 level of theory. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD(T) level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f,MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html
Energy Efficiency,energy,energy,"﻿. PSI Variables by Alpha — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; The total electronic energy [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC2 level of theory. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC3 level of theory. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD(T) level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of th",MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html
Modifiability,variab,variable,"﻿. PSI Variables by Alpha — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; The total electronic energy [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC2 level of theory. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC3 level of theory. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD(T) level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of th",MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html
Performance,optimiz,optimizer,"of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DF-MP2 TOTAL ENERGY¶. DF-MP2 CORRELAT",MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables-1.html
Availability,avail,available,"lectronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DF-MP2 TOTAL ENERGY¶. DF-MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the density-fitted MP2 level of theory. DFT FUNCTIONAL ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity in Eq. (2). DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional; of the requested DFT method, without any dispersion",MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables.html
Deployability,configurat,configuration,down into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; The total electronic energy [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC2 level of theory. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC3 level of theory. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD(T) level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f,MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables.html
Energy Efficiency,energy,energy,"﻿. PSI Variables by Alpha — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; The total electronic energy [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC2 level of theory. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC3 level of theory. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD(T) level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of th",MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables.html
Modifiability,variab,variable,"﻿. PSI Variables by Alpha — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; The total electronic energy [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC2 level of theory. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CC3 level of theory. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the CCSD(T) level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of th",MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables.html
Performance,optimiz,optimizer,"of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DF-MP2 TOTAL ENERGY¶. DF-MP2 CORRELAT",MatchSource.WIKI,psi4manual/4.0b2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/glossary_psivariables.html
Deployability,update,updated,"is Sets; Memory Specification; Return Values and PSI Variables; Loops; Tables of Results; Python Wrappers. Basis Sets; Theoretical Methods: SCF to FCI; Notes on Options; Hartree–Fock Theory; Density Functional Theory; Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Ab Initio Polarization Propagator; Symmetry-Adapted Perturbation Theory; Coupled Cluster Methods; PSIMRCC Implementation of Mk-MRCC Theory; Interface to MRCC by M. Kállay; Configuration Interaction; Geometry Optimization. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Function Intercalls; Embarrassing Parallelism. Interfaces: Enhancing PSI4 Capabilities. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation. Programming: Using the Core Libraries. Emerging Theoretical Methods: Plugins DFADC to RQCHF; plugin_cepa; plugin_ccsort; plugin_dfadc; plugin_test_matrix; plugin_ccsd_serial; plugin_libfock; plugin_aointegrals; plugin_mp2; plugin_sointegrals; plugin_testparse; plugin_rqchf; plugin_omega; plugin_mointegrals; plugin_backtrans. Python Driver; input; pubchem; psiexceptions; frac; molutil; proc; procutil; driver; physconst; wrappers; qmmm; functional; text; util; aliases. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; DFT Functionals; Keywords by Alpha; PSI Variables by Alpha; Keywords by Module; PSI Variables by Module. Indices. Index; Module Index; Search Page. Next topic; Introduction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/index.html
Integrability,wrap,wrappers,"is Sets; Memory Specification; Return Values and PSI Variables; Loops; Tables of Results; Python Wrappers. Basis Sets; Theoretical Methods: SCF to FCI; Notes on Options; Hartree–Fock Theory; Density Functional Theory; Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Ab Initio Polarization Propagator; Symmetry-Adapted Perturbation Theory; Coupled Cluster Methods; PSIMRCC Implementation of Mk-MRCC Theory; Interface to MRCC by M. Kállay; Configuration Interaction; Geometry Optimization. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Function Intercalls; Embarrassing Parallelism. Interfaces: Enhancing PSI4 Capabilities. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation. Programming: Using the Core Libraries. Emerging Theoretical Methods: Plugins DFADC to RQCHF; plugin_cepa; plugin_ccsort; plugin_dfadc; plugin_test_matrix; plugin_ccsd_serial; plugin_libfock; plugin_aointegrals; plugin_mp2; plugin_sointegrals; plugin_testparse; plugin_rqchf; plugin_omega; plugin_mointegrals; plugin_backtrans. Python Driver; input; pubchem; psiexceptions; frac; molutil; proc; procutil; driver; physconst; wrappers; qmmm; functional; text; util; aliases. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; DFT Functionals; Keywords by Alpha; PSI Variables by Alpha; Keywords by Module; PSI Variables by Module. Indices. Index; Module Index; Search Page. Next topic; Introduction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/index.html
Deployability,update,updated,"s |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; <no title>; Next topic; Embarrassing Parallelism; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/intercalls-1.html
Energy Efficiency,energy,energy,"﻿. Function Intercalls — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; <no title>; Next topic; Embarrassing Parallelism; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, ",MatchSource.WIKI,psi4manual/4.0b2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/intercalls-1.html
Performance,optimiz,optimize,"﻿. Function Intercalls — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; <no title>; Next topic; Embarrassing Parallelism; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, ",MatchSource.WIKI,psi4manual/4.0b2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/intercalls-1.html
Security,validat,validated,"﻿. Function Intercalls — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; <no title>; Next topic; Embarrassing Parallelism; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, ",MatchSource.WIKI,psi4manual/4.0b2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/intercalls-1.html
Deployability,update,updated,"s |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; <no title>; Next topic; Embarrassing Parallelism; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/intercalls.html
Energy Efficiency,energy,energy,"﻿. Function Intercalls — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; <no title>; Next topic; Embarrassing Parallelism; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, ",MatchSource.WIKI,psi4manual/4.0b2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/intercalls.html
Performance,optimiz,optimize,"﻿. Function Intercalls — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; <no title>; Next topic; Embarrassing Parallelism; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, ",MatchSource.WIKI,psi4manual/4.0b2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/intercalls.html
Security,validat,validated,"﻿. Function Intercalls — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; <no title>; Next topic; Embarrassing Parallelism; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, ",MatchSource.WIKI,psi4manual/4.0b2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/intercalls.html
Deployability,update,updated,"﻿. Interfaces: Enhancing PSI4 Capabilities — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilites have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to MRCC by M. Kállay PSI4 can drive the MRCC program of M. Kállay and J. Gauss; MPI4Py; MADNESS; Grimme’s dft-d3; MATLAB for new dft functionals. Previous topic; Embarrassing Parallelism; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/interfacing-1.html
Deployability,update,updated,"﻿. Interfaces: Enhancing PSI4 Capabilities — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilites have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to MRCC by M. Kállay PSI4 can drive the MRCC program of M. Kállay and J. Gauss; MPI4Py; MADNESS; Grimme’s dft-d3; MATLAB for new dft functionals. Previous topic; Embarrassing Parallelism; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/interfacing.html
Availability,avail,available,"ate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Depending on the particular modules used, the user may also wish to; cite some of the following references for theoretical, algorithmic,; or implementation contributions specif",MatchSource.WIKI,psi4manual/4.0b2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html
Deployability,install,installation,"r Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010). SAPT2, SAPT2+, SAPT2+(3), SAPT2+3. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherrill, J. Chem. Phys. 133, 104107 (2010). Obtaining and Installing PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to the; installation instructions at the PSI4 website above or to the file; psi4/INSTALL distributed with the package. Additional compilation; hints may be found at Psi Compiling. Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or; 12.1 (we have had trouble with version 12.0). Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient",MatchSource.WIKI,psi4manual/4.0b2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html
Energy Efficiency,efficient,efficiently,"﻿. Introduction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney",MatchSource.WIKI,psi4manual/4.0b2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html
Integrability,rout,routine,"﻿. Introduction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney",MatchSource.WIKI,psi4manual/4.0b2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html
Modifiability,adapt,adapted," Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009). SAPT (General); All capabilities of the SAPT module are based on Symmetry Adapted; Perturbation Theory. A good review article for this method is as; follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994). The particular implementation and algorithms for various orders of SAPT; available in PSI4 are provided below.; SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of Interactions in Linear Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010). SAPT2, SAPT2+, SAPT2+(3), SAPT2+3. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherri",MatchSource.WIKI,psi4manual/4.0b2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html
Performance,optimiz,optimization,"machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Depending",MatchSource.WIKI,psi4manual/4.0b2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html
Testability,test,testing,"r Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010). SAPT2, SAPT2+, SAPT2+(3), SAPT2+3. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherrill, J. Chem. Phys. 133, 104107 (2010). Obtaining and Installing PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to the; installation instructions at the PSI4 website above or to the file; psi4/INSTALL distributed with the package. Additional compilation; hints may be found at Psi Compiling. Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or; 12.1 (we have had trouble with version 12.0). Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient",MatchSource.WIKI,psi4manual/4.0b2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html
Usability,simpl,simple,"﻿. Introduction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney",MatchSource.WIKI,psi4manual/4.0b2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html
Availability,avail,available,"ate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Depending on the particular modules used, the user may also wish to; cite some of the following references for theoretical, algorithmic,; or implementation contributions specif",MatchSource.WIKI,psi4manual/4.0b2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction.html
Deployability,install,installation,"r Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010). SAPT2, SAPT2+, SAPT2+(3), SAPT2+3. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherrill, J. Chem. Phys. 133, 104107 (2010). Obtaining and Installing PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to the; installation instructions at the PSI4 website above or to the file; psi4/INSTALL distributed with the package. Additional compilation; hints may be found at Psi Compiling. Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or; 12.1 (we have had trouble with version 12.0). Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient",MatchSource.WIKI,psi4manual/4.0b2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction.html
Energy Efficiency,efficient,efficiently,"﻿. Introduction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney",MatchSource.WIKI,psi4manual/4.0b2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction.html
Integrability,rout,routine,"﻿. Introduction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney",MatchSource.WIKI,psi4manual/4.0b2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction.html
Modifiability,adapt,adapted," Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009). SAPT (General); All capabilities of the SAPT module are based on Symmetry Adapted; Perturbation Theory. A good review article for this method is as; follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994). The particular implementation and algorithms for various orders of SAPT; available in PSI4 are provided below.; SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of Interactions in Linear Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010). SAPT2, SAPT2+, SAPT2+(3), SAPT2+3. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherri",MatchSource.WIKI,psi4manual/4.0b2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction.html
Performance,optimiz,optimization,"machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Depending",MatchSource.WIKI,psi4manual/4.0b2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction.html
Testability,test,testing,"r Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010). SAPT2, SAPT2+, SAPT2+(3), SAPT2+3. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherrill, J. Chem. Phys. 133, 104107 (2010). Obtaining and Installing PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to the; installation instructions at the PSI4 website above or to the file; psi4/INSTALL distributed with the package. Additional compilation; hints may be found at Psi Compiling. Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or; 12.1 (we have had trouble with version 12.0). Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient",MatchSource.WIKI,psi4manual/4.0b2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction.html
Usability,simpl,simple,"﻿. Introduction — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney",MatchSource.WIKI,psi4manual/4.0b2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction.html
Availability,avail,available,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Recommendations. Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Previous topic; Basis Sets; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, clas",MatchSource.WIKI,psi4manual/4.0b2/methods-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/methods-1.html
Deployability,configurat,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Recommendations. Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Previous topic; Basis Sets; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, clas",MatchSource.WIKI,psi4manual/4.0b2/methods-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/methods-1.html
Modifiability,config,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Recommendations. Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Previous topic; Basis Sets; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, clas",MatchSource.WIKI,psi4manual/4.0b2/methods-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/methods-1.html
Availability,avail,available,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Recommendations. Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Previous topic; Basis Sets; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, clas",MatchSource.WIKI,psi4manual/4.0b2/methods.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/methods.html
Deployability,configurat,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Recommendations. Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Previous topic; Basis Sets; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, clas",MatchSource.WIKI,psi4manual/4.0b2/methods.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/methods.html
Modifiability,config,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Recommendations. Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Previous topic; Basis Sets; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, clas",MatchSource.WIKI,psi4manual/4.0b2/methods.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/methods.html
Availability,error,error,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP",MatchSource.WIKI,psi4manual/4.0b2/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc-1.html
Deployability,update,updated,"or water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; PSIMRCC Implementation of Mk-MRCC Theory; Next topic; Configuration Interaction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc-1.html
Energy Efficiency,energy,energy,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP",MatchSource.WIKI,psi4manual/4.0b2/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc-1.html
Integrability,interface,interface,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP",MatchSource.WIKI,psi4manual/4.0b2/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc-1.html
Performance,perform,perform,"Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6,",MatchSource.WIKI,psi4manual/4.0b2/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc-1.html
Usability,simpl,simply,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP",MatchSource.WIKI,psi4manual/4.0b2/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc-1.html
Availability,error,error,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP",MatchSource.WIKI,psi4manual/4.0b2/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc.html
Deployability,update,updated,"or water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; PSIMRCC Implementation of Mk-MRCC Theory; Next topic; Configuration Interaction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc.html
Energy Efficiency,energy,energy,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP",MatchSource.WIKI,psi4manual/4.0b2/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc.html
Integrability,interface,interface,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP",MatchSource.WIKI,psi4manual/4.0b2/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc.html
Performance,perform,perform,"Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6,",MatchSource.WIKI,psi4manual/4.0b2/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc.html
Usability,simpl,simply,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP",MatchSource.WIKI,psi4manual/4.0b2/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/mrcc.html
Availability,toler,tolerance,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_c-1.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_c-1.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_c-1.html
Availability,toler,tolerance,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_c.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_c.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_c.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_py-1.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_py-1.html
Integrability,wrap,wrapped,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_py-1.html
Performance,optimiz,optimize,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_py-1.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_py.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_py.html
Integrability,wrap,wrapped,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_py.html
Performance,optimiz,optimize,"﻿. Notes on Options — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/notes_py.html
Availability,avail,available,"﻿. Optimize — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The targ",MatchSource.WIKI,psi4manual/4.0b2/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt-1.html
Deployability,continuous,continuous,"; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). For further discussion of geometry optimization, see; Sec. Geometry Optimization. Previous topic; Counterpoise Correct; Next topic; Frequency; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psit",MatchSource.WIKI,psi4manual/4.0b2/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt-1.html
Energy Efficiency,energy,energy,"﻿. Optimize — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The targ",MatchSource.WIKI,psi4manual/4.0b2/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt-1.html
Modifiability,variab,variables,"﻿. Optimize — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The targ",MatchSource.WIKI,psi4manual/4.0b2/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt-1.html
Performance,optimiz,optimize,"﻿. Optimize — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The targ",MatchSource.WIKI,psi4manual/4.0b2/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt-1.html
Security,access,accesses,"try optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccs",MatchSource.WIKI,psi4manual/4.0b2/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt-1.html
Availability,avail,available,"﻿. Optimize — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The targ",MatchSource.WIKI,psi4manual/4.0b2/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt.html
Deployability,continuous,continuous,"; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). For further discussion of geometry optimization, see; Sec. Geometry Optimization. Previous topic; Counterpoise Correct; Next topic; Frequency; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psit",MatchSource.WIKI,psi4manual/4.0b2/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt.html
Energy Efficiency,energy,energy,"﻿. Optimize — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The targ",MatchSource.WIKI,psi4manual/4.0b2/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt.html
Modifiability,variab,variables,"﻿. Optimize — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The targ",MatchSource.WIKI,psi4manual/4.0b2/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt.html
Performance,optimiz,optimize,"﻿. Optimize — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The targ",MatchSource.WIKI,psi4manual/4.0b2/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt.html
Security,access,accesses,"try optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccs",MatchSource.WIKI,psi4manual/4.0b2/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/opt.html
Availability,redundant,redundant,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking-1.html
Deployability,update,update,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking-1.html
Energy Efficiency,energy,energy,"ence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed dur",MatchSource.WIKI,psi4manual/4.0b2/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking-1.html
Performance,optimiz,optimizations,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking-1.html
Safety,redund,redundant,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking-1.html
Testability,test,tested,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking-1.html
Usability,simpl,simple,"ted. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Generate the internal coord",MatchSource.WIKI,psi4manual/4.0b2/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking-1.html
Availability,redundant,redundant,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking.html
Deployability,update,update,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking.html
Energy Efficiency,energy,energy,"ence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed dur",MatchSource.WIKI,psi4manual/4.0b2/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking.html
Performance,optimiz,optimizations,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking.html
Safety,redund,redundant,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking.html
Testability,test,tested,"﻿. Geometry Optimization — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes",MatchSource.WIKI,psi4manual/4.0b2/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking.html
Usability,simpl,simple,"ted. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Generate the internal coord",MatchSource.WIKI,psi4manual/4.0b2/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking.html
Availability,avail,available,"gure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/tests directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/tests/plugin_aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/tests/plugin_ccsort/plugin_ccsort.cc.in; psi4/tests/plugin_mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/tests/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/tests/plugin_sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directo",MatchSource.WIKI,psi4manual/4.0b2/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html
Deployability,update,updated,"dat — Sample input file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Documentation; for building documentation and Available Plugins; for this file’s final destination. To create a purely Python plugin, create a new plugin directory, then; remove the Makefile, myplugin.cc, and input.dat files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; inputalt.dat as a model for loading the plugin, no recompile ever; necessary. Table Of Contents. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Previous topic; Contributions: Intro to Programming in PSI4; Next topic; Best Practices for Python Functions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html
Energy Efficiency,energy,energy,"user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b2/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html
Integrability,wrap,wrapped,"s: Adding New Functionality to PSI4¶. Modular Approach to Development¶; The redesign of PSI4 into a single-executable changed the way that; code development is done. The standalone nature of modules in previous; versions of Psi made their development very easy, as new functionality; could be implemented almost as a standalone executable, which could easily; be ported into the Psi code when completed. The new design specifies that; these modules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this ",MatchSource.WIKI,psi4manual/4.0b2/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html
Modifiability,plugin,plugin," be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting",MatchSource.WIKI,psi4manual/4.0b2/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html
Performance,load,loaded,"ality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; ",MatchSource.WIKI,psi4manual/4.0b2/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html
Security,access,accessed,"user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b2/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html
Testability,test,tests,"gure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/tests directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/tests/plugin_aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/tests/plugin_ccsort/plugin_ccsort.cc.in; psi4/tests/plugin_mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/tests/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/tests/plugin_sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directo",MatchSource.WIKI,psi4manual/4.0b2/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html
Usability,learn,learn,"dules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In ",MatchSource.WIKI,psi4manual/4.0b2/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html
Availability,avail,available,"gure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/tests directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/tests/plugin_aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/tests/plugin_ccsort/plugin_ccsort.cc.in; psi4/tests/plugin_mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/tests/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/tests/plugin_sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directo",MatchSource.WIKI,psi4manual/4.0b2/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins.html
Deployability,update,updated,"dat — Sample input file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Documentation; for building documentation and Available Plugins; for this file’s final destination. To create a purely Python plugin, create a new plugin directory, then; remove the Makefile, myplugin.cc, and input.dat files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; inputalt.dat as a model for loading the plugin, no recompile ever; necessary. Table Of Contents. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Previous topic; Contributions: Intro to Programming in PSI4; Next topic; Best Practices for Python Functions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins.html
Energy Efficiency,energy,energy,"user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b2/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins.html
Integrability,wrap,wrapped,"s: Adding New Functionality to PSI4¶. Modular Approach to Development¶; The redesign of PSI4 into a single-executable changed the way that; code development is done. The standalone nature of modules in previous; versions of Psi made their development very easy, as new functionality; could be implemented almost as a standalone executable, which could easily; be ported into the Psi code when completed. The new design specifies that; these modules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this ",MatchSource.WIKI,psi4manual/4.0b2/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins.html
Modifiability,plugin,plugin," be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting",MatchSource.WIKI,psi4manual/4.0b2/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins.html
Performance,load,loaded,"ality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; ",MatchSource.WIKI,psi4manual/4.0b2/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins.html
Security,access,accessed,"user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b2/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins.html
Testability,test,tests,"gure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/tests directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/tests/plugin_aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/tests/plugin_ccsort/plugin_ccsort.cc.in; psi4/tests/plugin_mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/tests/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/tests/plugin_sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directo",MatchSource.WIKI,psi4manual/4.0b2/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins.html
Usability,learn,learn,"dules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In ",MatchSource.WIKI,psi4manual/4.0b2/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins.html
Deployability,update,updated,"﻿. Programming: Using the Core Libraries — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Programming: Using the Core Libraries¶. Previous topic; Documentation; Next topic; Emerging Theoretical Methods: Plugins DFADC to RQCHF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/programming-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/programming-1.html
Deployability,update,updated,"﻿. Programming: Using the Core Libraries — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Programming: Using the Core Libraries¶. Previous topic; Documentation; Next topic; Emerging Theoretical Methods: Plugins DFADC to RQCHF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/programming.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/programming.html
Deployability,update,updated,"﻿. Property — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:(float) Total electronic energy in Hartrees. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities.; Check that energy is actually being returned.; Check if some PSI variables ought to be set. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/prop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/prop-1.html
Energy Efficiency,energy,energy,"﻿. Property — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:(float) Total electronic energy in Hartrees. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities.; Check that energy is actually being returned.; Check if some PSI variables ought to be set. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/prop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/prop-1.html
Modifiability,variab,variables,"﻿. Property — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:(float) Total electronic energy in Hartrees. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities.; Check that energy is actually being returned.; Check if some PSI variables ought to be set. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/prop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/prop-1.html
Deployability,update,updated,"﻿. Property — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:(float) Total electronic energy in Hartrees. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities.; Check that energy is actually being returned.; Check if some PSI variables ought to be set. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/prop.html
Energy Efficiency,energy,energy,"﻿. Property — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:(float) Total electronic energy in Hartrees. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities.; Check that energy is actually being returned.; Check if some PSI variables ought to be set. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/prop.html
Modifiability,variab,variables,"﻿. Property — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:(float) Total electronic energy in Hartrees. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities.; Check that energy is actually being returned.; Check if some PSI variables ought to be set. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/prop.html
Deployability,update,updated,"Molecule)arg1) -> None :; docstring; ; set_global_option(...); set_global_option( (str)arg1, (str)arg2) -> bool :; docstring; ; set_global_option( (str)arg1, (float)arg2) -> bool :; docstring; ; set_global_option( (str)arg1, (int)arg2) -> bool :; docstring; ; set_global_option( (str)arg1, (list)arg2 [, (object)arg3]) -> bool; ; set_global_option_python(...); set_global_option_python( (str)arg1, (object)arg2) -> bool :; docstring; ; set_gradient(...); set_gradient( (Matrix)arg1) -> None :; docstring; ; set_local_option(...); set_local_option( (str)arg1, (str)arg2, (str)arg3) -> bool :; docstring; ; set_local_option( (str)arg1, (str)arg2, (float)arg3) -> bool :; docstring; ; set_local_option( (str)arg1, (str)arg2, (int)arg3) -> bool :; docstring; ; set_local_option( (str)arg1, (str)arg2, (list)arg3 [, (object)arg4]) -> bool; ; set_local_option_python(...); set_local_option_python( (str)arg1, (object)arg2) -> None :; docstring; ; set_memory(...); set_memory( (int)arg1) -> None :; docstring; ; set_nthread(...); set_nthread( (int)arg1) -> None :; docstring; ; set_parent_symmetry(...); set_parent_symmetry( (str)arg1) -> None :; docstring; ; set_variable(...); set_variable( (str)arg1, (float)arg2) -> None :; docstring; ; stability(...); stability() -> int :; docstring; ; transqt(...); transqt() -> float :; docstring; ; transqt2(...); transqt2() -> float :; docstring; ; version(...); version() -> str :; docstring. DATA; Ascending = PsiMod.DiagonalizeOrder.Ascending; Balk = PsiMod.PsiReturnType.Balk; Descending = PsiMod.DiagonalizeOrder.Descending; EndLoop = PsiMod.PsiReturnType.EndLoop; Failure = PsiMod.PsiReturnType.Failure; Success = PsiMod.PsiReturnType.Success. Previous topic; Python Driver; Next topic; Appendices; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod-1.html
Energy Efficiency,energy,energy,"hods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Db(...); | Db( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fa(...); | Fa( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fb(...); | Fb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | add_postiteration_callback(...); | add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | add_preiteration_callback(...); | add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | alpha_orbital_space(...); | alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | basisset(...); | basisset( (Wavefunction)arg1) -> BasisSet :; | docstring; | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | gradient(...); | gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | molecule(...); | molecule( (Wavefunction)arg1) -> Molecule :; | docstring; | ; | nirrep(...); | nirrep( (Wavefunction)arg1) -> int :; | docstring; | ; | nmo(...); | nmo( (Wavefunction)arg1) -> int :; | docstring; | ; | nso(...); | nso( (Wavefunction)arg1) -> int :; | docstring; | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ---",MatchSource.WIKI,psi4manual/4.0b2/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod-1.html
Modifiability,inherit,inherited,"rguments; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CdSalcList; Checkpoint; DFChargeFitter; Dimension; Dispersion; Environment; ExternalPotential; FittingMetric; Functional; GridProp; IO; IOManager; IntVector; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OrbitalSpace; PetiteList; PointGroup; Process; PseudoTrial; SOBasisSet; SuperFunctional; SymmetryOperation; Vector; Vector3; View; Wavefunction; HF; RHF(HF, Wavefunction); matrix_vector; ; class Arguments(Boost.Python.instance); | Method resolution order:; | Arguments; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Arguments)arg1, (int)arg2) -> str :; | docstring; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 56; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __add__(...); | __add__( (BasisSet)arg1, (BasisSet)arg2) -> object; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | docstring; | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | docstring; | ; | nbf(...); | nbf( (BasisSet)arg1) -> int :; | docstring; | ; | nprimitive(...); | nprimit",MatchSource.WIKI,psi4manual/4.0b2/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod-1.html
Performance,load,load,"Matrix)arg3]) -> Matrix; | ; | cholesky_factorize(...); | cholesky_factorize( (Matrix)arg1) -> None :; | docstring; | ; | clone(...); | clone( (Matrix)arg1) -> Matrix :; | docstring; | ; | coldim(...); | coldim( (Matrix)arg1) -> Dimension :; | docstring; | ; | cols(...); | cols( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | copy_lower_to_upper(...); | copy_lower_to_upper( (Matrix)arg1) -> None :; | docstring; | ; | copy_upper_to_lower(...); | copy_upper_to_lower( (Matrix)arg1) -> None :; | docstring; | ; | diagonalize(...); | diagonalize( (Matrix)arg1, (Matrix)arg2, (Vector)arg3, (DiagonalizeOrder)arg4) -> None :; | docstring; | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> i",MatchSource.WIKI,psi4manual/4.0b2/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod-1.html
Security,hash,hash,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/4.0b2/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod-1.html
Usability,clear,clear,"defined here:; | ; | __instance_size__ = 368; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new o",MatchSource.WIKI,psi4manual/4.0b2/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod-1.html
Deployability,update,updated,"Molecule)arg1) -> None :; docstring; ; set_global_option(...); set_global_option( (str)arg1, (str)arg2) -> bool :; docstring; ; set_global_option( (str)arg1, (float)arg2) -> bool :; docstring; ; set_global_option( (str)arg1, (int)arg2) -> bool :; docstring; ; set_global_option( (str)arg1, (list)arg2 [, (object)arg3]) -> bool; ; set_global_option_python(...); set_global_option_python( (str)arg1, (object)arg2) -> bool :; docstring; ; set_gradient(...); set_gradient( (Matrix)arg1) -> None :; docstring; ; set_local_option(...); set_local_option( (str)arg1, (str)arg2, (str)arg3) -> bool :; docstring; ; set_local_option( (str)arg1, (str)arg2, (float)arg3) -> bool :; docstring; ; set_local_option( (str)arg1, (str)arg2, (int)arg3) -> bool :; docstring; ; set_local_option( (str)arg1, (str)arg2, (list)arg3 [, (object)arg4]) -> bool; ; set_local_option_python(...); set_local_option_python( (str)arg1, (object)arg2) -> None :; docstring; ; set_memory(...); set_memory( (int)arg1) -> None :; docstring; ; set_nthread(...); set_nthread( (int)arg1) -> None :; docstring; ; set_parent_symmetry(...); set_parent_symmetry( (str)arg1) -> None :; docstring; ; set_variable(...); set_variable( (str)arg1, (float)arg2) -> None :; docstring; ; stability(...); stability() -> int :; docstring; ; transqt(...); transqt() -> float :; docstring; ; transqt2(...); transqt2() -> float :; docstring; ; version(...); version() -> str :; docstring. DATA; Ascending = PsiMod.DiagonalizeOrder.Ascending; Balk = PsiMod.PsiReturnType.Balk; Descending = PsiMod.DiagonalizeOrder.Descending; EndLoop = PsiMod.PsiReturnType.EndLoop; Failure = PsiMod.PsiReturnType.Failure; Success = PsiMod.PsiReturnType.Success. Previous topic; Python Driver; Next topic; Appendices; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod.html
Energy Efficiency,energy,energy,"hods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Db(...); | Db( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fa(...); | Fa( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fb(...); | Fb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | add_postiteration_callback(...); | add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | add_preiteration_callback(...); | add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | alpha_orbital_space(...); | alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | basisset(...); | basisset( (Wavefunction)arg1) -> BasisSet :; | docstring; | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | gradient(...); | gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | molecule(...); | molecule( (Wavefunction)arg1) -> Molecule :; | docstring; | ; | nirrep(...); | nirrep( (Wavefunction)arg1) -> int :; | docstring; | ; | nmo(...); | nmo( (Wavefunction)arg1) -> int :; | docstring; | ; | nso(...); | nso( (Wavefunction)arg1) -> int :; | docstring; | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ---",MatchSource.WIKI,psi4manual/4.0b2/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod.html
Modifiability,inherit,inherited,"rguments; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CdSalcList; Checkpoint; DFChargeFitter; Dimension; Dispersion; Environment; ExternalPotential; FittingMetric; Functional; GridProp; IO; IOManager; IntVector; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OrbitalSpace; PetiteList; PointGroup; Process; PseudoTrial; SOBasisSet; SuperFunctional; SymmetryOperation; Vector; Vector3; View; Wavefunction; HF; RHF(HF, Wavefunction); matrix_vector; ; class Arguments(Boost.Python.instance); | Method resolution order:; | Arguments; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Arguments)arg1, (int)arg2) -> str :; | docstring; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 56; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __add__(...); | __add__( (BasisSet)arg1, (BasisSet)arg2) -> object; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | docstring; | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | docstring; | ; | nbf(...); | nbf( (BasisSet)arg1) -> int :; | docstring; | ; | nprimitive(...); | nprimit",MatchSource.WIKI,psi4manual/4.0b2/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod.html
Performance,load,load,"Matrix)arg3]) -> Matrix; | ; | cholesky_factorize(...); | cholesky_factorize( (Matrix)arg1) -> None :; | docstring; | ; | clone(...); | clone( (Matrix)arg1) -> Matrix :; | docstring; | ; | coldim(...); | coldim( (Matrix)arg1) -> Dimension :; | docstring; | ; | cols(...); | cols( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | copy_lower_to_upper(...); | copy_lower_to_upper( (Matrix)arg1) -> None :; | docstring; | ; | copy_upper_to_lower(...); | copy_upper_to_lower( (Matrix)arg1) -> None :; | docstring; | ; | diagonalize(...); | diagonalize( (Matrix)arg1, (Matrix)arg2, (Vector)arg3, (DiagonalizeOrder)arg4) -> None :; | docstring; | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> i",MatchSource.WIKI,psi4manual/4.0b2/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod.html
Security,hash,hash,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/4.0b2/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod.html
Usability,clear,clear,"defined here:; | ; | __instance_size__ = 368; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new o",MatchSource.WIKI,psi4manual/4.0b2/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimod.html
Availability,avail,available,"energy of the all-symmetric state. The FOLLOW_ROOT option may be used to follow different roots of the effective Hamiltonian. A value of 1 instructs PSIMRCC to follow the solution with the lowest energy given a certain set of determinants.; molecule o2 {; 0 3; O; O 1 2.265122720724; units au; }; set {; basis cc-pvtz; }; set mcscf {; reference rohf; docc [3,0,0,0,0,2,1,1] # Doubly occupied MOs; socc [0,0,1,1,0,0,0,0] # Singly occupied MOs; }; set psimrcc {; corr_wfn ccsd # Do Mk-MRCCSD; frozen_docc [1,0,0,0,0,1,0,0] # Frozen MOs; restricted_docc [2,0,0,0,0,1,1,1] # Doubly occupied MOs; active [0,0,1,1,0,0,0,0] # Active MOs; frozen_uocc [0,0,0,0,0,0,0,0] # Frozen virtual MOs; corr_multp 1 # Select the Ms = 0 component; root 1; wfn_sym B1g # Select the B1g state; }; energy('psimrcc'). Note that the oxygen molecule has 16 electrons (including core), while; the docc array contains only 7 doubly-occupied orbitals (or 14; electrons). Hence, two more electrons are available to place into; the active space (given by active), which consists of 2 orbitals.; Thus there are two active electrons in two orbitals. In this particular; example, we are using standard ROHF orbitals for the Mk-MRCCSD procedure,; rather than TCSCF orbitals. Nevertheless, with the present code,; these orbitals must be provided through the MCSCF module, as specified in; the; set mcscf section above. Orbital ordering and selection of the model space¶; The reference determinants are specified in PSIMRCC; via occupational numbers. PSIMRCC requires that four arrays be specified; for this purpose. Frozen doubly occupied orbitals (FROZEN_DOCC) are doubly occupied in each reference determinant and are not correlated in the MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly occupied in each reference determinant and are correlated in the MRCC procedure.; Active orbitals (ACTIVE) are partially occupied in each reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in all ref",MatchSource.WIKI,psi4manual/4.0b2/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc-1.html
Deployability,configurat,configuration,"RCC effective Hamiltonian matrix that allows the various reference determinants to interact. As an example of how this works the Mk-MRCCSD excitation operators for each reference is contracted two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian, . where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to; a complete-active-space configuration interaction (CAS-CI) reference; with n electrons in m orbitals. If the user specifies active spaces; that do not fit these limitations, then the code will still run, but; some relevant determinants will be missing, and the answer obtained; will be an approximation to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization.; Hence, the references used might be considered CAS-CI references,; but not CASSCF references (CASSCF implies that the orbitals have been; optimized specifically to minimize the energy of the CAS-CI reference).; However, if one wishes to use two-configuration self-consistent-field; (TCSCF) orbitals, those can be obtained using the multi-configuration; self-consistent-field (MCSCF) component of PSIMRCC (specifying; REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use; RHF or ROHF orbitals as input to PSIMRCC. Due to a current limitation; in the code, one must obtain orbitals using PSIMRCC’s MC",MatchSource.WIKI,psi4manual/4.0b2/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc-1.html
Energy Efficiency,power,powerful,"﻿. PSIMRCC Implementation of Mk-MRCC Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». PSIMRCC Implementation of Mk-MRCC Theory¶; Code author: Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly accurate energies and properties of electronic states that require a multiconfigurational zeroth-order wavefunction. The PSIMRCC module contained in PSI4 implements the state-specific multireference coupled-cluster approach of Mukherjee and co-workers (Mk-MRCC). This method is implemented and shown to be a powerful tool in [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the wavefunction, . where are the reference determinants, are reference-specific excitation operators, and are expansion coefficients obtained through diagonalization of the Mk-MRCC effective Hamiltonian matrix that allows the various reference determinants to interact. As an example of how this works the Mk-MRCCSD excitation operators for each reference is contracted two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian, . where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), e",MatchSource.WIKI,psi4manual/4.0b2/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc-1.html
Integrability,contract,contracted," Code author: Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly accurate energies and properties of electronic states that require a multiconfigurational zeroth-order wavefunction. The PSIMRCC module contained in PSI4 implements the state-specific multireference coupled-cluster approach of Mukherjee and co-workers (Mk-MRCC). This method is implemented and shown to be a powerful tool in [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the wavefunction, . where are the reference determinants, are reference-specific excitation operators, and are expansion coefficients obtained through diagonalization of the Mk-MRCC effective Hamiltonian matrix that allows the various reference determinants to interact. As an example of how this works the Mk-MRCCSD excitation operators for each reference is contracted two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian, . where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to; a complete-active-space configuration interaction (CAS-CI) reference; with n electrons in m orbitals. If the user specifies active spaces; that do not fit these limitations, then the cod",MatchSource.WIKI,psi4manual/4.0b2/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc-1.html
Modifiability,config,configuration,"RCC effective Hamiltonian matrix that allows the various reference determinants to interact. As an example of how this works the Mk-MRCCSD excitation operators for each reference is contracted two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian, . where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to; a complete-active-space configuration interaction (CAS-CI) reference; with n electrons in m orbitals. If the user specifies active spaces; that do not fit these limitations, then the code will still run, but; some relevant determinants will be missing, and the answer obtained; will be an approximation to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization.; Hence, the references used might be considered CAS-CI references,; but not CASSCF references (CASSCF implies that the orbitals have been; optimized specifically to minimize the energy of the CAS-CI reference).; However, if one wishes to use two-configuration self-consistent-field; (TCSCF) orbitals, those can be obtained using the multi-configuration; self-consistent-field (MCSCF) component of PSIMRCC (specifying; REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use; RHF or ROHF orbitals as input to PSIMRCC. Due to a current limitation; in the code, one must obtain orbitals using PSIMRCC’s MC",MatchSource.WIKI,psi4manual/4.0b2/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc-1.html
Performance,perform,perform,"k-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to; a complete-active-space configuration interaction (CAS-CI) reference; with n electrons in m orbitals. If the user specifies active spaces; that do not fit these limitations, then the code will still run, but; some relevant determinants will be missing, and the answer obtained; will be an approximation to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization.; Hence, the references used might be considered CAS-CI references,; but not CASSCF references (CASSCF implies that the orbitals have been; optimized specifically to minimize the energy of the CAS-CI reference).; However, if one wishes to use two-configuration self-consistent-field; (TCSCF) orbitals, those can be obtained using the multi-configuration; self-consistent-field (MCSCF) component of PSIMRCC (specifying; REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use; RHF or ROHF orbitals as input to PSIMRCC. Due to a current limitation; in the code, one must obtain orbitals using PSIMRCC’s MCSCF module; regardless of what orbital type is chosen, twocon, rhf, or; rohf. An example of the MCSCF input is given below.; PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin; states (e.g., triplets), but in general, not all the required",MatchSource.WIKI,psi4manual/4.0b2/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc-1.html
Availability,avail,available,"energy of the all-symmetric state. The FOLLOW_ROOT option may be used to follow different roots of the effective Hamiltonian. A value of 1 instructs PSIMRCC to follow the solution with the lowest energy given a certain set of determinants.; molecule o2 {; 0 3; O; O 1 2.265122720724; units au; }; set {; basis cc-pvtz; }; set mcscf {; reference rohf; docc [3,0,0,0,0,2,1,1] # Doubly occupied MOs; socc [0,0,1,1,0,0,0,0] # Singly occupied MOs; }; set psimrcc {; corr_wfn ccsd # Do Mk-MRCCSD; frozen_docc [1,0,0,0,0,1,0,0] # Frozen MOs; restricted_docc [2,0,0,0,0,1,1,1] # Doubly occupied MOs; active [0,0,1,1,0,0,0,0] # Active MOs; frozen_uocc [0,0,0,0,0,0,0,0] # Frozen virtual MOs; corr_multp 1 # Select the Ms = 0 component; root 1; wfn_sym B1g # Select the B1g state; }; energy('psimrcc'). Note that the oxygen molecule has 16 electrons (including core), while; the docc array contains only 7 doubly-occupied orbitals (or 14; electrons). Hence, two more electrons are available to place into; the active space (given by active), which consists of 2 orbitals.; Thus there are two active electrons in two orbitals. In this particular; example, we are using standard ROHF orbitals for the Mk-MRCCSD procedure,; rather than TCSCF orbitals. Nevertheless, with the present code,; these orbitals must be provided through the MCSCF module, as specified in; the; set mcscf section above. Orbital ordering and selection of the model space¶; The reference determinants are specified in PSIMRCC; via occupational numbers. PSIMRCC requires that four arrays be specified; for this purpose. Frozen doubly occupied orbitals (FROZEN_DOCC) are doubly occupied in each reference determinant and are not correlated in the MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly occupied in each reference determinant and are correlated in the MRCC procedure.; Active orbitals (ACTIVE) are partially occupied in each reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in all ref",MatchSource.WIKI,psi4manual/4.0b2/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc.html
Deployability,configurat,configuration,"RCC effective Hamiltonian matrix that allows the various reference determinants to interact. As an example of how this works the Mk-MRCCSD excitation operators for each reference is contracted two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian, . where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to; a complete-active-space configuration interaction (CAS-CI) reference; with n electrons in m orbitals. If the user specifies active spaces; that do not fit these limitations, then the code will still run, but; some relevant determinants will be missing, and the answer obtained; will be an approximation to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization.; Hence, the references used might be considered CAS-CI references,; but not CASSCF references (CASSCF implies that the orbitals have been; optimized specifically to minimize the energy of the CAS-CI reference).; However, if one wishes to use two-configuration self-consistent-field; (TCSCF) orbitals, those can be obtained using the multi-configuration; self-consistent-field (MCSCF) component of PSIMRCC (specifying; REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use; RHF or ROHF orbitals as input to PSIMRCC. Due to a current limitation; in the code, one must obtain orbitals using PSIMRCC’s MC",MatchSource.WIKI,psi4manual/4.0b2/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc.html
Energy Efficiency,power,powerful,"﻿. PSIMRCC Implementation of Mk-MRCC Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». PSIMRCC Implementation of Mk-MRCC Theory¶; Code author: Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly accurate energies and properties of electronic states that require a multiconfigurational zeroth-order wavefunction. The PSIMRCC module contained in PSI4 implements the state-specific multireference coupled-cluster approach of Mukherjee and co-workers (Mk-MRCC). This method is implemented and shown to be a powerful tool in [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the wavefunction, . where are the reference determinants, are reference-specific excitation operators, and are expansion coefficients obtained through diagonalization of the Mk-MRCC effective Hamiltonian matrix that allows the various reference determinants to interact. As an example of how this works the Mk-MRCCSD excitation operators for each reference is contracted two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian, . where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), e",MatchSource.WIKI,psi4manual/4.0b2/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc.html
Integrability,contract,contracted," Code author: Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly accurate energies and properties of electronic states that require a multiconfigurational zeroth-order wavefunction. The PSIMRCC module contained in PSI4 implements the state-specific multireference coupled-cluster approach of Mukherjee and co-workers (Mk-MRCC). This method is implemented and shown to be a powerful tool in [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the wavefunction, . where are the reference determinants, are reference-specific excitation operators, and are expansion coefficients obtained through diagonalization of the Mk-MRCC effective Hamiltonian matrix that allows the various reference determinants to interact. As an example of how this works the Mk-MRCCSD excitation operators for each reference is contracted two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian, . where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to; a complete-active-space configuration interaction (CAS-CI) reference; with n electrons in m orbitals. If the user specifies active spaces; that do not fit these limitations, then the cod",MatchSource.WIKI,psi4manual/4.0b2/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc.html
Modifiability,config,configuration,"RCC effective Hamiltonian matrix that allows the various reference determinants to interact. As an example of how this works the Mk-MRCCSD excitation operators for each reference is contracted two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian, . where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to; a complete-active-space configuration interaction (CAS-CI) reference; with n electrons in m orbitals. If the user specifies active spaces; that do not fit these limitations, then the code will still run, but; some relevant determinants will be missing, and the answer obtained; will be an approximation to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization.; Hence, the references used might be considered CAS-CI references,; but not CASSCF references (CASSCF implies that the orbitals have been; optimized specifically to minimize the energy of the CAS-CI reference).; However, if one wishes to use two-configuration self-consistent-field; (TCSCF) orbitals, those can be obtained using the multi-configuration; self-consistent-field (MCSCF) component of PSIMRCC (specifying; REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use; RHF or ROHF orbitals as input to PSIMRCC. Due to a current limitation; in the code, one must obtain orbitals using PSIMRCC’s MC",MatchSource.WIKI,psi4manual/4.0b2/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc.html
Performance,perform,perform,"k-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than; two excitations. In practice, this usually means that the active space; can have at most two particles, or at most two holes. Examples would; include CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to; a complete-active-space configuration interaction (CAS-CI) reference; with n electrons in m orbitals. If the user specifies active spaces; that do not fit these limitations, then the code will still run, but; some relevant determinants will be missing, and the answer obtained; will be an approximation to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization.; Hence, the references used might be considered CAS-CI references,; but not CASSCF references (CASSCF implies that the orbitals have been; optimized specifically to minimize the energy of the CAS-CI reference).; However, if one wishes to use two-configuration self-consistent-field; (TCSCF) orbitals, those can be obtained using the multi-configuration; self-consistent-field (MCSCF) component of PSIMRCC (specifying; REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use; RHF or ROHF orbitals as input to PSIMRCC. Due to a current limitation; in the code, one must obtain orbitals using PSIMRCC’s MCSCF module; regardless of what orbital type is chosen, twocon, rhf, or; rohf. An example of the MCSCF input is given below.; PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin; states (e.g., triplets), but in general, not all the required",MatchSource.WIKI,psi4manual/4.0b2/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psimrcc.html
Deployability,update,updated,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Function Intercalls; Embarrassing Parallelism. Previous topic; Geometry Optimization; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/psithonfunc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithonfunc-1.html
Energy Efficiency,efficient,efficient,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Function Intercalls; Embarrassing Parallelism. Previous topic; Geometry Optimization; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/psithonfunc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithonfunc-1.html
Performance,perform,performed,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Function Intercalls; Embarrassing Parallelism. Previous topic; Geometry Optimization; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/psithonfunc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithonfunc-1.html
Deployability,update,updated,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Function Intercalls; Embarrassing Parallelism. Previous topic; Geometry Optimization; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/psithonfunc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithonfunc.html
Energy Efficiency,efficient,efficient,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Function Intercalls; Embarrassing Parallelism. Previous topic; Geometry Optimization; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/psithonfunc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithonfunc.html
Performance,perform,performed,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Function Intercalls; Embarrassing Parallelism. Previous topic; Geometry Optimization; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/psithonfunc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithonfunc.html
Availability,avail,available,"some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # ",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Deployability,integrat,integrated,"in Avals:; h2o.A = A; energy('df-mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('DF-MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-DF-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; Among these are automated computations of interaction energies through; cp(), of a model chemistry applied to a database of systems through; database(), and of several model chemistries together approximating greater; accuracy through cbs().; These are discussed separately in section Psithon Functions: Invoking a Calculation.; Note that the options documented for Python functions are placed as arguments; in the command that calls the function; not in the set globals block or with any other set command. Table Of Contents. Psithon: Structuring an Input File; Physical Constants; Molecule Specification; Multiple Molecules; Molecule Keywords. Geometries from the PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Job Control; Assigning Basis Sets; Memory Specification; Return Values and PSI Variables; Loops; Tables of Results; Python Wrappers. Previous topic; Configuration: Preparing ",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Energy Efficiency,meter,meters," if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # Atomic mass units to kg conversion factor ; psi_au2amu = 5.485799097E-4 # Atomic units (m$@@e$) to atomic mass units conversion factor ; psi_hartree2J = 4.359744E-18 # Hartree to joule conversion factor ; psi_hartree2aJ = 4.359744 # Hartree to attojoule (10$^{-18}$J) conversion factor ; psi_cal2J = 4.184 # Calorie to joule conversion factor ; psi_dipmom_au2si = 8.47835281E-30 # Atomic units to SI units (Cm) conversion factor for dipoles ; psi_dipmom_au2debye = 2.54174623 # Atomic units to Debye conversion factor for dipoles ; psi_dipmom_debye2si = 3.335640952E-30 # Debye to SI units (Cm) conversion factor for dipoles ; psi_c_au = 137.035999679 # Speed of light in atomic units ; psi_hartree2ev = 27.21138 # Hartree to eV conversion factor ; psi_hartree2wavenumbers = 219474.6 # Hartree to cm$^",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Integrability,depend,dependent,"he symmetry keyword can be used when inputting the molecule; (see Sec. Molecule Specification). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with symmetry in , the; axis can be chosen as either the , the , or the ; these can; be specified by requesing the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For symmetry the labels csx, csy, and; csz request the , , and planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the ; state of water cation, we can specify. SOCC = [0, 0, 1, 0]; in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:. SOCC = [0, 1]; Some caution is required, however. The state can be obtained with; the. SOCC = [1, 0, 0, 0]; specification, which would become. SOCC = [1, 0]; under the above-mentioned reduction in symmetry. The state,; whose singly-occupied orbitals are. SOCC = [0, 0, 0, 1]; would be mapped to. SOCC = [1, 0]; which is the same occupation as the state. In this case, the; state is lower in energy, and is not problematic. The distorted; geometries for the state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these sta",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Modifiability,variab,variables,"tation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversio",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Performance,perform,performed,"﻿. Psithon: Structuring an Input File — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_b",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Safety,detect,detected,"he activate keyword is provided. Using this keyword, the above input; file can be equivalently written as follows:; molecule h2{; H; H 1 0.9; }. molecule h{; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf'). activate(h); set basis cc-pvdz; set reference uhf; energy('scf'). Note that whenever the molecule is changed, the basis set must be specified; again. The following section provides more details about the job control; keywords used in the above examples. Molecule Keywords¶; In addition to specifying the geometry, additional information can be provided; in the molecule block. If two integers are encountered on any line of the; molecule block, they are interpreted as the molecular charge and multiplicity; (), respectively. The symmetry can be specified by a line reading; symmetry symbol, where symbol is; the Schönflies symbol of the (Abelian) point group to use for the; computation; see Sec. Symmetry for more details. This need not be; specified, as the molecular symmetry is automatically detected by PSI4.; Certain computations require that the molecule is not reoriented; this can be; achieved by adding either no_reorient or noreorient. By default,; Ångström units are used; this is changed by adding a line that reads; units spec, where spec is one of ang,; angstrom, a.u., au, or bohr. Geometries from the PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, PSI4 can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem] database.; For example, to run a computation on benzene, we can use the following molecule specification:;",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Security,access,accessed,"y 2000 Mb. or. memory 2000000 Kb. One convenient way to override the PSI4 default memory is to place a memory; command in the ~/.psi4rc file, as detailed in Sec. Scratch Files and the ~/.psi4rc File. Return Values and PSI Variables¶; To harness the power of Python, PSI4 makes the most pertinent results of; each computation are made available to the Python interpreter for; post-processing. To demonstrate, we can embellish the previous example of H2; and H atom:; molecule h2{; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'). molecule h{; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol*(2*h_energy - h2_energy); print""De=%f""%D_e. The energy() function returns the final result of the computation, which we; assign to a Python variable. The two energies are then converted to a; dissociation energy and printed to the output file using standard Python; notation. Sometimes there are multiple quantities of interest; these can be; accessed through the get_variable() function. For example, after performing a; density fitted MP2 computation, both the spin component scaled energy and the; unscaled MP2 energy are made available:; e_mp2=get_variable('DF-MP2 TOTAL ENERGY'); e_scs_mp2=get_variable('SCS-DF-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of; a calculation. The values for all can be printed in the output file; with the input file command print_variables(). Note that; PSI variables accumulate over a PSI4 instance and are not cleared by; clean(). So if you run in a single input file a STO-3G FCI; followed by a aug-cc-pVQZ SCF followed by a print_variables(); command, the last will include both SCF TOTAL ENERGY and; FCI TOTAL ENERGY. Don’t get excited that you got a high-quality calculation; cheaply. Refer to Appendix PSI Variables by Module for a listing of the; variables set by each module. Loops¶; Python provides many control structures, which can be used",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Testability,test,test,"﻿. Psithon: Structuring an Input File — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_b",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Usability,simpl,simpler,"﻿. Psithon: Structuring an Input File — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_b",MatchSource.WIKI,psi4manual/4.0b2/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html
Availability,avail,available,"some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # ",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Deployability,integrat,integrated,"in Avals:; h2o.A = A; energy('df-mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('DF-MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-DF-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; Among these are automated computations of interaction energies through; cp(), of a model chemistry applied to a database of systems through; database(), and of several model chemistries together approximating greater; accuracy through cbs().; These are discussed separately in section Psithon Functions: Invoking a Calculation.; Note that the options documented for Python functions are placed as arguments; in the command that calls the function; not in the set globals block or with any other set command. Table Of Contents. Psithon: Structuring an Input File; Physical Constants; Molecule Specification; Multiple Molecules; Molecule Keywords. Geometries from the PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Job Control; Assigning Basis Sets; Memory Specification; Return Values and PSI Variables; Loops; Tables of Results; Python Wrappers. Previous topic; Configuration: Preparing ",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Energy Efficiency,meter,meters," if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # Atomic mass units to kg conversion factor ; psi_au2amu = 5.485799097E-4 # Atomic units (m$@@e$) to atomic mass units conversion factor ; psi_hartree2J = 4.359744E-18 # Hartree to joule conversion factor ; psi_hartree2aJ = 4.359744 # Hartree to attojoule (10$^{-18}$J) conversion factor ; psi_cal2J = 4.184 # Calorie to joule conversion factor ; psi_dipmom_au2si = 8.47835281E-30 # Atomic units to SI units (Cm) conversion factor for dipoles ; psi_dipmom_au2debye = 2.54174623 # Atomic units to Debye conversion factor for dipoles ; psi_dipmom_debye2si = 3.335640952E-30 # Debye to SI units (Cm) conversion factor for dipoles ; psi_c_au = 137.035999679 # Speed of light in atomic units ; psi_hartree2ev = 27.21138 # Hartree to eV conversion factor ; psi_hartree2wavenumbers = 219474.6 # Hartree to cm$^",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Integrability,depend,dependent,"he symmetry keyword can be used when inputting the molecule; (see Sec. Molecule Specification). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with symmetry in , the; axis can be chosen as either the , the , or the ; these can; be specified by requesing the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For symmetry the labels csx, csy, and; csz request the , , and planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the ; state of water cation, we can specify. SOCC = [0, 0, 1, 0]; in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:. SOCC = [0, 1]; Some caution is required, however. The state can be obtained with; the. SOCC = [1, 0, 0, 0]; specification, which would become. SOCC = [1, 0]; under the above-mentioned reduction in symmetry. The state,; whose singly-occupied orbitals are. SOCC = [0, 0, 0, 1]; would be mapped to. SOCC = [1, 0]; which is the same occupation as the state. In this case, the; state is lower in energy, and is not problematic. The distorted; geometries for the state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these sta",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Modifiability,variab,variables,"tation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversio",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Performance,perform,performed,"﻿. Psithon: Structuring an Input File — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_b",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Safety,detect,detected,"he activate keyword is provided. Using this keyword, the above input; file can be equivalently written as follows:; molecule h2{; H; H 1 0.9; }. molecule h{; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf'). activate(h); set basis cc-pvdz; set reference uhf; energy('scf'). Note that whenever the molecule is changed, the basis set must be specified; again. The following section provides more details about the job control; keywords used in the above examples. Molecule Keywords¶; In addition to specifying the geometry, additional information can be provided; in the molecule block. If two integers are encountered on any line of the; molecule block, they are interpreted as the molecular charge and multiplicity; (), respectively. The symmetry can be specified by a line reading; symmetry symbol, where symbol is; the Schönflies symbol of the (Abelian) point group to use for the; computation; see Sec. Symmetry for more details. This need not be; specified, as the molecular symmetry is automatically detected by PSI4.; Certain computations require that the molecule is not reoriented; this can be; achieved by adding either no_reorient or noreorient. By default,; Ångström units are used; this is changed by adding a line that reads; units spec, where spec is one of ang,; angstrom, a.u., au, or bohr. Geometries from the PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, PSI4 can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem] database.; For example, to run a computation on benzene, we can use the following molecule specification:;",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Security,access,accessed,"y 2000 Mb. or. memory 2000000 Kb. One convenient way to override the PSI4 default memory is to place a memory; command in the ~/.psi4rc file, as detailed in Sec. Scratch Files and the ~/.psi4rc File. Return Values and PSI Variables¶; To harness the power of Python, PSI4 makes the most pertinent results of; each computation are made available to the Python interpreter for; post-processing. To demonstrate, we can embellish the previous example of H2; and H atom:; molecule h2{; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'). molecule h{; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol*(2*h_energy - h2_energy); print""De=%f""%D_e. The energy() function returns the final result of the computation, which we; assign to a Python variable. The two energies are then converted to a; dissociation energy and printed to the output file using standard Python; notation. Sometimes there are multiple quantities of interest; these can be; accessed through the get_variable() function. For example, after performing a; density fitted MP2 computation, both the spin component scaled energy and the; unscaled MP2 energy are made available:; e_mp2=get_variable('DF-MP2 TOTAL ENERGY'); e_scs_mp2=get_variable('SCS-DF-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of; a calculation. The values for all can be printed in the output file; with the input file command print_variables(). Note that; PSI variables accumulate over a PSI4 instance and are not cleared by; clean(). So if you run in a single input file a STO-3G FCI; followed by a aug-cc-pVQZ SCF followed by a print_variables(); command, the last will include both SCF TOTAL ENERGY and; FCI TOTAL ENERGY. Don’t get excited that you got a high-quality calculation; cheaply. Refer to Appendix PSI Variables by Module for a listing of the; variables set by each module. Loops¶; Python provides many control structures, which can be used",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Testability,test,test,"﻿. Psithon: Structuring an Input File — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_b",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Usability,simpl,simpler,"﻿. Psithon: Structuring an Input File — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_b",MatchSource.WIKI,psi4manual/4.0b2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput.html
Deployability,update,updated,"﻿. Python Module Index — PSI4 [beta2] documentation. Navigation. index. modules |; PSI4 [beta2] » . Python Module Index. a | ; b | ; c | ; d | ; f | ; h | ; i | ; j | ; m | ; n | ; p | ; q | ; r | ; s | ; t | ; u | ; w.  . a. ACENES. aliases.  . b. BAKERJCC93. BAKERJCC96. BASIC.  . c. CORE.  . d. driver.  . f. frac. functional.  . h. HBC6. HSG. HTBH.  . i. input.  . j. JSCH.  . m. molutil.  . n. NBC10. NHTBH.  . p. physconst. plugin_testparse.    ; plugin_testparse.__init__. proc. procutil. psiexceptions. pubchem.  . q. qmmm.  . r. RGC10.  . s. S22. S22by5. S66.  . t. text.  . u. util.  . w. wrappers. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/py-modindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/py-modindex.html
Integrability,wrap,wrappers,"﻿. Python Module Index — PSI4 [beta2] documentation. Navigation. index. modules |; PSI4 [beta2] » . Python Module Index. a | ; b | ; c | ; d | ; f | ; h | ; i | ; j | ; m | ; n | ; p | ; q | ; r | ; s | ; t | ; u | ; w.  . a. ACENES. aliases.  . b. BAKERJCC93. BAKERJCC96. BASIC.  . c. CORE.  . d. driver.  . f. frac. functional.  . h. HBC6. HSG. HTBH.  . i. input.  . j. JSCH.  . m. molutil.  . n. NBC10. NHTBH.  . p. physconst. plugin_testparse.    ; plugin_testparse.__init__. proc. procutil. psiexceptions. pubchem.  . q. qmmm.  . r. RGC10.  . s. S22. S22by5. S66.  . t. text.  . u. util.  . w. wrappers. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/py-modindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/py-modindex.html
Availability,avail,available,"﻿. Defining a Method Alias — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf +",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias-1.html
Deployability,update,updated," PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; energy('mp2.5'). Previous topic; User-Defined Basis Sets; Next topic; Creating a Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias-1.html
Energy Efficiency,energy,energy,"﻿. Defining a Method Alias — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf +",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias-1.html
Modifiability,variab,variables,"﻿. Defining a Method Alias — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf +",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias-1.html
Performance,optimiz,optimizer,"n/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 ",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias-1.html
Security,access,accessed,"﻿. Defining a Method Alias — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf +",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias-1.html
Availability,avail,available,"﻿. Defining a Method Alias — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf +",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias.html
Deployability,update,updated," PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; energy('mp2.5'). Previous topic; User-Defined Basis Sets; Next topic; Creating a Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias.html
Energy Efficiency,energy,energy,"﻿. Defining a Method Alias — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf +",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias.html
Modifiability,variab,variables,"﻿. Defining a Method Alias — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf +",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias.html
Performance,optimiz,optimizer,"n/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 ",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias.html
Security,access,accessed,"﻿. Defining a Method Alias — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf +",MatchSource.WIKI,psi4manual/4.0b2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddalias.html
Deployability,update,updated," for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.file, where the path can be either relative or absolute.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one above that includes; [basis name], PUREAM; value, and element basis set specifications. Hash signs denote comments.; Copy the section into a PSI4 input file and surround it with the command basis {...},; as shown below.; Multiple basis sets can be specified by adding additional sections within the surrounding brackets.; basis {; # basis set section like in snippet above goes here; # additional basis set sections follow; }. Previous topic; Customization: Adding Simple Extensions; Next topic; Defining a Method Alias; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickaddbasis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddbasis-1.html
Integrability,rout,routes,"﻿. User-Defined Basis Sets — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. User-Defined Basis Sets¶; There are three routes by which a basis set in G94 format can be introduced to PSI4’s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; Name the file with the name of the basis set and a .gbs extension, after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/lib/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/lib/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/lib/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.file, where the p",MatchSource.WIKI,psi4manual/4.0b2/quickaddbasis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddbasis-1.html
Deployability,update,updated," for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.file, where the path can be either relative or absolute.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one above that includes; [basis name], PUREAM; value, and element basis set specifications. Hash signs denote comments.; Copy the section into a PSI4 input file and surround it with the command basis {...},; as shown below.; Multiple basis sets can be specified by adding additional sections within the surrounding brackets.; basis {; # basis set section like in snippet above goes here; # additional basis set sections follow; }. Previous topic; Customization: Adding Simple Extensions; Next topic; Defining a Method Alias; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickaddbasis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddbasis.html
Integrability,rout,routes,"﻿. User-Defined Basis Sets — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. User-Defined Basis Sets¶; There are three routes by which a basis set in G94 format can be introduced to PSI4’s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; Name the file with the name of the basis set and a .gbs extension, after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/lib/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/lib/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/lib/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.file, where the p",MatchSource.WIKI,psi4manual/4.0b2/quickaddbasis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickaddbasis.html
Availability,avail,available,"le molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (int",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase-1.html
Deployability,update,updated," for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.pl. Move into the directory where all your xyz files are located. Run the; script in place, probably as; $PSIDATADIR/scripts/ixyz2database.pl. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.pl script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase-1.html
Energy Efficiency,energy,energy,"﻿. Creating a Database — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as pyth",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase-1.html
Integrability,rout,route," for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.pl. Move into the directory where all your xyz files are located. Run the; script in place, probably as; $PSIDATADIR/scripts/ixyz2database.pl. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.pl script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase-1.html
Modifiability,variab,variable," for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.pl. Move into the directory where all your xyz files are located. Run the; script in place, probably as; $PSIDATADIR/scripts/ixyz2database.pl. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.pl script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase-1.html
Usability,simpl,simply,"essary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an examp",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase-1.html
Availability,avail,available,"le molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (int",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase.html
Deployability,update,updated," for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.pl. Move into the directory where all your xyz files are located. Run the; script in place, probably as; $PSIDATADIR/scripts/ixyz2database.pl. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.pl script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase.html
Energy Efficiency,energy,energy,"﻿. Creating a Database — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as pyth",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase.html
Integrability,rout,route," for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.pl. Move into the directory where all your xyz files are located. Run the; script in place, probably as; $PSIDATADIR/scripts/ixyz2database.pl. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.pl script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase.html
Modifiability,variab,variable," for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.pl. Move into the directory where all your xyz files are located. Run the; script in place, probably as; $PSIDATADIR/scripts/ixyz2database.pl. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.pl script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Customization: Adding Simple Extensions ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase.html
Usability,simpl,simply,"essary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an examp",MatchSource.WIKI,psi4manual/4.0b2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/quickadddatabase.html
Availability,avail,available,"ithout computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pic",MatchSource.WIKI,psi4manual/4.0b2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html
Deployability,update,updated," as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; Ab Initio Polarization Propagator; Next topic; Coupled Cluster Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html
Energy Efficiency,adapt,adapted,"﻿. Symmetry-Adapted Perturbation Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of ",MatchSource.WIKI,psi4manual/4.0b2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html
Modifiability,adapt,adapted,"﻿. Symmetry-Adapted Perturbation Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of ",MatchSource.WIKI,psi4manual/4.0b2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html
Performance,perform,performance," interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set globals {; basis aug-cc-pvdz; }. en",MatchSource.WIKI,psi4manual/4.0b2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html
Safety,recover,recover,"ies (defined above),; they are composed of subsets of the individual terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; Ab Initio Polarization Propagator; Next topic; Coupled ",MatchSource.WIKI,psi4manual/4.0b2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html
Testability,test,tested,"asis, we can; throw away virtual orbitals that are expected to contribute little to the; dispersion energy. Speedups in excess of are possible. In; practice, this approximation is very good and should always be applied.; Publications resulting from the use of MP2 NO-based approximations should; cite the following: [Hohenstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for evaluating the triples contribution to dispersion. Type: conv double; Default: 1.0e-6. Advanced Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'). A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-trans",MatchSource.WIKI,psi4manual/4.0b2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html
Usability,simpl,simplest,"T provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0",MatchSource.WIKI,psi4manual/4.0b2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html
Availability,avail,available,"ithout computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pic",MatchSource.WIKI,psi4manual/4.0b2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt.html
Deployability,update,updated," as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; Ab Initio Polarization Propagator; Next topic; Coupled Cluster Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt.html
Energy Efficiency,adapt,adapted,"﻿. Symmetry-Adapted Perturbation Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of ",MatchSource.WIKI,psi4manual/4.0b2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt.html
Modifiability,adapt,adapted,"﻿. Symmetry-Adapted Perturbation Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of ",MatchSource.WIKI,psi4manual/4.0b2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt.html
Performance,perform,performance," interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set globals {; basis aug-cc-pvdz; }. en",MatchSource.WIKI,psi4manual/4.0b2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt.html
Safety,recover,recover,"ies (defined above),; they are composed of subsets of the individual terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; Ab Initio Polarization Propagator; Next topic; Coupled ",MatchSource.WIKI,psi4manual/4.0b2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt.html
Testability,test,tested,"asis, we can; throw away virtual orbitals that are expected to contribute little to the; dispersion energy. Speedups in excess of are possible. In; practice, this approximation is very good and should always be applied.; Publications resulting from the use of MP2 NO-based approximations should; cite the following: [Hohenstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for evaluating the triples contribution to dispersion. Type: conv double; Default: 1.0e-6. Advanced Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'). A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-trans",MatchSource.WIKI,psi4manual/4.0b2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt.html
Usability,simpl,simplest,"T provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0",MatchSource.WIKI,psi4manual/4.0b2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt.html
Availability,error,error,".00000e+00; @UHF iter 1: -149.59793338958522 1.70631e-01 5.72371e-02; @UHF iter 2: -149.62408782458331 -2.61544e-02 8.04195e-03 DIIS; @UHF iter 3: -149.62679515182390 -2.70733e-03 2.51542e-03 DIIS; @UHF iter 4: -149.62726459105770 -4.69439e-04 1.06897e-03 DIIS; @UHF iter 5: -149.62730549814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to the; default of 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often re",MatchSource.WIKI,psi4manual/4.0b2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html
Deployability,update,updated,"s). Recommendations¶; The SCF code is already quite flexible and powerful, with new features being; added weekly. We have tried as much as possible to keep the number of options to; a minimum, and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your primary basis/atom type. Then use; OUT_OF_CORE unless you run out of disk space.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; He; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('scf'). Table Of Contents. Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Previous topic; Notes on Options; Next topic; Density Functional Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html
Energy Efficiency,efficient,efficient,"﻿. Hartree–Fock Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type pk; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a PK algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. After printing all manner; of titles, geometries, sizings, and algorithm choices, the SCF finally reaches; the iterations:; Total Energy Delta E Density RMS. @UHF iter 0: -149.76856421865352 -4.69109e+01 0.00000e+00; @UHF iter 1: -149.59793338958522 1.70631e-01 5.72371e-02; @UHF iter 2: -149.62408782458331 -2.61544e-02 8.04195e-03 DIIS; @UHF iter 3: -149.62679515182390 -2.70733e-03 2.51542e-03 DIIS; @UHF iter 4: -149.62726459105770 -4.69439e-04 1.06897e-03 DIIS; @UHF iter 5: -149.62730549814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS",MatchSource.WIKI,psi4manual/4.0b2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html
Integrability,contract,contracted,"e error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the ge",MatchSource.WIKI,psi4manual/4.0b2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html
Modifiability,enhance,enhanced,"71e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to the; default of 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock w",MatchSource.WIKI,psi4manual/4.0b2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html
Performance,perform,performed,"3841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to the; default of 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamilt",MatchSource.WIKI,psi4manual/4.0b2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html
Safety,avoid,avoid,"orthogonalization, DIIS, and a core Hamiltonian guess. For more information on; any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree-Fock; theory, including:. Restricted Hartree-Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree-Fock (UHF); Appropriate for most open-shell systems, and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to an; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree-Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree-Fock (CUHF); A variant of ROHF that starts from a UHF ansatz, and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4, and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, ",MatchSource.WIKI,psi4manual/4.0b2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html
Usability,simpl,simplest," high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. The eigenvalues are the orbital energies, and the metric matrix; is the AO-basis overlap matrix. Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbita",MatchSource.WIKI,psi4manual/4.0b2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html
Availability,error,error,".00000e+00; @UHF iter 1: -149.59793338958522 1.70631e-01 5.72371e-02; @UHF iter 2: -149.62408782458331 -2.61544e-02 8.04195e-03 DIIS; @UHF iter 3: -149.62679515182390 -2.70733e-03 2.51542e-03 DIIS; @UHF iter 4: -149.62726459105770 -4.69439e-04 1.06897e-03 DIIS; @UHF iter 5: -149.62730549814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to the; default of 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often re",MatchSource.WIKI,psi4manual/4.0b2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf.html
Deployability,update,updated,"s). Recommendations¶; The SCF code is already quite flexible and powerful, with new features being; added weekly. We have tried as much as possible to keep the number of options to; a minimum, and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your primary basis/atom type. Then use; OUT_OF_CORE unless you run out of disk space.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; He; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('scf'). Table Of Contents. Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Recommendations. Previous topic; Notes on Options; Next topic; Density Functional Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf.html
Energy Efficiency,efficient,efficient,"﻿. Hartree–Fock Theory — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type pk; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a PK algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. After printing all manner; of titles, geometries, sizings, and algorithm choices, the SCF finally reaches; the iterations:; Total Energy Delta E Density RMS. @UHF iter 0: -149.76856421865352 -4.69109e+01 0.00000e+00; @UHF iter 1: -149.59793338958522 1.70631e-01 5.72371e-02; @UHF iter 2: -149.62408782458331 -2.61544e-02 8.04195e-03 DIIS; @UHF iter 3: -149.62679515182390 -2.70733e-03 2.51542e-03 DIIS; @UHF iter 4: -149.62726459105770 -4.69439e-04 1.06897e-03 DIIS; @UHF iter 5: -149.62730549814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS",MatchSource.WIKI,psi4manual/4.0b2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf.html
Integrability,contract,contracted,"e error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the ge",MatchSource.WIKI,psi4manual/4.0b2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf.html
Modifiability,enhance,enhanced,"71e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to the; default of 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock w",MatchSource.WIKI,psi4manual/4.0b2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf.html
Performance,perform,performed,"3841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to the; default of 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamilt",MatchSource.WIKI,psi4manual/4.0b2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf.html
Safety,avoid,avoid,"orthogonalization, DIIS, and a core Hamiltonian guess. For more information on; any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree-Fock; theory, including:. Restricted Hartree-Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree-Fock (UHF); Appropriate for most open-shell systems, and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to an; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree-Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree-Fock (CUHF); A variant of ROHF that starts from a UHF ansatz, and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4, and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, ",MatchSource.WIKI,psi4manual/4.0b2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf.html
Usability,simpl,simplest," high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. The eigenvalues are the orbital energies, and the metric matrix; is the AO-basis overlap matrix. Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbita",MatchSource.WIKI,psi4manual/4.0b2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf.html
Deployability,update,updated,"﻿. Search — PSI4 [beta2] documentation. Navigation. index. modules |; PSI4 [beta2] » . Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . Navigation. index. modules |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/search.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/search.html
Availability,avail,available,"﻿. Embarrassing Parallelism — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previou",MatchSource.WIKI,psi4manual/4.0b2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap-1.html
Deployability,continuous,continuous,"on ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap-1.html
Integrability,wrap,wrappers,"﻿. Embarrassing Parallelism — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previou",MatchSource.WIKI,psi4manual/4.0b2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap-1.html
Testability,test,tested,"ion ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap-1.html
Usability,simpl,simply,"﻿. Embarrassing Parallelism — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previou",MatchSource.WIKI,psi4manual/4.0b2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap-1.html
Availability,avail,available,"﻿. Embarrassing Parallelism — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previou",MatchSource.WIKI,psi4manual/4.0b2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap.html
Deployability,continuous,continuous,"on ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap.html
Integrability,wrap,wrappers,"﻿. Embarrassing Parallelism — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previou",MatchSource.WIKI,psi4manual/4.0b2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap.html
Testability,test,tested,"ion ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap.html
Usability,simpl,simply,"﻿. Embarrassing Parallelism — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previou",MatchSource.WIKI,psi4manual/4.0b2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap.html
Availability,checkpoint,checkpoint,"ing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. pywrap_db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. plugin_libfock; LibFock test input. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. pywrap_db2; Database calculation with psi4-generated input. Should not be used as a model input file but as a canary to avoid breaking database/input parser dependencies. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to ",MatchSource.WIKI,psi4manual/4.0b2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite-1.html
Deployability,update,update,"-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMa",MatchSource.WIKI,psi4manual/4.0b2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite-1.html
Energy Efficiency,energy,energy,"﻿. Test Suite and Sample Inputs — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the ",MatchSource.WIKI,psi4manual/4.0b2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite-1.html
Integrability,depend,dependencies,"tatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. plugin_libfock; LibFock test input. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. pywrap_db2; Database calculation with psi4-generated input. Should not be used as a model input file but as a canary to avoid breaking database/input parser dependencies. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DCFT-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowes",MatchSource.WIKI,psi4manual/4.0b2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite-1.html
Modifiability,variab,variables," nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. plugin_test_matrix; Plugin_test_matrix test input. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d",MatchSource.WIKI,psi4manual/4.0b2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite-1.html
Performance,perform,performs,"-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMa",MatchSource.WIKI,psi4manual/4.0b2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite-1.html
Safety,avoid,avoided,"G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion wi",MatchSource.WIKI,psi4manual/4.0b2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite-1.html
Testability,test,test,"﻿. Test Suite and Sample Inputs — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the ",MatchSource.WIKI,psi4manual/4.0b2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite-1.html
Availability,checkpoint,checkpoint,"ing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. pywrap_db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. plugin_libfock; LibFock test input. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. pywrap_db2; Database calculation with psi4-generated input. Should not be used as a model input file but as a canary to avoid breaking database/input parser dependencies. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to ",MatchSource.WIKI,psi4manual/4.0b2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite.html
Deployability,update,update,"-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMa",MatchSource.WIKI,psi4manual/4.0b2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite.html
Energy Efficiency,energy,energy,"﻿. Test Suite and Sample Inputs — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the ",MatchSource.WIKI,psi4manual/4.0b2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite.html
Integrability,depend,dependencies,"tatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. plugin_libfock; LibFock test input. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. pywrap_db2; Database calculation with psi4-generated input. Should not be used as a model input file but as a canary to avoid breaking database/input parser dependencies. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DCFT-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowes",MatchSource.WIKI,psi4manual/4.0b2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite.html
Modifiability,variab,variables," nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. plugin_test_matrix; Plugin_test_matrix test input. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d",MatchSource.WIKI,psi4manual/4.0b2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite.html
Performance,perform,performs,"-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMa",MatchSource.WIKI,psi4manual/4.0b2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite.html
Safety,avoid,avoided,"G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion wi",MatchSource.WIKI,psi4manual/4.0b2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite.html
Testability,test,test,"﻿. Test Suite and Sample Inputs — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the ",MatchSource.WIKI,psi4manual/4.0b2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/testsuite.html
Availability,down,downhill,"ricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; ",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Deployability,install,installation," reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration section of; the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02665366589162. By default, the energy should be converged to about , so agreement; is only expected for about the first 8 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Obtaining and Installing PSI4).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Energy Efficiency,energy,energy,"﻿. A PSI4 Tutorial — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . A PSI4 Tutorial¶. Basic Input File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration section of; the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02665366589162. By default, the energy should be converged to about , so agreement; is only expected for about the first 8 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Obtaining and Installing PSI4).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multipl",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Integrability,message,message,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking a",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Modifiability,variab,variables,"le (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables ( and ), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92534160932308. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; RO",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Performance,perform,perform," uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92534160932308. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; -----------------------",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Safety,detect,detected,"of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; # Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. no_reorient; symmetry c1; }. Notice we have a couple of new keywords in the molecule specification.; no_reorient tells the program not to reorient the molecule; to a different coordinate system (this is important for SAPT to make; sure the same coordinate frame is used for the computations of the two; monomers and for the dimer). The next keyword tells PSI4 to run; in C1 point-group symmetry (i.e., without using symmetry), even if a; higher symmetry is detected. SAPT computations know to turn off; symmetry and fix orientation even without the user specifying these; molecule keywords.; Here’s the second half of the input:; set globals {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set globals or set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT exam",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Security,access,accessed,"ted, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = cp('ccsd(t)'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function cp() does it all for us, automatically.; And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol, which is; defined in Sec. Scratch Files and the ~/.psi4rc File. Notice the loop over to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. Table Of Contents. A PSI4 Tutorial; Basic Input File Structure; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy wi",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Testability,test,test,"------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking at the output from running the; previous example, we see that the OH bond length is about 0.9463 Ångstroms,; and the bond angle is about 104.575 degrees. It’s good to give this many; digits (or more) to make sure there’s not significant roundoff error in the; geometry when running a frequency computation. So, our frequency; computation input (which can be found as test case; tu4-h2o-freq is:; #! Frequencies for H2O HF/cc-pVDZ at optimized geometry. memory 250 mb. molecule h2o {; O ; H 1 0.9463; H 1 0.9463 2 104.575; }. set basis cc-pVDZ; frequencies('scf'). Alternatively, it’s also possible for PSI4 to use Cartesian coordinate; input. Here, the Cartesian coordinates of the optimized geometry can be; extracted from the bottom of the optimization output. The input; would then look like this:; molecule h2o {; O 0.0000000000 -0.0000000000 -0.1224239500; H 0.0000000000 -1.4147069876 0.9714784639; H -0.0000000000 1.4147069876 0.9714784639; }. set basis cc-pVDZ; frequencies('scf'). If either of the inputs above are run, the program should do some; computations and then finally report the following harmonic vibrational; frequencies (roundoff errors of around 0.1 cm-1 may exist):; Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1776.1735; A1 4113.8031; B2 4211.7879; -----------------------------------------------. Notice that th",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Usability,simpl,simple,"he # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration section of; the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02665366589162. By default, the energy should be converged to about , so agreement; is only expected for about the first 8 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Obtaining and Installing PSI4).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line ",MatchSource.WIKI,psi4manual/4.0b2/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html
Availability,down,downhill,"ricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; ",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Deployability,install,installation," reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration section of; the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02665366589162. By default, the energy should be converged to about , so agreement; is only expected for about the first 8 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Obtaining and Installing PSI4).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Energy Efficiency,energy,energy,"﻿. A PSI4 Tutorial — PSI4 [beta2] documentation. Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . A PSI4 Tutorial¶. Basic Input File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration section of; the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02665366589162. By default, the energy should be converged to about , so agreement; is only expected for about the first 8 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Obtaining and Installing PSI4).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multipl",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Integrability,message,message,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking a",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Modifiability,variab,variables,"le (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables ( and ), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92534160932308. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; RO",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Performance,perform,perform," uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92534160932308. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; -----------------------",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Safety,detect,detected,"of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; # Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. no_reorient; symmetry c1; }. Notice we have a couple of new keywords in the molecule specification.; no_reorient tells the program not to reorient the molecule; to a different coordinate system (this is important for SAPT to make; sure the same coordinate frame is used for the computations of the two; monomers and for the dimer). The next keyword tells PSI4 to run; in C1 point-group symmetry (i.e., without using symmetry), even if a; higher symmetry is detected. SAPT computations know to turn off; symmetry and fix orientation even without the user specifying these; molecule keywords.; Here’s the second half of the input:; set globals {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set globals or set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT exam",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Security,access,accessed,"ted, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = cp('ccsd(t)'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function cp() does it all for us, automatically.; And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol, which is; defined in Sec. Scratch Files and the ~/.psi4rc File. Notice the loop over to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. Table Of Contents. A PSI4 Tutorial; Basic Input File Structure; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy wi",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Testability,test,test,"------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking at the output from running the; previous example, we see that the OH bond length is about 0.9463 Ångstroms,; and the bond angle is about 104.575 degrees. It’s good to give this many; digits (or more) to make sure there’s not significant roundoff error in the; geometry when running a frequency computation. So, our frequency; computation input (which can be found as test case; tu4-h2o-freq is:; #! Frequencies for H2O HF/cc-pVDZ at optimized geometry. memory 250 mb. molecule h2o {; O ; H 1 0.9463; H 1 0.9463 2 104.575; }. set basis cc-pVDZ; frequencies('scf'). Alternatively, it’s also possible for PSI4 to use Cartesian coordinate; input. Here, the Cartesian coordinates of the optimized geometry can be; extracted from the bottom of the optimization output. The input; would then look like this:; molecule h2o {; O 0.0000000000 -0.0000000000 -0.1224239500; H 0.0000000000 -1.4147069876 0.9714784639; H -0.0000000000 1.4147069876 0.9714784639; }. set basis cc-pVDZ; frequencies('scf'). If either of the inputs above are run, the program should do some; computations and then finally report the following harmonic vibrational; frequencies (roundoff errors of around 0.1 cm-1 may exist):; Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1776.1735; A1 4113.8031; B2 4211.7879; -----------------------------------------------. Notice that th",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Usability,simpl,simple,"he # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration section of; the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02665366589162. By default, the energy should be converged to about , so agreement; is only expected for about the first 8 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Obtaining and Installing PSI4).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line ",MatchSource.WIKI,psi4manual/4.0b2/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial.html
Availability,toler,tolerably,"790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent ",MatchSource.WIKI,psi4manual/4.0b3/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc-1.html
Deployability,configurat,configurations,"fold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for ",MatchSource.WIKI,psi4manual/4.0b3/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc-1.html
Energy Efficiency,energy,energy,"﻿. ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». ADC: Ab Initio Polarization Propagator¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; Module: Keywords, PSI Variables, ADC; The ADC code seeks the pole structure of the polarization; propagator, which is equivalent to the correlated excitation energy,; in terms of the second order algebraic-diagrammatic construction; (ADC(2)) scheme. Originally, the ADC scheme was derived in purely; the diagrammatic language by Schirmer [Schirmer:1982] and later,; a sophisticated algebraic scheme was developed [Trofimov:2006]; by Trofimov et al. In general by n-th order ADC theory, the; excited state is treated at completely equivalent level to the; Møller–Plesset perturbation expansion of the same order.; Hence the ADC(2); can be described as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D:math:_n) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In PSI4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; producti",MatchSource.WIKI,psi4manual/4.0b3/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc-1.html
Integrability,depend,dependence,"ions of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the ",MatchSource.WIKI,psi4manual/4.0b3/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc-1.html
Modifiability,flexible,flexible," MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D:math:_n) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In PSI4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arr",MatchSource.WIKI,psi4manual/4.0b3/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc-1.html
Performance,perform,performing,"ntation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories ",MatchSource.WIKI,psi4manual/4.0b3/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc-1.html
Usability,simpl,simple,"d as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Next topic; SAPT: Symmetry-Adapted Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previ",MatchSource.WIKI,psi4manual/4.0b3/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc-1.html
Availability,toler,tolerably,"790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent ",MatchSource.WIKI,psi4manual/4.0b3/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc.html
Deployability,configurat,configurations,"fold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for ",MatchSource.WIKI,psi4manual/4.0b3/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc.html
Energy Efficiency,energy,energy,"﻿. ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». ADC: Ab Initio Polarization Propagator¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; Module: Keywords, PSI Variables, ADC; The ADC code seeks the pole structure of the polarization; propagator, which is equivalent to the correlated excitation energy,; in terms of the second order algebraic-diagrammatic construction; (ADC(2)) scheme. Originally, the ADC scheme was derived in purely; the diagrammatic language by Schirmer [Schirmer:1982] and later,; a sophisticated algebraic scheme was developed [Trofimov:2006]; by Trofimov et al. In general by n-th order ADC theory, the; excited state is treated at completely equivalent level to the; Møller–Plesset perturbation expansion of the same order.; Hence the ADC(2); can be described as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D:math:_n) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In PSI4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; producti",MatchSource.WIKI,psi4manual/4.0b3/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc.html
Integrability,depend,dependence,"ions of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the ",MatchSource.WIKI,psi4manual/4.0b3/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc.html
Modifiability,flexible,flexible," MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D:math:_n) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In PSI4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arr",MatchSource.WIKI,psi4manual/4.0b3/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc.html
Performance,perform,performing,"ntation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories ",MatchSource.WIKI,psi4manual/4.0b3/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc.html
Usability,simpl,simple,"d as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Next topic; SAPT: Symmetry-Adapted Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previ",MatchSource.WIKI,psi4manual/4.0b3/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/adc.html
Deployability,update,updated,"﻿. Appendices — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Appendices¶. Bibliography; Test Suite and Sample Inputs. Basis Sets by Element. Auxiliary Basis Sets. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRIPLES; CEPA; CIS; CLAG; CPHF; DCFT; DETCI; DFMP2; FINDIF; LMP2; MCSCF; MINTS; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; RESPONSE; SAPT; SCF; STABILITY; THERMO; TRANSQT; TRANSQT2. PSI Variables by Alpha; PSI Variables by Module; ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; CEPA; DCFT; DETCI; DFMP2; LMP2; MCSCF; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PsiMod: Linking C++ and Python; Next topic; Bibliography; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/appendices-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/appendices-1.html
Deployability,update,updated,"﻿. Appendices — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Appendices¶. Bibliography; Test Suite and Sample Inputs. Basis Sets by Element. Auxiliary Basis Sets. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRIPLES; CEPA; CIS; CLAG; CPHF; DCFT; DETCI; DFMP2; FINDIF; LMP2; MCSCF; MINTS; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; RESPONSE; SAPT; SCF; STABILITY; THERMO; TRANSQT; TRANSQT2. PSI Variables by Alpha; PSI Variables by Module; ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; CEPA; DCFT; DETCI; DFMP2; LMP2; MCSCF; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PsiMod: Linking C++ and Python; Next topic; Bibliography; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/appendices.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/appendices.html
Availability,error,error,"011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; '",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html
Deployability,update,updated,"pairs on same strand). S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NCB31¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6'; 'WI7' weakly interacting; 'PPS5'. Table Of Contents. BAKERJCC96; ACENES; NBC10; S22by5; BENCH12; BAKERJCC93; RGC10; S66; CORE; BASIC; NHTBH; HBC6; HSG; JSCH; S22; HTBH; NCB31. Previous topic; Database; Next topic; Complete Basis Set; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Database ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html
Energy Efficiency,energy,energy,"ne-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for hel",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html
Performance,optimiz,optimize,"nergies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 1",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html
Testability,benchmark,benchmark,"S¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'NBC100' Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geome",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOF",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html
Availability,error,error,"011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; '",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases.html
Deployability,update,updated,"pairs on same strand). S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NCB31¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6'; 'WI7' weakly interacting; 'PPS5'. Table Of Contents. BAKERJCC96; ACENES; NBC10; S22by5; BENCH12; BAKERJCC93; RGC10; S66; CORE; BASIC; NHTBH; HBC6; HSG; JSCH; S22; HTBH; NCB31. Previous topic; Database; Next topic; Complete Basis Set; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Database ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases.html
Energy Efficiency,energy,energy,"ne-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for hel",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases.html
Performance,optimiz,optimize,"nergies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 1",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases.html
Testability,benchmark,benchmark,"S¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'NBC100' Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geome",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOF",MatchSource.WIKI,psi4manual/4.0b3/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases.html
Deployability,update,updated,"g-cc-pvtz-ri; —. 6-311++G**; 6-311ppg_d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d); 6-311ppg_2d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,p); 6-311ppg_2d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,2p); 6-311ppg_2d_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; —; —; —. def2-SVP; def2-svp; —; —; —. def2-SVPD; def2-svpd; —; —; —. def2-TZVP; def2-tzvp; —; —; —. def2-TZVPD; def2-tzvpd; —; —; —. def2-TZVPP; def2-tzvpp; —; —; —. def2-TZVPPD; def2-tzvppd; —; —; —. def2-QZVP; def2-qzvp; —; —; —. def2-QZVPD; def2-qzvpd; —; —; —. def2-QZVPP; def2-qzvpp; —; —; —. def2-QZVPPD; def2-qzvppd; —; —; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; Auxiliary Basis Sets; Next topic; DFT Functionals; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Auxiliary Basis Sets ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_basissets_byfamily-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_basissets_byfamily-1.html
Deployability,update,updated,"g-cc-pvtz-ri; —. 6-311++G**; 6-311ppg_d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d); 6-311ppg_2d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,p); 6-311ppg_2d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,2p); 6-311ppg_2d_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; —; —; —. def2-SVP; def2-svp; —; —; —. def2-SVPD; def2-svpd; —; —; —. def2-TZVP; def2-tzvp; —; —; —. def2-TZVPD; def2-tzvpd; —; —; —. def2-TZVPP; def2-tzvpp; —; —; —. def2-TZVPPD; def2-tzvppd; —; —; —. def2-QZVP; def2-qzvp; —; —; —. def2-QZVPD; def2-qzvpd; —; —; —. def2-QZVPP; def2-qzvpp; —; —; —. def2-QZVPPD; def2-qzvppd; —; —; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; Auxiliary Basis Sets; Next topic; DFT Functionals; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Auxiliary Basis Sets ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_basissets_byfamily.html
Availability,avail,available,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-,MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_all-1.html
Deployability,update,updated," —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; DFT Functionals; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_all-1.html
Availability,avail,available,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-,MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_all.html
Deployability,update,updated," —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; DFT Functionals; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_all.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_dhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_dhybrid-1.html
Deployability,update,updated,"rid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_dhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_dhybrid-1.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_dhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_dhybrid.html
Deployability,update,updated,"rid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_dhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_dhybrid.html
Availability,avail,available,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Dispersion-Corrected functionals available in PSI4. Name; Description; S6; S8; SR6; ALPHA6; A1; A2; Dispersion?; Dispersion Description. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.55000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 1.02200; 1.42700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.91470; —; —; 0.30650; 5.05700; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.05000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.05000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; 1.70300; 1.26100; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; 1.98890; —; —; 0.39810; 4.42110; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; 1.25000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B97-D3; B97-D Pure-GGA Exchange-Correlation Functional; 1.00000; 0.90900; 0.89200; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B97-D3BJ; B97-D Pure-GGA Exchange-Correlation Functional; 1.00000; 2.26090; —; —; 0.55450; 3.22970; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. BLYP-D; BLYP GGA Exchange-Correlation Functional; 1.20000; —; —; 20,MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_disp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_disp-1.html
Deployability,update,updated,"-D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; 1.00000; 0.59500; 1.37300; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D1; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; 1.00000; 0.72200; 1.21700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; 1.00000; 0.78750; —; —; 0.42890; 4.44070; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; 0.60000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.92800; 1.28700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_disp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_disp-1.html
Availability,avail,available,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Dispersion-Corrected functionals available in PSI4. Name; Description; S6; S8; SR6; ALPHA6; A1; A2; Dispersion?; Dispersion Description. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.55000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 1.02200; 1.42700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.91470; —; —; 0.30650; 5.05700; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.05000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.05000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; 1.70300; 1.26100; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; 1.98890; —; —; 0.39810; 4.42110; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; 1.25000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B97-D3; B97-D Pure-GGA Exchange-Correlation Functional; 1.00000; 0.90900; 0.89200; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B97-D3BJ; B97-D Pure-GGA Exchange-Correlation Functional; 1.00000; 2.26090; —; —; 0.55450; 3.22970; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. BLYP-D; BLYP GGA Exchange-Correlation Functional; 1.20000; —; —; 20,MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_disp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_disp.html
Deployability,update,updated,"-D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; 1.00000; 0.59500; 1.37300; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D1; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; 1.00000; 0.72200; 1.21700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; 1.00000; 0.78750; —; —; 0.42890; 4.44070; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; 0.60000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.92800; 1.28700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_disp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_disp.html
Deployability,update,updated," Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-2(lp); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization). wb97x-2(tqz); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization). wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_energy-1.html
Deployability,update,updated," Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-2(lp); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization). wb97x-2(tqz); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization). wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_energy.html
Availability,avail,available,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». GGA functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-,MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_gga-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_gga-1.html
Deployability,update,updated,"nless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_gga-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_gga-1.html
Availability,avail,available,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». GGA functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-,MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_gga.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_gga.html
Deployability,update,updated,"nless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_gga.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_gga.html
Availability,avail,available,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. BLYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; ,MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_hybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_hybrid-1.html
Deployability,update,updated," Y; —; —; 0.250000; —; —; —; —; —. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_hybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_hybrid-1.html
Availability,avail,available,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. BLYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; ,MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_hybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_hybrid.html
Deployability,update,updated," Y; —; —; 0.250000; —; —; —; —; —. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_hybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_hybrid.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_lrc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_lrc-1.html
Deployability,update,updated," » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_lrc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_lrc-1.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_lrc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_lrc.html
Deployability,update,updated," » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_lrc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_lrc.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Meta functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_meta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_meta-1.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Meta functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_meta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_meta-1.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Meta functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_meta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_meta.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Meta functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_meta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_meta.html
Deployability,update,updated,"lation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. pbesol_x; PBEsol GGA Exchange Hole (Parameter Free). pbe_c; PBE Correlation. pbe_x; PBE GGA Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_opt-1.html
Deployability,update,updated,"lation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. pbesol_x; PBEsol GGA Exchange Hole (Parameter Free). pbe_c; PBE Correlation. pbe_x; PBE GGA Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_opt.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Spin-Component-Scaled Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; PSIOH Intermediate Files; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_scsdhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_scsdhybrid-1.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Spin-Component-Scaled Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; PSIOH Intermediate Files; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_scsdhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_scsdhybrid-1.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Spin-Component-Scaled Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; PSIOH Intermediate Files; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_scsdhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_scsdhybrid.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». Spin-Component-Scaled Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; PSIOH Intermediate Files; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; DFT Functionals ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_dft_scsdhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_dft_scsdhybrid.html
Availability,error,error,"to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. frac¶. frac_nuke(mol, **kwargs)[source]¶. frac_traverse(mol, **kwargs)[source]¶. ip_fitting(mol, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the PsiMod.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Deployability,install,installed,"isFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; + into p, * into s, and (, ), & , ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Energy Efficiency,energy,energy," cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. new_get_attr(self, name)[source]¶; Function to redefine get_attr method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine set_attr method of molecule class. proc¶. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_bccd_t(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD(T) calculation. run_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequenc",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Integrability,wrap,wrapping,"nput. process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to PsiMod.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[sour",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Modifiability,variab,variables,"rce]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to PsiMod.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Performance,load,load,"isFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; + into p, * into s, and (, ), & , ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Safety,detect,detected,"s C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry operation op. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult info detected.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). irrep_labels()[source]¶; NYI Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4).; >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[source]¶",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Security,validat,validate," ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... }. process_basis_file(matchobj)[source]¶; Function to process match of basis file .... process_external_command(matchobj)[source]¶; Function to process match of external name? { ... }. process_extract_command(matchobj)[source]¶; Function to process match of extract_subsets. process_filename(matchobj)[source]¶; Function to process match of filename .... process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; raw_input is printed to the output file unless print_level =0. Does; a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_p",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Testability,test,test,"turn a copy of the Table object. format_label()[source]¶; Function to pad the width of Table object labels. format_values(values)[source]¶; Function to pad the width of Table object data cells. save(file)[source]¶; Function to save string of the Table object to file. scale(Factor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. util¶; Module with utility functions for use in input files. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector compu",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Usability,simpl,simple,"3 computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. run_scs_omp2(name, **kwargs)¶; Function encoding sequence of PSI module calls for; a spin-component scaled OMP2 computation. run_scs_omp3(name, **kwargs)¶; Function encoding sequence of PSI module calls for; a spin-component scaled OMP3 computation. run_sos_omp2(name, **kwargs)¶; Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. run_sos_omp3(name, **kwargs)¶; Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). dashparam¶; Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; Whe",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html
Availability,error,error,"to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. frac¶. frac_nuke(mol, **kwargs)[source]¶. frac_traverse(mol, **kwargs)[source]¶. ip_fitting(mol, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the PsiMod.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Deployability,install,installed,"isFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; + into p, * into s, and (, ), & , ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Energy Efficiency,energy,energy," cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. new_get_attr(self, name)[source]¶; Function to redefine get_attr method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine set_attr method of molecule class. proc¶. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_bccd_t(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD(T) calculation. run_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequenc",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Integrability,wrap,wrapping,"nput. process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to PsiMod.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[sour",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Modifiability,variab,variables,"rce]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to PsiMod.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Performance,load,load,"isFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; + into p, * into s, and (, ), & , ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Safety,detect,detected,"s C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry operation op. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult info detected.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). irrep_labels()[source]¶; NYI Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4).; >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[source]¶",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Security,validat,validate," ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... }. process_basis_file(matchobj)[source]¶; Function to process match of basis file .... process_external_command(matchobj)[source]¶; Function to process match of external name? { ... }. process_extract_command(matchobj)[source]¶; Function to process match of extract_subsets. process_filename(matchobj)[source]¶; Function to process match of filename .... process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; raw_input is printed to the output file unless print_level =0. Does; a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_p",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Testability,test,test,"turn a copy of the Table object. format_label()[source]¶; Function to pad the width of Table object labels. format_values(values)[source]¶; Function to pad the width of Table object data cells. save(file)[source]¶; Function to save string of the Table object to file. scale(Factor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. util¶; Module with utility functions for use in input files. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector compu",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Usability,simpl,simple,"3 computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. run_scs_omp2(name, **kwargs)¶; Function encoding sequence of PSI module calls for; a spin-component scaled OMP2 computation. run_scs_omp3(name, **kwargs)¶; Function encoding sequence of PSI module calls for; a spin-component scaled OMP3 computation. run_sos_omp2(name, **kwargs)¶; Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. run_sos_omp3(name, **kwargs)¶; Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). dashparam¶; Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; Whe",MatchSource.WIKI,psi4manual/4.0b3/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver.html
Availability,toler,tolerance,"ult. CIS_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html
Deployability,update,updates,"ed) per irrep (shorthand to make MCSCF easier to specify than using RAS keywords). Type: array; Default: No Default. ACTIVE (PSIMRCC); PSIMRCC — The number of active orbitals per irrep. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: false. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — The algorithm to use for the density cumulant and orbital updates in the energy computation. Two-step algorithm (default) is generally more efficient and shows better convergence than simultaneous. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: TWOSTEP. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keywo",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html
Energy Efficiency,energy,energy,"ed) per irrep (shorthand to make MCSCF easier to specify than using RAS keywords). Type: array; Default: No Default. ACTIVE (PSIMRCC); PSIMRCC — The number of active orbitals per irrep. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: false. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — The algorithm to use for the density cumulant and orbital updates in the energy computation. Two-step algorithm (default) is generally more efficient and shows better convergence than simultaneous. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: TWOSTEP. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keywo",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html
Integrability,rout,routines,"); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help wi",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html
Modifiability,extend,extended,"t. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer;",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html
Performance,perform,performing," DISK, DIRECT; Default: NONE. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html
Safety,avoid,avoid,"e MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements. It is, however, less efficient due to the extra I/O, so the default algorithm is preferred. Type: string; Possible Values: NONE, DISK; Default: NONE. AO_BASIS (TRANSQT); TRANSQT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default:",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html
Testability,benchmark,benchmarking,"No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html
Availability,toler,tolerance,"ult. CIS_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c.html
Deployability,update,updates,"ed) per irrep (shorthand to make MCSCF easier to specify than using RAS keywords). Type: array; Default: No Default. ACTIVE (PSIMRCC); PSIMRCC — The number of active orbitals per irrep. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: false. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — The algorithm to use for the density cumulant and orbital updates in the energy computation. Two-step algorithm (default) is generally more efficient and shows better convergence than simultaneous. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: TWOSTEP. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keywo",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c.html
Energy Efficiency,energy,energy,"ed) per irrep (shorthand to make MCSCF easier to specify than using RAS keywords). Type: array; Default: No Default. ACTIVE (PSIMRCC); PSIMRCC — The number of active orbitals per irrep. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: false. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — The algorithm to use for the density cumulant and orbital updates in the energy computation. Two-step algorithm (default) is generally more efficient and shows better convergence than simultaneous. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: TWOSTEP. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keywo",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c.html
Integrability,rout,routines,"); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help wi",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c.html
Modifiability,extend,extended,"t. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer;",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c.html
Performance,perform,performing," DISK, DIRECT; Default: NONE. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c.html
Safety,avoid,avoid,"e MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements. It is, however, less efficient due to the extra I/O, so the default algorithm is preferred. Type: string; Possible Values: NONE, DISK; Default: NONE. AO_BASIS (TRANSQT); TRANSQT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default:",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c.html
Testability,benchmark,benchmarking,"No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache",MatchSource.WIKI,psi4manual/4.0b3/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c.html
Deployability,update,updated,"﻿. Keywords by Module — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRIPLES; CEPA; CIS; CLAG; CPHF; DCFT; DETCI; DFMP2; FINDIF; LMP2; MCSCF; MINTS; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; RESPONSE; SAPT; SCF; STABILITY; THERMO; TRANSQT; TRANSQT2. Previous topic; Keywords by Alpha; Next topic; GLOBALS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_options_c_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_options_c_bymodule-1.html
Deployability,update,updated,"﻿. Keywords by Module — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRIPLES; CEPA; CIS; CLAG; CPHF; DCFT; DETCI; DFMP2; FINDIF; LMP2; MCSCF; MINTS; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; RESPONSE; SAPT; SCF; STABILITY; THERMO; TRANSQT; TRANSQT2. Previous topic; Keywords by Alpha; Next topic; GLOBALS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_options_c_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_options_c_bymodule.html
Availability,avail,availability,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Basis Sets by Element ». Basis set availability by element in PSI4. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31ppgss; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg_d_p_; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; A,MatchSource.WIKI,psi4manual/4.0b3/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psi4bases-1.html
Deployability,update,updated,"  ;  ;  ;  ;  ;  ;  ;  ;  ;  . feb-cc-pv_6pd_z; 5D/7F; H; He;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Others;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2pf; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-dl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. Previous topic; Basis Sets by Element; Next topic; Auxiliary Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Basis Sets by Element ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psi4bases-1.html
Availability,avail,availability,﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Basis Sets by Element ». Basis set availability by element in PSI4. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31ppgss; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg_d_p_; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; A,MatchSource.WIKI,psi4manual/4.0b3/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psi4bases.html
Deployability,update,updated,"  ;  ;  ;  ;  ;  ;  ;  ;  ;  . feb-cc-pv_6pd_z; 5D/7F; H; He;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Others;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2pf; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-dl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. Previous topic; Basis Sets by Element; Next topic; Auxiliary Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Basis Sets by Element ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psi4bases.html
Availability,checkpoint,checkpoint,"﻿. PSIOH Intermediate Files — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_FILE11; geometry optimization, geometry, and gradient. 12; PSIF_INTCO; internal coordinates file, formerly intco.dat. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_BB_PRESORT; BB UHF two",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psifiles-1.html
Deployability,update,updated," PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 125; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 126; PSIF_SAPT_AMPS; SAPT Amplitudes. 127; PSIF_SAPT_TEMP; SAPT Temporary worlds fastest code file. 128; PSIF_SAPT_LRINTS; SAPT0 2-Body linear response LDA integrals. 180; PSIF_SCF_DB_MOS; Dual basis set MOs for DB-SCF or Basis-2 Guesses. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 199; PSIF_SO_D1OEI; Derivative OEIs are stored in file 199. 200; PSIF_SO_D1ERI; Derivative ERIs are stored in files 200, 201, 202, etc. File 200. 220; PSIF_3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 251; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 252; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 253; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 256; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 257; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 258; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 259; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 260; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 261; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 262; PSIF_DCC_R2; CEPA/CC residual. 263; PSIF_DCC_TEMP; CEPA/CC temporary storage. 264; PSIF_DCC_T2; CEPA/CC t2 amplitudes. Previous topic; <no title>; Next topic; Keywords by Alpha; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psifiles-1.html
Modifiability,flexible,flexible,"﻿. PSIOH Intermediate Files — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_FILE11; geometry optimization, geometry, and gradient. 12; PSIF_INTCO; internal coordinates file, formerly intco.dat. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_BB_PRESORT; BB UHF two",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psifiles-1.html
Performance,optimiz,optimization,"﻿. PSIOH Intermediate Files — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_FILE11; geometry optimization, geometry, and gradient. 12; PSIF_INTCO; internal coordinates file, formerly intco.dat. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_BB_PRESORT; BB UHF two",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psifiles-1.html
Availability,checkpoint,checkpoint,"﻿. PSIOH Intermediate Files — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_FILE11; geometry optimization, geometry, and gradient. 12; PSIF_INTCO; internal coordinates file, formerly intco.dat. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_BB_PRESORT; BB UHF two",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psifiles.html
Deployability,update,updated," PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 125; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 126; PSIF_SAPT_AMPS; SAPT Amplitudes. 127; PSIF_SAPT_TEMP; SAPT Temporary worlds fastest code file. 128; PSIF_SAPT_LRINTS; SAPT0 2-Body linear response LDA integrals. 180; PSIF_SCF_DB_MOS; Dual basis set MOs for DB-SCF or Basis-2 Guesses. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 199; PSIF_SO_D1OEI; Derivative OEIs are stored in file 199. 200; PSIF_SO_D1ERI; Derivative ERIs are stored in files 200, 201, 202, etc. File 200. 220; PSIF_3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 251; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 252; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 253; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 256; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 257; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 258; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 259; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 260; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 261; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 262; PSIF_DCC_R2; CEPA/CC residual. 263; PSIF_DCC_TEMP; CEPA/CC temporary storage. 264; PSIF_DCC_T2; CEPA/CC t2 amplitudes. Previous topic; <no title>; Next topic; Keywords by Alpha; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psifiles.html
Modifiability,flexible,flexible,"﻿. PSIOH Intermediate Files — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_FILE11; geometry optimization, geometry, and gradient. 12; PSIF_INTCO; internal coordinates file, formerly intco.dat. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_BB_PRESORT; BB UHF two",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psifiles.html
Performance,optimiz,optimization,"﻿. PSIOH Intermediate Files — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_FILE11; geometry optimization, geometry, and gradient. 12; PSIF_INTCO; internal coordinates file, formerly intco.dat. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_BB_PRESORT; BB UHF two",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psifiles.html
Deployability,update,updated,"﻿. PSI Variables by Module — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; CEPA; DCFT; DETCI; DFMP2; LMP2; MCSCF; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PSI Variables by Alpha; Next topic; ADC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 21, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psivariables_bymodule-1.html
Modifiability,variab,variable,"﻿. PSI Variables by Module — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; CEPA; DCFT; DETCI; DFMP2; LMP2; MCSCF; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PSI Variables by Alpha; Next topic; ADC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 21, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psivariables_bymodule-1.html
Deployability,update,updated,"﻿. PSI Variables by Module — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; CEPA; DCFT; DETCI; DFMP2; LMP2; MCSCF; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PSI Variables by Alpha; Next topic; ADC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 21, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psivariables_bymodule.html
Modifiability,variab,variable,"﻿. PSI Variables by Module — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; CEPA; DCFT; DETCI; DFMP2; LMP2; MCSCF; MP2; MRCC; OMP2; OMP3; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PSI Variables by Alpha; Next topic; ADC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 21, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_psivariables_bymodule.html
Availability,checkpoint,checkpoint,"f the molecule is automatically lowered to account for the different basis sets. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, wit",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html
Deployability,update,update," Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry speci",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html
Energy Efficiency,energy,energy,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtu",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html
Integrability,depend,depend,"t the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-3",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html
Modifiability,variab,variables,"rbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specific",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html
Performance,optimiz,optimization,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtu",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html
Safety,avoid,avoided,"am can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html
Testability,test,tests,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtu",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html
Availability,checkpoint,checkpoint,"f the molecule is automatically lowered to account for the different basis sets. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, wit",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite.html
Deployability,update,update," Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry speci",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite.html
Energy Efficiency,energy,energy,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtu",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite.html
Integrability,depend,depend,"t the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-3",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite.html
Modifiability,variab,variables,"rbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specific",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite.html
Performance,optimiz,optimization,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtu",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite.html
Safety,avoid,avoided,"am can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite.html
Testability,test,tests,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtu",MatchSource.WIKI,psi4manual/4.0b3/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite.html
Availability,avail,available,"﻿. Basis Sets — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Basis Sets¶; Basis sets in PSI4 are Gaussian functions (not Slater-type functions or plane waves),; all-electron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Specifying basis sets; Built-in basis sets by family (below); Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Tables Pople,; Dunning,; Dunning (Douglas-Kroll), and; Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/lib/basis in the source. For basis set availability by; element and the default ",MatchSource.WIKI,psi4manual/4.0b3/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets-1.html
Deployability,update,updated,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets-1.html
Testability,stub,stub,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets-1.html
Availability,avail,available,"﻿. Basis Sets — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Basis Sets¶; Basis sets in PSI4 are Gaussian functions (not Slater-type functions or plane waves),; all-electron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Specifying basis sets; Built-in basis sets by family (below); Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Tables Pople,; Dunning,; Dunning (Douglas-Kroll), and; Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/lib/basis in the source. For basis set availability by; element and the default ",MatchSource.WIKI,psi4manual/4.0b3/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets.html
Deployability,update,updated,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets.html
Testability,stub,stub,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets.html
Availability,avail,availability,﻿. Basis Sets by Element — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Basis Sets by Element¶. Basis set availability by element in PSI4. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31ppgss; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg_d_p_; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P,MatchSource.WIKI,psi4manual/4.0b3/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets_byelement-1.html
Deployability,update,updated," Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . feb-cc-pv_6pd_z; 5D/7F; H; He;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Others;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2pf; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-dl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets_byelement-1.html
Availability,avail,availability,﻿. Basis Sets by Element — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Basis Sets by Element¶. Basis set availability by element in PSI4. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31ppgss; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg_d_p_; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P,MatchSource.WIKI,psi4manual/4.0b3/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets_byelement.html
Deployability,update,updated," Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . feb-cc-pv_6pd_z; 5D/7F; H; He;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Others;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2pf; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-dl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets_byelement.html
Deployability,update,updated,"+G*; 6-311ppg_d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G**; 6-311ppg_d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d); 6-311ppg_2d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,p); 6-311ppg_2d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,2p); 6-311ppg_2d_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; —; —; —. def2-SVP; def2-svp; —; —; —. def2-SVPD; def2-svpd; —; —; —. def2-TZVP; def2-tzvp; —; —; —. def2-TZVPD; def2-tzvpd; —; —; —. def2-TZVPP; def2-tzvpp; —; —; —. def2-TZVPPD; def2-tzvppd; —; —; —. def2-QZVP; def2-qzvp; —; —; —. def2-QZVPD; def2-qzvpd; —; —; —. def2-QZVPP; def2-qzvpp; —; —; —. def2-QZVPPD; def2-qzvppd; —; —; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/basissets_byfamily-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets_byfamily-1.html
Deployability,update,updated,"+G*; 6-311ppg_d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G**; 6-311ppg_d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d); 6-311ppg_2d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,p); 6-311ppg_2d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,2p); 6-311ppg_2d_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; —; —; —. def2-SVP; def2-svp; —; —; —. def2-SVPD; def2-svpd; —; —; —. def2-TZVP; def2-tzvp; —; —; —. def2-TZVPD; def2-tzvpd; —; —; —. def2-TZVPP; def2-tzvpp; —; —; —. def2-TZVPPD; def2-tzvppd; —; —; —. def2-QZVP; def2-qzvp; —; —; —. def2-QZVPD; def2-qzvpd; —; —; —. def2-QZVPP; def2-qzvpp; —; —; —. def2-QZVPPD; def2-qzvppd; —; —; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets_byfamily.html
Availability,avail,available,"﻿. Best Practices for Python Functions — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». Best Practices for Python Functions¶. Thy python functions shall always have final argument **kwargs, that they may take in and pass on keywords meant for other functions. Yea, even the run_mcscf(), and run_ccsd() -type functions that have no use for kwargs. The exceptions are python functions that are only helpers called by a driver function. Python functions should read the kwargs dictionary and (possibly) add to it. Functions should not pop or remove keywords from kwargs, even those keywords meaningful only to itself. This will ensure that the complete kwargs is available for pickling and sow/reap procedures. The exception is the molecule argument, which is read by the first function that gets ahold of it. This first function activates the molecule and pops it out of kwargs, effectively setting molecule for all subsequent functions. The code below should suffice.; # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line ",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py-1.html
Deployability,continuous,continuous,"_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/exampl",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py-1.html
Energy Efficiency,energy,energy," name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py-1.html
Integrability,interoperab,interoperability," restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py-1.html
Modifiability,variab,variables,"put files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py-1.html
Performance,perform,performs,"one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a m",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py-1.html
Security,expose,expose,"near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to PSI4; Next topic; Documentation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py-1.html
Testability,test,test," what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short nam",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py-1.html
Availability,avail,available,"﻿. Best Practices for Python Functions — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». Best Practices for Python Functions¶. Thy python functions shall always have final argument **kwargs, that they may take in and pass on keywords meant for other functions. Yea, even the run_mcscf(), and run_ccsd() -type functions that have no use for kwargs. The exceptions are python functions that are only helpers called by a driver function. Python functions should read the kwargs dictionary and (possibly) add to it. Functions should not pop or remove keywords from kwargs, even those keywords meaningful only to itself. This will ensure that the complete kwargs is available for pickling and sow/reap procedures. The exception is the molecule argument, which is read by the first function that gets ahold of it. This first function activates the molecule and pops it out of kwargs, effectively setting molecule for all subsequent functions. The code below should suffice.; # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line ",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py.html
Deployability,continuous,continuous,"_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/exampl",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py.html
Energy Efficiency,energy,energy," name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py.html
Integrability,interoperab,interoperability," restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py.html
Modifiability,variab,variables,"put files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py.html
Performance,perform,performs,"one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a m",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py.html
Security,expose,expose,"near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to PSI4; Next topic; Documentation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py.html
Testability,test,test," what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short nam",MatchSource.WIKI,psi4manual/4.0b3/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bestpractices_py.html
Deployability,update,updated,"]P.-A. Malmqvist, A. Rendell, and B. O. Roos,; J. Phys. Chem. 94, 5477-5482 (1990). [Docken:1972:4928]K. K. Docken and J. Hinze,; J. Chem. Phys. 57, 4928-4936 (1972). [Ruedenberg:1979:1069]K. Ruedenberg, L. M. Cheung, and S. T. Elbert,; Int. J. Quantum Chem. 16, 1069-1101 (1979). [Evangelista:2010:074107]F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; J. Chem. Phys. 132, 074107 (2010). [Wennmohs:2008]F. Wennmohs and F. Neese,; Chem. Phys. 343, 217-230 (2008). [Sherrill:1998:od]C. D. Sherrill, A. I. Krylov, E. F. C. Byrd, and M. Head-Gordon,; J. Chem. Phys. 109, 4171 (1998). [Krylov:2000:vod]A. I. Krylov, C. D. Sherrill, and M. Head-Gordon,; J. Chem. Phys. 113, 6509 (2000). [Kurlancek:2009]W. Kurlancheek and M. Head-Gordon,; Mol. Phys. 107, 1223 (2009). [Pedersen:1999:od]T. B. Pedersen, H. Koch, and C. Hattig,; J. Chem. Phys. 110, 8318 (1999). [Pedersen:2001:od]T. B. Pedersen, B. Fernandez, and H. Koch,; J. Chem. Phys. 114, 6983 (2001). [Bozkaya:2011:omp2]U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill; J. Chem. Phys. 135, 104103 (2011). [Bozkaya:2011:omp3]U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011). [Bozkaya:2012:odtl]U. Bozkaya and H. F. Schaefer,; J. Chem. Phys. 136, 204114 (2012). [Grimme:2004:1463]; Grimme, J. Comp. Chem. 25 1463-1473 (2004). [Grimme:2006:1787]; Grimme, J. Comp. Chem. 27, 1787-1799 (2006). [Grimme:2010:154104]S. Grimme, J. Antony, S. Ehrlich, and H. Krieg,; J. Chem. Phys. 132, 154104 (2010). [Grimme:2011:1456]S. Grimme, S. Ehrlich, and L. Goerigk,; J. Comput. Chem. 32, 1456 (2011). [Wu:2002:515]Q. Wu and W. Yang,; J. Chem. Phys. 116, 515 (2002). Previous topic; Appendices; Next topic; Test Suite and Sample Inputs; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/bibliography-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bibliography-1.html
Deployability,update,updated,"]P.-A. Malmqvist, A. Rendell, and B. O. Roos,; J. Phys. Chem. 94, 5477-5482 (1990). [Docken:1972:4928]K. K. Docken and J. Hinze,; J. Chem. Phys. 57, 4928-4936 (1972). [Ruedenberg:1979:1069]K. Ruedenberg, L. M. Cheung, and S. T. Elbert,; Int. J. Quantum Chem. 16, 1069-1101 (1979). [Evangelista:2010:074107]F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; J. Chem. Phys. 132, 074107 (2010). [Wennmohs:2008]F. Wennmohs and F. Neese,; Chem. Phys. 343, 217-230 (2008). [Sherrill:1998:od]C. D. Sherrill, A. I. Krylov, E. F. C. Byrd, and M. Head-Gordon,; J. Chem. Phys. 109, 4171 (1998). [Krylov:2000:vod]A. I. Krylov, C. D. Sherrill, and M. Head-Gordon,; J. Chem. Phys. 113, 6509 (2000). [Kurlancek:2009]W. Kurlancheek and M. Head-Gordon,; Mol. Phys. 107, 1223 (2009). [Pedersen:1999:od]T. B. Pedersen, H. Koch, and C. Hattig,; J. Chem. Phys. 110, 8318 (1999). [Pedersen:2001:od]T. B. Pedersen, B. Fernandez, and H. Koch,; J. Chem. Phys. 114, 6983 (2001). [Bozkaya:2011:omp2]U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill; J. Chem. Phys. 135, 104103 (2011). [Bozkaya:2011:omp3]U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011). [Bozkaya:2012:odtl]U. Bozkaya and H. F. Schaefer,; J. Chem. Phys. 136, 204114 (2012). [Grimme:2004:1463]; Grimme, J. Comp. Chem. 25 1463-1473 (2004). [Grimme:2006:1787]; Grimme, J. Comp. Chem. 27, 1787-1799 (2006). [Grimme:2010:154104]S. Grimme, J. Antony, S. Ehrlich, and H. Krieg,; J. Chem. Phys. 132, 154104 (2010). [Grimme:2011:1456]S. Grimme, S. Ehrlich, and L. Goerigk,; J. Comput. Chem. 32, 1456 (2011). [Wu:2002:515]Q. Wu and W. Yang,; J. Chem. Phys. 116, 515 (2002). Previous topic; Appendices; Next topic; Test Suite and Sample Inputs; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/bibliography.html
Availability,avail,available,"Q]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy. corl_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy. delta_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. delta2_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf",MatchSource.WIKI,psi4manual/4.0b3/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs-1.html
Deployability,configurat,configuration,"Complete Basis Set — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes; Must specify conventional or density-fitted mp2 through kwargs ; with value ‘conv-mp2’ or ‘df-mp2’, not with c-side option. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and tri",MatchSource.WIKI,psi4manual/4.0b3/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs-1.html
Energy Efficiency,energy,energy,"﻿. Complete Basis Set — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes; Must specify conventional or density-fitted mp2 through kwargs ; with value ‘conv-mp2’ or ‘df-mp2’, not with c-side option. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and ",MatchSource.WIKI,psi4manual/4.0b3/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs-1.html
Integrability,wrap,wrapper,"n atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('conv-mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('conv-mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this s",MatchSource.WIKI,psi4manual/4.0b3/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs-1.html
Modifiability,variab,variables,"﻿. Complete Basis Set — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes; Must specify conventional or density-fitted mp2 through kwargs ; with value ‘conv-mp2’ or ‘df-mp2’, not with c-side option. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and ",MatchSource.WIKI,psi4manual/4.0b3/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs-1.html
Performance,perform,performed,"his ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; df-scf; mp2. df-mp2; cc2; ccsd. bccd; cc3; ccsd(t). cisd; cisdt; cisdtq. cin; fci. Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – 'mp2' || 'ccsd' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtain",MatchSource.WIKI,psi4manual/4.0b3/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs-1.html
Usability,simpl,simple,"eme.; An exception is the default, 'highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy. corl_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy. delta_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. delta2_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('conv-mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('conv-mp2', ",MatchSource.WIKI,psi4manual/4.0b3/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs-1.html
Availability,avail,available,"Q]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy. corl_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy. delta_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. delta2_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf",MatchSource.WIKI,psi4manual/4.0b3/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs.html
Deployability,configurat,configuration,"Complete Basis Set — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes; Must specify conventional or density-fitted mp2 through kwargs ; with value ‘conv-mp2’ or ‘df-mp2’, not with c-side option. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and tri",MatchSource.WIKI,psi4manual/4.0b3/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs.html
Energy Efficiency,energy,energy,"﻿. Complete Basis Set — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes; Must specify conventional or density-fitted mp2 through kwargs ; with value ‘conv-mp2’ or ‘df-mp2’, not with c-side option. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and ",MatchSource.WIKI,psi4manual/4.0b3/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs.html
Integrability,wrap,wrapper,"n atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('conv-mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('conv-mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this s",MatchSource.WIKI,psi4manual/4.0b3/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs.html
Modifiability,variab,variables,"﻿. Complete Basis Set — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes; Must specify conventional or density-fitted mp2 through kwargs ; with value ‘conv-mp2’ or ‘df-mp2’, not with c-side option. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and ",MatchSource.WIKI,psi4manual/4.0b3/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs.html
Performance,perform,performed,"his ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; df-scf; mp2. df-mp2; cc2; ccsd. bccd; cc3; ccsd(t). cisd; cisdt; cisdtq. cin; fci. Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – 'mp2' || 'ccsd' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtain",MatchSource.WIKI,psi4manual/4.0b3/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs.html
Usability,simpl,simple,"eme.; An exception is the default, 'highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy. corl_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy. delta_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. delta2_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('conv-mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('conv-mp2', ",MatchSource.WIKI,psi4manual/4.0b3/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Previous topic; Complete Basis Set; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/cbs_eqn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs_eqn-1.html
Energy Efficiency,energy,energy,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Previous topic; Complete Basis Set; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/cbs_eqn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs_eqn-1.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Previous topic; Complete Basis Set; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/cbs_eqn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs_eqn.html
Energy Efficiency,energy,energy,"﻿. <no title> — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Previous topic; Complete Basis Set; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/cbs_eqn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cbs_eqn.html
Availability,reliab,reliable,"﻿. CC: Coupled Cluster Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CC: Coupled Cluster Methods¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordabl",MatchSource.WIKI,psi4manual/4.0b3/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc-1.html
Deployability,configurat,configuration,"thor: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such ",MatchSource.WIKI,psi4manual/4.0b3/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc-1.html
Energy Efficiency,energy,energy,"pansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Reference; Method; Energy; Gradient; Exc. Energies; LR Props.",MatchSource.WIKI,psi4manual/4.0b3/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc-1.html
Integrability,depend,dependent," approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Reference; Method; Energy; Gradient; Exc. Energies; LR Props. RHF; CC2; Y; N; Y; Y. UHF; CC2; Y; N; Y; N. ROHF; CC2; Y; N; Y; N. RHF; CCSD; Y; Y; Y; Y. RHF; CCSD(T); Y; N; —; —. ROHF; CCSD; Y; Y; Y; N. ROHF; CCSD(T); Y; N; —; —. UHF; CCSD; Y; Y; Y; N. UHF; CCSD(T); Y; Y; —; —. RHF; CC3; Y; N; Y; N. UHF; CC3; Y; N; Y; N. ROHF; CC3; Y; N; Y; N. Brueckner; CCD; Y; N; N; N. Brueckner; CCD(T); Y; N; —; —. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'cc2',; 'cc3', 'bccd' ",MatchSource.WIKI,psi4manual/4.0b3/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc-1.html
Modifiability,config,configuation,"﻿. CC: Coupled Cluster Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CC: Coupled Cluster Methods¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordabl",MatchSource.WIKI,psi4manual/4.0b3/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc-1.html
Performance,optimiz,optimizations,"ion property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “lo",MatchSource.WIKI,psi4manual/4.0b3/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc-1.html
Availability,reliab,reliable,"﻿. CC: Coupled Cluster Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CC: Coupled Cluster Methods¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordabl",MatchSource.WIKI,psi4manual/4.0b3/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc.html
Deployability,configurat,configuration,"thor: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such ",MatchSource.WIKI,psi4manual/4.0b3/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc.html
Energy Efficiency,energy,energy,"pansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Reference; Method; Energy; Gradient; Exc. Energies; LR Props.",MatchSource.WIKI,psi4manual/4.0b3/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc.html
Integrability,depend,dependent," approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Reference; Method; Energy; Gradient; Exc. Energies; LR Props. RHF; CC2; Y; N; Y; Y. UHF; CC2; Y; N; Y; N. ROHF; CC2; Y; N; Y; N. RHF; CCSD; Y; Y; Y; Y. RHF; CCSD(T); Y; N; —; —. ROHF; CCSD; Y; Y; Y; N. ROHF; CCSD(T); Y; N; —; —. UHF; CCSD; Y; Y; Y; N. UHF; CCSD(T); Y; Y; —; —. RHF; CC3; Y; N; Y; N. UHF; CC3; Y; N; Y; N. ROHF; CC3; Y; N; Y; N. Brueckner; CCD; Y; N; N; N. Brueckner; CCD(T); Y; N; —; —. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'cc2',; 'cc3', 'bccd' ",MatchSource.WIKI,psi4manual/4.0b3/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc.html
Modifiability,config,configuation,"﻿. CC: Coupled Cluster Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CC: Coupled Cluster Methods¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordabl",MatchSource.WIKI,psi4manual/4.0b3/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc.html
Performance,optimiz,optimizations,"ion property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “lo",MatchSource.WIKI,psi4manual/4.0b3/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cc.html
Deployability,configurat,configuration,"﻿. CEPA: Coupled-Pair Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CEPA: Coupled-Pair Methods¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, CEPA; Coupled-pair methods can be viewed as approximations to coupled-cluster (CC) theory or as size-extensive modifications; of truncated configuration interaction (CI) theory. The methods have the same complexity as CI; with single and double excitations (CISD), and solving the CISD or coupled-pair equations requires; fewer floating point operations than solving the CC with singles and doubles (CCSD) equations. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with the sixth power of system size. For a; detailed discussion of the properties of various coupled-pair methods, see Ref. [Wennmohs:2008].; What follows is a very basic description of the practical differences in the equations that define each of the; coupled-pair methods implemented in PSI4. We begin with the CISD wave function. (1); where we have chosen the intermediate normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the",MatchSource.WIKI,psi4manual/4.0b3/cepa-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa-1.html
Energy Efficiency,power,power,"﻿. CEPA: Coupled-Pair Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CEPA: Coupled-Pair Methods¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, CEPA; Coupled-pair methods can be viewed as approximations to coupled-cluster (CC) theory or as size-extensive modifications; of truncated configuration interaction (CI) theory. The methods have the same complexity as CI; with single and double excitations (CISD), and solving the CISD or coupled-pair equations requires; fewer floating point operations than solving the CC with singles and doubles (CCSD) equations. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with the sixth power of system size. For a; detailed discussion of the properties of various coupled-pair methods, see Ref. [Wennmohs:2008].; What follows is a very basic description of the practical differences in the equations that define each of the; coupled-pair methods implemented in PSI4. We begin with the CISD wave function. (1); where we have chosen the intermediate normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the",MatchSource.WIKI,psi4manual/4.0b3/cepa-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa-1.html
Integrability,depend,depend,"e normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the correlation energy. In a spin-free formalism,; the pair energy is given by. (5); Methods whose shifts ( and ) do not explicitly depend on orbitals or ; (CISD, CEPA(0), ACPF, and AQCC); have solutions that render the energy stationary with respect variations in the amplitudes. This convenient property allows; density matrices and 1-electron properties to be evaluated without any additional effort.; The coupled-pair methods currently supported in PSI4 are outlined in Table CEPA Methods. name; calls method; energy; derivatives; 1-electron properties. cepa(0); coupled electron pair approximation, variant 0; Y; N; Y. cepa(1); coupled electron pair approximation, variant 1; Y; N; N. cepa(3); coupled electron pair approximation, variant 3; Y; N; N. acpf; averaged coupled-pair functional; Y; N; Y. aqcc; averaged quadratic coupled-cluster; Y; N; Y. sdci; configuration interaction with single and double excitations; Y; N; Y. dci; configuration interaction with double excitations; Y; N; Y. Basic Coupled Pair Keywords¶. BASIS¶. Primary basis set. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in",MatchSource.WIKI,psi4manual/4.0b3/cepa-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa-1.html
Modifiability,config,configuration,"﻿. CEPA: Coupled-Pair Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CEPA: Coupled-Pair Methods¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, CEPA; Coupled-pair methods can be viewed as approximations to coupled-cluster (CC) theory or as size-extensive modifications; of truncated configuration interaction (CI) theory. The methods have the same complexity as CI; with single and double excitations (CISD), and solving the CISD or coupled-pair equations requires; fewer floating point operations than solving the CC with singles and doubles (CCSD) equations. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with the sixth power of system size. For a; detailed discussion of the properties of various coupled-pair methods, see Ref. [Wennmohs:2008].; What follows is a very basic description of the practical differences in the equations that define each of the; coupled-pair methods implemented in PSI4. We begin with the CISD wave function. (1); where we have chosen the intermediate normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the",MatchSource.WIKI,psi4manual/4.0b3/cepa-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa-1.html
Performance,optimiz,optimized," of vectors to store for DIIS extrapolation. Type: integer; Default: 8. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. DIPMOM¶. Compute the dipole moment? Note that quadrupole moments will also be computed if PRINT >= 2. Type: boolean; Default: false. CEPA_VABCD_DIRECT¶. Use integral-direct implementation of the (ac|bd) t(ij,cd) contraction? AO integrals will be generated on the fly. The CEPA iterations will be slower, but the AO->MO integral transform will be faster, and the out-of-core sort of the (AC|BD) integrals will be avoided. Type: boolean; Default: false. Advanced Coupled Pair Keywords¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). SCS_CEPA¶. Perform SCS-CEPA? If true, note that the default values for the spin component scaling factors are optimized for the CCSD method. Type: boolean; Default: false. CEPA_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CEPA. Type: double; Default: 1.27. CEPA_SCALE_SS¶. Same-spin scaling factor for SCS-CEPA. Type: double; Default: 1.13. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from the computation. Note that this algorithm is not optimized for doubles-only computations. Type: boolean; Default: false. Table Of Contents. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; MAXITER; DIIS_MAX_VECS; MP2_SCALE_OS; MP2_SCALE_SS; DIPMOM; CEPA_VABCD_DIRECT. Advanced Coupled Pair Keywords; CEPA_LEVEL; SCS_CEPA; CEPA_SCALE_OS; CEPA_SCALE_SS; CEPA_NO_SINGLES. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; CC: Coupled Cluster Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . ",MatchSource.WIKI,psi4manual/4.0b3/cepa-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa-1.html
Safety,avoid,avoided,"eeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, SMALL, LARGE; Default: FALSE. R_CONVERGENCE¶. Desired convergence for the t1 and t2 amplitudes, defined as the norm of the change in the amplitudes between iterations. Type: conv double; Default: 1.0e-7. MAXITER¶. Maximum number of iterations to converge the t1 and t2 amplitudes. Type: integer; Default: 100. DIIS_MAX_VECS¶. Number of vectors to store for DIIS extrapolation. Type: integer; Default: 8. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. DIPMOM¶. Compute the dipole moment? Note that quadrupole moments will also be computed if PRINT >= 2. Type: boolean; Default: false. CEPA_VABCD_DIRECT¶. Use integral-direct implementation of the (ac|bd) t(ij,cd) contraction? AO integrals will be generated on the fly. The CEPA iterations will be slower, but the AO->MO integral transform will be faster, and the out-of-core sort of the (AC|BD) integrals will be avoided. Type: boolean; Default: false. Advanced Coupled Pair Keywords¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). SCS_CEPA¶. Perform SCS-CEPA? If true, note that the default values for the spin component scaling factors are optimized for the CCSD method. Type: boolean; Default: false. CEPA_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CEPA. Type: double; Default: 1.27. CEPA_SCALE_SS¶. Same-spin scaling factor for SCS-CEPA. Type: double; Default: 1.13. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from the computation. Note that this algorithm is not optimized for doubles-only computations. Type: boolean; Default: false. Table Of Contents. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; MAXITER; DIIS_MA",MatchSource.WIKI,psi4manual/4.0b3/cepa-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa-1.html
Usability,simpl,simple,"r as size-extensive modifications; of truncated configuration interaction (CI) theory. The methods have the same complexity as CI; with single and double excitations (CISD), and solving the CISD or coupled-pair equations requires; fewer floating point operations than solving the CC with singles and doubles (CCSD) equations. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with the sixth power of system size. For a; detailed discussion of the properties of various coupled-pair methods, see Ref. [Wennmohs:2008].; What follows is a very basic description of the practical differences in the equations that define each of the; coupled-pair methods implemented in PSI4. We begin with the CISD wave function. (1); where we have chosen the intermediate normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the correlation energy. In a spin-free formalism,; the pair energy is given by. (5); Methods whose shifts ( and ) do not explicitly depend on orbitals or ; (CISD, CEPA(0), ACPF, and AQCC); have solutions that render the energy stationary with respect variations in the amplitudes. This convenient property allows; density matrices and 1-electron properties to be evaluated without any additional effor",MatchSource.WIKI,psi4manual/4.0b3/cepa-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa-1.html
Deployability,configurat,configuration,"﻿. CEPA: Coupled-Pair Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CEPA: Coupled-Pair Methods¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, CEPA; Coupled-pair methods can be viewed as approximations to coupled-cluster (CC) theory or as size-extensive modifications; of truncated configuration interaction (CI) theory. The methods have the same complexity as CI; with single and double excitations (CISD), and solving the CISD or coupled-pair equations requires; fewer floating point operations than solving the CC with singles and doubles (CCSD) equations. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with the sixth power of system size. For a; detailed discussion of the properties of various coupled-pair methods, see Ref. [Wennmohs:2008].; What follows is a very basic description of the practical differences in the equations that define each of the; coupled-pair methods implemented in PSI4. We begin with the CISD wave function. (1); where we have chosen the intermediate normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the",MatchSource.WIKI,psi4manual/4.0b3/cepa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa.html
Energy Efficiency,power,power,"﻿. CEPA: Coupled-Pair Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CEPA: Coupled-Pair Methods¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, CEPA; Coupled-pair methods can be viewed as approximations to coupled-cluster (CC) theory or as size-extensive modifications; of truncated configuration interaction (CI) theory. The methods have the same complexity as CI; with single and double excitations (CISD), and solving the CISD or coupled-pair equations requires; fewer floating point operations than solving the CC with singles and doubles (CCSD) equations. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with the sixth power of system size. For a; detailed discussion of the properties of various coupled-pair methods, see Ref. [Wennmohs:2008].; What follows is a very basic description of the practical differences in the equations that define each of the; coupled-pair methods implemented in PSI4. We begin with the CISD wave function. (1); where we have chosen the intermediate normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the",MatchSource.WIKI,psi4manual/4.0b3/cepa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa.html
Integrability,depend,depend,"e normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the correlation energy. In a spin-free formalism,; the pair energy is given by. (5); Methods whose shifts ( and ) do not explicitly depend on orbitals or ; (CISD, CEPA(0), ACPF, and AQCC); have solutions that render the energy stationary with respect variations in the amplitudes. This convenient property allows; density matrices and 1-electron properties to be evaluated without any additional effort.; The coupled-pair methods currently supported in PSI4 are outlined in Table CEPA Methods. name; calls method; energy; derivatives; 1-electron properties. cepa(0); coupled electron pair approximation, variant 0; Y; N; Y. cepa(1); coupled electron pair approximation, variant 1; Y; N; N. cepa(3); coupled electron pair approximation, variant 3; Y; N; N. acpf; averaged coupled-pair functional; Y; N; Y. aqcc; averaged quadratic coupled-cluster; Y; N; Y. sdci; configuration interaction with single and double excitations; Y; N; Y. dci; configuration interaction with double excitations; Y; N; Y. Basic Coupled Pair Keywords¶. BASIS¶. Primary basis set. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in",MatchSource.WIKI,psi4manual/4.0b3/cepa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa.html
Modifiability,config,configuration,"﻿. CEPA: Coupled-Pair Methods — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CEPA: Coupled-Pair Methods¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, CEPA; Coupled-pair methods can be viewed as approximations to coupled-cluster (CC) theory or as size-extensive modifications; of truncated configuration interaction (CI) theory. The methods have the same complexity as CI; with single and double excitations (CISD), and solving the CISD or coupled-pair equations requires; fewer floating point operations than solving the CC with singles and doubles (CCSD) equations. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with the sixth power of system size. For a; detailed discussion of the properties of various coupled-pair methods, see Ref. [Wennmohs:2008].; What follows is a very basic description of the practical differences in the equations that define each of the; coupled-pair methods implemented in PSI4. We begin with the CISD wave function. (1); where we have chosen the intermediate normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the",MatchSource.WIKI,psi4manual/4.0b3/cepa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa.html
Performance,optimiz,optimized," of vectors to store for DIIS extrapolation. Type: integer; Default: 8. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. DIPMOM¶. Compute the dipole moment? Note that quadrupole moments will also be computed if PRINT >= 2. Type: boolean; Default: false. CEPA_VABCD_DIRECT¶. Use integral-direct implementation of the (ac|bd) t(ij,cd) contraction? AO integrals will be generated on the fly. The CEPA iterations will be slower, but the AO->MO integral transform will be faster, and the out-of-core sort of the (AC|BD) integrals will be avoided. Type: boolean; Default: false. Advanced Coupled Pair Keywords¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). SCS_CEPA¶. Perform SCS-CEPA? If true, note that the default values for the spin component scaling factors are optimized for the CCSD method. Type: boolean; Default: false. CEPA_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CEPA. Type: double; Default: 1.27. CEPA_SCALE_SS¶. Same-spin scaling factor for SCS-CEPA. Type: double; Default: 1.13. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from the computation. Note that this algorithm is not optimized for doubles-only computations. Type: boolean; Default: false. Table Of Contents. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; MAXITER; DIIS_MAX_VECS; MP2_SCALE_OS; MP2_SCALE_SS; DIPMOM; CEPA_VABCD_DIRECT. Advanced Coupled Pair Keywords; CEPA_LEVEL; SCS_CEPA; CEPA_SCALE_OS; CEPA_SCALE_SS; CEPA_NO_SINGLES. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; CC: Coupled Cluster Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . ",MatchSource.WIKI,psi4manual/4.0b3/cepa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa.html
Safety,avoid,avoided,"eeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, SMALL, LARGE; Default: FALSE. R_CONVERGENCE¶. Desired convergence for the t1 and t2 amplitudes, defined as the norm of the change in the amplitudes between iterations. Type: conv double; Default: 1.0e-7. MAXITER¶. Maximum number of iterations to converge the t1 and t2 amplitudes. Type: integer; Default: 100. DIIS_MAX_VECS¶. Number of vectors to store for DIIS extrapolation. Type: integer; Default: 8. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. DIPMOM¶. Compute the dipole moment? Note that quadrupole moments will also be computed if PRINT >= 2. Type: boolean; Default: false. CEPA_VABCD_DIRECT¶. Use integral-direct implementation of the (ac|bd) t(ij,cd) contraction? AO integrals will be generated on the fly. The CEPA iterations will be slower, but the AO->MO integral transform will be faster, and the out-of-core sort of the (AC|BD) integrals will be avoided. Type: boolean; Default: false. Advanced Coupled Pair Keywords¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). SCS_CEPA¶. Perform SCS-CEPA? If true, note that the default values for the spin component scaling factors are optimized for the CCSD method. Type: boolean; Default: false. CEPA_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CEPA. Type: double; Default: 1.27. CEPA_SCALE_SS¶. Same-spin scaling factor for SCS-CEPA. Type: double; Default: 1.13. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from the computation. Note that this algorithm is not optimized for doubles-only computations. Type: boolean; Default: false. Table Of Contents. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; MAXITER; DIIS_MA",MatchSource.WIKI,psi4manual/4.0b3/cepa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa.html
Usability,simpl,simple,"r as size-extensive modifications; of truncated configuration interaction (CI) theory. The methods have the same complexity as CI; with single and double excitations (CISD), and solving the CISD or coupled-pair equations requires; fewer floating point operations than solving the CC with singles and doubles (CCSD) equations. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with the sixth power of system size. For a; detailed discussion of the properties of various coupled-pair methods, see Ref. [Wennmohs:2008].; What follows is a very basic description of the practical differences in the equations that define each of the; coupled-pair methods implemented in PSI4. We begin with the CISD wave function. (1); where we have chosen the intermediate normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the correlation energy. In a spin-free formalism,; the pair energy is given by. (5); Methods whose shifts ( and ) do not explicitly depend on orbitals or ; (CISD, CEPA(0), ACPF, and AQCC); have solutions that render the energy stationary with respect variations in the amplitudes. This convenient property allows; density matrices and 1-electron properties to be evaluated without any additional effor",MatchSource.WIKI,psi4manual/4.0b3/cepa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa.html
Deployability,update,updated,"appers. Basis Sets; Theoretical Methods: SCF to FCI; Notes on Options; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; ADC: Ab Initio Polarization Propagator; SAPT: Symmetry-Adapted Perturbation Theory; CEPA: Coupled-Pair Methods; CC: Coupled Cluster Methods; PSIMRCC Implementation of Mk-MRCC Theory; Interface to MRCC by M. Kállay; CI: Configuration Interaction; Geometry Optimization; Evaluation of One-Electron Properties. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Interfaces: Enhancing PSI4 Capabilities. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/contents.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/contents.html
Integrability,wrap,wrappers,"appers. Basis Sets; Theoretical Methods: SCF to FCI; Notes on Options; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; ADC: Ab Initio Polarization Propagator; SAPT: Symmetry-Adapted Perturbation Theory; CEPA: Coupled-Pair Methods; CC: Coupled Cluster Methods; PSIMRCC Implementation of Mk-MRCC Theory; Interface to MRCC by M. Kállay; CI: Configuration Interaction; Geometry Optimization; Evaluation of One-Electron Properties. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Interfaces: Enhancing PSI4 Capabilities. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/contents.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/contents.html
Deployability,update,updated,"﻿. Contributions: Intro to Programming in PSI4 — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Contributions: Intro to Programming in PSI4¶. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Best Practices for Python Functions; Documentation; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase; The Map of the Sphinx. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. Previous topic; Creating a Database; Next topic; Plugins: Adding New Functionality to PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/contributing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/contributing-1.html
Deployability,update,updated,"﻿. Contributions: Intro to Programming in PSI4 — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Contributions: Intro to Programming in PSI4¶. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Best Practices for Python Functions; Documentation; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase; The Map of the Sphinx. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. Previous topic; Creating a Database; Next topic; Plugins: Adding New Functionality to PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/contributing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/contributing.html
Availability,error,error,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp-1.html
Deployability,update,updated,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp-1.html
Energy Efficiency,energy,energy,"﻿. Counterpoise Correct — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b3/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp-1.html
Modifiability,variab,variables,"﻿. Counterpoise Correct — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b3/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp-1.html
Performance,optimiz,optimize,"; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . ne",MatchSource.WIKI,psi4manual/4.0b3/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp-1.html
Testability,test,tested,"﻿. Counterpoise Correct — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b3/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp-1.html
Availability,error,error,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp.html
Deployability,update,updated,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp.html
Energy Efficiency,energy,energy,"﻿. Counterpoise Correct — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b3/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp.html
Modifiability,variab,variables,"﻿. Counterpoise Correct — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b3/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp.html
Performance,optimiz,optimize,"; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . ne",MatchSource.WIKI,psi4manual/4.0b3/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp.html
Testability,test,tested,"﻿. Counterpoise Correct — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b3/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cp.html
Deployability,update,updated,"﻿. Customization: Adding Simple Extensions — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/customizing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/customizing-1.html
Security,access,accessible,"﻿. Customization: Adding Simple Extensions — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/customizing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/customizing-1.html
Deployability,update,updated,"﻿. Customization: Adding Simple Extensions — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/customizing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/customizing.html
Security,access,accessible,"﻿. Customization: Adding Simple Extensions — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/customizing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/customizing.html
Availability,avail,available,"N. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Avai",MatchSource.WIKI,psi4manual/4.0b3/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html
Deployability,continuous,continuous,"' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – 'on' || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be ",MatchSource.WIKI,psi4manual/4.0b3/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html
Energy Efficiency,energy,energy," :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job ",MatchSource.WIKI,psi4manual/4.0b3/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html
Integrability,wrap,wrapper,"tion energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('dfmp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; throu",MatchSource.WIKI,psi4manual/4.0b3/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html
Modifiability,variab,variables,"﻿. Database — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b3/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html
Performance,optimiz,optimize,"lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Ind",MatchSource.WIKI,psi4manual/4.0b3/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html
Security,access,access,"﻿. Database — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b3/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html
Testability,benchmark,benchmark,"﻿. Database — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b3/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOF",MatchSource.WIKI,psi4manual/4.0b3/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html
Availability,avail,available,"N. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Avai",MatchSource.WIKI,psi4manual/4.0b3/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db.html
Deployability,continuous,continuous,"' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – 'on' || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be ",MatchSource.WIKI,psi4manual/4.0b3/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db.html
Energy Efficiency,energy,energy," :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job ",MatchSource.WIKI,psi4manual/4.0b3/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db.html
Integrability,wrap,wrapper,"tion energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('dfmp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; throu",MatchSource.WIKI,psi4manual/4.0b3/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db.html
Modifiability,variab,variables,"﻿. Database — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b3/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db.html
Performance,optimiz,optimize,"lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Ind",MatchSource.WIKI,psi4manual/4.0b3/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db.html
Security,access,access,"﻿. Database — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b3/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db.html
Testability,benchmark,benchmark,"﻿. Database — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b3/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOF",MatchSource.WIKI,psi4manual/4.0b3/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db.html
Availability,avail,available," rules are included in the CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. Use of DETCI for CASSCF; wavefunctions is described in another section of this manual.; As just mentioned, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; The division of the molecular orbitals into various subspaces such as; RAS spaces, or frozen vs. active orbitals, etc., needs to be clear not; only to detci, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus, orbital; subspace keywords such as RAS1,; RAS2, RAS3, FROZEN_DOCC, FROZEN_UOCC,; ACTIVE, etc., should be set; in the global section of input so they may also be read by other modules.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. Higher order; single-refernce CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specifed by fci. More complicate",MatchSource.WIKI,psi4manual/4.0b3/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html
Deployability,configurat,configuration,"﻿. CI: Configuration Interaction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b3/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html
Energy Efficiency,adapt,adapted,"﻿. CI: Configuration Interaction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b3/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html
Integrability,interface,interface,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4manual/4.0b3/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html
Modifiability,adapt,adapted,"﻿. CI: Configuration Interaction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b3/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html
Performance,optimiz,optimized,"a diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are include",MatchSource.WIKI,psi4manual/4.0b3/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html
Testability,test,testing,"rsion of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. Table Of Contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; FROZEN_UOCC; MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Previous topic; Interface to MRCC by M. Kállay; Next topic; Geometry Optimization; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to ",MatchSource.WIKI,psi4manual/4.0b3/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html
Usability,simpl,simplest,"﻿. CI: Configuration Interaction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b3/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html
Availability,avail,available," rules are included in the CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. Use of DETCI for CASSCF; wavefunctions is described in another section of this manual.; As just mentioned, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; The division of the molecular orbitals into various subspaces such as; RAS spaces, or frozen vs. active orbitals, etc., needs to be clear not; only to detci, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus, orbital; subspace keywords such as RAS1,; RAS2, RAS3, FROZEN_DOCC, FROZEN_UOCC,; ACTIVE, etc., should be set; in the global section of input so they may also be read by other modules.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. Higher order; single-refernce CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specifed by fci. More complicate",MatchSource.WIKI,psi4manual/4.0b3/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci.html
Deployability,configurat,configuration,"﻿. CI: Configuration Interaction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b3/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci.html
Energy Efficiency,adapt,adapted,"﻿. CI: Configuration Interaction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b3/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci.html
Integrability,interface,interface,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4manual/4.0b3/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci.html
Modifiability,adapt,adapted,"﻿. CI: Configuration Interaction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b3/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci.html
Performance,optimiz,optimized,"a diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are include",MatchSource.WIKI,psi4manual/4.0b3/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci.html
Testability,test,testing,"rsion of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. Table Of Contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; FROZEN_UOCC; MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Previous topic; Interface to MRCC by M. Kállay; Next topic; Geometry Optimization; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to ",MatchSource.WIKI,psi4manual/4.0b3/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci.html
Usability,simpl,simplest,"﻿. CI: Configuration Interaction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b3/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci.html
Availability,robust,robust,"arrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted integrals and then builds the; full tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; re",MatchSource.WIKI,psi4manual/4.0b3/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html
Deployability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b3/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html
Energy Efficiency,efficient,efficient,"﻿. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with",MatchSource.WIKI,psi4manual/4.0b3/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html
Integrability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b3/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html
Modifiability,variab,variable,"ary; basis exists for the atom in question). If it does not, use the; DF_BASIS_MP2 keyword to manually specify the basis.; DFMP2 likes memory. At a minimum, doubles are required,; where is the size of the auxiliary basis set. However, there is; one disk transpose of the tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the DF_INTS_NUM_THREADS to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Conventional MP2¶; Module: Keywords, PSI Variables, MP2; PSI4 also has a non-density-fitted MP2 algorithm for RHF, UHF, and; ROHF energies and RHF gradients. This code is not highly optimized, so the; density-fitted module DFMP2 is always the default. To access the; conventional MP2 code, set MP2_TYPE to conv and call; energy('mp2')/optimize('mp2'). MP2_TYPE¶. What algorithm to use for the MP2 computation. Type: strin",MatchSource.WIKI,psi4manual/4.0b3/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html
Performance,optimiz,optimized,"d efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Conventional MP2¶; Module: Keywords, PSI Variables, MP2; PSI4 also has a non-density-fitted MP2 algorithm for RHF, UHF, and; ROHF energies and RHF gradients. This code is not highly optimized, so the; density-fitted module DFMP2 is always the default. To access the; conventional MP2 code, set MP2_TYPE to conv and call; energy('mp2')/optimize('mp2'). MP2_TYPE¶. What algorithm to use for the MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. Table Of Contents. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2; MP2_TYPE. Previous topic; DFT: Density Functional Theory; Next topic; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html
Security,access,access,"d efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Conventional MP2¶; Module: Keywords, PSI Variables, MP2; PSI4 also has a non-density-fitted MP2 algorithm for RHF, UHF, and; ROHF energies and RHF gradients. This code is not highly optimized, so the; density-fitted module DFMP2 is always the default. To access the; conventional MP2 code, set MP2_TYPE to conv and call; energy('mp2')/optimize('mp2'). MP2_TYPE¶. What algorithm to use for the MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. Table Of Contents. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2; MP2_TYPE. Previous topic; DFT: Density Functional Theory; Next topic; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html
Usability,simpl,simplification,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b3/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html
Availability,robust,robust,"arrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted integrals and then builds the; full tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; re",MatchSource.WIKI,psi4manual/4.0b3/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2.html
Deployability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b3/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2.html
Energy Efficiency,efficient,efficient,"﻿. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with",MatchSource.WIKI,psi4manual/4.0b3/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2.html
Integrability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b3/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2.html
Modifiability,variab,variable,"ary; basis exists for the atom in question). If it does not, use the; DF_BASIS_MP2 keyword to manually specify the basis.; DFMP2 likes memory. At a minimum, doubles are required,; where is the size of the auxiliary basis set. However, there is; one disk transpose of the tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the DF_INTS_NUM_THREADS to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Conventional MP2¶; Module: Keywords, PSI Variables, MP2; PSI4 also has a non-density-fitted MP2 algorithm for RHF, UHF, and; ROHF energies and RHF gradients. This code is not highly optimized, so the; density-fitted module DFMP2 is always the default. To access the; conventional MP2 code, set MP2_TYPE to conv and call; energy('mp2')/optimize('mp2'). MP2_TYPE¶. What algorithm to use for the MP2 computation. Type: strin",MatchSource.WIKI,psi4manual/4.0b3/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2.html
Performance,optimiz,optimized,"d efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Conventional MP2¶; Module: Keywords, PSI Variables, MP2; PSI4 also has a non-density-fitted MP2 algorithm for RHF, UHF, and; ROHF energies and RHF gradients. This code is not highly optimized, so the; density-fitted module DFMP2 is always the default. To access the; conventional MP2 code, set MP2_TYPE to conv and call; energy('mp2')/optimize('mp2'). MP2_TYPE¶. What algorithm to use for the MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. Table Of Contents. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2; MP2_TYPE. Previous topic; DFT: Density Functional Theory; Next topic; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2.html
Security,access,access,"d efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Conventional MP2¶; Module: Keywords, PSI Variables, MP2; PSI4 also has a non-density-fitted MP2 algorithm for RHF, UHF, and; ROHF energies and RHF gradients. This code is not highly optimized, so the; density-fitted module DFMP2 is always the default. To access the; conventional MP2 code, set MP2_TYPE to conv and call; energy('mp2')/optimize('mp2'). MP2_TYPE¶. What algorithm to use for the MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. Table Of Contents. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2; MP2_TYPE. Previous topic; DFT: Density Functional Theory; Next topic; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2.html
Usability,simpl,simplification,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b3/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2.html
Availability,failure,failures,"am matrix,. which is diagonalized to form the Kohn-Sham orbitals in the same manner as in; Hartree-Fock.; In practice the local functional kernel and its required; partial derivatives are exceedingly complex, and are not analytically; integrable. In this case, atom-centered numerical quadratures are used to; evaluate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn",MatchSource.WIKI,psi4manual/4.0b3/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html
Deployability,integrat,integrated,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, mp2 algorithms.; -D Functionals; We have several -D2 functionals implemented, -D3 functionls are available; with the installation of Grimme’s DFTD3 program, and we; will shortly be adding many; more combinations of -D2 and -D3 functionals. For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results,",MatchSource.WIKI,psi4manual/4.0b3/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html
Energy Efficiency,energy,energy,"﻿. DFT: Density Functional Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». DFT: Density Functional Theory¶; Code author: Robert M. Parrish and Justin M. Turney; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBFUNCTIONAL, LIBFOCK, LIBSCF_SOLVER; Both density functional theory and Hartree–Fock theory are controlled; through the SCF module, and the SCF Introduction; section is also relevant here. Theory¶; Generalized Kohn-Sham Density Functional Theory (KS-DFT) is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio.; Pure Kohn-Sham DFT is based on the ideas that A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning ",MatchSource.WIKI,psi4manual/4.0b3/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html
Integrability,depend,depending,"ng the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density is incorporated. The most canonical variant; of these functionals rely on the spin kinetic energy density ; and ,. A generic local meta-GGA functional may then be written as,. The potential corresponding to this energy functional is,. This potential is u",MatchSource.WIKI,psi4manual/4.0b3/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html
Modifiability,extend,extended,"valuate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn-Sham; potential.; The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree-Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that",MatchSource.WIKI,psi4manual/4.0b3/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html
Performance,optimiz,optimization,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b3/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html
Testability,test,test,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b3/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html
Usability,simpl,simply," the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density i",MatchSource.WIKI,psi4manual/4.0b3/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html
Availability,failure,failures,"am matrix,. which is diagonalized to form the Kohn-Sham orbitals in the same manner as in; Hartree-Fock.; In practice the local functional kernel and its required; partial derivatives are exceedingly complex, and are not analytically; integrable. In this case, atom-centered numerical quadratures are used to; evaluate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn",MatchSource.WIKI,psi4manual/4.0b3/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft.html
Deployability,integrat,integrated,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, mp2 algorithms.; -D Functionals; We have several -D2 functionals implemented, -D3 functionls are available; with the installation of Grimme’s DFTD3 program, and we; will shortly be adding many; more combinations of -D2 and -D3 functionals. For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results,",MatchSource.WIKI,psi4manual/4.0b3/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft.html
Energy Efficiency,energy,energy,"﻿. DFT: Density Functional Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». DFT: Density Functional Theory¶; Code author: Robert M. Parrish and Justin M. Turney; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBFUNCTIONAL, LIBFOCK, LIBSCF_SOLVER; Both density functional theory and Hartree–Fock theory are controlled; through the SCF module, and the SCF Introduction; section is also relevant here. Theory¶; Generalized Kohn-Sham Density Functional Theory (KS-DFT) is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio.; Pure Kohn-Sham DFT is based on the ideas that A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning ",MatchSource.WIKI,psi4manual/4.0b3/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft.html
Integrability,depend,depending,"ng the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density is incorporated. The most canonical variant; of these functionals rely on the spin kinetic energy density ; and ,. A generic local meta-GGA functional may then be written as,. The potential corresponding to this energy functional is,. This potential is u",MatchSource.WIKI,psi4manual/4.0b3/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft.html
Modifiability,extend,extended,"valuate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn-Sham; potential.; The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree-Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that",MatchSource.WIKI,psi4manual/4.0b3/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft.html
Performance,optimiz,optimization,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b3/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft.html
Testability,test,test,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b3/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft.html
Usability,simpl,simply," the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density i",MatchSource.WIKI,psi4manual/4.0b3/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft.html
Availability,down,downloadable,"﻿. Interface to DFTD3 by S. Grimme — PSI4 [beta3] documentation. Navigation. index. modules    . toc    ; PSI4 [beta3] » . Interface to DFTD3 by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; PSI4 contains code to interface to the DFTD3 program of S. Grimme, which is freely; downloadable from http://toc.uni-muenster.de/DFTD3/). Installation¶; Follow the instructions provided with the source to build the DFTD3; program (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). For the moment, you must apply a patch,; psi4/lib/scripts/patch_grimme_dftd3, to the dftd3 source before building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , mod",MatchSource.WIKI,psi4manual/4.0b3/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html
Deployability,patch,patch,"﻿. Interface to DFTD3 by S. Grimme — PSI4 [beta3] documentation. Navigation. index. modules    . toc    ; PSI4 [beta3] » . Interface to DFTD3 by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; PSI4 contains code to interface to the DFTD3 program of S. Grimme, which is freely; downloadable from http://toc.uni-muenster.de/DFTD3/). Installation¶; Follow the instructions provided with the source to build the DFTD3; program (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). For the moment, you must apply a patch,; psi4/lib/scripts/patch_grimme_dftd3, to the dftd3 source before building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , mod",MatchSource.WIKI,psi4manual/4.0b3/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html
Energy Efficiency,energy,energy,"ore building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , modulated; by a damping function, , that gradually activates; the dispersion correction (at a rate characterized by ); over a distance characterized by the sum of the two atomic vdW radii,; , while an overall scaling term, , is optimized; to be unique to each functional. ( is; sometimes allowed to vary as well.). (1). Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]; which incorporates an additional term in the dispersion; series and adjusts the combination formula and damping; function. The individual atomic are interpolated from; several reference values based upon coordination numbers extracted from; the molecul",MatchSource.WIKI,psi4manual/4.0b3/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html
Integrability,interface,interface,"﻿. Interface to DFTD3 by S. Grimme — PSI4 [beta3] documentation. Navigation. index. modules    . toc    ; PSI4 [beta3] » . Interface to DFTD3 by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; PSI4 contains code to interface to the DFTD3 program of S. Grimme, which is freely; downloadable from http://toc.uni-muenster.de/DFTD3/). Installation¶; Follow the instructions provided with the source to build the DFTD3; program (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). For the moment, you must apply a patch,; psi4/lib/scripts/patch_grimme_dftd3, to the dftd3 source before building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , mod",MatchSource.WIKI,psi4manual/4.0b3/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html
Modifiability,variab,variable,"unning DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO;  . -D3ZERO; -D3 [4] w/ original zero-damping through dftd3; [, , , ]. -D3BJ; -D3 [5] w/ newer Becke-Johnson rational damping through dftd3; [, , , ]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default param",MatchSource.WIKI,psi4manual/4.0b3/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html
Performance,optimiz,optimized,"O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , modulated; by a damping function, , that gradually activates; the dispersion correction (at a rate characterized by ); over a distance characterized by the sum of the two atomic vdW radii,; , while an overall scaling term, , is optimized; to be unique to each functional. ( is; sometimes allowed to vary as well.). (1). Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]; which incorporates an additional term in the dispersion; series and adjusts the combination formula and damping; function. The individual atomic are interpolated from; several reference values based upon coordination numbers extracted from; the molecular structure, rather than assigned solely by atomic identity as; in DFT-D2, and thereby incorporate some awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson wa",MatchSource.WIKI,psi4manual/4.0b3/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html
Safety,redund,redundant,"nunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now , ,; , and . All parameters characterizing the dispersion correction are taken from; http://toc.uni-muenster.de/DFTD3/; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO;  . -D3ZERO; -D3 [4] w/ original zero-damping through dftd3; [, , , ]. -D3BJ; -D3 [5] w/ newer Becke-Johnson rational damping through dftd3; [, , , ]. Footnotes. [1]No",MatchSource.WIKI,psi4manual/4.0b3/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html
Usability,simpl,simple,"ome awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now , ,; , and . All parameters characterizing the dispersion correction are taken from; http://toc.uni-muenster.de/DFTD3/; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO",MatchSource.WIKI,psi4manual/4.0b3/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html
Availability,avail,available,﻿. DFT Functionals — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». DFT Functionals¶. All Available¶. DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 ,MatchSource.WIKI,psi4manual/4.0b3/dft_byfunctional-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft_byfunctional-1.html
Deployability,update,updated," 0.59500; 1.37300; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D1; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; 1.00000; 0.72200; 1.21700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; 1.00000; 0.78750; —; —; 0.42890; 4.44070; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; 0.60000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.92800; 1.28700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Table Of Contents. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/dft_byfunctional-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft_byfunctional-1.html
Availability,avail,available,﻿. DFT Functionals — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». DFT Functionals¶. All Available¶. DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 ,MatchSource.WIKI,psi4manual/4.0b3/dft_byfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft_byfunctional.html
Deployability,update,updated," 0.59500; 1.37300; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D1; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; 1.00000; 0.72200; 1.21700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; 1.00000; 0.78750; —; —; 0.42890; 4.44070; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; 0.60000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.92800; 1.28700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Table Of Contents. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/dft_byfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft_byfunctional.html
Availability,error,error,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/diatomic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/diatomic-1.html
Deployability,update,updated,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/diatomic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/diatomic-1.html
Energy Efficiency,energy,energy,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/diatomic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/diatomic-1.html
Availability,error,error,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/diatomic.html
Deployability,update,updated,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/diatomic.html
Energy Efficiency,energy,energy,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/diatomic.html
Availability,avail,available,"﻿. Documentation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; bui",MatchSource.WIKI,psi4manual/4.0b3/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation-1.html
Deployability,release,release,"﻿. Documentation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; bui",MatchSource.WIKI,psi4manual/4.0b3/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation-1.html
Integrability,depend,depending,"ion; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments i",MatchSource.WIKI,psi4manual/4.0b3/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation-1.html
Modifiability,plugin,plugin,"dience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re",MatchSource.WIKI,psi4manual/4.0b3/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation-1.html
Security,access,accessible,"﻿. Documentation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; bui",MatchSource.WIKI,psi4manual/4.0b3/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation-1.html
Testability,test,tests,"dience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re",MatchSource.WIKI,psi4manual/4.0b3/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation-1.html
Usability,clear,clears,"ndex.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locat",MatchSource.WIKI,psi4manual/4.0b3/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation-1.html
Availability,avail,available,"﻿. Documentation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; bui",MatchSource.WIKI,psi4manual/4.0b3/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation.html
Deployability,release,release,"﻿. Documentation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; bui",MatchSource.WIKI,psi4manual/4.0b3/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation.html
Integrability,depend,depending,"ion; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments i",MatchSource.WIKI,psi4manual/4.0b3/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation.html
Modifiability,plugin,plugin,"dience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re",MatchSource.WIKI,psi4manual/4.0b3/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation.html
Security,access,accessible,"﻿. Documentation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng-1.14-1.fc15.x86_64. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; bui",MatchSource.WIKI,psi4manual/4.0b3/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation.html
Testability,test,tests,"dience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re",MatchSource.WIKI,psi4manual/4.0b3/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation.html
Usability,clear,clears,"ndex.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locat",MatchSource.WIKI,psi4manual/4.0b3/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/documentation.html
Availability,avail,available,"uples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. cast_up (boolean or string) – 'on' || 'off' || '3-21g' || 'cc-pVDZ' || etc.; Indicates whether, to accelerate convergence for the scf portion of; the name calculation, a preliminary scf should be performed with a; small basis set (3-21G if a basis name is not supplied as keyword; value) followed by projection into the full target basis. Deprecated since version Sept-2012: Use option BASIS_GUESS instead. Parameters:cast_up_df (boolean or string) – 'on' || 'off' || 'cc-pVDZ-RI' || 'aug-cc-pVDZ-JKFIT' || etc.; Indicates whether, when cast_up is active, to run the preliminary; scf in density-fitted mode or what fitting basis to employ (when; available for all elements, cc-pVDZ-RI is the default). Deprecated since version Sept-2012: Use option DF_BASIS_GUESS instead. Parameters:bypass_scf (boolean) – 'on' || 'off' ; Indicates whether, for name values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. Examples :. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energ",MatchSource.WIKI,psi4manual/4.0b3/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy-1.html
Deployability,configurat,configuration,"fitting). dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. cepa(n); coupled electron pair approximation, variants 0, 1, and 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled cluster. omp2; orbital-optimized second order Moller–Plesset perturbation theory. scs-omp2; spin-component scaled OMP2. sos-omp2; spin-opposite scaled OMP2. omp3; orbital-optimized third order Moller–Plesset perturbation theory. scs-omp3; spin-component scaled OMP3. sos-omp3; spin-opposite scaled OMP3. name; calls method (aliases to name = ‘scf’). hf; HF. rhf; HF with restricted reference. uhf; HF with unrestricted reference. rohf; HF with restricted open-shell refer",MatchSource.WIKI,psi4manual/4.0b3/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy-1.html
Energy Efficiency,energy,energy,"﻿. Energy — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; ",MatchSource.WIKI,psi4manual/4.0b3/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy-1.html
Modifiability,variab,variables,"﻿. Energy — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; ",MatchSource.WIKI,psi4manual/4.0b3/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy-1.html
Performance,optimiz,optimized,"cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. cepa(n); coupled electron pair approximation, variants 0, 1, and 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled cluster. omp2; orbital-optimized second order Moller–Plesset perturbation theory. scs-omp2; spin-component scaled OMP2. sos-omp2; spin-opposite scaled OMP2. omp3; orbital-optimized third order Moller–Plesset perturbation theory. scs-omp3; spin-component scaled OMP3. sos-omp3; spin-opposite scaled OMP3. name; calls method (aliases to name = ‘scf’). hf; HF. rhf; HF with restricted reference. uhf; HF with unrestricted reference. rohf; HF with restricted open-shell reference. rscf; HF or DFT with restricted reference. uscf; HF or DFT with unrestricted reference. roscf; HF or DFT with restricted open-shell reference. df-scf; HF or DFT with density fitting. name; calls method. b2plyp; B2PLYP Double Hybrid Exchange-Correlation Functional. b2plyp-d; B2PLYP Double Hybrid Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b2plyp-d3; B2PLYP Double Hybrid Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b2plyp-d3bj; B2PLYP Double Hybrid Exchange-Correlation Functional w/ Grimme’s -D3 (",MatchSource.WIKI,psi4manual/4.0b3/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy-1.html
Availability,avail,available,"uples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. cast_up (boolean or string) – 'on' || 'off' || '3-21g' || 'cc-pVDZ' || etc.; Indicates whether, to accelerate convergence for the scf portion of; the name calculation, a preliminary scf should be performed with a; small basis set (3-21G if a basis name is not supplied as keyword; value) followed by projection into the full target basis. Deprecated since version Sept-2012: Use option BASIS_GUESS instead. Parameters:cast_up_df (boolean or string) – 'on' || 'off' || 'cc-pVDZ-RI' || 'aug-cc-pVDZ-JKFIT' || etc.; Indicates whether, when cast_up is active, to run the preliminary; scf in density-fitted mode or what fitting basis to employ (when; available for all elements, cc-pVDZ-RI is the default). Deprecated since version Sept-2012: Use option DF_BASIS_GUESS instead. Parameters:bypass_scf (boolean) – 'on' || 'off' ; Indicates whether, for name values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. Examples :. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energ",MatchSource.WIKI,psi4manual/4.0b3/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy.html
Deployability,configurat,configuration,"fitting). dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. cepa(n); coupled electron pair approximation, variants 0, 1, and 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled cluster. omp2; orbital-optimized second order Moller–Plesset perturbation theory. scs-omp2; spin-component scaled OMP2. sos-omp2; spin-opposite scaled OMP2. omp3; orbital-optimized third order Moller–Plesset perturbation theory. scs-omp3; spin-component scaled OMP3. sos-omp3; spin-opposite scaled OMP3. name; calls method (aliases to name = ‘scf’). hf; HF. rhf; HF with restricted reference. uhf; HF with unrestricted reference. rohf; HF with restricted open-shell refer",MatchSource.WIKI,psi4manual/4.0b3/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy.html
Energy Efficiency,energy,energy,"﻿. Energy — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; ",MatchSource.WIKI,psi4manual/4.0b3/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy.html
Modifiability,variab,variables,"﻿. Energy — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). dcft; density cumulant functional theory. mcscf; multiconfigurational self consistent field (SCF). sapt0; 0th-order symmetry adapted perturbation theory (SAPT). sapt2; 2nd-order SAPT, traditional definition. sapt2+; SAPT including all 2nd-order terms. sapt2+(3); SAPT including perturbative triples. sapt2+3;  . sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation. sapt2-ct; SAPT2 plus CT. sapt2+-ct; SAPT2+ plus CT. sapt2+(3)-ct; SAPT2+(3) plus CT. sapt2+3-ct; SAPT2+3 plus CT. cc2; approximate coupled cluster singles and doubles (CC2). ccsd; coupled cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; ",MatchSource.WIKI,psi4manual/4.0b3/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy.html
Performance,optimiz,optimized,"cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. cepa(n); coupled electron pair approximation, variants 0, 1, and 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled cluster. omp2; orbital-optimized second order Moller–Plesset perturbation theory. scs-omp2; spin-component scaled OMP2. sos-omp2; spin-opposite scaled OMP2. omp3; orbital-optimized third order Moller–Plesset perturbation theory. scs-omp3; spin-component scaled OMP3. sos-omp3; spin-opposite scaled OMP3. name; calls method (aliases to name = ‘scf’). hf; HF. rhf; HF with restricted reference. uhf; HF with unrestricted reference. rohf; HF with restricted open-shell reference. rscf; HF or DFT with restricted reference. uscf; HF or DFT with unrestricted reference. roscf; HF or DFT with restricted open-shell reference. df-scf; HF or DFT with density fitting. name; calls method. b2plyp; B2PLYP Double Hybrid Exchange-Correlation Functional. b2plyp-d; B2PLYP Double Hybrid Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b2plyp-d3; B2PLYP Double Hybrid Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b2plyp-d3bj; B2PLYP Double Hybrid Exchange-Correlation Functional w/ Grimme’s -D3 (",MatchSource.WIKI,psi4manual/4.0b3/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy.html
Availability,avail,available,"﻿. Installation and Runtime Configuration — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Additional compilation; hints may be found at Psi Compiling. Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Deployability,install,installation,"﻿. Installation and Runtime Configuration — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Additional compilation; hints may be found at Psi Compiling. Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Energy Efficiency,efficient,efficiently,"rated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to e",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Integrability,depend,depending," Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and ar",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Modifiability,config,configuration,"les    . toc    . next    . previous    ; PSI4 [beta3] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Additional compilation; hints may be found at Psi Compiling. Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execu",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Performance,perform,performing,"ch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it mi",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Safety,safe,safe,"s to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficien",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Security,access,accessible,"H Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Testability,test,testing,"﻿. Installation and Runtime Configuration — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Additional compilation; hints may be found at Psi Compiling. Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Usability,guid,guide,"herwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are ",MatchSource.WIKI,psi4manual/4.0b3/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html
Availability,avail,available,"﻿. Installation and Runtime Configuration — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Additional compilation; hints may be found at Psi Compiling. Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Deployability,install,installation,"﻿. Installation and Runtime Configuration — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Additional compilation; hints may be found at Psi Compiling. Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Energy Efficiency,efficient,efficiently,"rated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to e",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Integrability,depend,depending," Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and ar",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Modifiability,config,configuration,"les    . toc    . next    . previous    ; PSI4 [beta3] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Additional compilation; hints may be found at Psi Compiling. Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execu",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Performance,perform,performing,"ch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it mi",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Safety,safe,safe,"s to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficien",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Security,access,accessible,"H Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Testability,test,testing,"﻿. Installation and Runtime Configuration — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Additional compilation; hints may be found at Psi Compiling. Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Usability,guid,guide,"herwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are ",MatchSource.WIKI,psi4manual/4.0b3/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external.html
Availability,avail,available,"﻿. Frequency — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19,",MatchSource.WIKI,psi4manual/4.0b3/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/freq-1.html
Deployability,update,updated,"n. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/freq-1.html
Energy Efficiency,energy,energy,"﻿. Frequency — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19,",MatchSource.WIKI,psi4manual/4.0b3/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/freq-1.html
Performance,perform,performed,"﻿. Frequency — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19,",MatchSource.WIKI,psi4manual/4.0b3/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/freq-1.html
Availability,avail,available,"﻿. Frequency — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19,",MatchSource.WIKI,psi4manual/4.0b3/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/freq.html
Deployability,update,updated,"n. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/freq.html
Energy Efficiency,energy,energy,"﻿. Frequency — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19,",MatchSource.WIKI,psi4manual/4.0b3/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/freq.html
Performance,perform,performed,"﻿. Frequency — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19,",MatchSource.WIKI,psi4manual/4.0b3/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/freq.html
Availability,avail,available,"F_INTS (SAPT). ALGORITHM (DCFT). aliases module. all_casings() in module procutil. ANALYZE (CCENERGY). (CCRESPONSE). AO_BASIS (CCDENSITY). (CCENERGY). (CCLAMBDA). (CCSORT). (DCFT). (TRANSQT). (TRANSQT2). AQCCCORRELATIONENERGY. AQCCDIPOLEX. AQCCDIPOLEY. AQCCDIPOLEZ. AQCCQUADRUPOLEXX. AQCCQUADRUPOLEXY. AQCCQUADRUPOLEXZ. AQCCQUADRUPOLEYY. AQCCQUADRUPOLEYZ. AQCCQUADRUPOLEZZ. AQCCTOTALENERGY. arbitrary-order coupled-cluster theory; . CI. arbitrary-order perturbation theory; . CI. architectures. atom_at_position() LibmintsMolecule method. atom_entry() LibmintsMolecule method. atom_to_unique() LibmintsMolecule method. atom_to_unique_offset() LibmintsMolecule method. auto_fragments() in module wrappers. Molecule method. AVG_STATES (DETCI). AVG_WEIGHTS (DETCI). B. B_RAS3_MAX (DETCI). bad_option_syntax() in module input. BAKERJCC93 module, [1]. BAKERJCC96 module, [1]. banner() in module text. BASIC module, [1]. BASIS (DFMP2). (MINTS). (SAPT). (SCF). basis set; . adding new. auxiliary. available by element. available by family. default auxiliary. extrapolation. multiple within molecule. specification. BASIS_GUESS (SCF). BasisFamily class in basislist. basislist module. basislistdunning module. basislistother module. BB_M_FILE (TRANSQT). BBB(T)CORRECTIONENERGY. BENCH (GLOBALS). BENCH12 module, [1]. BENDAZZOLI (DETCI). BFS() in module molutil. Molecule method. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY). BRUECKNERCONVERGED. build_b2plyp_superfunctional() in module functional. build_b2plypd2gr_superfunctional() in module functional. build_b2plypd2p4_superfunctional() in module functional. build_b2plypd3bj_superfunctional() in module functional. build_b2plypd3zero_superfunctional() in module functional. build_b3_x_functional() in module functional. build_b3lyp5_superfunctional() in module functional. build_b3lyp5d2gr_superfunctional() in module functional. build_b3lyp5d2p4_superfunctional() in module functional. build_b3lyp5d3bj_superfunctional() in module functional. build_b3lyp5d3ze",MatchSource.WIKI,psi4manual/4.0b3/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html
Deployability,install,installing," (SCF). GUESS_VECTOR (DETCI). H. H0_BLOCK_COUPLING (DETCI). H0_BLOCK_COUPLING_SIZE (DETCI). H0_BLOCKSIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. has_inversion() LibmintsMolecule method. has_symmetry_element() LibmintsMolecule method. HBC6 module, [1]. HD_AVG (DETCI). HD_OTF (DETCI). HEFF4 (PSIMRCC). HEFF_PRINT (PSIMRCC). HESS_TYPE (OMP2). (OMP3). HESS_UPDATE (OPTKING). HESS_UPDATE_LIMIT (OPTKING). HESS_UPDATE_LIMIT_MAX (OPTKING). HESS_UPDATE_LIMIT_SCALE (OPTKING). HESS_UPDATE_USE_LAST (OPTKING). hessian() in module driver. HF. HFTOTALENERGY. highest_1() in module wrappers. HSG module, [1]. HTBH module, [1]. I. ICORE (DETCI). IGNORE_TAU (DCFT). import_ignorecase() in module procutil. IncompleteAtomError. inertia_tensor() LibmintsMolecule method. init_with_checkpoint() LibmintsMolecule method. init_with_io() LibmintsMolecule method. init_with_xyz() qcdb.libmintsmolecule.LibmintsMolecule class method. qcdb.molecule.Molecule class method. input module. installing. INTCO_FIXED_EQ_FORCE_CONSTANT (OPTKING). INTCOS_GENERATE_EXIT (OPTKING). INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (CCSORT). (DCFT). (DFMP2). (LMP2). (MRCC). (SAPT). (SCF). (TRANSQT). (TRANSQT2). invalidate() CartesianEntry method. CoordValue method. ZMatrixEntry method. ip_fitting() in module frac. IRC; . geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). irrep_labels() LibmintsMolecule method. is_axis() LibmintsMolecule method. is_computed() CoordEntry method. is_equivalent_to() CoordEntry method. is_ghosted() CoordEntry method. is_linear_planar() LibmintsMolecule method. is_plane() LibmintsMolecule method. is_variable() LibmintsMolecule method. ISTOP (DETCI). IVO (TRANSQT). J. J_FI",MatchSource.WIKI,psi4manual/4.0b3/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html
Energy Efficiency,charge,charge,RGY. CCSDT(Q)TOTALENERGY. CCSDT-1aCORRELATIONENERGY. CCSDT-1aTOTALENERGY. CCSDT-1bCORRELATIONENERGY. CCSDT-1bTOTALENERGY. CCSDT-3CORRELATIONENERGY. CCSDT-3TOTALENERGY. CCSDTCORRELATIONENERGY. CCSDTOTALENERGY. CCSDTQ-1aCORRELATIONENERGY. CCSDTQ-1aTOTALENERGY. CCSDTQ-1bCORRELATIONENERGY. CCSDTQ-1bTOTALENERGY. CCSDTQ-3CORRELATIONENERGY. CCSDTQ-3TOTALENERGY. CCSDTQCORRELATIONENERGY. CCSDTQTOTALENERGY. CCSDTTOTALENERGY. CCTOTALENERGY. center_of_mass() LibmintsMolecule method. CEPA. advanced-keywords. basic-keywords. theory. CEPA(0)CORRELATIONENERGY. CEPA(0)DIPOLEX. CEPA(0)DIPOLEY. CEPA(0)DIPOLEZ. CEPA(0)QUADRUPOLEXX. CEPA(0)QUADRUPOLEXY. CEPA(0)QUADRUPOLEXZ. CEPA(0)QUADRUPOLEYY. CEPA(0)QUADRUPOLEYZ. CEPA(0)QUADRUPOLEZZ. CEPA(0)TOTALENERGY. CEPA(1)CORRELATIONENERGY. CEPA(1)TOTALENERGY. CEPA(2)CORRELATIONENERGY. CEPA(2)TOTALENERGY. CEPA(3)CORRELATIONENERGY. CEPA(3)TOTALENERGY. CEPA_LEVEL (CEPA). CEPA_NO_SINGLES (CEPA). CEPA_SCALE_OS (CEPA). CEPA_SCALE_SS (CEPA). CEPA_VABCD_DIRECT (CEPA). charge; . molecule. charge() CoordEntry method. LibmintsMolecule method. charge_specified() LibmintsMolecule method. CHECK_C_ORTHONORM (TRANSQT). check_parentheses_and_brackets() in module input. CI. arbitrary-order coupled-cluster theory. arbitrary-order perturbation theory. basic-keywords. theory. CI_DIIS (MCSCF). CI_NUM_THREADS (DETCI). CIBLKS_PRINT (DETCI). CICORRELATIONENERGY. CIDIPOLEX. CIDIPOLEY. CIDIPOLEZ. CInCORRELATIONENERGY. CInTOTALENERGY. CIQUADRUPOLEXX. CIQUADRUPOLEXY. CIQUADRUPOLEXZ. CIQUADRUPOLEYY. CIQUADRUPOLEYZ. CIQUADRUPOLEZZ. CIROOTn->ROOTmDIPOLEX. CIROOTn->ROOTmDIPOLEY. CIROOTn->ROOTmDIPOLEZ. CIROOTn->ROOTmQUADRUPOLEXX. CIROOTn->ROOTmQUADRUPOLEXY. CIROOTn->ROOTmQUADRUPOLEXZ. CIROOTn->ROOTmQUADRUPOLEYY. CIROOTn->ROOTmQUADRUPOLEYZ. CIROOTn->ROOTmQUADRUPOLEZZ. CIROOTnCORRELATIONENERGY. CIROOTnDIPOLEX. CIROOTnDIPOLEY. CIROOTnDIPOLEZ. CIROOTnQUADRUPOLEXX. CIROOTnQUADRUPOLEXY. CIROOTnQUADRUPOLEXZ. CIROOTnQUADRUPOLEYY. CIROOTnQUADRUPOLEYZ. CIROOTnQUADRUPOLEZZ. CIROOTnTOTALENE,MatchSource.WIKI,psi4manual/4.0b3/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html
Integrability,wrap,wrappers,"method. ADD_AUXILIARY_BONDS (OPTKING). add_dualfit() BasisFamily method. add_jkfit() BasisFamily method. add_rifit() BasisFamily method. addChargeAngstrom() QMMM method. addChargeBohr() QMMM method. addDiffuse() QMMM method. adding new; . basis set. database(). method alias. AEL (CCDENSITY). AIO_CPHF (SAPT). AIO_DF_INTS (SAPT). ALGORITHM (DCFT). aliases module. all_casings() in module procutil. ANALYZE (CCENERGY). (CCRESPONSE). AO_BASIS (CCDENSITY). (CCENERGY). (CCLAMBDA). (CCSORT). (DCFT). (TRANSQT). (TRANSQT2). AQCCCORRELATIONENERGY. AQCCDIPOLEX. AQCCDIPOLEY. AQCCDIPOLEZ. AQCCQUADRUPOLEXX. AQCCQUADRUPOLEXY. AQCCQUADRUPOLEXZ. AQCCQUADRUPOLEYY. AQCCQUADRUPOLEYZ. AQCCQUADRUPOLEZZ. AQCCTOTALENERGY. arbitrary-order coupled-cluster theory; . CI. arbitrary-order perturbation theory; . CI. architectures. atom_at_position() LibmintsMolecule method. atom_entry() LibmintsMolecule method. atom_to_unique() LibmintsMolecule method. atom_to_unique_offset() LibmintsMolecule method. auto_fragments() in module wrappers. Molecule method. AVG_STATES (DETCI). AVG_WEIGHTS (DETCI). B. B_RAS3_MAX (DETCI). bad_option_syntax() in module input. BAKERJCC93 module, [1]. BAKERJCC96 module, [1]. banner() in module text. BASIC module, [1]. BASIS (DFMP2). (MINTS). (SAPT). (SCF). basis set; . adding new. auxiliary. available by element. available by family. default auxiliary. extrapolation. multiple within molecule. specification. BASIS_GUESS (SCF). BasisFamily class in basislist. basislist module. basislistdunning module. basislistother module. BB_M_FILE (TRANSQT). BBB(T)CORRECTIONENERGY. BENCH (GLOBALS). BENCH12 module, [1]. BENDAZZOLI (DETCI). BFS() in module molutil. Molecule method. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY). BRUECKNERCONVERGED. build_b2plyp_superfunctional() in module functional. build_b2plypd2gr_superfunctional() in module functional. build_b2plypd2p4_superfunctional() in module functional. build_b2plypd3bj_superfunctional() in module functional. build_b2plypd3zero_superfunctio",MatchSource.WIKI,psi4manual/4.0b3/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html
Modifiability,plugin,plugin,"﻿. Index — PSI4 [beta3] documentation. Navigation. index. modules    . toc    ; PSI4 [beta3] » . Index. Symbols; | A; | B; | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W; | X; | Y; | Z. Symbols. (T)CORRECTIONENERGY. --new-plugin <name>; . psi4 command line option. -a, --append; . psi4 command line option. -d, --debug; . psi4 command line option. -h, --help; . psi4 command line option. -i <filename>, --input <filename>; . psi4 command line option. -m, --messy; . psi4 command line option. -n <threads>, --nthread <threads>; . psi4 command line option. -o <filename>, --output <filename>; . psi4 command line option. -p <prefix>, --prefix <prefix>; . psi4 command line option. -v, --verbose; . psi4 command line option. -V, --version; . psi4 command line option. -w, --wipe; . psi4 command line option. A. a() CoordEntry static method. A_RAS3_MAX (DETCI). AA_M_FILE (TRANSQT). AAA(T)CORRECTIONENERGY. AAB(T)CORRECTIONENERGY. Ab initio Polarization Propagator. AB_M_FILE (TRANSQT). ABB(T)CORRECTIONENERGY. ABCD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). absolute_to_relative() Table method. ACENES module, [1]. ACPFCORRELATIONENERGY. ACPFDIPOLEX. ACPFDIPOLEY. ACPFDIPOLEZ. ACPFQUADRUPOLEXX. ACPFQUADRUPOLEXY. ACPFQUADRUPOLEXZ. ACPFQUADRUPOLEYY. ACPFQUADRUPOLEYZ. ACPFQUADRUPOLEZZ. ACPFTOTALENERGY. activate() in module molutil. activate_all_fragments() LibmintsMolecule method. ACTIVE (DETCI). (PSIMRCC). ADC. theory. add() in module qcdb.vecutil. add_atom() LibmintsMolecule method. ADD_AUXILIARY_BONDS (OPTKING). add_dualfit() BasisFamily method. add_jkfit() BasisFamily method. add_rifit() BasisFamily method. addChargeAngstrom() QMMM method. addChargeBohr() QMMM method. addDiffuse() QMMM method. adding new; . basis set. database(). method alias. AEL (CCDENSITY). AIO_CPHF (SAPT). AIO_DF_INTS (SAPT). ALGORITHM (DCFT). aliases module. all_casings() in module procutil. ANALYZE (CCENERGY). (CCRESPONSE). AO_BASIS (CCDENSITY). (CCENERGY",MatchSource.WIKI,psi4manual/4.0b3/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html
Performance,optimiz,optimization,"C_DIIS (SCF). FRAC_LOAD (SCF). frac_nuke() in module frac. FRAC_OCC (SCF). FRAC_RENORMALIZE (SCF). FRAC_START (SCF). frac_traverse() in module frac. FRAC_VAL (SCF). FRAG_MODE (OPTKING). FREEZE_CORE (GLOBALS). (SAPT). FREEZE_INTERFRAG (OPTKING). FREEZE_INTRAFRAG (OPTKING). frequency() in module driver. FROZEN_DOCC (GLOBALS). (PSIMRCC). FROZEN_UOCC (GLOBALS). (PSIMRCC). fsymbol() LibmintsMolecule method. full_geometry() LibmintsMolecule method. FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). full_pg_n() LibmintsMolecule method. full_point_group_with_n() LibmintsMolecule method. FullPointGroupList LibmintsMolecule attribute. functional module. functional_list() in module functional. fx() LibmintsMolecule method. fxyz() LibmintsMolecule method. fy() LibmintsMolecule method. fZ() LibmintsMolecule method. fz() LibmintsMolecule method. FZC_A_FILE (TRANSQT). FZC_B_FILE (TRANSQT). FZC_FILE (TRANSQT). G. G_CONVERGENCE (OPTKING). GAUGE (CCDENSITY). (CCRESPONSE). GEOM_MAXITER (OPTKING). geometry optimization. IRC. constrained. convergence criteria. minima. output. transition state. geometry() in module molutil. LibmintsMolecule method. get_anchor_atom() LibmintsMolecule method. get_coord_value() LibmintsMolecule method. get_full_point_group() LibmintsMolecule method. get_memory() in module util. get_num_threads() in module util. get_psifile() in module procutil. get_variable() LibmintsMolecule method. getattr_ignorecase() in module procutil. getCartesian() PubChemObj method. getMoleculeString() PubChemObj method. getPubChemResults() in module pubchem. getSDF() PubChemObj method. getXYZFile() PubChemObj method. Ghost Atoms. gradient() in module driver. GUESS (SCF). GUESS_VECTOR (DETCI). H. H0_BLOCK_COUPLING (DETCI). H0_BLOCK_COUPLING_SIZE (DETCI). H0_BLOCKSIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. has_inversion() LibmintsMolecule method. has_symmetry_element() LibmintsMolecule method. HBC6 module, [1]. HD_AVG (DETCI). HD_OTF (DETCI). HEFF4 (PSIMR",MatchSource.WIKI,psi4manual/4.0b3/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html
Usability,clear,clear,"IROOTn->ROOTmDIPOLEX. CIROOTn->ROOTmDIPOLEY. CIROOTn->ROOTmDIPOLEZ. CIROOTn->ROOTmQUADRUPOLEXX. CIROOTn->ROOTmQUADRUPOLEXY. CIROOTn->ROOTmQUADRUPOLEXZ. CIROOTn->ROOTmQUADRUPOLEYY. CIROOTn->ROOTmQUADRUPOLEYZ. CIROOTn->ROOTmQUADRUPOLEZZ. CIROOTnCORRELATIONENERGY. CIROOTnDIPOLEX. CIROOTnDIPOLEY. CIROOTnDIPOLEZ. CIROOTnQUADRUPOLEXX. CIROOTnQUADRUPOLEXY. CIROOTnQUADRUPOLEXZ. CIROOTnQUADRUPOLEYY. CIROOTnQUADRUPOLEYZ. CIROOTnQUADRUPOLEZZ. CIROOTnTOTALENERGY. CIS_AD_STATES (CPHF). CIS_AMPLITUDE_CUTOFF (CPHF). CIS_DOPDM_STATES (CPHF). CIS_MEM_SAFETY_FACTOR (CPHF). CIS_NO_STATES (CPHF). CIS_OPDM_STATES (CPHF). CIS_TOPDM_STATES (CPHF). CISDCORRELATIONENERGY. CISDDIPOLEX. CISDDIPOLEY. CISDDIPOLEZ. CISDQUADRUPOLEXX. CISDQUADRUPOLEXY. CISDQUADRUPOLEXZ. CISDQUADRUPOLEYY. CISDQUADRUPOLEYZ. CISDQUADRUPOLEZZ. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module util. compare_matrices() in module qcdb.psiutil. in module util. compare_strings() in module util. compare_values() in module qcdb.psiutil. in module util. compare_vectors() in module util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() in module wrappers. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module util. copy_file_to_scratch() in module util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). C",MatchSource.WIKI,psi4manual/4.0b3/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html
Availability,avail,available,"lectronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DF-MP2 TOTAL ENERGY¶. DF-MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the density-fitted MP2 level of theory. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (3) or (1). Quantity; in Eqs. (3) and (1).; Unless the method includes a disper",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html
Deployability,configurat,configuration," component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html
Energy Efficiency,energy,energy,"   . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; Th",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html
Modifiability,variab,variable,"﻿. PSI Variables by Alpha — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction c",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html
Performance,optimiz,optimizer,"CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DF-MP2 TOTAL ENERGY¶. DF-MP2 CORRELAT",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables-1.html
Availability,avail,available,"lectronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DF-MP2 TOTAL ENERGY¶. DF-MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the density-fitted MP2 level of theory. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (3) or (1). Quantity; in Eqs. (3) and (1).; Unless the method includes a disper",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables.html
Deployability,configurat,configuration," component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables.html
Energy Efficiency,energy,energy,"   . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; Th",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables.html
Modifiability,variab,variable,"﻿. PSI Variables by Alpha — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction c",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables.html
Performance,optimiz,optimizer,"CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DF-MP2 TOTAL ENERGY¶. DF-MP2 CORRELAT",MatchSource.WIKI,psi4manual/4.0b3/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/glossary_psivariables.html
Deployability,update,updated,"ods: SCF to FCI; Notes on Options; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; ADC: Ab Initio Polarization Propagator; SAPT: Symmetry-Adapted Perturbation Theory; CEPA: Coupled-Pair Methods; CC: Coupled Cluster Methods; PSIMRCC Implementation of Mk-MRCC Theory; Interface to MRCC by M. Kállay; CI: Configuration Interaction; Geometry Optimization; Evaluation of One-Electron Properties. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Interfaces: Enhancing PSI4 Capabilities. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. Next topic; Introduction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/index.html
Integrability,wrap,wrappers,"ods: SCF to FCI; Notes on Options; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; ADC: Ab Initio Polarization Propagator; SAPT: Symmetry-Adapted Perturbation Theory; CEPA: Coupled-Pair Methods; CC: Coupled Cluster Methods; PSIMRCC Implementation of Mk-MRCC Theory; Interface to MRCC by M. Kállay; CI: Configuration Interaction; Geometry Optimization; Evaluation of One-Electron Properties. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Interfaces: Enhancing PSI4 Capabilities. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. Next topic; Introduction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/index.html
Availability,avail,available,"tible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. A version of MPI is required to compile distributed-parallel PSI;; MPICH2 is recommended.; (Note: MPICH2-1.1.0 had trouble with some header files. MPICH2-1.2.1; seems to fix it.). GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures, to compile with MADNESS, or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). To make a distributed-parallel version with MADNESS, you may also need:. libtool (called by autoreconf). For Ubuntu users, you will need the following packages installed:; gfortran [for linking to BLAS/LAPACK], g++, autoconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installation¶; This section outlines the main steps of configuring, compiling, and; installing PSI. More detail is given below in Section III. Autoconf. For unusual architectures (or for developers working in the development; branch), one needs to first run autoconf to generate; the file “configure” in the top-level psi4 directory. For most Linux; and Mac compilations, this should not be necessary because the configure; file provided with PSI4 should be sufficient. To replace the general; configure file with one specific to your architecture, in the top-level; psi4 directory, run autoconf",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Deployability,install,installed,"III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. I. Compilation Prerequisites¶. C++ Compiler. F77 Compiler (the F95 compiler, gfortran, with gcc-4.X will work). Note; The F77 compiler is only used to determine the symbol-naming; convention of and some system routines for the BLAS and LAPACK libraries; on a few architectures. It is optional in a few cases (e.g. Mac OS X; systems). Optimized BLAS library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). Optimized LAPACK library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). POSIX threads (Pthreads) library (optional). Python interpreter (2.6 or higher; psi4 is Python3 compatible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. A version of MPI is required to compile distributed-parallel PSI;; MPICH2 is recommended.; (Note: MPICH2-1.1.0 had trouble with some header files. MPICH2-1.2.1; seems to fix it.). GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures, to compile with MADNESS, or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). To make a d",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Energy Efficiency,efficient,efficient,"nding speed and efficiency of the available BLAS and LAPACK libraries; (especially the former). In addition, the most common compilation problems; involve these libraries. Users may therefore wish to consider the following; BLAS and LAPACK recommendations when building PSI4:. It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat. This library is usually just the; netlib distribution and is completely unoptimized. PSI4’s; performance will suffer if you choose this route.; The choice of LAPACK is less critical, and so the unoptimized; netlib distribution is acceptable. If you do choose to use the; RedHat/Fedora stock BLAS and LAPACK, make sure that the blas-devel; and lapack-devel packages are installed. Perhaps the best choice, if you have it available, is; Intel’s MKL library, which includes BLAS and LAPACK (note: use; version 11 or later, we had difficulty with version 10 for very; large coupled-cluster computations). MKL is efficient and works; well in threaded mode.; Otherwise, the simplest choice is to use ATLAS; (http://math-atlas.sourceforge.net/), which is readily available; on all Linux distributions. Another alternative is OpenBLAS; (https://github.com/xianyi/OpenBLAS, formerly GotoBLAS). These; work well on nearly every achitecture to which the PSI4 developers; have access, though we have identified at least one case in which; the Goto libraries yielded faulty DGEMM calls. On Mac OS X; systems, the vecLib package that comes with Xcode works well. PSI4 does not require a Fortran compiler, unless the resident BLAS; and LAPACK libraries require Fortran-based system libraries. If you see; compiler complaints about missing symbols like “do_fio” or “e_wsfe”, then; your libraries were most likely compiled with g77 or gfortran, which; require -lg2c to resolve the Fortran I/O calls. Use of the same gcc; package for PSI4 should normally resolve this problem. The PSI4 configure script can often identify and use several; diffe",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Integrability,rout,routines,"﻿. Installation Instructions for PSI4 — PSI4 [beta3] documentation. Navigation. index. modules    . toc    ; PSI4 [beta3] » . Installation Instructions for PSI4¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. I. Compilation Prerequisites¶. C++ Compiler. F77 Compiler (the F95 compiler, gfortran, with gcc-4.X will work). Note; The F77 compiler is only used to determine the symbol-naming; convention of and some system routines for the BLAS and LAPACK libraries; on a few architectures. It is optional in a few cases (e.g. Mac OS X; systems). Optimized BLAS library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). Optimized LAPACK library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). POSIX threads (Pthreads) library (optional). Python interpreter (2.6 or higher; psi4 is Python3 compatible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. A version of MPI is required to compile distributed-parallel PSI;; MPICH2 is recommended.; (Note: MPICH2-1.1.0 had trouble with some header files. MPICH2-1.2.1; seems to fix it.). GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; archite",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Modifiability,config,config,"III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. I. Compilation Prerequisites¶. C++ Compiler. F77 Compiler (the F95 compiler, gfortran, with gcc-4.X will work). Note; The F77 compiler is only used to determine the symbol-naming; convention of and some system routines for the BLAS and LAPACK libraries; on a few architectures. It is optional in a few cases (e.g. Mac OS X; systems). Optimized BLAS library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). Optimized LAPACK library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). POSIX threads (Pthreads) library (optional). Python interpreter (2.6 or higher; psi4 is Python3 compatible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. A version of MPI is required to compile distributed-parallel PSI;; MPICH2 is recommended.; (Note: MPICH2-1.1.0 had trouble with some header files. MPICH2-1.2.1; seems to fix it.). GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures, to compile with MADNESS, or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). To make a d",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Performance,optimiz,optimized,"re any special; configuration options that might be needed for less commonly encountered; situations. For g++, if you have BLAS and LAPACK in standard locations (like /usr/lib64),; configuration is very easy. Pick one of the following scenarios, and place the; text given in the psi4/do-configure file (all on one long line). Replace the; text after prefix with whatever directory you want to use for your; installation directory. Intel compiler with MKL math library [highly recommended; if you don’t use; this, then at least make sure you have a threaded BLAS (see BLAS; recommendations at Section IV below)]; ../configure --prefix=/usr/local/psi4 --with-blas='-mkl' --with-cc=icc --with-cxx=icpc --with-fc=ifort --with-opt='-O2 -static -no-prec-div' --with-incdirs=-mkl. Note; It’s -mkl, not -lmkl. Warning; There seems to be a problem with icpc 12.0.2 and possibly earlier; 12.0 versions, giving an error like:; error: identifier ""__is_trivial"" is undefined. Use at least version 12.0.4. g++, optimized; ../configure --prefix=/usr/local/psi4. g++, for debugging; ../configure --prefix=/usr/local/psi4 --without-opt --with-debug. Compiling for Mac; PSI4 has been compiled on OS X 10.7 (Lion) and 10.8 (Mountain Lion).; To get the compilers needed, it’s easiest to install XCode.; However, XCode does not provide a Fortran compiler. Although; Fortran compilers are not needed to compile Psi, a broken one can; prevent Psi from configuring properly. Do not download the latest; version of GFortran from the HPC website; this is unlikely to be; compatible with your version of GCC. Instead, you should run gcc; -v to find out what version of GCC you’re using, and then; download the corresponding GFortran from; http://r.research.att.com/tools/. If you configure Psi on a Mac; without any Fortran compiler it will set itself up correctly, so; this is only necessary if you want a Fortran compiler for other; purposes. You can configure Psi by adding something like; ../configure --with-plugins. to th",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Safety,detect,detected," Note; The F77 compiler is only used to determine the symbol-naming; convention of and some system routines for the BLAS and LAPACK libraries; on a few architectures. It is optional in a few cases (e.g. Mac OS X; systems). Optimized BLAS library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). Optimized LAPACK library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). POSIX threads (Pthreads) library (optional). Python interpreter (2.6 or higher; psi4 is Python3 compatible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. A version of MPI is required to compile distributed-parallel PSI;; MPICH2 is recommended.; (Note: MPICH2-1.1.0 had trouble with some header files. MPICH2-1.2.1; seems to fix it.). GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures, to compile with MADNESS, or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). To make a distributed-parallel version with MADNESS, you may also need:. libtool (called by autoreconf). For Ubuntu users, you will need the following packages installed:; gfortran [for linking to BLAS/LAPACK], g++, autoconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installatio",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Security,access,access,"available at http://sirius.chem.vt.edu/psi4manual/latest/index.html; (link “docs” off http://www.psicode.org), and it is automatically updated. However,; if your system has the appropriate utilities (notably the sphinx package; and LaTeX), you may build the package documentation from the top-level; $objdir by running make doc. The resulting files will appear in the; $prefix/doc area. Step 6: Cleaning; All object files and libraries can be removed to save disk space by running; make clean in $objdir. Step 7: User Configuration; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location /usr/local/psi, then in C shell,; the user should add something like the following to their .cshrc file:; setenv PSI /usr/local/psi; set path = ($path $PSI/bin). Next, the user needs to tell the PSI4 I/O manager how to handle scratch files.; Identify the path to a fast scratch disk for which the user has write access.; If the local /tmp volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended. Warning; Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the network; and negatively impact other users. Specify scratch location by editing the .cshrc file to set the scratch; environment variable PSI_SCRATCH. If the selected location is; /scratch/user, add something like the following:; setenv PSI_SCRATCH /scratch/user. In a bash shell, the corresponding commands to be added to .bashrc is; the following:; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user. More advanced control of scratch files and is handled through a; .psi4rc file, which is discussed at section Scratch Files and the ~/.psi4rc File. Note; For developers: during compilation and testing, PSI4 finds its basis sets,; gri",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Testability,test,tests,"tion, you must; run the following command in the madness directory, otherwise the PSI4; configure script will fail (autoreconf is provided by package autoconf,; but it calls another program provided by libtool, so that package must; also be installed):; >>> cd madness; >>> autoreconf; >>> cd .. Configuration and Compilation; Make an object directory in which you can compile the code; >>> mkdir obj. Next you need to configure the code. Find a configuration; option line or combination of; configuration options at Section III(1)A. Either, use the line directly:; >>> cd obj; >>> ../configure [your compilation configuration options here]. or, save your configuration options for a future compilation.; In the top-level psi4 directory, create a file like “do-configure” with; the configure command and options on one line.; >>> cat do-configure; ../configure [your compilation configuration options here]; >>> chmod u+x do-configure; >>> cd obj; >>> ../do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommend that you choose for the top-level psi4 source; directory something other than /usr/local/psi; $HOME/psi4 or; /usr/local/src/psi4 are convenient choices. Next, in the top-level psi4; source directory you’ve chosen, first run autoconf to generate the configure; script from configure.ac. It is best to keep the source code separate; from the compilation area, so you must first choose a subdirectory for; compilation of the codes. A simple option is psi4/objdir, which should; work for most environments. However, i",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Usability,simpl,simple,"./do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommend that you choose for the top-level psi4 source; directory something other than /usr/local/psi; $HOME/psi4 or; /usr/local/src/psi4 are convenient choices. Next, in the top-level psi4; source directory you’ve chosen, first run autoconf to generate the configure; script from configure.ac. It is best to keep the source code separate; from the compilation area, so you must first choose a subdirectory for; compilation of the codes. A simple option is psi4/objdir, which should; work for most environments. However, if you need executables for several; architectures, you should choose more meaningful subdirectory names. Note; The compilation directory will be referred to as $objdir for the; remainder of these instructions. In $objdir, run the configure script found in the PSI4 top-level source; directory. This script will scan your system to locate certain libraries,; header files, etc. needed for complete compilation. The script accepts a; number of options, all of which are listed above. The most important of; these is the --prefix option, which selects the installation directory for; the executables, the libraries, header files, basis set data, and other; administrative files. The default --prefix is /usr/local/psi. Note; The configure script’s --prefix directory will be referred to as; $prefix for the remainder of these instructions. Besides --prefix, PSI often needs a few additional options for the; configure script. To make it easy to recompile ",MatchSource.WIKI,psi4manual/4.0b3/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html
Deployability,update,updated,"Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/intercalls-1.html
Energy Efficiency,energy,energy,"﻿. Function Intercalls — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b3/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/intercalls-1.html
Performance,optimiz,optimize,"﻿. Function Intercalls — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b3/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/intercalls-1.html
Security,validat,validated,"﻿. Function Intercalls — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b3/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/intercalls-1.html
Deployability,update,updated,"Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/intercalls.html
Energy Efficiency,energy,energy,"﻿. Function Intercalls — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b3/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/intercalls.html
Performance,optimiz,optimize,"﻿. Function Intercalls — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b3/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/intercalls.html
Security,validat,validated,"﻿. Function Intercalls — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b3/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/intercalls.html
Deployability,update,updated,"﻿. Interfaces: Enhancing PSI4 Capabilities — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilites have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to MRCC by M. Kállay PSI4 can drive the MRCC program of M. Kállay and J. Gauss; Interface to DFTD3 by S. Grimme PSI4 can drive the DFTD3 program of S. Grimme for DFT-D3 energies and gradients; MPI4Py; MADNESS; MATLAB for new dft functionals. Previous topic; Function Intercalls; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/interfacing-1.html
Deployability,update,updated,"﻿. Interfaces: Enhancing PSI4 Capabilities — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilites have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to MRCC by M. Kállay PSI4 can drive the MRCC program of M. Kállay and J. Gauss; Interface to DFTD3 by S. Grimme PSI4 can drive the DFTD3 program of S. Grimme for DFT-D3 energies and gradients; MPI4Py; MADNESS; MATLAB for new dft functionals. Previous topic; Function Intercalls; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/interfacing.html
Availability,avail,available,"ate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Depending on the particular modules used, the user may also wish to; cite some of the following references for theoretical, algorithmic,; or implementation contributions specif",MatchSource.WIKI,psi4manual/4.0b3/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction-1.html
Deployability,update,updated,"F; threaded [3]. Mk-MRCCSD; Y; N; RHF/ROHF/TCSCF; threaded [3]. Mk-MRCCSD(T); Y; N; RHF/ROHF/TCSCF; threaded [3]. Mk-MRPT2; Y; N; RHF/ROHF/TCSCF; threaded [3]. CEPA(n); Y; N; RHF; threaded [3]. ACPF/AQCC; Y; N; RHF; threaded [3]. OMP2; Y; Y; RHF/UHF/RKS/UKS; partially threaded. OMP3; Y; N; RHF/UHF/RKS/UKS; partially threaded. Geometry optimization (currently restricted to true minima on the potential; energy surface) can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is; distributed for free and without any guarantee of reliability,; accuracy, or suitability for any particular purpose. No obligation; to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries directed to; crawdad@vt.edu.; For bug reports, specific and detailed information, with example; inputs, would be appreciated. Questions or comments regarding; this user’s manual may be sent to; sherrill@gatech.edu.; Footnotes. [1]UHF-CCSD(T) gradients only, as of beta3. [2]RHF reference only. DF-MP2 is recommended as a faster alternative. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) threading through BLAS routines only. [4](1, 2) DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. Table Of Contents. Introduction; Overview; Citing PSI4; Supported Architectures; Capabilities; Technical Support. Previous topic; <no title>; Next topic; Installation and Runtime Configuration; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 21, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction-1.html
Energy Efficiency,efficient,efficiently,"﻿. Introduction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,",MatchSource.WIKI,psi4manual/4.0b3/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction-1.html
Integrability,rout,routine,"﻿. Introduction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,",MatchSource.WIKI,psi4manual/4.0b3/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction-1.html
Modifiability,adapt,adapted," Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009). SAPT (General); All capabilities of the SAPT module are based on Symmetry Adapted; Perturbation Theory. A good review article for this method is as; follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994). The particular implementation and algorithms for various orders of SAPT; available in PSI4 are provided below.; SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of Interactions in Linear Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010). SAPT2, SAPT2+, SAPT2+(3), SAPT2+3. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherri",MatchSource.WIKI,psi4manual/4.0b3/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction-1.html
Performance,optimiz,optimization,"machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Depending",MatchSource.WIKI,psi4manual/4.0b3/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction-1.html
Testability,test,tested,"0). OMP2. “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller-Plesset perturbation theory,” U. Bozkaya, J. M. Turney,; Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011). OMP3. “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,” U. Bozkaya, J. M. Turney,; Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; “Orbital-Optimized Third-Order Møller–Plesset Perturbation Theory and; Its Spin-Component and Spin-Opposite Scaled Variants: Application to; Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011). Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or; 12.1 (we have had trouble with version 12.0). Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient, and Frequency. Summary of theoretical methods available in PSI4. Method; Energy; Gradient; Reference; Parallelism. SCF; Y; Y [4]; RHF/ROHF/UHF; threaded. DF-SCF; Y; Y [4]; RHF/ROHF/UHF; threaded. CIS/RPA/TDHF; Y; —;  ;  . DCFT; Y; Y; UHF; partially threaded. SAPT; Y; —; RHF; threaded. MP2; Y; Y [2]; RH",MatchSource.WIKI,psi4manual/4.0b3/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction-1.html
Usability,simpl,simple,"﻿. Introduction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,",MatchSource.WIKI,psi4manual/4.0b3/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction-1.html
Availability,avail,available,"ate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Depending on the particular modules used, the user may also wish to; cite some of the following references for theoretical, algorithmic,; or implementation contributions specif",MatchSource.WIKI,psi4manual/4.0b3/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction.html
Deployability,update,updated,"F; threaded [3]. Mk-MRCCSD; Y; N; RHF/ROHF/TCSCF; threaded [3]. Mk-MRCCSD(T); Y; N; RHF/ROHF/TCSCF; threaded [3]. Mk-MRPT2; Y; N; RHF/ROHF/TCSCF; threaded [3]. CEPA(n); Y; N; RHF; threaded [3]. ACPF/AQCC; Y; N; RHF; threaded [3]. OMP2; Y; Y; RHF/UHF/RKS/UKS; partially threaded. OMP3; Y; N; RHF/UHF/RKS/UKS; partially threaded. Geometry optimization (currently restricted to true minima on the potential; energy surface) can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is; distributed for free and without any guarantee of reliability,; accuracy, or suitability for any particular purpose. No obligation; to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries directed to; crawdad@vt.edu.; For bug reports, specific and detailed information, with example; inputs, would be appreciated. Questions or comments regarding; this user’s manual may be sent to; sherrill@gatech.edu.; Footnotes. [1]UHF-CCSD(T) gradients only, as of beta3. [2]RHF reference only. DF-MP2 is recommended as a faster alternative. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) threading through BLAS routines only. [4](1, 2) DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. Table Of Contents. Introduction; Overview; Citing PSI4; Supported Architectures; Capabilities; Technical Support. Previous topic; <no title>; Next topic; Installation and Runtime Configuration; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 21, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction.html
Energy Efficiency,efficient,efficiently,"﻿. Introduction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,",MatchSource.WIKI,psi4manual/4.0b3/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction.html
Integrability,rout,routine,"﻿. Introduction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,",MatchSource.WIKI,psi4manual/4.0b3/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction.html
Modifiability,adapt,adapted," Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009). SAPT (General); All capabilities of the SAPT module are based on Symmetry Adapted; Perturbation Theory. A good review article for this method is as; follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994). The particular implementation and algorithms for various orders of SAPT; available in PSI4 are provided below.; SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of Interactions in Linear Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010). SAPT2, SAPT2+, SAPT2+(3), SAPT2+3. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherri",MatchSource.WIKI,psi4manual/4.0b3/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction.html
Performance,optimiz,optimization,"machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93). Depending",MatchSource.WIKI,psi4manual/4.0b3/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction.html
Testability,test,tested,"0). OMP2. “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller-Plesset perturbation theory,” U. Bozkaya, J. M. Turney,; Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011). OMP3. “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,” U. Bozkaya, J. M. Turney,; Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; “Orbital-Optimized Third-Order Møller–Plesset Perturbation Theory and; Its Spin-Component and Spin-Opposite Scaled Variants: Application to; Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011). Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or; 12.1 (we have had trouble with version 12.0). Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient, and Frequency. Summary of theoretical methods available in PSI4. Method; Energy; Gradient; Reference; Parallelism. SCF; Y; Y [4]; RHF/ROHF/UHF; threaded. DF-SCF; Y; Y [4]; RHF/ROHF/UHF; threaded. CIS/RPA/TDHF; Y; —;  ;  . DCFT; Y; Y; UHF; partially threaded. SAPT; Y; —; RHF; threaded. MP2; Y; Y [2]; RH",MatchSource.WIKI,psi4manual/4.0b3/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction.html
Usability,simpl,simple,"﻿. Introduction — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files, and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendix includes a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶; The following citation should be used in any publication utilizing the; PSI4 program package:; PSI4. “Psi4: an open-source ab initio electronic structure program,",MatchSource.WIKI,psi4manual/4.0b3/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction.html
Availability,avail,available,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; Advanced Coupled Pair Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary O",MatchSource.WIKI,psi4manual/4.0b3/methods-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/methods-1.html
Deployability,configurat,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; Advanced Coupled Pair Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary O",MatchSource.WIKI,psi4manual/4.0b3/methods-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/methods-1.html
Modifiability,config,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; Advanced Coupled Pair Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary O",MatchSource.WIKI,psi4manual/4.0b3/methods-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/methods-1.html
Availability,avail,available,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; Advanced Coupled Pair Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary O",MatchSource.WIKI,psi4manual/4.0b3/methods.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/methods.html
Deployability,configurat,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; Advanced Coupled Pair Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary O",MatchSource.WIKI,psi4manual/4.0b3/methods.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/methods.html
Modifiability,config,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Interpreting SAPT Results. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; Advanced Coupled Pair Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Interface to MRCC by M. Kállay; Installation; Running MRCC. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary O",MatchSource.WIKI,psi4manual/4.0b3/methods.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/methods.html
Availability,error,error,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSD",MatchSource.WIKI,psi4manual/4.0b3/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc-1.html
Deployability,update,updated,"sing; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; PSIMRCC Implementation of Mk-MRCC Theory; Next topic; CI: Configuration Interaction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc-1.html
Energy Efficiency,energy,energy,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSD",MatchSource.WIKI,psi4manual/4.0b3/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc-1.html
Integrability,interface,interface,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSD",MatchSource.WIKI,psi4manual/4.0b3/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc-1.html
Performance,perform,perform,"Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6,",MatchSource.WIKI,psi4manual/4.0b3/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc-1.html
Usability,simpl,simply,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSD",MatchSource.WIKI,psi4manual/4.0b3/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc-1.html
Availability,error,error,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSD",MatchSource.WIKI,psi4manual/4.0b3/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc.html
Deployability,update,updated,"sing; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; PSIMRCC Implementation of Mk-MRCC Theory; Next topic; CI: Configuration Interaction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc.html
Energy Efficiency,energy,energy,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSD",MatchSource.WIKI,psi4manual/4.0b3/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc.html
Integrability,interface,interface,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSD",MatchSource.WIKI,psi4manual/4.0b3/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc.html
Performance,perform,perform,"Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6,",MatchSource.WIKI,psi4manual/4.0b3/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc.html
Usability,simpl,simply,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSD",MatchSource.WIKI,psi4manual/4.0b3/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc.html
Availability,toler,tolerance,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_c-1.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_c-1.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_c-1.html
Availability,toler,tolerance,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_c.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_c.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_c.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_py-1.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_py-1.html
Integrability,wrap,wrapped,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_py-1.html
Performance,optimiz,optimize,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_py-1.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_py.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_py.html
Integrability,wrap,wrapped,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_py.html
Performance,optimiz,optimize,"﻿. Notes on Options — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/notes_py.html
Availability,avail,available,"aluation of One-Electron Properties — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Evaluation of One-Electron Properties¶; Code author: Robert M. Parrish and Andrew C. Simmonett; Section author: Andrew C. Simmonett; PSI4 is capable of computing a number of one-electron properties; summarized in the table below. The properties will be computed from the last; computed one-particle density, using the following syntax:; oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). The named argument, title, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword",MatchSource.WIKI,psi4manual/4.0b3/oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/oeprop-1.html
Deployability,update,updated,"properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Table Of Contents. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Geometry Optimization; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/oeprop-1.html
Energy Efficiency,charge,charges,"and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Table Of Contents. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Geometry Optimization; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . n",MatchSource.WIKI,psi4manual/4.0b3/oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/oeprop-1.html
Modifiability,variab,variables,"﻿. Evaluation of One-Electron Properties — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Evaluation of One-Electron Properties¶; Code author: Robert M. Parrish and Andrew C. Simmonett; Section author: Andrew C. Simmonett; PSI4 is capable of computing a number of one-electron properties; summarized in the table below. The properties will be computed from the last; computed one-particle density, using the following syntax:; oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). The named argument, title, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN ke",MatchSource.WIKI,psi4manual/4.0b3/oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/oeprop-1.html
Availability,avail,available,"aluation of One-Electron Properties — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Evaluation of One-Electron Properties¶; Code author: Robert M. Parrish and Andrew C. Simmonett; Section author: Andrew C. Simmonett; PSI4 is capable of computing a number of one-electron properties; summarized in the table below. The properties will be computed from the last; computed one-particle density, using the following syntax:; oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). The named argument, title, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword",MatchSource.WIKI,psi4manual/4.0b3/oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/oeprop.html
Deployability,update,updated,"properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Table Of Contents. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Geometry Optimization; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/oeprop.html
Energy Efficiency,charge,charges,"and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Table Of Contents. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Geometry Optimization; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . n",MatchSource.WIKI,psi4manual/4.0b3/oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/oeprop.html
Modifiability,variab,variables,"﻿. Evaluation of One-Electron Properties — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Evaluation of One-Electron Properties¶; Code author: Robert M. Parrish and Andrew C. Simmonett; Section author: Andrew C. Simmonett; PSI4 is capable of computing a number of one-electron properties; summarized in the table below. The properties will be computed from the last; computed one-particle density, using the following syntax:; oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). The named argument, title, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN ke",MatchSource.WIKI,psi4manual/4.0b3/oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/oeprop.html
Deployability,update,updated,"l be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. SOS_SCALE¶. Spin-opposite scaling (SOS) value for SCF orbitals. Type: double; Default: 1.3. SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OMP2_ORBS_PRINT¶. Do print OMP2 orbital energies?. Type: boolean; Default: false. OMP3_ORBS_PRINT¶. Do print OMP3 orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. Table Of Contents. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER. Advanced Keywords; OPT_METHOD; DIIS_MAX_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; SOS_SCALE; SOS_SCALE2; NAT_ORBS; OMP2_ORBS_PRINT; OMP3_ORBS_PRINT; TPDM_ABCD_TYPE. Previous topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Next topic; ADC: Ab Initio Polarization Propagator; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 21, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/ompn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn-1.html
Energy Efficiency,energy,energy,"bed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical; molecular properties such as vibrational frequencies. However, orbital optimized MP2 (hence Orbital optimized MP3); will solve this N-representability problem by disregarding orbital response contribution of one-partical; density matrix.; Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched; geometries [Bozkaya:2012:odtl]. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster ba",MatchSource.WIKI,psi4manual/4.0b3/ompn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn-1.html
Performance,optimiz,optimized,"﻿. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory¶; Code author: Ugur Bozkaya; Section author: Ugur Bozkaya; Module: Keywords, PSI Variables, OMP2; Module: Keywords, PSI Variables, OMP3. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at ",MatchSource.WIKI,psi4manual/4.0b3/ompn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn-1.html
Safety,avoid,avoids,"o FCI ». OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory¶; Code author: Ugur Bozkaya; Section author: Ugur Bozkaya; Module: Keywords, PSI Variables, OMP2; Module: Keywords, PSI Variables, OMP3. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). Th",MatchSource.WIKI,psi4manual/4.0b3/ompn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn-1.html
Deployability,update,updated,"l be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. SOS_SCALE¶. Spin-opposite scaling (SOS) value for SCF orbitals. Type: double; Default: 1.3. SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OMP2_ORBS_PRINT¶. Do print OMP2 orbital energies?. Type: boolean; Default: false. OMP3_ORBS_PRINT¶. Do print OMP3 orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. Table Of Contents. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER. Advanced Keywords; OPT_METHOD; DIIS_MAX_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; SOS_SCALE; SOS_SCALE2; NAT_ORBS; OMP2_ORBS_PRINT; OMP3_ORBS_PRINT; TPDM_ABCD_TYPE. Previous topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Next topic; ADC: Ab Initio Polarization Propagator; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 21, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/ompn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn.html
Energy Efficiency,energy,energy,"bed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical; molecular properties such as vibrational frequencies. However, orbital optimized MP2 (hence Orbital optimized MP3); will solve this N-representability problem by disregarding orbital response contribution of one-partical; density matrix.; Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched; geometries [Bozkaya:2012:odtl]. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster ba",MatchSource.WIKI,psi4manual/4.0b3/ompn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn.html
Performance,optimiz,optimized,"﻿. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory¶; Code author: Ugur Bozkaya; Section author: Ugur Bozkaya; Module: Keywords, PSI Variables, OMP2; Module: Keywords, PSI Variables, OMP3. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at ",MatchSource.WIKI,psi4manual/4.0b3/ompn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn.html
Safety,avoid,avoids,"o FCI ». OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory¶; Code author: Ugur Bozkaya; Section author: Ugur Bozkaya; Module: Keywords, PSI Variables, OMP2; Module: Keywords, PSI Variables, OMP3. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). Th",MatchSource.WIKI,psi4manual/4.0b3/ompn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn.html
Availability,avail,available,"﻿. Optimize — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. omp2; orbital-optimized second order Moller–Plesset perturbation theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. b3_x; Becke88 GGA Exchange (B3LYP weighting). b88_x; Becke88 GGA Exchange. b97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional. b97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional. b97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional. b97-d; B97-D Pure-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b97-d3; B97-D Pure-GG",MatchSource.WIKI,psi4manual/4.0b3/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html
Deployability,continuous,continuous,"n linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). For further discussion of geometry optimization, see; Sec. Geometry Optimization. Previous topic; Counterpoise Correct; Next topic; Frequency; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [",MatchSource.WIKI,psi4manual/4.0b3/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html
Energy Efficiency,energy,energy,"﻿. Optimize — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. omp2; orbital-optimized second order Moller–Plesset perturbation theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. b3_x; Becke88 GGA Exchange (B3LYP weighting). b88_x; Becke88 GGA Exchange. b97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional. b97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional. b97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional. b97-d; B97-D Pure-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b97-d3; B97-D Pure-GG",MatchSource.WIKI,psi4manual/4.0b3/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html
Modifiability,variab,variables,"﻿. Optimize — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. omp2; orbital-optimized second order Moller–Plesset perturbation theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. b3_x; Becke88 GGA Exchange (B3LYP weighting). b88_x; Becke88 GGA Exchange. b97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional. b97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional. b97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional. b97-d; B97-D Pure-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b97-d3; B97-D Pure-GG",MatchSource.WIKI,psi4manual/4.0b3/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html
Performance,optimiz,optimize,"﻿. Optimize — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. omp2; orbital-optimized second order Moller–Plesset perturbation theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. b3_x; Becke88 GGA Exchange (B3LYP weighting). b88_x; Becke88 GGA Exchange. b97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional. b97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional. b97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional. b97-d; B97-D Pure-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b97-d3; B97-D Pure-GG",MatchSource.WIKI,psi4manual/4.0b3/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html
Safety,unsafe,unsafe,"tional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies opti",MatchSource.WIKI,psi4manual/4.0b3/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html
Security,access,accesses,"GA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccs",MatchSource.WIKI,psi4manual/4.0b3/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html
Usability,clear,clear," Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('",MatchSource.WIKI,psi4manual/4.0b3/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html
Availability,avail,available,"﻿. Optimize — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. omp2; orbital-optimized second order Moller–Plesset perturbation theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. b3_x; Becke88 GGA Exchange (B3LYP weighting). b88_x; Becke88 GGA Exchange. b97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional. b97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional. b97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional. b97-d; B97-D Pure-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b97-d3; B97-D Pure-GG",MatchSource.WIKI,psi4manual/4.0b3/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt.html
Deployability,continuous,continuous,"n linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). For further discussion of geometry optimization, see; Sec. Geometry Optimization. Previous topic; Counterpoise Correct; Next topic; Frequency; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [",MatchSource.WIKI,psi4manual/4.0b3/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt.html
Energy Efficiency,energy,energy,"﻿. Optimize — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. omp2; orbital-optimized second order Moller–Plesset perturbation theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. b3_x; Becke88 GGA Exchange (B3LYP weighting). b88_x; Becke88 GGA Exchange. b97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional. b97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional. b97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional. b97-d; B97-D Pure-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b97-d3; B97-D Pure-GG",MatchSource.WIKI,psi4manual/4.0b3/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt.html
Modifiability,variab,variables,"﻿. Optimize — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. omp2; orbital-optimized second order Moller–Plesset perturbation theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. b3_x; Becke88 GGA Exchange (B3LYP weighting). b88_x; Becke88 GGA Exchange. b97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional. b97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional. b97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional. b97-d; B97-D Pure-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b97-d3; B97-D Pure-GG",MatchSource.WIKI,psi4manual/4.0b3/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt.html
Performance,optimiz,optimize,"﻿. Optimize — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT). dcft; density cumulant functional theory. omp2; orbital-optimized second order Moller–Plesset perturbation theory. mp2; 2nd-order Moller-Plesset perturbation theory (MP2). df-mp2; MP2 with density fitting. conv-mp2; conventional MP2 (non-density-fitting). ccsd; coupled cluster singles and doubles (CCSD). ccsd(t); CCSD with perturbative triples. eom-ccsd; equation of motion (EOM) CCSD. name; calls method. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. b3_x; Becke88 GGA Exchange (B3LYP weighting). b88_x; Becke88 GGA Exchange. b97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional. b97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional. b97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional. b97-d; B97-D Pure-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b97-d3; B97-D Pure-GG",MatchSource.WIKI,psi4manual/4.0b3/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt.html
Safety,unsafe,unsafe,"tional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies opti",MatchSource.WIKI,psi4manual/4.0b3/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt.html
Security,access,accesses,"GA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccs",MatchSource.WIKI,psi4manual/4.0b3/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt.html
Usability,clear,clear," Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('",MatchSource.WIKI,psi4manual/4.0b3/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt.html
Availability,avail,available,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b3/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html
Deployability,update,updated,"the; global scope by the user. PsiMod.has_local_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched in the scope of; the specified module, by either user or code. Notwithstanding, code is; written such that in practice, this returns whether the option has been; touched in the module scope by the user. PsiMod.has_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched either locally; to specified module or globally, by either user or code.; Notwithstanding, code is written such that in practice, this returns; whether the option has been touched by the user. PsiMod.revoke_global_option_changed(keyword)¶; Given a string of keyword name, sets the has_changed attribute in the; global options scope to false. Used in python driver when a function; sets the value of an option. Before the function exits, this command is; called on the option so that has_changed reflects whether the user (not; the program) has touched the option. PsiMod.revoke_local_option_changed(module, keyword)¶; Given a string of keyword name and a particular module, sets the; has_changed attribute in the module options scope to false. Used in; python driver when a function sets the value of an option. Before the; function exits, this command is called on the option so that; has_changed reflects whether the user (not the program) has touched the; option. Table Of Contents. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver; PsiMod Options Commands. Previous topic; Programming: Using the Core Libraries; Next topic; Python Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html
Integrability,rout,routine,"I4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.",MatchSource.WIKI,psi4manual/4.0b3/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html
Modifiability,plugin,plugin,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b3/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html
Performance,perform,performed,"gative changed status (revoke_changed), can only be done for a specific; scope, either global or local to the specified module. Querying, either a; value (get) or a changed status (has_changed), can be done in the global; scope, in a specified local scope, or in the context of “What will the; specified module use?”. Note; “Global” in the sense of the discussion has nothing; to do with the globals section at the top of read_options.cc . That; section is just a convenient place for options and associated values; that are used by most, if not all, modules. There are two primary purposes for interacting with options in the python driver. Preserving User Options (Enforcing definition [a] of has_changed); The first, less-interesting, use of retrieving user option values has; been to preserve them so that they may be restored at the end after the; procedure itself has clobbered them. By decoupling global_option and; local_option commands, this can now be performed neatly by saving at the; beginning the global and local values and the global and local; has_changed values, then restoring them at the end. Below is an example; of this procedure; don’t actually do this.; g_user_scftype = PsiMod.get_global_option('SCF_TYPE'); l_user_scftype_scf = PsiMod.get_local_option('SCF', 'SCF_TYPE'); bg_user_scftype = PsiMod.has_global_option_changed('SCF_TYPE'); bl_user_scftype_scf = PsiMod.has_local_option_changed('SCF', 'SCF_TYPE'). g_user_wfn = PsiMod.get_global_option('WFN'); l_user_wfn = PsiMod.get_local_option('MP2', 'WFN'); bg_user_wfn = PsiMod.has_global_option_changed('WFN'); bl_user_wfn = PsiMod.has_local_option_changed('MP2', 'WFN'). # body of function; # scf_type and wfn are freely changed, LOCALLY; # PsiMod.scf() and PsiMod.mp2() are run. PsiMod.set_global_option('SCF_TYPE', g_user_scftype); if not bg_user_scftype:; PsiMod.revoke_global_option_changed('SCF_TYPE'); PsiMod.set_local_option('SCF', 'SCF_TYPE', l_user_scftype_scf); if not bl_user_scftype_scf:; PsiMod.revoke_local_o",MatchSource.WIKI,psi4manual/4.0b3/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html
Security,access,accessible,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b3/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html
Usability,simpl,simplify,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b3/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html
Availability,avail,available,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b3/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling.html
Deployability,update,updated,"the; global scope by the user. PsiMod.has_local_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched in the scope of; the specified module, by either user or code. Notwithstanding, code is; written such that in practice, this returns whether the option has been; touched in the module scope by the user. PsiMod.has_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched either locally; to specified module or globally, by either user or code.; Notwithstanding, code is written such that in practice, this returns; whether the option has been touched by the user. PsiMod.revoke_global_option_changed(keyword)¶; Given a string of keyword name, sets the has_changed attribute in the; global options scope to false. Used in python driver when a function; sets the value of an option. Before the function exits, this command is; called on the option so that has_changed reflects whether the user (not; the program) has touched the option. PsiMod.revoke_local_option_changed(module, keyword)¶; Given a string of keyword name and a particular module, sets the; has_changed attribute in the module options scope to false. Used in; python driver when a function sets the value of an option. Before the; function exits, this command is called on the option so that; has_changed reflects whether the user (not the program) has touched the; option. Table Of Contents. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver; PsiMod Options Commands. Previous topic; Programming: Using the Core Libraries; Next topic; Python Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling.html
Integrability,rout,routine,"I4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.",MatchSource.WIKI,psi4manual/4.0b3/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling.html
Modifiability,plugin,plugin,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b3/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling.html
Performance,perform,performed,"gative changed status (revoke_changed), can only be done for a specific; scope, either global or local to the specified module. Querying, either a; value (get) or a changed status (has_changed), can be done in the global; scope, in a specified local scope, or in the context of “What will the; specified module use?”. Note; “Global” in the sense of the discussion has nothing; to do with the globals section at the top of read_options.cc . That; section is just a convenient place for options and associated values; that are used by most, if not all, modules. There are two primary purposes for interacting with options in the python driver. Preserving User Options (Enforcing definition [a] of has_changed); The first, less-interesting, use of retrieving user option values has; been to preserve them so that they may be restored at the end after the; procedure itself has clobbered them. By decoupling global_option and; local_option commands, this can now be performed neatly by saving at the; beginning the global and local values and the global and local; has_changed values, then restoring them at the end. Below is an example; of this procedure; don’t actually do this.; g_user_scftype = PsiMod.get_global_option('SCF_TYPE'); l_user_scftype_scf = PsiMod.get_local_option('SCF', 'SCF_TYPE'); bg_user_scftype = PsiMod.has_global_option_changed('SCF_TYPE'); bl_user_scftype_scf = PsiMod.has_local_option_changed('SCF', 'SCF_TYPE'). g_user_wfn = PsiMod.get_global_option('WFN'); l_user_wfn = PsiMod.get_local_option('MP2', 'WFN'); bg_user_wfn = PsiMod.has_global_option_changed('WFN'); bl_user_wfn = PsiMod.has_local_option_changed('MP2', 'WFN'). # body of function; # scf_type and wfn are freely changed, LOCALLY; # PsiMod.scf() and PsiMod.mp2() are run. PsiMod.set_global_option('SCF_TYPE', g_user_scftype); if not bg_user_scftype:; PsiMod.revoke_global_option_changed('SCF_TYPE'); PsiMod.set_local_option('SCF', 'SCF_TYPE', l_user_scftype_scf); if not bl_user_scftype_scf:; PsiMod.revoke_local_o",MatchSource.WIKI,psi4manual/4.0b3/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling.html
Security,access,accessible,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b3/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling.html
Usability,simpl,simplify,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b3/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling.html
Availability,redundant,redundant,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html
Deployability,update,update,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html
Energy Efficiency,energy,energy,"ence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed dur",MatchSource.WIKI,psi4manual/4.0b3/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html
Performance,optimiz,optimizations,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html
Safety,redund,redundant,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html
Testability,test,tested,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html
Usability,clear,clear,"se can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representation. The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes”, though many of these capabilities are; still under development. Presently by default, separate fragments are bonded by; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option FRAG_MODE, fragments; may instead be related by a unique set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default), linear combinations of; atomic positions, or located on the principal axes (not yet working). Basic Keywords¶. OPT_TYPE¶. Specifies minimum search, t",MatchSource.WIKI,psi4manual/4.0b3/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html
Availability,redundant,redundant,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking.html
Deployability,update,update,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking.html
Energy Efficiency,energy,energy,"ence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed dur",MatchSource.WIKI,psi4manual/4.0b3/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking.html
Performance,optimiz,optimizations,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking.html
Safety,redund,redundant,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking.html
Testability,test,tested,"﻿. Geometry Optimization — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run mult",MatchSource.WIKI,psi4manual/4.0b3/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking.html
Usability,clear,clear,"se can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representation. The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes”, though many of these capabilities are; still under development. Presently by default, separate fragments are bonded by; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option FRAG_MODE, fragments; may instead be related by a unique set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default), linear combinations of; atomic positions, or located on the principal axes (not yet working). Basic Keywords¶. OPT_TYPE¶. Specifies minimum search, t",MatchSource.WIKI,psi4manual/4.0b3/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking.html
Availability,down,down,"osal PEP1) protocol to organize; PSI4. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; ",MatchSource.WIKI,psi4manual/4.0b3/pep0001-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/pep0001-1.html
Deployability,update,updated,"e statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB; This is an example comment that refers to PEP1: Proposing PsiPEP for PSI4 and a trac ticket #221. Table Of Contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. Previous topic; PsiPEP: Plans and Practices to Organize PSI4; Next topic; Programming: Using the Core Libraries; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 »; PsiPEP: Plans and Practices to Organize PSI4 ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/pep0001-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/pep0001-1.html
Integrability,protocol,protocol,"﻿. PEP1: Proposing PsiPEP for PSI4 — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 »; PsiPEP: Plans and Practices to Organize PSI4 ». PEP1: Proposing PsiPEP for PSI4¶. PEP:1. Title:Proposing PsiPEP for PSI4. Last-Modified:04-Jul-2012. Author:Lori Burns. Content-Type:text/x-rst. Created:04-Jul-2012. This document proposes using a (much more informal) version of Python’s; PEP (Python Enhancement Proposal PEP1) protocol to organize; PSI4. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices o",MatchSource.WIKI,psi4manual/4.0b3/pep0001-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/pep0001-1.html
Usability,simpl,simple,"e is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them.",MatchSource.WIKI,psi4manual/4.0b3/pep0001-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/pep0001-1.html
Availability,down,down,"osal PEP1) protocol to organize; PSI4. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; ",MatchSource.WIKI,psi4manual/4.0b3/pep0001.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/pep0001.html
Deployability,update,updated,"e statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB; This is an example comment that refers to PEP1: Proposing PsiPEP for PSI4 and a trac ticket #221. Table Of Contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. Previous topic; PsiPEP: Plans and Practices to Organize PSI4; Next topic; Programming: Using the Core Libraries; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 »; PsiPEP: Plans and Practices to Organize PSI4 ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 01, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/pep0001.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/pep0001.html
Integrability,protocol,protocol,"﻿. PEP1: Proposing PsiPEP for PSI4 — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 »; PsiPEP: Plans and Practices to Organize PSI4 ». PEP1: Proposing PsiPEP for PSI4¶. PEP:1. Title:Proposing PsiPEP for PSI4. Last-Modified:04-Jul-2012. Author:Lori Burns. Content-Type:text/x-rst. Created:04-Jul-2012. This document proposes using a (much more informal) version of Python’s; PEP (Python Enhancement Proposal PEP1) protocol to organize; PSI4. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices o",MatchSource.WIKI,psi4manual/4.0b3/pep0001.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/pep0001.html
Usability,simpl,simple,"e is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them.",MatchSource.WIKI,psi4manual/4.0b3/pep0001.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/pep0001.html
Availability,avail,available,"ure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/plugins directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/plugins/aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals. psi4/plugins/mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/plugins/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/plugins/sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugi",MatchSource.WIKI,psi4manual/4.0b3/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html
Deployability,update,updated,"file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Documentation; for building documentation and Available Plugins; for this file’s final destination. To create a purely Python plugin, create a new plugin directory, then; remove the Makefile, myplugin.cc, and input.dat files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; inputalt.dat as a model for loading the plugin, no recompile ever; necessary. Table Of Contents. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Previous topic; Contributions: Intro to Programming in PSI4; Next topic; Best Practices for Python Functions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html
Energy Efficiency,energy,energy,"user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b3/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html
Integrability,wrap,wrapped,"s: Adding New Functionality to PSI4¶. Modular Approach to Development¶; The redesign of PSI4 into a single-executable changed the way that; code development is done. The standalone nature of modules in previous; versions of Psi made their development very easy, as new functionality; could be implemented almost as a standalone executable, which could easily; be ported into the Psi code when completed. The new design specifies that; these modules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this ",MatchSource.WIKI,psi4manual/4.0b3/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html
Modifiability,plugin,plugin," be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting",MatchSource.WIKI,psi4manual/4.0b3/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html
Performance,load,loaded,"ality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; ",MatchSource.WIKI,psi4manual/4.0b3/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html
Security,access,accessed,"user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b3/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html
Testability,test,tests,"final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofile). inputalt.dat — Sample input file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. doc.rst — Documentation file.",MatchSource.WIKI,psi4manual/4.0b3/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html
Usability,learn,learn,"dules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In ",MatchSource.WIKI,psi4manual/4.0b3/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html
Availability,avail,available,"ure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/plugins directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/plugins/aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals. psi4/plugins/mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/plugins/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/plugins/sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugi",MatchSource.WIKI,psi4manual/4.0b3/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins.html
Deployability,update,updated,"file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Documentation; for building documentation and Available Plugins; for this file’s final destination. To create a purely Python plugin, create a new plugin directory, then; remove the Makefile, myplugin.cc, and input.dat files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; inputalt.dat as a model for loading the plugin, no recompile ever; necessary. Table Of Contents. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Previous topic; Contributions: Intro to Programming in PSI4; Next topic; Best Practices for Python Functions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins.html
Energy Efficiency,energy,energy,"user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b3/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins.html
Integrability,wrap,wrapped,"s: Adding New Functionality to PSI4¶. Modular Approach to Development¶; The redesign of PSI4 into a single-executable changed the way that; code development is done. The standalone nature of modules in previous; versions of Psi made their development very easy, as new functionality; could be implemented almost as a standalone executable, which could easily; be ported into the Psi code when completed. The new design specifies that; these modules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this ",MatchSource.WIKI,psi4manual/4.0b3/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins.html
Modifiability,plugin,plugin," be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting",MatchSource.WIKI,psi4manual/4.0b3/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins.html
Performance,load,loaded,"ality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; ",MatchSource.WIKI,psi4manual/4.0b3/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins.html
Security,access,accessed,"user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b3/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins.html
Testability,test,tests,"final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofile). inputalt.dat — Sample input file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. doc.rst — Documentation file.",MatchSource.WIKI,psi4manual/4.0b3/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins.html
Usability,learn,learn,"dules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In ",MatchSource.WIKI,psi4manual/4.0b3/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins.html
Deployability,update,updated,"﻿. Programming: Using the Core Libraries — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Programming: Using the Core Libraries¶. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver; PsiMod Options Commands. Previous topic; PEP1: Proposing PsiPEP for PSI4; Next topic; LibOptions: globals, locals, has_changed and all that; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/programming-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/programming-1.html
Deployability,update,updated,"﻿. Programming: Using the Core Libraries — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Programming: Using the Core Libraries¶. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver; PsiMod Options Commands. Previous topic; PEP1: Proposing PsiPEP for PSI4; Next topic; LibOptions: globals, locals, has_changed and all that; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/programming.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/programming.html
Deployability,update,updated,"﻿. Property — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/prop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/prop-1.html
Deployability,update,updated,"﻿. Property — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 19, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/prop.html
Availability,fault,faulty,"on>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | __getattr__ = new_get_attr(self, name); | Function to redefine get_attr method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine set_attr method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (opt",MatchSource.WIKI,psi4manual/4.0b3/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html
Deployability,configurat,configuration," ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; cepa(...); cepa() -> float :; Runs the coupled electron pair approximation code; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1) -> matrix_vector :; Gets the list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; fd_geoms_freq_1(...);",MatchSource.WIKI,psi4manual/4.0b3/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html
Energy Efficiency,energy,energy,"| ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Db(...); | Db( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fa(...); | Fa( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fb(...); | Fb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | add_postiteration_callback(...); | add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | add_preiteration_callback(...); | add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | alpha_orbital_space(...); | alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | basisset(...); | basisset( (Wavefunction)arg1) -> BasisSet :; | docstring; | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frzcpi(...); | frzcpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | frzvpi(...); | frzvpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | gradient(...); | gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | molecule(...); | molecule( (Wavefunction)arg1) -> Molecule :; | docstring; | ; | nalpha(...); | nalpha( (Wavefunction)arg1) -> int :; | docstring; | ; | nalphapi(...); | nalphapi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | nbeta(...); | nbeta( (Wavefunction)arg1) -> int :; | docstring; | ; | nbetapi(...); | nbetapi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | nirrep(...); | nirrep( (Wavef",MatchSource.WIKI,psi4manual/4.0b3/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html
Integrability,contract,contracts,"ode.; ; cceom(...); cceom() -> float :; Runs the equation of motion coupled cluster code, for excited states.; ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; cepa(...); cepa() -> float :; Runs the coupled electron pair approximation code; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1) -> matrix_vector :; Gets the list of displacements needed",MatchSource.WIKI,psi4manual/4.0b3/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html
Modifiability,inherit,inherited,"sSetParser; CdSalcList; Checkpoint; CorrelationFactor; FittedSlaterCorrelationFactor; DFChargeFitter; Dimension; Dispersion; Environment; ExternalPotential; FittingMetric; Functional; GridProp; IO; IOManager; IntVector; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OrbitalSpace; PetiteList; PointGroup; Process; PseudoTrial; SOBasisSet; SuperFunctional; SymmetryOperation; Vector; Vector3; View; Wavefunction; HF; RHF(HF, Wavefunction); matrix_vector; ; class Arguments(Boost.Python.instance); | Method resolution order:; | Arguments; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Arguments)arg1, (int)arg2) -> str :; | docstring; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 56; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __add__(...); | __add__( (BasisSet)arg1, (BasisSet)arg2) -> object; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | has_puream(...); | has_puream( (BasisSet)arg1) -> bool :; | docstring; | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | docstring; | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | docstring; | ; | nbf(...); |",MatchSource.WIKI,psi4manual/4.0b3/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html
Performance,load,load,"Matrix)arg3]) -> Matrix; | ; | cholesky_factorize(...); | cholesky_factorize( (Matrix)arg1) -> None :; | docstring; | ; | clone(...); | clone( (Matrix)arg1) -> Matrix :; | docstring; | ; | coldim(...); | coldim( (Matrix)arg1) -> Dimension :; | docstring; | ; | cols(...); | cols( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | copy_lower_to_upper(...); | copy_lower_to_upper( (Matrix)arg1) -> None :; | docstring; | ; | copy_upper_to_lower(...); | copy_upper_to_lower( (Matrix)arg1) -> None :; | docstring; | ; | diagonalize(...); | diagonalize( (Matrix)arg1, (Matrix)arg2, (Vector)arg3, (DiagonalizeOrder)arg4) -> None :; | docstring; | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> i",MatchSource.WIKI,psi4manual/4.0b3/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html
Security,hash,hash,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/4.0b3/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html
Usability,clear,clear,"defined here:; | ; | __instance_size__ = 368; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new o",MatchSource.WIKI,psi4manual/4.0b3/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html
Availability,fault,faulty,"on>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | __getattr__ = new_get_attr(self, name); | Function to redefine get_attr method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine set_attr method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (opt",MatchSource.WIKI,psi4manual/4.0b3/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod.html
Deployability,configurat,configuration," ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; cepa(...); cepa() -> float :; Runs the coupled electron pair approximation code; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1) -> matrix_vector :; Gets the list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; fd_geoms_freq_1(...);",MatchSource.WIKI,psi4manual/4.0b3/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod.html
Energy Efficiency,energy,energy,"| ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Db(...); | Db( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fa(...); | Fa( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fb(...); | Fb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | add_postiteration_callback(...); | add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | add_preiteration_callback(...); | add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | alpha_orbital_space(...); | alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | basisset(...); | basisset( (Wavefunction)arg1) -> BasisSet :; | docstring; | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frzcpi(...); | frzcpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | frzvpi(...); | frzvpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | gradient(...); | gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | molecule(...); | molecule( (Wavefunction)arg1) -> Molecule :; | docstring; | ; | nalpha(...); | nalpha( (Wavefunction)arg1) -> int :; | docstring; | ; | nalphapi(...); | nalphapi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | nbeta(...); | nbeta( (Wavefunction)arg1) -> int :; | docstring; | ; | nbetapi(...); | nbetapi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | nirrep(...); | nirrep( (Wavef",MatchSource.WIKI,psi4manual/4.0b3/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod.html
Integrability,contract,contracts,"ode.; ; cceom(...); cceom() -> float :; Runs the equation of motion coupled cluster code, for excited states.; ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; cepa(...); cepa() -> float :; Runs the coupled electron pair approximation code; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1) -> matrix_vector :; Gets the list of displacements needed",MatchSource.WIKI,psi4manual/4.0b3/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod.html
Modifiability,inherit,inherited,"sSetParser; CdSalcList; Checkpoint; CorrelationFactor; FittedSlaterCorrelationFactor; DFChargeFitter; Dimension; Dispersion; Environment; ExternalPotential; FittingMetric; Functional; GridProp; IO; IOManager; IntVector; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OrbitalSpace; PetiteList; PointGroup; Process; PseudoTrial; SOBasisSet; SuperFunctional; SymmetryOperation; Vector; Vector3; View; Wavefunction; HF; RHF(HF, Wavefunction); matrix_vector; ; class Arguments(Boost.Python.instance); | Method resolution order:; | Arguments; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Arguments)arg1, (int)arg2) -> str :; | docstring; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 56; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __add__(...); | __add__( (BasisSet)arg1, (BasisSet)arg2) -> object; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | has_puream(...); | has_puream( (BasisSet)arg1) -> bool :; | docstring; | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | docstring; | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | docstring; | ; | nbf(...); |",MatchSource.WIKI,psi4manual/4.0b3/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod.html
Performance,load,load,"Matrix)arg3]) -> Matrix; | ; | cholesky_factorize(...); | cholesky_factorize( (Matrix)arg1) -> None :; | docstring; | ; | clone(...); | clone( (Matrix)arg1) -> Matrix :; | docstring; | ; | coldim(...); | coldim( (Matrix)arg1) -> Dimension :; | docstring; | ; | cols(...); | cols( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | copy_lower_to_upper(...); | copy_lower_to_upper( (Matrix)arg1) -> None :; | docstring; | ; | copy_upper_to_lower(...); | copy_upper_to_lower( (Matrix)arg1) -> None :; | docstring; | ; | diagonalize(...); | diagonalize( (Matrix)arg1, (Matrix)arg2, (Vector)arg3, (DiagonalizeOrder)arg4) -> None :; | docstring; | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> i",MatchSource.WIKI,psi4manual/4.0b3/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod.html
Security,hash,hash,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/4.0b3/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod.html
Usability,clear,clear,"defined here:; | ; | __instance_size__ = 368; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new o",MatchSource.WIKI,psi4manual/4.0b3/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod.html
Availability,avail,available,"f the; totally-symmetric state. The FOLLOW_ROOT option may be used; to follow different roots of the effective Hamiltonian. A value of 1; instructs PSIMRCC to follow the solution with the lowest energy given; a certain set of determinants.; molecule o2 {; 0 3; O; O 1 2.265122720724; units au; }; set {; basis cc-pvtz; }; set mcscf {; reference rohf; docc [3,0,0,0,0,2,1,1] # Doubly occupied MOs; socc [0,0,1,1,0,0,0,0] # Singly occupied MOs; }; set psimrcc {; corr_wfn ccsd # Do Mk-MRCCSD; frozen_docc [1,0,0,0,0,1,0,0] # Frozen MOs; restricted_docc [2,0,0,0,0,1,1,1] # Doubly occupied MOs; active [0,0,1,1,0,0,0,0] # Active MOs; frozen_uocc [0,0,0,0,0,0,0,0] # Frozen virtual MOs; corr_multp 1 # Select the Ms = 0 component; root 1; wfn_sym B1g # Select the B1g state; }; energy('psimrcc'). Note that the oxygen molecule has 16 electrons (including core), while; the docc array contains only 7 doubly-occupied orbitals (or 14; electrons). Hence, two more electrons are available to place into; the active space (given by active), which consists of 2 orbitals.; Thus there are two active electrons in two orbitals. In this particular; example, we are using standard ROHF orbitals for the Mk-MRCCSD procedure,; rather than TCSCF orbitals. Nevertheless, with the present code,; these orbitals must be provided through the MCSCF module, as specified in the; set mcscf section above. Orbital ordering and selection of the model space¶; The reference determinants are specified in PSIMRCC; via occupational numbers. PSIMRCC requires that four arrays be specified; for this purpose. Frozen doubly occupied orbitals (FROZEN_DOCC) are doubly; occupied in each reference determinant and are not correlated in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; al",MatchSource.WIKI,psi4manual/4.0b3/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc-1.html
Deployability,configurat,configuration,"C effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCS",MatchSource.WIKI,psi4manual/4.0b3/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc-1.html
Energy Efficiency,power,powerful,"﻿. PSIMRCC Implementation of Mk-MRCC Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». PSIMRCC Implementation of Mk-MRCC Theory¶; Code author: Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in PSI4 implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the; wavefunction, . where are the reference determinants,; are reference-specific excitation operators, and; are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS",MatchSource.WIKI,psi4manual/4.0b3/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc-1.html
Integrability,contract,contracted," Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in PSI4 implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the; wavefunction, . where are the reference determinants,; are reference-specific excitation operators, and; are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the cod",MatchSource.WIKI,psi4manual/4.0b3/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc-1.html
Modifiability,config,configuration,"C effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCS",MatchSource.WIKI,psi4manual/4.0b3/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc-1.html
Performance,perform,perform,"k-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCSCF module regardless of what; orbital type is chosen, twocon, rhf, or rohf. An example of the; MCSCF input is given below.; PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (e.g., triplets), but in general, not all the required ",MatchSource.WIKI,psi4manual/4.0b3/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc-1.html
Availability,avail,available,"f the; totally-symmetric state. The FOLLOW_ROOT option may be used; to follow different roots of the effective Hamiltonian. A value of 1; instructs PSIMRCC to follow the solution with the lowest energy given; a certain set of determinants.; molecule o2 {; 0 3; O; O 1 2.265122720724; units au; }; set {; basis cc-pvtz; }; set mcscf {; reference rohf; docc [3,0,0,0,0,2,1,1] # Doubly occupied MOs; socc [0,0,1,1,0,0,0,0] # Singly occupied MOs; }; set psimrcc {; corr_wfn ccsd # Do Mk-MRCCSD; frozen_docc [1,0,0,0,0,1,0,0] # Frozen MOs; restricted_docc [2,0,0,0,0,1,1,1] # Doubly occupied MOs; active [0,0,1,1,0,0,0,0] # Active MOs; frozen_uocc [0,0,0,0,0,0,0,0] # Frozen virtual MOs; corr_multp 1 # Select the Ms = 0 component; root 1; wfn_sym B1g # Select the B1g state; }; energy('psimrcc'). Note that the oxygen molecule has 16 electrons (including core), while; the docc array contains only 7 doubly-occupied orbitals (or 14; electrons). Hence, two more electrons are available to place into; the active space (given by active), which consists of 2 orbitals.; Thus there are two active electrons in two orbitals. In this particular; example, we are using standard ROHF orbitals for the Mk-MRCCSD procedure,; rather than TCSCF orbitals. Nevertheless, with the present code,; these orbitals must be provided through the MCSCF module, as specified in the; set mcscf section above. Orbital ordering and selection of the model space¶; The reference determinants are specified in PSIMRCC; via occupational numbers. PSIMRCC requires that four arrays be specified; for this purpose. Frozen doubly occupied orbitals (FROZEN_DOCC) are doubly; occupied in each reference determinant and are not correlated in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; al",MatchSource.WIKI,psi4manual/4.0b3/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc.html
Deployability,configurat,configuration,"C effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCS",MatchSource.WIKI,psi4manual/4.0b3/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc.html
Energy Efficiency,power,powerful,"﻿. PSIMRCC Implementation of Mk-MRCC Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». PSIMRCC Implementation of Mk-MRCC Theory¶; Code author: Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in PSI4 implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the; wavefunction, . where are the reference determinants,; are reference-specific excitation operators, and; are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS",MatchSource.WIKI,psi4manual/4.0b3/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc.html
Integrability,contract,contracted," Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in PSI4 implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the; wavefunction, . where are the reference determinants,; are reference-specific excitation operators, and; are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the cod",MatchSource.WIKI,psi4manual/4.0b3/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc.html
Modifiability,config,configuration,"C effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCS",MatchSource.WIKI,psi4manual/4.0b3/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc.html
Performance,perform,perform,"k-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCSCF module regardless of what; orbital type is chosen, twocon, rhf, or rohf. An example of the; MCSCF input is given below.; PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (e.g., triplets), but in general, not all the required ",MatchSource.WIKI,psi4manual/4.0b3/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimrcc.html
Deployability,update,updated,"﻿. PsiPEP: Plans and Practices to Organize PSI4 — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». PsiPEP: Plans and Practices to Organize PSI4¶. PEP1: Proposing PsiPEP for PSI4. Previous topic; Documentation; Next topic; PEP1: Proposing PsiPEP for PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/psipep-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psipep-1.html
Deployability,update,updated,"﻿. PsiPEP: Plans and Practices to Organize PSI4 — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». PsiPEP: Plans and Practices to Organize PSI4¶. PEP1: Proposing PsiPEP for PSI4. Previous topic; Documentation; Next topic; PEP1: Proposing PsiPEP for PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/psipep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psipep.html
Deployability,update,updated,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Evaluation of One-Electron Properties; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/psithonfunc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithonfunc-1.html
Energy Efficiency,efficient,efficient,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Evaluation of One-Electron Properties; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/psithonfunc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithonfunc-1.html
Performance,perform,performed,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Evaluation of One-Electron Properties; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/psithonfunc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithonfunc-1.html
Deployability,update,updated,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Evaluation of One-Electron Properties; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/psithonfunc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithonfunc.html
Energy Efficiency,efficient,efficient,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Evaluation of One-Electron Properties; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/psithonfunc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithonfunc.html
Performance,perform,performed,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Evaluation of One-Electron Properties; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/psithonfunc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithonfunc.html
Availability,avail,available,"some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # ",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Deployability,integrat,integrated,"in Avals:; h2o.A = A; energy('df-mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('DF-MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-DF-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; Among these are automated computations of interaction energies through; cp(), of a model chemistry applied to a database of systems through; database(), and of several model chemistries together approximating greater; accuracy through cbs().; These are discussed separately in section Psithon Functions: Invoking a Calculation.; Note that the options documented for Python functions are placed as arguments; in the command that calls the function; not in the set globals block or with any other set command. Table Of Contents. Psithon: Structuring an Input File; Physical Constants; Molecule Specification; Multiple Molecules; Molecule Keywords; Ghost Atoms. Geometries from the PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Job Control; Assigning Basis Sets; Memory Specification; Return Values and PSI Variables; Loops; Tables of Results; Python Wrappers. Previous topic; A PSI4 Tutor",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Energy Efficiency,meter,meters," if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # Atomic mass units to kg conversion factor ; psi_au2amu = 5.485799097E-4 # Atomic units (m$@@e$) to atomic mass units conversion factor ; psi_hartree2J = 4.359744E-18 # Hartree to joule conversion factor ; psi_hartree2aJ = 4.359744 # Hartree to attojoule (10$^{-18}$J) conversion factor ; psi_cal2J = 4.184 # Calorie to joule conversion factor ; psi_dipmom_au2si = 8.47835281E-30 # Atomic units to SI units (Cm) conversion factor for dipoles ; psi_dipmom_au2debye = 2.54174623 # Atomic units to Debye conversion factor for dipoles ; psi_dipmom_debye2si = 3.335640952E-30 # Debye to SI units (Cm) conversion factor for dipoles ; psi_c_au = 137.035999679 # Speed of light in atomic units ; psi_hartree2ev = 27.21138 # Hartree to eV conversion factor ; psi_hartree2wavenumbers = 219474.6 # Hartree to cm$^",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Integrability,depend,dependent,"he symmetry keyword can be used when inputting the molecule; (see Sec. Molecule Specification). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with symmetry in , the; axis can be chosen as either the , the , or the ; these can; be specified by requesing the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For symmetry the labels csx, csy, and; csz request the , , and planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the ; state of water cation, we can specify. SOCC = [0, 0, 1, 0]; in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:. SOCC = [0, 1]; Some caution is required, however. The state can be obtained with; the. SOCC = [1, 0, 0, 0]; specification, which would become. SOCC = [1, 0]; under the above-mentioned reduction in symmetry. The state,; whose singly-occupied orbitals are. SOCC = [0, 0, 0, 1]; would be mapped to. SOCC = [1, 0]; which is the same occupation as the state. In this case, the; state is lower in energy, and is not problematic. The distorted; geometries for the state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these sta",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Modifiability,variab,variables,"ion. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversio",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Performance,perform,performed,"﻿. Psithon: Structuring an Input File — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Safety,detect,detected,"he activate keyword is provided. Using this keyword, the above input; file can be equivalently written as follows:; molecule h2{; H; H 1 0.9; }. molecule h{; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf'). activate(h); set basis cc-pvdz; set reference uhf; energy('scf'). Note that whenever the molecule is changed, the basis set must be specified; again. The following section provides more details about the job control; keywords used in the above examples. Molecule Keywords¶; In addition to specifying the geometry, additional information can be provided; in the molecule block. If two integers are encountered on any line of the; molecule block, they are interpreted as the molecular charge and multiplicity; (), respectively. The symmetry can be specified by a line reading; symmetry symbol, where symbol is; the Schönflies symbol of the (Abelian) point group to use for the; computation; see Sec. Symmetry for more details. This need not be; specified, as the molecular symmetry is automatically detected by PSI4.; Certain computations require that the molecule is not reoriented; this can be; achieved by adding either no_reorient or noreorient. By default,; Ångström units are used; this is changed by adding a line that reads; units spec, where spec is one of ang,; angstrom, a.u., au, or bohr. Ghost Atoms¶; While many common computations, such as SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; molecule he2 {; He; Gh(He) 1 2.0; }. or; molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer, with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Geometries from the PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; c",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Security,access,accessed,"y 2000 Mb. or. memory 2000000 Kb. One convenient way to override the PSI4 default memory is to place a memory; command in the ~/.psi4rc file, as detailed in Sec. Scratch Files and the ~/.psi4rc File. Return Values and PSI Variables¶; To harness the power of Python, PSI4 makes the most pertinent results of; each computation are made available to the Python interpreter for; post-processing. To demonstrate, we can embellish the previous example of H2; and H atom:; molecule h2{; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'). molecule h{; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol*(2*h_energy - h2_energy); print""De=%f""%D_e. The energy() function returns the final result of the computation, which we; assign to a Python variable. The two energies are then converted to a; dissociation energy and printed to the output file using standard Python; notation. Sometimes there are multiple quantities of interest; these can be; accessed through the get_variable() function. For example, after performing a; density fitted MP2 computation, both the spin component scaled energy and the; unscaled MP2 energy are made available:; e_mp2=get_variable('DF-MP2 TOTAL ENERGY'); e_scs_mp2=get_variable('SCS-DF-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of; a calculation. The values for all can be printed in the output file; with the input file command print_variables(). Note that; PSI variables accumulate over a PSI4 instance and are not cleared by; clean(). So if you run in a single input file a STO-3G FCI; followed by a aug-cc-pVQZ SCF followed by a print_variables(); command, the last will include both SCF TOTAL ENERGY and; FCI TOTAL ENERGY. Don’t get excited that you got a high-quality calculation; cheaply. Refer to Appendix PSI Variables by Module for a listing of the; variables set by each module. Loops¶; Python provides many control structures, which can be used",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Testability,test,test,"﻿. Psithon: Structuring an Input File — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Usability,simpl,simpler,"﻿. Psithon: Structuring an Input File — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b3/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html
Availability,avail,available,"some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # ",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Deployability,integrat,integrated,"in Avals:; h2o.A = A; energy('df-mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('DF-MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-DF-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; Among these are automated computations of interaction energies through; cp(), of a model chemistry applied to a database of systems through; database(), and of several model chemistries together approximating greater; accuracy through cbs().; These are discussed separately in section Psithon Functions: Invoking a Calculation.; Note that the options documented for Python functions are placed as arguments; in the command that calls the function; not in the set globals block or with any other set command. Table Of Contents. Psithon: Structuring an Input File; Physical Constants; Molecule Specification; Multiple Molecules; Molecule Keywords; Ghost Atoms. Geometries from the PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Job Control; Assigning Basis Sets; Memory Specification; Return Values and PSI Variables; Loops; Tables of Results; Python Wrappers. Previous topic; A PSI4 Tutor",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Energy Efficiency,meter,meters," if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # Atomic mass units to kg conversion factor ; psi_au2amu = 5.485799097E-4 # Atomic units (m$@@e$) to atomic mass units conversion factor ; psi_hartree2J = 4.359744E-18 # Hartree to joule conversion factor ; psi_hartree2aJ = 4.359744 # Hartree to attojoule (10$^{-18}$J) conversion factor ; psi_cal2J = 4.184 # Calorie to joule conversion factor ; psi_dipmom_au2si = 8.47835281E-30 # Atomic units to SI units (Cm) conversion factor for dipoles ; psi_dipmom_au2debye = 2.54174623 # Atomic units to Debye conversion factor for dipoles ; psi_dipmom_debye2si = 3.335640952E-30 # Debye to SI units (Cm) conversion factor for dipoles ; psi_c_au = 137.035999679 # Speed of light in atomic units ; psi_hartree2ev = 27.21138 # Hartree to eV conversion factor ; psi_hartree2wavenumbers = 219474.6 # Hartree to cm$^",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Integrability,depend,dependent,"he symmetry keyword can be used when inputting the molecule; (see Sec. Molecule Specification). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with symmetry in , the; axis can be chosen as either the , the , or the ; these can; be specified by requesing the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For symmetry the labels csx, csy, and; csz request the , , and planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the ; state of water cation, we can specify. SOCC = [0, 0, 1, 0]; in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:. SOCC = [0, 1]; Some caution is required, however. The state can be obtained with; the. SOCC = [1, 0, 0, 0]; specification, which would become. SOCC = [1, 0]; under the above-mentioned reduction in symmetry. The state,; whose singly-occupied orbitals are. SOCC = [0, 0, 0, 1]; would be mapped to. SOCC = [1, 0]; which is the same occupation as the state. In this case, the; state is lower in energy, and is not problematic. The distorted; geometries for the state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these sta",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Modifiability,variab,variables,"ion. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversio",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Performance,perform,performed,"﻿. Psithon: Structuring an Input File — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Safety,detect,detected,"he activate keyword is provided. Using this keyword, the above input; file can be equivalently written as follows:; molecule h2{; H; H 1 0.9; }. molecule h{; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf'). activate(h); set basis cc-pvdz; set reference uhf; energy('scf'). Note that whenever the molecule is changed, the basis set must be specified; again. The following section provides more details about the job control; keywords used in the above examples. Molecule Keywords¶; In addition to specifying the geometry, additional information can be provided; in the molecule block. If two integers are encountered on any line of the; molecule block, they are interpreted as the molecular charge and multiplicity; (), respectively. The symmetry can be specified by a line reading; symmetry symbol, where symbol is; the Schönflies symbol of the (Abelian) point group to use for the; computation; see Sec. Symmetry for more details. This need not be; specified, as the molecular symmetry is automatically detected by PSI4.; Certain computations require that the molecule is not reoriented; this can be; achieved by adding either no_reorient or noreorient. By default,; Ångström units are used; this is changed by adding a line that reads; units spec, where spec is one of ang,; angstrom, a.u., au, or bohr. Ghost Atoms¶; While many common computations, such as SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; molecule he2 {; He; Gh(He) 1 2.0; }. or; molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer, with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Geometries from the PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; c",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Security,access,accessed,"y 2000 Mb. or. memory 2000000 Kb. One convenient way to override the PSI4 default memory is to place a memory; command in the ~/.psi4rc file, as detailed in Sec. Scratch Files and the ~/.psi4rc File. Return Values and PSI Variables¶; To harness the power of Python, PSI4 makes the most pertinent results of; each computation are made available to the Python interpreter for; post-processing. To demonstrate, we can embellish the previous example of H2; and H atom:; molecule h2{; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'). molecule h{; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol*(2*h_energy - h2_energy); print""De=%f""%D_e. The energy() function returns the final result of the computation, which we; assign to a Python variable. The two energies are then converted to a; dissociation energy and printed to the output file using standard Python; notation. Sometimes there are multiple quantities of interest; these can be; accessed through the get_variable() function. For example, after performing a; density fitted MP2 computation, both the spin component scaled energy and the; unscaled MP2 energy are made available:; e_mp2=get_variable('DF-MP2 TOTAL ENERGY'); e_scs_mp2=get_variable('SCS-DF-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of; a calculation. The values for all can be printed in the output file; with the input file command print_variables(). Note that; PSI variables accumulate over a PSI4 instance and are not cleared by; clean(). So if you run in a single input file a STO-3G FCI; followed by a aug-cc-pVQZ SCF followed by a print_variables(); command, the last will include both SCF TOTAL ENERGY and; FCI TOTAL ENERGY. Don’t get excited that you got a high-quality calculation; cheaply. Refer to Appendix PSI Variables by Module for a listing of the; variables set by each module. Loops¶; Python provides many control structures, which can be used",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Testability,test,test,"﻿. Psithon: Structuring an Input File — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Usability,simpl,simpler,"﻿. Psithon: Structuring an Input File — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b3/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput.html
Deployability,update,updated,"﻿. Python Module Index — PSI4 [beta3] documentation. Navigation. index. modules    . toc    ; PSI4 [beta3] » . Python Module Index. a | ; b | ; c | ; d | ; f | ; h | ; i | ; j | ; m | ; n | ; o | ; p | ; q | ; r | ; s | ; t | ; u | ; w.  . a. ACENES. aliases.  . b. BAKERJCC93. BAKERJCC96. BASIC. basislist. basislistdunning. basislistother. BENCH12.  . c. CORE.  . d. dashparam. diatomic. driver.  . f. frac. functional.  . h. HBC6. HSG. HTBH.  . i. input.  . j. JSCH.  . m. molutil.  . n. NBC10. NCB31. NHTBH.  . o. optproc.  . p. physconst. proc. procutil. psiexceptions. pubchem.  . q. qcdb.    ; qcdb.__init__.    ; qcdb.dbproc.    ; qcdb.exceptions.    ; qcdb.libmintscoordentry.    ; qcdb.libmintsmolecule.    ; qcdb.molecule.    ; qcdb.periodictable.    ; qcdb.physconst.    ; qcdb.psiutil.    ; qcdb.vecutil. qmmm.  . r. RGC10.  . s. S22. S22by5. S66.  . t. text.  . u. util.  . w. wrappers. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/py-modindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/py-modindex.html
Integrability,wrap,wrappers,"﻿. Python Module Index — PSI4 [beta3] documentation. Navigation. index. modules    . toc    ; PSI4 [beta3] » . Python Module Index. a | ; b | ; c | ; d | ; f | ; h | ; i | ; j | ; m | ; n | ; o | ; p | ; q | ; r | ; s | ; t | ; u | ; w.  . a. ACENES. aliases.  . b. BAKERJCC93. BAKERJCC96. BASIC. basislist. basislistdunning. basislistother. BENCH12.  . c. CORE.  . d. dashparam. diatomic. driver.  . f. frac. functional.  . h. HBC6. HSG. HTBH.  . i. input.  . j. JSCH.  . m. molutil.  . n. NBC10. NCB31. NHTBH.  . o. optproc.  . p. physconst. proc. procutil. psiexceptions. pubchem.  . q. qcdb.    ; qcdb.__init__.    ; qcdb.dbproc.    ; qcdb.exceptions.    ; qcdb.libmintscoordentry.    ; qcdb.libmintsmolecule.    ; qcdb.molecule.    ; qcdb.periodictable.    ; qcdb.physconst.    ; qcdb.psiutil.    ; qcdb.vecutil. qmmm.  . r. RGC10.  . s. S22. S22by5. S66.  . t. text.  . u. util.  . w. wrappers. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/py-modindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/py-modindex.html
Availability,avail,available,"﻿. Defining a Method Alias — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias-1.html
Deployability,update,updated,"e('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; energy('mp2.5'). Previous topic; User-Defined Basis Sets; Next topic; Creating a Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias-1.html
Energy Efficiency,energy,energy,"﻿. Defining a Method Alias — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias-1.html
Modifiability,variab,variables,"﻿. Defining a Method Alias — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias-1.html
Performance,optimiz,optimizer,"n/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias-1.html
Security,access,accessed,"﻿. Defining a Method Alias — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias-1.html
Availability,avail,available,"﻿. Defining a Method Alias — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias.html
Deployability,update,updated,"e('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; energy('mp2.5'). Previous topic; User-Defined Basis Sets; Next topic; Creating a Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias.html
Energy Efficiency,energy,energy,"﻿. Defining a Method Alias — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias.html
Modifiability,variab,variables,"﻿. Defining a Method Alias — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias.html
Performance,optimiz,optimizer,"n/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias.html
Security,access,accessed,"﻿. Defining a Method Alias — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b3/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddalias.html
Deployability,update,updated,"nto a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.file, where the path can be either relative or absolute.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one above that includes; [basis name], PUREAM; value, and element basis set specifications. Hash signs denote comments.; Copy the section into a PSI4 input file and surround it with the command basis {...},; as shown below.; Multiple basis sets can be specified by adding additional sections within the surrounding brackets.; basis {; # basis set section like in snippet above goes here; # additional basis set sections follow; }. Previous topic; Customization: Adding Simple Extensions; Next topic; Defining a Method Alias; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickaddbasis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddbasis-1.html
Integrability,rout,routes,"﻿. User-Defined Basis Sets — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. User-Defined Basis Sets¶; There are three routes by which a basis set in G94 format can be introduced to PSI4’s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; Name the file with the name of the basis set and a .gbs extension, after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/lib/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/lib/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/lib/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.fi",MatchSource.WIKI,psi4manual/4.0b3/quickaddbasis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddbasis-1.html
Deployability,update,updated,"nto a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.file, where the path can be either relative or absolute.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one above that includes; [basis name], PUREAM; value, and element basis set specifications. Hash signs denote comments.; Copy the section into a PSI4 input file and surround it with the command basis {...},; as shown below.; Multiple basis sets can be specified by adding additional sections within the surrounding brackets.; basis {; # basis set section like in snippet above goes here; # additional basis set sections follow; }. Previous topic; Customization: Adding Simple Extensions; Next topic; Defining a Method Alias; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickaddbasis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddbasis.html
Integrability,rout,routes,"﻿. User-Defined Basis Sets — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. User-Defined Basis Sets¶; There are three routes by which a basis set in G94 format can be introduced to PSI4’s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; Name the file with the name of the basis set and a .gbs extension, after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/lib/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/lib/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/lib/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.fi",MatchSource.WIKI,psi4manual/4.0b3/quickaddbasis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickaddbasis.html
Availability,avail,available,"le molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (int",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase-1.html
Deployability,update,updated,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase-1.html
Energy Efficiency,energy,energy,"﻿. Creating a Database — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in t",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase-1.html
Integrability,rout,route,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase-1.html
Modifiability,variab,variable,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase-1.html
Usability,simpl,simply,"essary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an examp",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase-1.html
Availability,avail,available,"le molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (int",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase.html
Deployability,update,updated,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase.html
Energy Efficiency,energy,energy,"﻿. Creating a Database — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in t",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase.html
Integrability,rout,route,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase.html
Modifiability,variab,variable,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Customization: Adding Simple Extensions ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase.html
Usability,simpl,simply,"essary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an examp",MatchSource.WIKI,psi4manual/4.0b3/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/quickadddatabase.html
Availability,avail,available,"ithout computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pic",MatchSource.WIKI,psi4manual/4.0b3/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html
Deployability,update,updated,"t a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; ADC: Ab Initio Polarization Propagator; Next topic; CEPA: Coupled-Pair Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html
Energy Efficiency,adapt,adapted,"﻿. SAPT: Symmetry-Adapted Perturbation Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density",MatchSource.WIKI,psi4manual/4.0b3/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html
Modifiability,adapt,adapted,"﻿. SAPT: Symmetry-Adapted Perturbation Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density",MatchSource.WIKI,psi4manual/4.0b3/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html
Performance,perform,performance," interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set globals {; basis aug-cc-pvdz; }. en",MatchSource.WIKI,psi4manual/4.0b3/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html
Safety,recover,recover,"ies (defined above),; they are composed of subsets of the individual terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; ADC: Ab Initio Polarization Propagator; Next topi",MatchSource.WIKI,psi4manual/4.0b3/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html
Testability,test,tested,"asis, we can; throw away virtual orbitals that are expected to contribute little to the; dispersion energy. Speedups in excess of are possible. In; practice, this approximation is very good and should always be applied.; Publications resulting from the use of MP2 NO-based approximations should; cite the following: [Hohenstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for evaluating the triples contribution to dispersion. Type: conv double; Default: 1.0e-6. Advanced Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'). A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-trans",MatchSource.WIKI,psi4manual/4.0b3/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html
Usability,simpl,simplest,"T provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0",MatchSource.WIKI,psi4manual/4.0b3/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html
Availability,avail,available,"ithout computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pic",MatchSource.WIKI,psi4manual/4.0b3/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt.html
Deployability,update,updated,"t a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; ADC: Ab Initio Polarization Propagator; Next topic; CEPA: Coupled-Pair Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt.html
Energy Efficiency,adapt,adapted,"﻿. SAPT: Symmetry-Adapted Perturbation Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density",MatchSource.WIKI,psi4manual/4.0b3/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt.html
Modifiability,adapt,adapted,"﻿. SAPT: Symmetry-Adapted Perturbation Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density",MatchSource.WIKI,psi4manual/4.0b3/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt.html
Performance,perform,performance," interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set globals {; basis aug-cc-pvdz; }. en",MatchSource.WIKI,psi4manual/4.0b3/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt.html
Safety,recover,recover,"ies (defined above),; they are composed of subsets of the individual terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; ADC: Ab Initio Polarization Propagator; Next topi",MatchSource.WIKI,psi4manual/4.0b3/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt.html
Testability,test,tested,"asis, we can; throw away virtual orbitals that are expected to contribute little to the; dispersion energy. Speedups in excess of are possible. In; practice, this approximation is very good and should always be applied.; Publications resulting from the use of MP2 NO-based approximations should; cite the following: [Hohenstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for evaluating the triples contribution to dispersion. Type: conv double; Default: 1.0e-6. Advanced Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'). A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-trans",MatchSource.WIKI,psi4manual/4.0b3/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt.html
Usability,simpl,simplest,"T provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0",MatchSource.WIKI,psi4manual/4.0b3/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt.html
Availability,error,error," -4.69109e+01 0.00000e+00; @UHF iter 1: -149.59793338958522 1.70631e-01 5.72371e-02; @UHF iter 2: -149.62408782458331 -2.61544e-02 8.04195e-03 DIIS; @UHF iter 3: -149.62679515182390 -2.70733e-03 2.51542e-03 DIIS; @UHF iter 4: -149.62726459105770 -4.69439e-04 1.06897e-03 DIIS; @UHF iter 5: -149.62730549814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to; 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often re",MatchSource.WIKI,psi4manual/4.0b3/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf-1.html
Deployability,update,updated,"ew features being; added weekly. We have tried as much as possible to keep the number of options to; a minimum, and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your primary basis/atom type. Then use; OUT_OF_CORE unless you run out of disk space.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; He; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('scf'). Table Of Contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. Previous topic; Notes on Options; Next topic; DFT: Density Functional Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf-1.html
Energy Efficiency,efficient,efficient,"﻿. HF: Hartree–Fock Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». HF: Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type pk; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a PK algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. After printing all manner; of titles, geometries, sizings, and algorithm choices, the SCF finally reaches; the iterations:; Total Energy Delta E Density RMS. @UHF iter 0: -149.76856421865352 -4.69109e+01 0.00000e+00; @UHF iter 1: -149.59793338958522 1.70631e-01 5.72371e-02; @UHF iter 2: -149.62408782458331 -2.61544e-02 8.04195e-03 DIIS; @UHF iter 3: -149.62679515182390 -2.70733e-03 2.51542e-03 DIIS; @UHF iter 4: -149.62726459105770 -4.69439e-04 1.06897e-03 DIIS; @UHF iter 5: -149.62730549814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.738",MatchSource.WIKI,psi4manual/4.0b3/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf-1.html
Integrability,contract,contracted,"e error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the ge",MatchSource.WIKI,psi4manual/4.0b3/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf-1.html
Modifiability,enhance,enhanced,"49814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to; 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock w",MatchSource.WIKI,psi4manual/4.0b3/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf-1.html
Performance,perform,performed,"0740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to; 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamilt",MatchSource.WIKI,psi4manual/4.0b3/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf-1.html
Safety,avoid,avoid,"orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree-Fock; theory, including:. Restricted Hartree-Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree-Fock (UHF); Appropriate for most open-shell systems, and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to an; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree-Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree-Fock (CUHF); A variant of ROHF that starts from a UHF ansatz, and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4, and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, ",MatchSource.WIKI,psi4manual/4.0b3/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf-1.html
Usability,simpl,simplest," high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. The eigenvalues are the orbital energies, and the metric matrix; is the AO-basis overlap matrix. Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbita",MatchSource.WIKI,psi4manual/4.0b3/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf-1.html
Availability,error,error," -4.69109e+01 0.00000e+00; @UHF iter 1: -149.59793338958522 1.70631e-01 5.72371e-02; @UHF iter 2: -149.62408782458331 -2.61544e-02 8.04195e-03 DIIS; @UHF iter 3: -149.62679515182390 -2.70733e-03 2.51542e-03 DIIS; @UHF iter 4: -149.62726459105770 -4.69439e-04 1.06897e-03 DIIS; @UHF iter 5: -149.62730549814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to; 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often re",MatchSource.WIKI,psi4manual/4.0b3/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf.html
Deployability,update,updated,"ew features being; added weekly. We have tried as much as possible to keep the number of options to; a minimum, and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your primary basis/atom type. Then use; OUT_OF_CORE unless you run out of disk space.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; He; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('scf'). Table Of Contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. Previous topic; Notes on Options; Next topic; DFT: Density Functional Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf.html
Energy Efficiency,efficient,efficient,"﻿. HF: Hartree–Fock Theory — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». HF: Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type pk; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a PK algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. After printing all manner; of titles, geometries, sizings, and algorithm choices, the SCF finally reaches; the iterations:; Total Energy Delta E Density RMS. @UHF iter 0: -149.76856421865352 -4.69109e+01 0.00000e+00; @UHF iter 1: -149.59793338958522 1.70631e-01 5.72371e-02; @UHF iter 2: -149.62408782458331 -2.61544e-02 8.04195e-03 DIIS; @UHF iter 3: -149.62679515182390 -2.70733e-03 2.51542e-03 DIIS; @UHF iter 4: -149.62726459105770 -4.69439e-04 1.06897e-03 DIIS; @UHF iter 5: -149.62730549814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.738",MatchSource.WIKI,psi4manual/4.0b3/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf.html
Integrability,contract,contracted,"e error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the ge",MatchSource.WIKI,psi4manual/4.0b3/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf.html
Modifiability,enhance,enhanced,"49814114 -4.09071e-05 2.70311e-04 DIIS; @UHF iter 6: -149.62730736371790 -1.86558e-06 5.94924e-05 DIIS; @UHF iter 7: -149.62730740227752 -3.85596e-08 9.93250e-06 DIIS; @UHF iter 8: -149.62730740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to; 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock w",MatchSource.WIKI,psi4manual/4.0b3/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf.html
Performance,perform,performed,"0740325136 -9.73841e-10 1.88088e-06 DIIS; @UHF iter 9: -149.62730740326214 -1.07718e-11 1.80706e-07 DIIS; @UHF iter 10: -149.62730740326231 -1.70530e-13 2.19128e-08 DIIS. The algorithm takes 10 true iterations to converge the energy and density to; 1.0E-8, plus the trivial iteration due to the SAD guess.; The energy on the zero-th iteration is not variational due to the improper; idempotence properties of the SAD guess, but the first true iteration is within; 2.0E-4 relative error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamilt",MatchSource.WIKI,psi4manual/4.0b3/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf.html
Safety,avoid,avoid,"orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree-Fock; theory, including:. Restricted Hartree-Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree-Fock (UHF); Appropriate for most open-shell systems, and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to an; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree-Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree-Fock (CUHF); A variant of ROHF that starts from a UHF ansatz, and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4, and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, ",MatchSource.WIKI,psi4manual/4.0b3/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf.html
Usability,simpl,simplest," high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. The eigenvalues are the orbital energies, and the metric matrix; is the AO-basis overlap matrix. Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbita",MatchSource.WIKI,psi4manual/4.0b3/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf.html
Deployability,update,updated,"﻿. Search — PSI4 [beta3] documentation. Navigation. index. modules    . toc    ; PSI4 [beta3] » . Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b3/search.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/search.html
Availability,checkpoint,checkpoint,"f the molecule is automatically lowered to account for the different basis sets. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, wit",MatchSource.WIKI,psi4manual/4.0b3/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html
Deployability,update,update," Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry speci",MatchSource.WIKI,psi4manual/4.0b3/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html
Energy Efficiency,energy,energy,"﻿. Test Suite and Sample Inputs — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant,",MatchSource.WIKI,psi4manual/4.0b3/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html
Integrability,depend,depend,"t the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-3",MatchSource.WIKI,psi4manual/4.0b3/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html
Modifiability,variab,variables,"rbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specific",MatchSource.WIKI,psi4manual/4.0b3/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html
Performance,optimiz,optimization,"﻿. Test Suite and Sample Inputs — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant,",MatchSource.WIKI,psi4manual/4.0b3/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html
Safety,avoid,avoided,"am can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O",MatchSource.WIKI,psi4manual/4.0b3/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html
Testability,test,test,"﻿. Test Suite and Sample Inputs — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant,",MatchSource.WIKI,psi4manual/4.0b3/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html
Availability,checkpoint,checkpoint,"f the molecule is automatically lowered to account for the different basis sets. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, wit",MatchSource.WIKI,psi4manual/4.0b3/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite.html
Deployability,update,update," Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry speci",MatchSource.WIKI,psi4manual/4.0b3/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite.html
Energy Efficiency,energy,energy,"﻿. Test Suite and Sample Inputs — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant,",MatchSource.WIKI,psi4manual/4.0b3/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite.html
Integrability,depend,depend,"t the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-3",MatchSource.WIKI,psi4manual/4.0b3/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite.html
Modifiability,variab,variables,"rbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specific",MatchSource.WIKI,psi4manual/4.0b3/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite.html
Performance,optimiz,optimization,"﻿. Test Suite and Sample Inputs — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant,",MatchSource.WIKI,psi4manual/4.0b3/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite.html
Safety,avoid,avoided,"am can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DCFT-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O",MatchSource.WIKI,psi4manual/4.0b3/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite.html
Testability,test,test,"﻿. Test Suite and Sample Inputs — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant,",MatchSource.WIKI,psi4manual/4.0b3/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite.html
Availability,down,downhill,"ricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; ",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Deployability,install,installation," reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a clos",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Energy Efficiency,energy,energy,"﻿. A PSI4 Tutorial — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . A PSI4 Tutorial¶. Basic Input File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the sp",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Integrability,message,message,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking a",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Modifiability,variab,variables,"le (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables ( and ), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92534160932308. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; RO",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Performance,perform,perform," uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92534160932308. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; -----------------------",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Safety,detect,detected,"of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; # Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. no_reorient; symmetry c1; }. Notice we have a couple of new keywords in the molecule specification.; no_reorient tells the program not to reorient the molecule; to a different coordinate system (this is important for SAPT to make; sure the same coordinate frame is used for the computations of the two; monomers and for the dimer). The next keyword tells PSI4 to run; in C1 point-group symmetry (i.e., without using symmetry), even if a; higher symmetry is detected. SAPT computations know to turn off; symmetry and fix orientation even without the user specifying these; molecule keywords.; Here’s the second half of the input:; set globals {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set globals or set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT exam",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Security,access,accessed,"ted, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = cp('ccsd(t)'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function cp() does it all for us, automatically.; And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol, which is; defined in Sec. Scratch Files and the ~/.psi4rc File. Notice the loop over to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. Table Of Contents. A PSI4 Tutorial; Basic Input File Structure; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy wi",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Testability,test,test,"------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking at the output from running the; previous example, we see that the OH bond length is about 0.9463 Ångstroms,; and the bond angle is about 104.575 degrees. It’s good to give this many; digits (or more) to make sure there’s not significant roundoff error in the; geometry when running a frequency computation. So, our frequency; computation input (which can be found as test case; tu4-h2o-freq is:; #! Frequencies for H2O HF/cc-pVDZ at optimized geometry. memory 250 mb. molecule h2o {; O ; H 1 0.9463; H 1 0.9463 2 104.575; }. set basis cc-pVDZ; set scf_type pk; frequencies('scf'). Alternatively, it’s also possible for PSI4 to use Cartesian coordinate; input. Here, the Cartesian coordinates of the optimized geometry can be; extracted from the bottom of the optimization output. The input; would then look like this:; molecule h2o {; O 0.0000000000 -0.0000000000 -0.1224239500; H 0.0000000000 -1.4147069876 0.9714784639; H -0.0000000000 1.4147069876 0.9714784639; }. set basis cc-pVDZ; frequencies('scf'). If either of the inputs above are run, the program should do some; computations and then finally report the following harmonic vibrational; frequencies (roundoff errors of around 0.1 cm-1 may exist):; Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1776.1735; A1 4113.8031; B2 4211.7879; ----------------------------------------------",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Usability,simpl,simple,"ith the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line ",MatchSource.WIKI,psi4manual/4.0b3/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html
Availability,down,downhill,"ricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; ",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Deployability,install,installation," reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a clos",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Energy Efficiency,energy,energy,"﻿. A PSI4 Tutorial — PSI4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . A PSI4 Tutorial¶. Basic Input File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the sp",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Integrability,message,message,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking a",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Modifiability,variab,variables,"le (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables ( and ), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92534160932308. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; RO",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Performance,perform,perform," uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92534160932308. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; -----------------------",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Safety,detect,detected,"of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; # Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. no_reorient; symmetry c1; }. Notice we have a couple of new keywords in the molecule specification.; no_reorient tells the program not to reorient the molecule; to a different coordinate system (this is important for SAPT to make; sure the same coordinate frame is used for the computations of the two; monomers and for the dimer). The next keyword tells PSI4 to run; in C1 point-group symmetry (i.e., without using symmetry), even if a; higher symmetry is detected. SAPT computations know to turn off; symmetry and fix orientation even without the user specifying these; molecule keywords.; Here’s the second half of the input:; set globals {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set globals or set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT exam",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Security,access,accessed,"ted, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = cp('ccsd(t)'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function cp() does it all for us, automatically.; And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol, which is; defined in Sec. Scratch Files and the ~/.psi4rc File. Notice the loop over to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. Table Of Contents. A PSI4 Tutorial; Basic Input File Structure; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy wi",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Testability,test,test,"------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking at the output from running the; previous example, we see that the OH bond length is about 0.9463 Ångstroms,; and the bond angle is about 104.575 degrees. It’s good to give this many; digits (or more) to make sure there’s not significant roundoff error in the; geometry when running a frequency computation. So, our frequency; computation input (which can be found as test case; tu4-h2o-freq is:; #! Frequencies for H2O HF/cc-pVDZ at optimized geometry. memory 250 mb. molecule h2o {; O ; H 1 0.9463; H 1 0.9463 2 104.575; }. set basis cc-pVDZ; set scf_type pk; frequencies('scf'). Alternatively, it’s also possible for PSI4 to use Cartesian coordinate; input. Here, the Cartesian coordinates of the optimized geometry can be; extracted from the bottom of the optimization output. The input; would then look like this:; molecule h2o {; O 0.0000000000 -0.0000000000 -0.1224239500; H 0.0000000000 -1.4147069876 0.9714784639; H -0.0000000000 1.4147069876 0.9714784639; }. set basis cc-pVDZ; frequencies('scf'). If either of the inputs above are run, the program should do some; computations and then finally report the following harmonic vibrational; frequencies (roundoff errors of around 0.1 cm-1 may exist):; Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1776.1735; A1 4113.8031; B2 4211.7879; ----------------------------------------------",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Usability,simpl,simple,"ith the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line ",MatchSource.WIKI,psi4manual/4.0b3/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial.html
Availability,toler,tolerably,"790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent ",MatchSource.WIKI,psi4manual/4.0b4/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc-1.html
Deployability,configurat,configurations,"fold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for ",MatchSource.WIKI,psi4manual/4.0b4/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc-1.html
Energy Efficiency,energy,energy,"﻿. ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». ADC: Ab Initio Polarization Propagator¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; Module: Keywords, PSI Variables, ADC; The ADC code seeks the pole structure of the polarization; propagator, which is equivalent to the correlated excitation energy,; in terms of the second order algebraic-diagrammatic construction; (ADC(2)) scheme. Originally, the ADC scheme was derived in purely; the diagrammatic language by Schirmer [Schirmer:1982] and later,; a sophisticated algebraic scheme was developed [Trofimov:2006]; by Trofimov et al. In general by n-th order ADC theory, the; excited state is treated at completely equivalent level to the; Møller–Plesset perturbation expansion of the same order.; Hence the ADC(2); can be described as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D:math:_n) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In PSI4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; producti",MatchSource.WIKI,psi4manual/4.0b4/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc-1.html
Integrability,depend,dependence,"ions of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the ",MatchSource.WIKI,psi4manual/4.0b4/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc-1.html
Modifiability,flexible,flexible," MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D:math:_n) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In PSI4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arr",MatchSource.WIKI,psi4manual/4.0b4/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc-1.html
Performance,perform,performing,"ntation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories ",MatchSource.WIKI,psi4manual/4.0b4/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc-1.html
Usability,simpl,simple,"d as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Geometry Optimization; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical",MatchSource.WIKI,psi4manual/4.0b4/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc-1.html
Availability,toler,tolerably,"790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent ",MatchSource.WIKI,psi4manual/4.0b4/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc.html
Deployability,configurat,configurations,"fold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for ",MatchSource.WIKI,psi4manual/4.0b4/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc.html
Energy Efficiency,energy,energy,"﻿. ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». ADC: Ab Initio Polarization Propagator¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; Module: Keywords, PSI Variables, ADC; The ADC code seeks the pole structure of the polarization; propagator, which is equivalent to the correlated excitation energy,; in terms of the second order algebraic-diagrammatic construction; (ADC(2)) scheme. Originally, the ADC scheme was derived in purely; the diagrammatic language by Schirmer [Schirmer:1982] and later,; a sophisticated algebraic scheme was developed [Trofimov:2006]; by Trofimov et al. In general by n-th order ADC theory, the; excited state is treated at completely equivalent level to the; Møller–Plesset perturbation expansion of the same order.; Hence the ADC(2); can be described as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D:math:_n) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In PSI4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; producti",MatchSource.WIKI,psi4manual/4.0b4/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc.html
Integrability,depend,dependence,"ions of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the ",MatchSource.WIKI,psi4manual/4.0b4/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc.html
Modifiability,flexible,flexible," MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D:math:_n) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In PSI4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arr",MatchSource.WIKI,psi4manual/4.0b4/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc.html
Performance,perform,performing,"ntation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories ",MatchSource.WIKI,psi4manual/4.0b4/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc.html
Usability,simpl,simple,"d as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Geometry Optimization; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical",MatchSource.WIKI,psi4manual/4.0b4/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/adc.html
Deployability,update,updated,"﻿. Appendices — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Appendices¶. Bibliography; Test Suite and Sample Inputs. Basis Sets by Element. Auxiliary Basis Sets. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRIPLES; CIS; CLAG; CPHF; DCFT; DETCI; DFMP2; DFTSAPT; FINDIF; FNOCC; LMP2; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; RESPONSE; SAPT; SCF; STABILITY; THERMO; TRANSQT; TRANSQT2. PSI Variables by Alpha; PSI Variables by Module; ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; DCFT; DETCI; DFMP2; DFTSAPT; FNOCC; LMP2; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PsiMod: Linking C++ and Python; Next topic; Bibliography; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/appendices-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/appendices-1.html
Deployability,update,updated,"﻿. Appendices — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Appendices¶. Bibliography; Test Suite and Sample Inputs. Basis Sets by Element. Auxiliary Basis Sets. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRIPLES; CIS; CLAG; CPHF; DCFT; DETCI; DFMP2; DFTSAPT; FINDIF; FNOCC; LMP2; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; RESPONSE; SAPT; SCF; STABILITY; THERMO; TRANSQT; TRANSQT2. PSI Variables by Alpha; PSI Variables by Module; ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; DCFT; DETCI; DFMP2; DFTSAPT; FNOCC; LMP2; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PsiMod: Linking C++ and Python; Next topic; Bibliography; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/appendices.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/appendices.html
Availability,error,error,"011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JC",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html
Deployability,update,updated,"n same strand). S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NCB31¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6'; 'WI7' weakly interacting; 'PPS5'. Table Of Contents. BAKERJCC96; ACENES; NBC10; S22by5; BENCH12; RSE42; BAKERJCC93; RGC10; S66; CORE; BASIC; NHTBH; HBC6; HSG; JSCH; S22; HTBH; NCB31. Previous topic; Database; Next topic; Complete Basis Set; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Database ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html
Energy Efficiency,energy,energy,"ne-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; i",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html
Performance,optimiz,optimize,", 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 1",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html
Testability,benchmark,benchmark,"S¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'NBC100' Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geome",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOF",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html
Availability,error,error,"011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JC",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases.html
Deployability,update,updated,"n same strand). S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NCB31¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6'; 'WI7' weakly interacting; 'PPS5'. Table Of Contents. BAKERJCC96; ACENES; NBC10; S22by5; BENCH12; RSE42; BAKERJCC93; RGC10; S66; CORE; BASIC; NHTBH; HBC6; HSG; JSCH; S22; HTBH; NCB31. Previous topic; Database; Next topic; Complete Basis Set; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Database ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases.html
Energy Efficiency,energy,energy,"ne-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; i",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases.html
Performance,optimiz,optimize,", 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 1",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases.html
Testability,benchmark,benchmark,"S¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'NBC100' Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geome",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOF",MatchSource.WIKI,psi4manual/4.0b4/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases.html
Deployability,update,updated,"g-cc-pvtz-ri; —. 6-311++G**; 6-311ppg_d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d); 6-311ppg_2d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,p); 6-311ppg_2d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,2p); 6-311ppg_2d_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; —; —; —. def2-SVP; def2-svp; —; —; —. def2-SVPD; def2-svpd; —; —; —. def2-TZVP; def2-tzvp; —; —; —. def2-TZVPD; def2-tzvpd; —; —; —. def2-TZVPP; def2-tzvpp; —; —; —. def2-TZVPPD; def2-tzvppd; —; —; —. def2-QZVP; def2-qzvp; —; —; —. def2-QZVPD; def2-qzvpd; —; —; —. def2-QZVPP; def2-qzvpp; —; —; —. def2-QZVPPD; def2-qzvppd; —; —; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; Auxiliary Basis Sets; Next topic; DFT Functionals; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Auxiliary Basis Sets ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_basissets_byfamily-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_basissets_byfamily-1.html
Deployability,update,updated,"g-cc-pvtz-ri; —. 6-311++G**; 6-311ppg_d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d); 6-311ppg_2d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,p); 6-311ppg_2d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,2p); 6-311ppg_2d_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; —; —; —. def2-SVP; def2-svp; —; —; —. def2-SVPD; def2-svpd; —; —; —. def2-TZVP; def2-tzvp; —; —; —. def2-TZVPD; def2-tzvpd; —; —; —. def2-TZVPP; def2-tzvpp; —; —; —. def2-TZVPPD; def2-tzvppd; —; —; —. def2-QZVP; def2-qzvp; —; —; —. def2-QZVPD; def2-qzvpd; —; —; —. def2-QZVPP; def2-qzvpp; —; —; —. def2-QZVPPD; def2-qzvppd; —; —; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; Auxiliary Basis Sets; Next topic; DFT Functionals; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Auxiliary Basis Sets ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_basissets_byfamily.html
Availability,avail,available,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-,MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_all-1.html
Deployability,update,updated," —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; DFT Functionals; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_all-1.html
Availability,avail,available,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-,MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_all.html
Deployability,update,updated," —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; DFT Functionals; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_all.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_dhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_dhybrid-1.html
Deployability,update,updated,"rid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_dhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_dhybrid-1.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_dhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_dhybrid.html
Deployability,update,updated,"rid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_dhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_dhybrid.html
Availability,avail,available,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Dispersion-Corrected functionals available in PSI4. Name; Description; S6; S8; SR6; ALPHA6; A1; A2; Dispersion?; Dispersion Description. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.55000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 1.02200; 1.42700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.91470; —; —; 0.30650; 5.05700; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.05000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.05000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; 1.70300; 1.26100; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; 1.98890; —; —; 0.39810; 4.42110; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; 1.25000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B97-D3; B97-D Pure-GGA Exchange-Correlation Functional; 1.00000; 0.90900; 0.89200; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B97-D3BJ; B97-D Pure-GGA Exchange-Correlation Functional; 1.00000; 2.26090; —; —; 0.55450; 3.22970; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. BLYP-D; BLYP GGA Exchange-Correlation Functional; 1.20000; —; —; 20,MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_disp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_disp-1.html
Deployability,update,updated,"O; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; 1.00000; 0.59500; 1.37300; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D1; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; 1.00000; 0.72200; 1.21700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; 1.00000; 0.78750; —; —; 0.42890; 4.44070; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; 0.60000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.92800; 1.28700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; 0.25330; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_disp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_disp-1.html
Availability,avail,available,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Dispersion-Corrected functionals available in PSI4. Name; Description; S6; S8; SR6; ALPHA6; A1; A2; Dispersion?; Dispersion Description. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.55000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 1.02200; 1.42700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.91470; —; —; 0.30650; 5.05700; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.05000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.05000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; 1.70300; 1.26100; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; 1.00000; 1.98890; —; —; 0.39810; 4.42110; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; 1.25000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B97-D3; B97-D Pure-GGA Exchange-Correlation Functional; 1.00000; 0.90900; 0.89200; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B97-D3BJ; B97-D Pure-GGA Exchange-Correlation Functional; 1.00000; 2.26090; —; —; 0.55450; 3.22970; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. BLYP-D; BLYP GGA Exchange-Correlation Functional; 1.20000; —; —; 20,MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_disp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_disp.html
Deployability,update,updated,"O; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; 1.00000; 0.59500; 1.37300; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D1; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; 1.00000; 0.72200; 1.21700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; 1.00000; 0.78750; —; —; 0.42890; 4.44070; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; 0.60000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.92800; 1.28700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; 0.25330; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_disp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_disp.html
Deployability,update,updated," Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-2(lp); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization). wb97x-2(tqz); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization). wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_energy-1.html
Deployability,update,updated," Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-2(lp); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization). wb97x-2(tqz); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization). wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_energy.html
Availability,avail,available,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». GGA functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-,MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_gga-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_gga-1.html
Deployability,update,updated,"nless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_gga-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_gga-1.html
Availability,avail,available,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». GGA functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-,MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_gga.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_gga.html
Deployability,update,updated,"nless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_gga.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_gga.html
Availability,avail,available,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. BLYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; ,MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_hybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_hybrid-1.html
Deployability,update,updated," Y; —; —; 0.250000; —; —; —; —; —. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_hybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_hybrid-1.html
Availability,avail,available,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. BLYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; ,MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_hybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_hybrid.html
Deployability,update,updated," Y; —; —; 0.250000; —; —; —; —; —. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_hybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_hybrid.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_lrc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_lrc-1.html
Deployability,update,updated," » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_lrc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_lrc-1.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_lrc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_lrc.html
Deployability,update,updated," » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_lrc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_lrc.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Meta functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_meta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_meta-1.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Meta functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_meta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_meta-1.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Meta functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_meta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_meta.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Meta functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_meta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_meta.html
Deployability,update,updated," Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. pbe-d1; PBE GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. pbe-d3; PBE GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. pbe-d3bj; PBE GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. pbe0; PBE0 Hybrid GGA Exchange-Correlation Functional. pbe0-d; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. pbe0-d3; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. pbe0-d3bj; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. pbesol_x; PBEsol GGA Exchange Hole (Parameter Free). pbe_c; PBE Correlation. pbe_x; PBE GGA Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_opt-1.html
Deployability,update,updated," Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. pbe-d1; PBE GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. pbe-d3; PBE GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. pbe-d3bj; PBE GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. pbe0; PBE0 Hybrid GGA Exchange-Correlation Functional. pbe0-d; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. pbe0-d3; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. pbe0-d3bj; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. pbesol_x; PBEsol GGA Exchange Hole (Parameter Free). pbe_c; PBE Correlation. pbe_x; PBE GGA Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_opt.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Spin-Component-Scaled Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; PSIOH Intermediate Files; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_scsdhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_scsdhybrid-1.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Spin-Component-Scaled Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; PSIOH Intermediate Files; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_scsdhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_scsdhybrid-1.html
Availability,avail,available,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Spin-Component-Scaled Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; PSIOH Intermediate Files; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_scsdhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_scsdhybrid.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». Spin-Component-Scaled Double-Hybrid functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. DSD-BLYP; DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.710000; —; 1.000000; 0.430000 / 0.460000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEP86; DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2); Y; —; —; 0.680000; —; 1.000000; 0.230000 / 0.510000; -D2; Grimme’s -D2 Dispersion Correction. DSD-PBEPBE; DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional; Y; —; —; 0.660000; —; 1.000000; 0.120000 / 0.530000; -D2; Grimme’s -D2 Dispersion Correction. wB97X-2(LP); Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization); Y; —; 0.300000; 0.678792; —; 1.000000; 0.581569 / 0.477992; —; —. wB97X-2(TQZ); Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization); Y; —; 0.300000; 0.636158; —; 1.000000; 0.529319 / 0.447105; —; —. Previous topic; <no title>; Next topic; PSIOH Intermediate Files; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; DFT Functionals ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_dft_scsdhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_dft_scsdhybrid.html
Availability,error,error,"to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. frac¶. frac_nuke(mol, **kwargs)[source]¶. frac_traverse(mol, **kwargs)[source]¶. ip_fitting(mol, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the PsiMod.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Func",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Deployability,install,installed,"isFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; + into p, * into s, and (, ), & , ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Energy Efficiency,energy,energy," cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. new_get_attr(self, name)[source]¶; Function to redefine get_attr method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine set_attr method of molecule class. proc¶. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_bccd_t(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD(T) calculation. run_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_cepa0(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CEPA (LCCD) computation. run_cepa0_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Integrability,wrap,wrapping,"nput. process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to PsiMod.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[sour",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Modifiability,variab,variables,"rce]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to PsiMod.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Performance,load,load,"isFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; + into p, * into s, and (, ), & , ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Safety,detect,detected,"s C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry operation op. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult info detected.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). irrep_labels()[source]¶; NYI Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4).; >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[source]¶",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Security,validat,validate," ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... }. process_basis_file(matchobj)[source]¶; Function to process match of basis file .... process_external_command(matchobj)[source]¶; Function to process match of external name? { ... }. process_extract_command(matchobj)[source]¶; Function to process match of extract_subsets. process_filename(matchobj)[source]¶; Function to process match of filename .... process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; raw_input is printed to the output file unless print_level =0. Does; a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_p",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Testability,test,test,"turn a copy of the Table object. format_label()[source]¶; Function to pad the width of Table object labels. format_values(values)[source]¶; Function to pad the width of Table object data cells. save(file)[source]¶; Function to save string of the Table object to file. scale(Factor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. util¶; Module with utility functions for use in input files. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector compu",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Usability,simpl,simple,"t calculation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. run_scs_omp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a spin-component scaled OMP2 computation. run_scs_omp3(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a spin-component scaled OMP3 computation. run_sos_omp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. run_sos_omp3(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). dashparam¶; Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction paramete",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html
Availability,error,error,"to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. frac¶. frac_nuke(mol, **kwargs)[source]¶. frac_traverse(mol, **kwargs)[source]¶. ip_fitting(mol, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the PsiMod.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Func",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Deployability,install,installed,"isFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; + into p, * into s, and (, ), & , ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Energy Efficiency,energy,energy," cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. new_get_attr(self, name)[source]¶; Function to redefine get_attr method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine set_attr method of molecule class. proc¶. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_bccd_t(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD(T) calculation. run_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_cepa0(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CEPA (LCCD) computation. run_cepa0_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Integrability,wrap,wrapping,"nput. process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to PsiMod.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[sour",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Modifiability,variab,variables,"rce]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to PsiMod.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Performance,load,load,"isFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; + into p, * into s, and (, ), & , ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Safety,detect,detected,"s C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry operation op. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult info detected.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). irrep_labels()[source]¶; NYI Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4).; >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[source]¶",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Security,validat,validate," ; into _. input¶. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name { ... }. process_basis_file(matchobj)[source]¶; Function to process match of basis file .... process_external_command(matchobj)[source]¶; Function to process match of external name? { ... }. process_extract_command(matchobj)[source]¶; Function to process match of extract_subsets. process_filename(matchobj)[source]¶; Function to process match of filename .... process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; raw_input is printed to the output file unless print_level =0. Does; a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_p",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Testability,test,test,"turn a copy of the Table object. format_label()[source]¶; Function to pad the width of Table object labels. format_values(values)[source]¶; Function to pad the width of Table object data cells. save(file)[source]¶; Function to save string of the Table object to file. scale(Factor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. util¶; Module with utility functions for use in input files. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector compu",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Usability,simpl,simple,"t calculation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. run_scs_omp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a spin-component scaled OMP2 computation. run_scs_omp3(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a spin-component scaled OMP3 computation. run_sos_omp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. run_sos_omp3(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). dashparam¶; Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction paramete",MatchSource.WIKI,psi4manual/4.0b4/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver.html
Availability,toler,tolerance,"1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type:",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html
Deployability,update,updates,") per irrep (shorthand to make MCSCF easier to specify than using RAS keywords). Type: array; Default: No Default. ACTIVE (PSIMRCC); PSIMRCC — The number of active orbitals per irrep. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: false. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — The algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm (default) is usually more efficient for small systems, but for large systems the simultaneous algorithm is recommended. In the cases where the convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: TWOSTEP. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fl",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html
Energy Efficiency,energy,energy,") per irrep (shorthand to make MCSCF easier to specify than using RAS keywords). Type: array; Default: No Default. ACTIVE (PSIMRCC); PSIMRCC — The number of active orbitals per irrep. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: false. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — The algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm (default) is usually more efficient for small systems, but for large systems the simultaneous algorithm is recommended. In the cases where the convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: TWOSTEP. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fl",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html
Integrability,rout,routines,"; Default: No Default. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC proced",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html
Modifiability,extend,extended,"lecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of m",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html
Performance,perform,performing,"aged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (DFTSAPT); DFTSAPT — The name of the orbital basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCEN",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html
Safety,avoid,avoid,"e MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to the extra I/O. Type: string; Possible Values: NONE, DISK; Default: NONE. AO_BASIS (TRANSQT); TRANSQT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html
Testability,benchmark,benchmarking,"ing; Default: NONE. BASIS (DFTSAPT); DFTSAPT — The name of the orbital basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENE",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html
Availability,toler,tolerance,"1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type:",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c.html
Deployability,update,updates,") per irrep (shorthand to make MCSCF easier to specify than using RAS keywords). Type: array; Default: No Default. ACTIVE (PSIMRCC); PSIMRCC — The number of active orbitals per irrep. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: false. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — The algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm (default) is usually more efficient for small systems, but for large systems the simultaneous algorithm is recommended. In the cases where the convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: TWOSTEP. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fl",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c.html
Energy Efficiency,energy,energy,") per irrep (shorthand to make MCSCF easier to specify than using RAS keywords). Type: array; Default: No Default. ACTIVE (PSIMRCC); PSIMRCC — The number of active orbitals per irrep. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: false. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — The algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm (default) is usually more efficient for small systems, but for large systems the simultaneous algorithm is recommended. In the cases where the convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: TWOSTEP. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fl",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c.html
Integrability,rout,routines,"; Default: No Default. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC proced",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c.html
Modifiability,extend,extended,"lecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of m",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c.html
Performance,perform,performing,"aged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (DFTSAPT); DFTSAPT — The name of the orbital basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCEN",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c.html
Safety,avoid,avoid,"e MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to the extra I/O. Type: string; Possible Values: NONE, DISK; Default: NONE. AO_BASIS (TRANSQT); TRANSQT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c.html
Testability,benchmark,benchmarking,"ing; Default: NONE. BASIS (DFTSAPT); DFTSAPT — The name of the orbital basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENE",MatchSource.WIKI,psi4manual/4.0b4/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c.html
Deployability,update,updated,"﻿. Keywords by Module — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRIPLES; CIS; CLAG; CPHF; DCFT; DETCI; DFMP2; DFTSAPT; FINDIF; FNOCC; LMP2; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; RESPONSE; SAPT; SCF; STABILITY; THERMO; TRANSQT; TRANSQT2. Previous topic; Keywords by Alpha; Next topic; GLOBALS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_options_c_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_options_c_bymodule-1.html
Deployability,update,updated,"﻿. Keywords by Module — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRIPLES; CIS; CLAG; CPHF; DCFT; DETCI; DFMP2; DFTSAPT; FINDIF; FNOCC; LMP2; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; RESPONSE; SAPT; SCF; STABILITY; THERMO; TRANSQT; TRANSQT2. Previous topic; Keywords by Alpha; Next topic; GLOBALS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_options_c_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_options_c_bymodule.html
Availability,avail,availability,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Basis Sets by Element ». Basis set availability by element in PSI4. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31ppgss; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg_d_p_; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; A,MatchSource.WIKI,psi4manual/4.0b4/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psi4bases-1.html
Deployability,update,updated,"  ;  ;  ;  ;  ;  ;  ;  ;  ;  . feb-cc-pv_6pd_z; 5D/7F; H; He;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Others;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2pf; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-dl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. Previous topic; Basis Sets by Element; Next topic; Auxiliary Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Basis Sets by Element ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psi4bases-1.html
Availability,avail,availability,﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Basis Sets by Element ». Basis set availability by element in PSI4. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31ppgss; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg_d_p_; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; A,MatchSource.WIKI,psi4manual/4.0b4/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psi4bases.html
Deployability,update,updated,"  ;  ;  ;  ;  ;  ;  ;  ;  ;  . feb-cc-pv_6pd_z; 5D/7F; H; He;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Others;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2pf; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-dl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. Previous topic; Basis Sets by Element; Next topic; Auxiliary Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Basis Sets by Element ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psi4bases.html
Availability,checkpoint,checkpoint,"﻿. PSIOH Intermediate Files — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PR",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles-1.html
Deployability,update,updated,"des. 197; PSIF_SAPT_TEMP; SAPT Temporary worlds fastest code file. 198; PSIF_SAPT_LRINTS; SAPT0 2-Body linear response LDA integrals. 199; PSIF_SO_D1OEI; Derivative OEIs are stored in file 199. 200; PSIF_SO_D1ERI; Derivative ERIs are stored in files 200, 201, 202, etc. File 200. 220; PSIF_3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. Previous topic; <no title>; Next topic; Keywords by Alpha; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles-1.html
Integrability,contract,contractions,"CC_CINTS_NEW;  . 118; PSIF_CC_DINTS_NEW;  . 119; PSIF_CC_EINTS_NEW;  . 120; PSIF_CC_FINTS_NEW;  . 121; PSIF_CC_LAMBDA;  . 122; PSIF_CC_RAMPS;  . 123; PSIF_CC_LAMPS;  . 124; PSIF_CC_LR;  . 125; PSIF_CC_DIIS_ERR;  . 126; PSIF_CC_DIIS_AMP;  . 127; PSIF_CC_TMP;  . 128; PSIF_CC_TMP0;  . 129; PSIF_CC_TMP1;  . 130; PSIF_CC_TMP2;  . 131; PSIF_CC_TMP3;  . 132; PSIF_CC_TMP4;  . 133; PSIF_CC_TMP5;  . 134; PSIF_CC_TMP6;  . 135; PSIF_CC_TMP8;  . 137; PSIF_CC_TMP9;  . 138; PSIF_CC_TMP10;  . 139; PSIF_CC_TMP11;  . 140; PSIF_EOM_D;  . 141; PSIF_EOM_CME;  . 142; PSIF_EOM_Cme;  . 143; PSIF_EOM_CMNEF;  . 144; PSIF_EOM_Cmnef;  . 145; PSIF_EOM_CMnEf;  . 146; PSIF_EOM_SIA;  . 147; PSIF_EOM_Sia;  . 148; PSIF_EOM_SIJAB;  . 149; PSIF_EOM_Sijab;  . 150; PSIF_EOM_SIjAb;  . 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_AMPS; SAPT Amplitudes. 197; PSIF_SAPT_TEMP; SAPT Temporary worlds",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles-1.html
Modifiability,flexible,flexible,"﻿. PSIOH Intermediate Files — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PR",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles-1.html
Performance,optimiz,optimization,"﻿. PSIOH Intermediate Files — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PR",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles-1.html
Availability,checkpoint,checkpoint,"﻿. PSIOH Intermediate Files — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PR",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles.html
Deployability,update,updated,"des. 197; PSIF_SAPT_TEMP; SAPT Temporary worlds fastest code file. 198; PSIF_SAPT_LRINTS; SAPT0 2-Body linear response LDA integrals. 199; PSIF_SO_D1OEI; Derivative OEIs are stored in file 199. 200; PSIF_SO_D1ERI; Derivative ERIs are stored in files 200, 201, 202, etc. File 200. 220; PSIF_3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. Previous topic; <no title>; Next topic; Keywords by Alpha; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles.html
Integrability,contract,contractions,"CC_CINTS_NEW;  . 118; PSIF_CC_DINTS_NEW;  . 119; PSIF_CC_EINTS_NEW;  . 120; PSIF_CC_FINTS_NEW;  . 121; PSIF_CC_LAMBDA;  . 122; PSIF_CC_RAMPS;  . 123; PSIF_CC_LAMPS;  . 124; PSIF_CC_LR;  . 125; PSIF_CC_DIIS_ERR;  . 126; PSIF_CC_DIIS_AMP;  . 127; PSIF_CC_TMP;  . 128; PSIF_CC_TMP0;  . 129; PSIF_CC_TMP1;  . 130; PSIF_CC_TMP2;  . 131; PSIF_CC_TMP3;  . 132; PSIF_CC_TMP4;  . 133; PSIF_CC_TMP5;  . 134; PSIF_CC_TMP6;  . 135; PSIF_CC_TMP8;  . 137; PSIF_CC_TMP9;  . 138; PSIF_CC_TMP10;  . 139; PSIF_CC_TMP11;  . 140; PSIF_EOM_D;  . 141; PSIF_EOM_CME;  . 142; PSIF_EOM_Cme;  . 143; PSIF_EOM_CMNEF;  . 144; PSIF_EOM_Cmnef;  . 145; PSIF_EOM_CMnEf;  . 146; PSIF_EOM_SIA;  . 147; PSIF_EOM_Sia;  . 148; PSIF_EOM_SIJAB;  . 149; PSIF_EOM_Sijab;  . 150; PSIF_EOM_SIjAb;  . 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_AMPS; SAPT Amplitudes. 197; PSIF_SAPT_TEMP; SAPT Temporary worlds",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles.html
Modifiability,flexible,flexible,"﻿. PSIOH Intermediate Files — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PR",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles.html
Performance,optimiz,optimization,"﻿. PSIOH Intermediate Files — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in PSI4. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PR",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles.html
Deployability,update,updated,"﻿. PSI Variables by Module — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; DCFT; DETCI; DFMP2; DFTSAPT; FNOCC; LMP2; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PSI Variables by Alpha; Next topic; ADC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psivariables_bymodule-1.html
Modifiability,variab,variable,"﻿. PSI Variables by Module — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; DCFT; DETCI; DFMP2; DFTSAPT; FNOCC; LMP2; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PSI Variables by Alpha; Next topic; ADC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psivariables_bymodule-1.html
Deployability,update,updated,"﻿. PSI Variables by Module — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; DCFT; DETCI; DFMP2; DFTSAPT; FNOCC; LMP2; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PSI Variables by Alpha; Next topic; ADC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psivariables_bymodule.html
Modifiability,variab,variable,"﻿. PSI Variables by Module — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCTRIPLES; DCFT; DETCI; DFMP2; DFTSAPT; FNOCC; LMP2; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP. Previous topic; PSI Variables by Alpha; Next topic; ADC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psivariables_bymodule.html
Availability,checkpoint,checkpoint,"pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, wit",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html
Deployability,update,update,"F. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals.",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html
Energy Efficiency,energy,energy,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolati",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html
Integrability,depend,depend,"nzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-3",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html
Modifiability,variab,variables,"/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mp2_5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit s",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html
Performance,optimiz,optimization,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolati",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html
Safety,avoid,avoided,"rogram can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mp2_5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html
Testability,test,test,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolati",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html
Availability,checkpoint,checkpoint,"pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, wit",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite.html
Deployability,update,update,"F. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals.",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite.html
Energy Efficiency,energy,energy,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolati",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite.html
Integrability,depend,depend,"nzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-3",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite.html
Modifiability,variab,variables,"/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mp2_5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit s",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite.html
Performance,optimiz,optimization,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolati",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite.html
Safety,avoid,avoided,"rogram can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mp2_5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite ",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite.html
Testability,test,test,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolati",MatchSource.WIKI,psi4manual/4.0b4/autodoc_testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite.html
Availability,avail,available,"﻿. Basis Sets — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Basis Sets¶; Basis sets in PSI4 are Gaussian functions (not Slater-type functions or plane waves),; all-electron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Specifying basis sets; Built-in basis sets by family (below); Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Tables Pople,; Dunning,; Dunning (Douglas-Kroll), and; Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/lib/basis in the source. For basis set availability by; element and the default ",MatchSource.WIKI,psi4manual/4.0b4/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets-1.html
Deployability,update,updated,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets-1.html
Testability,stub,stub,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets-1.html
Availability,avail,available,"﻿. Basis Sets — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Basis Sets¶; Basis sets in PSI4 are Gaussian functions (not Slater-type functions or plane waves),; all-electron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Specifying basis sets; Built-in basis sets by family (below); Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Tables Pople,; Dunning,; Dunning (Douglas-Kroll), and; Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/lib/basis in the source. For basis set availability by; element and the default ",MatchSource.WIKI,psi4manual/4.0b4/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets.html
Deployability,update,updated,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets.html
Testability,stub,stub,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets.html
Availability,avail,availability,﻿. Basis Sets by Element — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Basis Sets by Element¶. Basis set availability by element in PSI4. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31ppgss; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg_d_p_; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P,MatchSource.WIKI,psi4manual/4.0b4/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets_byelement-1.html
Deployability,update,updated," Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . feb-cc-pv_6pd_z; 5D/7F; H; He;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Others;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2pf; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-dl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets_byelement-1.html
Availability,avail,availability,﻿. Basis Sets by Element — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Basis Sets by Element¶. Basis set availability by element in PSI4. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  . 6-31ppgss; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg_d_p_; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31ppg; 6D/10F; H;  ; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P,MatchSource.WIKI,psi4manual/4.0b4/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets_byelement.html
Deployability,update,updated," Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . feb-cc-pv_6pd_z; 5D/7F; H; He;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl; Ar;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Others;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2pf; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-dl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fl; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets_byelement.html
Deployability,update,updated,"+G*; 6-311ppg_d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G**; 6-311ppg_d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d); 6-311ppg_2d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,p); 6-311ppg_2d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,2p); 6-311ppg_2d_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; —; —; —. def2-SVP; def2-svp; —; —; —. def2-SVPD; def2-svpd; —; —; —. def2-TZVP; def2-tzvp; —; —; —. def2-TZVPD; def2-tzvpd; —; —; —. def2-TZVPP; def2-tzvpp; —; —; —. def2-TZVPPD; def2-tzvppd; —; —; —. def2-QZVP; def2-qzvp; —; —; —. def2-QZVPD; def2-qzvpd; —; —; —. def2-QZVPP; def2-qzvpp; —; —; —. def2-QZVPPD; def2-qzvppd; —; —; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/basissets_byfamily-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets_byfamily-1.html
Deployability,update,updated,"+G*; 6-311ppg_d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G**; 6-311ppg_d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d); 6-311ppg_2d_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,p); 6-311ppg_2d_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2d,2p); 6-311ppg_2d_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; —; —; —. def2-SVP; def2-svp; —; —; —. def2-SVPD; def2-svpd; —; —; —. def2-TZVP; def2-tzvp; —; —; —. def2-TZVPD; def2-tzvpd; —; —; —. def2-TZVPP; def2-tzvpp; —; —; —. def2-TZVPPD; def2-tzvppd; —; —; —. def2-QZVP; def2-qzvp; —; —; —. def2-QZVPD; def2-qzvpd; —; —; —. def2-QZVPP; def2-qzvpp; —; —; —. def2-QZVPPD; def2-qzvppd; —; —; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets_byfamily.html
Availability,avail,available,"﻿. Best Practices for Python Functions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». Best Practices for Python Functions¶. Thy python functions shall always have final argument **kwargs, that they may take in and pass on keywords meant for other functions. Yea, even the run_mcscf(), and run_ccsd() -type functions that have no use for kwargs. The exceptions are python functions that are only helpers called by a driver function. Python functions should read the kwargs dictionary and (possibly) add to it. Functions should not pop or remove keywords from kwargs, even those keywords meaningful only to itself. This will ensure that the complete kwargs is available for pickling and sow/reap procedures. The exception is the molecule argument, which is read by the first function that gets ahold of it. This first function activates the molecule and pops it out of kwargs, effectively setting molecule for all subsequent functions. The code below should suffice.; # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line ",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py-1.html
Deployability,continuous,continuous,"_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/exampl",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py-1.html
Energy Efficiency,energy,energy," name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py-1.html
Integrability,interoperab,interoperability," restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py-1.html
Modifiability,variab,variables,"put files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py-1.html
Performance,perform,performs,"one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a m",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py-1.html
Security,expose,expose,"near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to PSI4; Next topic; Documentation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py-1.html
Testability,test,test," what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short nam",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py-1.html
Availability,avail,available,"﻿. Best Practices for Python Functions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». Best Practices for Python Functions¶. Thy python functions shall always have final argument **kwargs, that they may take in and pass on keywords meant for other functions. Yea, even the run_mcscf(), and run_ccsd() -type functions that have no use for kwargs. The exceptions are python functions that are only helpers called by a driver function. Python functions should read the kwargs dictionary and (possibly) add to it. Functions should not pop or remove keywords from kwargs, even those keywords meaningful only to itself. This will ensure that the complete kwargs is available for pickling and sow/reap procedures. The exception is the molecule argument, which is read by the first function that gets ahold of it. This first function activates the molecule and pops it out of kwargs, effectively setting molecule for all subsequent functions. The code below should suffice.; # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line ",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py.html
Deployability,continuous,continuous,"_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/exampl",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py.html
Energy Efficiency,energy,energy," name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py.html
Integrability,interoperab,interoperability," restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py.html
Modifiability,variab,variables,"put files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py.html
Performance,perform,performs,"one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a m",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py.html
Security,expose,expose,"near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to PSI4; Next topic; Documentation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py.html
Testability,test,test," what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short nam",MatchSource.WIKI,psi4manual/4.0b4/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bestpractices_py.html
Deployability,update,updated,"hs:2008:217]F. Wennmohs and F. Neese,; Chem. Phys. 343, 217-230 (2008). [DePrince:2013:293]A. E. DePrince III and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013). [Curtiss:1991:7221]L. A. Curtiss, K. Raghavachari, G. W. Trucks, and J. A. Pople,; J. Chem. Phys. 94 7221-7230 (1991). [Pople:1987:5968]J. A. Pople, M. Head-Gordon, and K. J. Raghavachari,; Chem. Phys. 87, 5968 (1987). [Sherrill:1998:od]C. D. Sherrill, A. I. Krylov, E. F. C. Byrd, and M. Head-Gordon,; J. Chem. Phys. 109, 4171 (1998). [Krylov:2000:vod]A. I. Krylov, C. D. Sherrill, and M. Head-Gordon,; J. Chem. Phys. 113, 6509 (2000). [Kurlancek:2009]W. Kurlancheek and M. Head-Gordon,; Mol. Phys. 107, 1223 (2009). [Pedersen:1999:od]T. B. Pedersen, H. Koch, and C. Hattig,; J. Chem. Phys. 110, 8318 (1999). [Pedersen:2001:od]T. B. Pedersen, B. Fernandez, and H. Koch,; J. Chem. Phys. 114, 6983 (2001). [Bozkaya:2011:omp2]U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill; J. Chem. Phys. 135, 104103 (2011). [Bozkaya:2011:omp3]U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011). [Bozkaya:2013:omp3]E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013). [Bozkaya:2012:odtl]U. Bozkaya and H. F. Schaefer,; J. Chem. Phys. 136, 204114 (2012). [Grimme:2004:1463]; Grimme, J. Comp. Chem. 25 1463-1473 (2004). [Grimme:2006:1787]; Grimme, J. Comp. Chem. 27, 1787-1799 (2006). [Grimme:2010:154104]S. Grimme, J. Antony, S. Ehrlich, and H. Krieg,; J. Chem. Phys. 132, 154104 (2010). [Grimme:2011:1456]S. Grimme, S. Ehrlich, and L. Goerigk,; J. Comput. Chem. 32, 1456 (2011). [Wu:2002:515]Q. Wu and W. Yang,; J. Chem. Phys. 116, 515 (2002). Previous topic; Appendices; Next topic; Test Suite and Sample Inputs; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/bibliography-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bibliography-1.html
Deployability,update,updated,"hs:2008:217]F. Wennmohs and F. Neese,; Chem. Phys. 343, 217-230 (2008). [DePrince:2013:293]A. E. DePrince III and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013). [Curtiss:1991:7221]L. A. Curtiss, K. Raghavachari, G. W. Trucks, and J. A. Pople,; J. Chem. Phys. 94 7221-7230 (1991). [Pople:1987:5968]J. A. Pople, M. Head-Gordon, and K. J. Raghavachari,; Chem. Phys. 87, 5968 (1987). [Sherrill:1998:od]C. D. Sherrill, A. I. Krylov, E. F. C. Byrd, and M. Head-Gordon,; J. Chem. Phys. 109, 4171 (1998). [Krylov:2000:vod]A. I. Krylov, C. D. Sherrill, and M. Head-Gordon,; J. Chem. Phys. 113, 6509 (2000). [Kurlancek:2009]W. Kurlancheek and M. Head-Gordon,; Mol. Phys. 107, 1223 (2009). [Pedersen:1999:od]T. B. Pedersen, H. Koch, and C. Hattig,; J. Chem. Phys. 110, 8318 (1999). [Pedersen:2001:od]T. B. Pedersen, B. Fernandez, and H. Koch,; J. Chem. Phys. 114, 6983 (2001). [Bozkaya:2011:omp2]U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill; J. Chem. Phys. 135, 104103 (2011). [Bozkaya:2011:omp3]U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011). [Bozkaya:2013:omp3]E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013). [Bozkaya:2012:odtl]U. Bozkaya and H. F. Schaefer,; J. Chem. Phys. 136, 204114 (2012). [Grimme:2004:1463]; Grimme, J. Comp. Chem. 25 1463-1473 (2004). [Grimme:2006:1787]; Grimme, J. Comp. Chem. 27, 1787-1799 (2006). [Grimme:2010:154104]S. Grimme, J. Antony, S. Ehrlich, and H. Krieg,; J. Chem. Phys. 132, 154104 (2010). [Grimme:2011:1456]S. Grimme, S. Ehrlich, and L. Goerigk,; J. Comput. Chem. 32, 1456 (2011). [Wu:2002:515]Q. Wu and W. Yang,; J. Chem. Phys. 116, 515 (2002). Previous topic; Appendices; Next topic; Test Suite and Sample Inputs; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/bibliography.html
Availability,avail,available,"Q]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy. corl_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy. delta_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. delta2_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf",MatchSource.WIKI,psi4manual/4.0b4/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs-1.html
Deployability,configurat,configuration,"Complete Basis Set — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-",MatchSource.WIKI,psi4manual/4.0b4/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs-1.html
Energy Efficiency,energy,energy,"﻿. Complete Basis Set — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadrup",MatchSource.WIKI,psi4manual/4.0b4/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs-1.html
Integrability,wrap,wrapper," correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this s",MatchSource.WIKI,psi4manual/4.0b4/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs-1.html
Modifiability,variab,variables,"﻿. Complete Basis Set — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadrup",MatchSource.WIKI,psi4manual/4.0b4/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs-1.html
Performance,perform,performed,"ed CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4. omp2; omp3; ocepa; cepa0; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd. fno-df-ccsd; bccd; cc3; qcisd(t); ccsd(t); fno-df-ccsd(t). bccd(t); cisd; cisdt; cisdtq; cin; fci. Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – 'mp2' || 'ccsd' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtain",MatchSource.WIKI,psi4manual/4.0b4/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs-1.html
Usability,simpl,simple,"eme.; An exception is the default, 'highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy. corl_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy. delta_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. delta2_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis",MatchSource.WIKI,psi4manual/4.0b4/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs-1.html
Availability,avail,available,"Q]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy. corl_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy. delta_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. delta2_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf",MatchSource.WIKI,psi4manual/4.0b4/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs.html
Deployability,configurat,configuration,"Complete Basis Set — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-",MatchSource.WIKI,psi4manual/4.0b4/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs.html
Energy Efficiency,energy,energy,"﻿. Complete Basis Set — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadrup",MatchSource.WIKI,psi4manual/4.0b4/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs.html
Integrability,wrap,wrapper," correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this s",MatchSource.WIKI,psi4manual/4.0b4/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs.html
Modifiability,variab,variables,"﻿. Complete Basis Set — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases :cbs(). Returns:(float) – Total electronic energy in Hartrees. Psi variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular.; No scheme defaults for given basis zeta number, so scheme must be specified explicitly.; No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadrup",MatchSource.WIKI,psi4manual/4.0b4/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs.html
Performance,perform,performed,"ed CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4. omp2; omp3; ocepa; cepa0; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd. fno-df-ccsd; bccd; cc3; qcisd(t); ccsd(t); fno-df-ccsd(t). bccd(t); cisd; cisdt; cisdtq; cin; fci. Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – 'mp2' || 'ccsd' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtain",MatchSource.WIKI,psi4manual/4.0b4/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs.html
Usability,simpl,simple,"eme.; An exception is the default, 'highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy. corl_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy. delta_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. delta2_scheme (function) – highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis",MatchSource.WIKI,psi4manual/4.0b4/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Previous topic; Complete Basis Set; Next topic; Spectroscopic Constants for Diatomics; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/cbs_eqn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs_eqn-1.html
Energy Efficiency,energy,energy,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Previous topic; Complete Basis Set; Next topic; Spectroscopic Constants for Diatomics; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/cbs_eqn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs_eqn-1.html
Deployability,update,updated,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Previous topic; Complete Basis Set; Next topic; Spectroscopic Constants for Diatomics; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/cbs_eqn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs_eqn.html
Energy Efficiency,energy,energy,"﻿. <no title> — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Previous topic; Complete Basis Set; Next topic; Spectroscopic Constants for Diatomics; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Complete Basis Set ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/cbs_eqn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cbs_eqn.html
Availability,reliab,reliable,"﻿. CC: Coupled Cluster Methods — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CC: Coupled Cluster Methods¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordabl",MatchSource.WIKI,psi4manual/4.0b4/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html
Deployability,configurat,configuration,"thor: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such ",MatchSource.WIKI,psi4manual/4.0b4/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html
Energy Efficiency,energy,energy,"pansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Method; Reference; Energy; Gradient; Exc. Energies; LR Props.",MatchSource.WIKI,psi4manual/4.0b4/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html
Integrability,depend,dependent," approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; —; Y; Y. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; —; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bc",MatchSource.WIKI,psi4manual/4.0b4/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html
Modifiability,config,configuation,"﻿. CC: Coupled Cluster Methods — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CC: Coupled Cluster Methods¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordabl",MatchSource.WIKI,psi4manual/4.0b4/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html
Performance,optimiz,optimizations,"rgy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “lo",MatchSource.WIKI,psi4manual/4.0b4/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html
Availability,reliab,reliable,"﻿. CC: Coupled Cluster Methods — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CC: Coupled Cluster Methods¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordabl",MatchSource.WIKI,psi4manual/4.0b4/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc.html
Deployability,configurat,configuration,"thor: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such ",MatchSource.WIKI,psi4manual/4.0b4/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc.html
Energy Efficiency,energy,energy,"pansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Method; Reference; Energy; Gradient; Exc. Energies; LR Props.",MatchSource.WIKI,psi4manual/4.0b4/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc.html
Integrability,depend,dependent," approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; —; Y; Y. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; —; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bc",MatchSource.WIKI,psi4manual/4.0b4/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc.html
Modifiability,config,configuation,"﻿. CC: Coupled Cluster Methods — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CC: Coupled Cluster Methods¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuation; interaction, coupled cluster uses an exponential expansion,. (1); where the cluster operator is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. with. etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at . This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordabl",MatchSource.WIKI,psi4manual/4.0b4/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc.html
Performance,optimiz,optimizations,"rgy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “lo",MatchSource.WIKI,psi4manual/4.0b4/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc.html
Deployability,update,updated,"al-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Conventional Møller–Plesset Perturbation Theories; CC: Coupled Cluster Methods; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; SAPT: Symmetry-Adapted Perturbation Theory; ADC: Ab Initio Polarization Propagator; Geometry Optimization; Evaluation of One-Electron Properties. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay; Interface to DFTD3 by S. Grimme; Interface to Molden. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; gaussian_n; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/contents.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/contents.html
Integrability,wrap,wrappers,"al-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Conventional Møller–Plesset Perturbation Theories; CC: Coupled Cluster Methods; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; SAPT: Symmetry-Adapted Perturbation Theory; ADC: Ab Initio Polarization Propagator; Geometry Optimization; Evaluation of One-Electron Properties. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay; Interface to DFTD3 by S. Grimme; Interface to Molden. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; gaussian_n; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/contents.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/contents.html
Deployability,update,updated,"﻿. Contributions: Intro to Programming in PSI4 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Contributions: Intro to Programming in PSI4¶. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Best Practices for Python Functions; Documentation; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase; The Map of the Sphinx. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. Previous topic; Creating a Database; Next topic; Plugins: Adding New Functionality to PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/contributing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/contributing-1.html
Deployability,update,updated,"﻿. Contributions: Intro to Programming in PSI4 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Contributions: Intro to Programming in PSI4¶. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Best Practices for Python Functions; Documentation; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase; The Map of the Sphinx. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. Previous topic; Creating a Database; Next topic; Plugins: Adding New Functionality to PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/contributing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/contributing.html
Availability,error,error,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp-1.html
Deployability,update,updated,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp-1.html
Energy Efficiency,energy,energy,"﻿. Counterpoise Correct — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b4/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp-1.html
Modifiability,variab,variables,"﻿. Counterpoise Correct — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b4/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp-1.html
Performance,optimiz,optimize,"; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . ne",MatchSource.WIKI,psi4manual/4.0b4/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp-1.html
Testability,test,tested,"﻿. Counterpoise Correct — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b4/cp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp-1.html
Availability,error,error,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp.html
Deployability,update,updated,"poise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp.html
Energy Efficiency,energy,energy,"﻿. Counterpoise Correct — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b4/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp.html
Modifiability,variab,variables,"﻿. Counterpoise Correct — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b4/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp.html
Performance,optimiz,optimize,"; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . ne",MatchSource.WIKI,psi4manual/4.0b4/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp.html
Testability,test,tested,"﻿. Counterpoise Correct — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Counterpoise Correct¶; Code author: Robert M. Parrish. cp(name[, func, check_bsse, molecule])[source]¶; The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. Aliases :counterpoise_correct(), counterpoise_correction(). Returns:(float) Counterpoise-corrected interaction energy in Hartrees. Psi variables:. CP-CORRECTED 2-BODY INTERACTION ENERGY; UNCP-CORRECTED 2-BODY INTERACTION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No values of func besides energy have been tested.; Table print-out needs improving. Add some PSI variables. Parameters:; name (string) – 'scf' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; energy(); however, SAPT is not appropriate. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; energy('name'), while optimize perfoms a geometry optimization; on each system, and cbs performs a compound single-point energy.; If a nested series of python functions is intended; (see Function Intercalls), use keyword cp_func instead of func. check_bsse (boolean) – 'on' || 'off' ; Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). n_body(name[, func, bsse, max_n_body, do_total, external, external_monomers, molecule])[source]¶. Previous topic; Property; Next topic; Optimize; This Pa",MatchSource.WIKI,psi4manual/4.0b4/cp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cp.html
Deployability,update,updated,"﻿. Customization: Adding Simple Extensions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Function Intercalls; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/customizing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/customizing-1.html
Security,access,accessible,"﻿. Customization: Adding Simple Extensions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Function Intercalls; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/customizing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/customizing-1.html
Deployability,update,updated,"﻿. Customization: Adding Simple Extensions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Function Intercalls; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/customizing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/customizing.html
Security,access,accessible,"﻿. Customization: Adding Simple Extensions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Customization: Adding Simple Extensions¶. User-Defined Basis Sets; Defining a Method Alias; Creating a Database. PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. Previous topic; Function Intercalls; Next topic; User-Defined Basis Sets; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/customizing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/customizing.html
Availability,avail,available,"N. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Avai",MatchSource.WIKI,psi4manual/4.0b4/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html
Deployability,continuous,continuous,"' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – 'on' || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be ",MatchSource.WIKI,psi4manual/4.0b4/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html
Energy Efficiency,energy,energy," :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job ",MatchSource.WIKI,psi4manual/4.0b4/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html
Integrability,wrap,wrapper,"ion energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; throu",MatchSource.WIKI,psi4manual/4.0b4/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html
Modifiability,variab,variables,"﻿. Database — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b4/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html
Performance,optimiz,optimize,"lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Ind",MatchSource.WIKI,psi4manual/4.0b4/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html
Security,access,access,"﻿. Database — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b4/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html
Testability,benchmark,benchmark,"﻿. Database — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b4/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOF",MatchSource.WIKI,psi4manual/4.0b4/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html
Availability,avail,available,"N. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Avai",MatchSource.WIKI,psi4manual/4.0b4/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db.html
Deployability,continuous,continuous,"' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – 'on' || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be ",MatchSource.WIKI,psi4manual/4.0b4/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db.html
Energy Efficiency,energy,energy," :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job ",MatchSource.WIKI,psi4manual/4.0b4/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db.html
Integrability,wrap,wrapper,"ion energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; throu",MatchSource.WIKI,psi4manual/4.0b4/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db.html
Modifiability,variab,variables,"﻿. Database — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b4/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db.html
Performance,optimiz,optimize,"lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Ind",MatchSource.WIKI,psi4manual/4.0b4/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db.html
Security,access,access,"﻿. Database — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b4/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db.html
Testability,benchmark,benchmark,"﻿. Database — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Database¶; Code author: Lori A. Burns; Section author: Lori A. Burns. database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases :db(). Returns:(float) Mean absolute deviation of the database in kcal/mol. Psi variables:. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4 ; distribution, add the path to the directory containing the database ; to the environment variable PYTHONPATH. Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; psi4/lib/databases or PYTHONPATH. Consult that ; directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and;",MatchSource.WIKI,psi4manual/4.0b4/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db.html
Usability,simpl,simple," 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOF",MatchSource.WIKI,psi4manual/4.0b4/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db.html
Availability,avail,available,"ty; problem is now greatly simplified, because the idempotent part of the OPDM is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; the TPDM.; In order to obtain the DCFT energy, two conditions must be satisfied:; 1) The energy must be stationary with respect to the variation of the; idempotent part of the one-particle density matrix . This is; achieved by the self-consistent diagonalization of the generalized Fock; operator matrix defined above, which introduces the relaxation of the orbitals.; 2) The energy must be stationary with respect to the variation of the density; cumulant , constrained to the N-representability conditions.; Making the energy stationary requires the solution of the two sets of coupled; equations for the orbital and cumulant updates, respectively (also known as; residual equations). At the present moment three different algorithms for the; solution of the system of coupled equations are available (see section; Iterative Algorithms for details).; Publications resulting from the use of the DCFT code should cite contributions; listed here. Methods¶; Currently two DCFT methods (functionals) are available: DC-06 and DC-12. Both; methods use approximate N-representability conditions derived from the; second-order perturbation theory, but differ in the description of the; correlated (non-idempotent) part of the one-particle density; matrix. While in the DC-06 method is derived from the density cumulant; in an approximate way, the DC-12 method derives this contribution exactly, and; therefore takes full advantage of the N-representability conditions. Both DC-06; and DC-12 methods have similar computational cost. However, the DC-12 method; usually exhibits much better numerical stability and can be significantly; cheaper than the DC-06 in the problematic cases as the result of the improved; convergence. For the comparison of the quality of these methods",MatchSource.WIKI,psi4manual/4.0b4/dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html
Deployability,update,updates,"ties. The additive; separability of the density cumulant guarantees that all of the DCFT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of the OPDM is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; the TPDM.; In order to obtain the DCFT energy, two conditions must be satisfied:; 1) The energy must be stationary with respect to the variation of the; idempotent part of the one-particle density matrix . This is; achieved by the self-consistent diagonalization of the generalized Fock; operator matrix defined above, which introduces the relaxation of the orbitals.; 2) The energy must be stationary with respect to the variation of the density; cumulant , constrained to the N-representability conditions.; Making the energy stationary requires the solution of the two sets of coupled; equations for the orbital and cumulant updates, respectively (also known as; residual equations). At the present moment three different algorithms for the; solution of the system of coupled equations are available (see section; Iterative Algorithms for details).; Publications resulting from the use of the DCFT code should cite contributions; listed here. Methods¶; Currently two DCFT methods (functionals) are available: DC-06 and DC-12. Both; methods use approximate N-representability conditions derived from the; second-order perturbation theory, but differ in the description of the; correlated (non-idempotent) part of the one-particle density; matrix. While in the DC-06 method is derived from the density cumulant; in an approximate way, the DC-12 method derives this contribution exactly, and; therefore takes full advantage of the N-representability conditions. Both DC-06; and DC-12 methods have similar computational cost. However, the DC-12 method; usually exhibits much better numerical stabil",MatchSource.WIKI,psi4manual/4.0b4/dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html
Energy Efficiency,energy,energy,"﻿. DCFT: Density Cumulant Functional Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». DCFT: Density Cumulant Functional Theory¶; Code author: Alexander Yu. Sokolov and Andrew C. Simmonett; Section author: Alexander Yu. Sokolov; Module: Keywords, PSI Variables, DCFT. Theory¶; Density cumulant functional theory (DCFT) is a density-based ab initio theory; that can compute electronic energies without the use of the wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (OPDM and TPDM):. Here we used Einstein convention for the summation over the repeated indices,; and are the standard one- and two-electron integrals,; and are the elements of the OPDM and TPDM,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements and; cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCFT one takes a different route and; replaces the TPDM in favor of its two-particle density cumulant:. The one-particle density matrix is separated into its idempotent part; and a correction :. The idempotent part of the OPDM corresponds to a Hartree-Fock-like density of; non-interacting electrons, while the non-idempotent correction ; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the ene",MatchSource.WIKI,psi4manual/4.0b4/dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html
Integrability,rout,route,"ression in terms of the one- and; two-particle density matrices (OPDM and TPDM):. Here we used Einstein convention for the summation over the repeated indices,; and are the standard one- and two-electron integrals,; and are the elements of the OPDM and TPDM,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements and; cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCFT one takes a different route and; replaces the TPDM in favor of its two-particle density cumulant:. The one-particle density matrix is separated into its idempotent part; and a correction :. The idempotent part of the OPDM corresponds to a Hartree-Fock-like density of; non-interacting electrons, while the non-idempotent correction ; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. Energy functional has several important properties. First,; the energy is now a function of two types of independent parameters, the; idempotent part of OPDM and the density cumulant; . As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCFT methods; are size-extensive and size-consist",MatchSource.WIKI,psi4manual/4.0b4/dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html
Modifiability,coupling,coupling,"he cumulant and the orbitals is achieved. As in the two-step algorithm, the DIIS; extrapolation is used to accelerate the convergence.; 3) Quadratically-convergent algorithm (set ALGORITHM to QC). The; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. The electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. By default the; electronic Hessian also contains the matrix elements that couple the orbitals; and the density cumulant. The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems. If the computation of the coupling elements; is not desired, it can be turned off by setting QC_COUPLING to FALSE.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below .; The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive ; cumulant updates. As a result, for the small closed-shell systems the two-step; algorithm is usually preferred, while for the larger systems and the molecules with the; open-shell character it is recommended to use the simultaneous algorithm. The; efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transf",MatchSource.WIKI,psi4manual/4.0b4/dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html
Performance,perform,performed,"putations can only be run with the unrestricted; orbitals. If the REFERENCE option is not specified in the input file,; the PSI4 Python driver will conveniently set it to UHF for the DCFT; computations. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCFT energy one; needs to solve the system of coupled equations for the orbitals and the density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option.; 1) Two-step algorithm (can be invoked by setting ALGORITHM option to; TWOSTEP and is currently the default). In two-step algorithm the DCFT equations; are solved in macroiterations. Each macroiteration consists of two sets of; microiterations. In the first set the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. The convergence of the two-step algorithm is accelerated using the; DIIS extrapolation technique.; 2) Simultaneous algorithm (set ALGORITHM to SIMULTANEOUS). In this algorithm; each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and the orbitals is achieved. As in the two-step algorithm, the DIIS; extrapolation is used to accelerate the convergence.; 3) Quadratically-convergent algorithm (set ALGORITHM to QC). The; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update follo",MatchSource.WIKI,psi4manual/4.0b4/dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html
Safety,avoid,avoiding,"ds to faster convergence and is; recommended for open-shell systems. If the computation of the coupling elements; is not desired, it can be turned off by setting QC_COUPLING to FALSE.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below .; The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive ; cumulant updates. As a result, for the small closed-shell systems the two-step; algorithm is usually preferred, while for the larger systems and the molecules with the; open-shell character it is recommended to use the simultaneous algorithm. The; efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK. For more recommendations on the choice of the algorithm see; Recommendations section. Analytic Gradients¶; Analytic gradients are available for the DC-06 method. Gradients are only; available if the ALGORITHM option is set to TWOSTEP or SIMULTANEOUS for; the energy computation. In addition, AO_BASIS option must be set to NONE; (default). Evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: two-step (default) and simultaneous. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit the similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradient",MatchSource.WIKI,psi4manual/4.0b4/dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html
Testability,test,test,"the density cumulant; in an approximate way, the DC-12 method derives this contribution exactly, and; therefore takes full advantage of the N-representability conditions. Both DC-06; and DC-12 methods have similar computational cost. However, the DC-12 method; usually exhibits much better numerical stability and can be significantly; cheaper than the DC-06 in the problematic cases as the result of the improved; convergence. For the comparison of the quality of these methods we refer; user to the recent publications.; The DCFT functional can be specified by the DCFT_FUNCTIONAL option. The; default choice is the DC-06 functional. In addition to the two methods listed; above, DCFT_FUNCTIONAL option can be set to CEPA0 (coupled electron; pair approximation zero, equivalent to linearized coupled cluster doubles; method, LCCD). CEPA0 can be considered as a particular case of the DC-06 and DC-12; methods in the limit of zero non-idempotency of OPDM. This option has a limited; functionality and should only be used for the test purposes.; At the present moment DCFT computations can only be run with the unrestricted; orbitals. If the REFERENCE option is not specified in the input file,; the PSI4 Python driver will conveniently set it to UHF for the DCFT; computations. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCFT energy one; needs to solve the system of coupled equations for the orbitals and the density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option.; 1) Two-step algorithm (can be invoked by setting ALGORITHM option to; TWOSTEP and is currently the default). In two-step algorithm the DCFT equations; are solved in macroiterations. Each macroiteration consists of two sets of; microiterations. In the first set the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After th",MatchSource.WIKI,psi4manual/4.0b4/dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html
Usability,simpl,simple," Sokolov; Module: Keywords, PSI Variables, DCFT. Theory¶; Density cumulant functional theory (DCFT) is a density-based ab initio theory; that can compute electronic energies without the use of the wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (OPDM and TPDM):. Here we used Einstein convention for the summation over the repeated indices,; and are the standard one- and two-electron integrals,; and are the elements of the OPDM and TPDM,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements and; cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCFT one takes a different route and; replaces the TPDM in favor of its two-particle density cumulant:. The one-particle density matrix is separated into its idempotent part; and a correction :. The idempotent part of the OPDM corresponds to a Hartree-Fock-like density of; non-interacting electrons, while the non-idempotent correction ; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. Energy functional has several important properties. First,; the energy is now a function of two types of independent parameters, the; idempotent part of OPDM and the den",MatchSource.WIKI,psi4manual/4.0b4/dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html
Availability,avail,available,"ty; problem is now greatly simplified, because the idempotent part of the OPDM is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; the TPDM.; In order to obtain the DCFT energy, two conditions must be satisfied:; 1) The energy must be stationary with respect to the variation of the; idempotent part of the one-particle density matrix . This is; achieved by the self-consistent diagonalization of the generalized Fock; operator matrix defined above, which introduces the relaxation of the orbitals.; 2) The energy must be stationary with respect to the variation of the density; cumulant , constrained to the N-representability conditions.; Making the energy stationary requires the solution of the two sets of coupled; equations for the orbital and cumulant updates, respectively (also known as; residual equations). At the present moment three different algorithms for the; solution of the system of coupled equations are available (see section; Iterative Algorithms for details).; Publications resulting from the use of the DCFT code should cite contributions; listed here. Methods¶; Currently two DCFT methods (functionals) are available: DC-06 and DC-12. Both; methods use approximate N-representability conditions derived from the; second-order perturbation theory, but differ in the description of the; correlated (non-idempotent) part of the one-particle density; matrix. While in the DC-06 method is derived from the density cumulant; in an approximate way, the DC-12 method derives this contribution exactly, and; therefore takes full advantage of the N-representability conditions. Both DC-06; and DC-12 methods have similar computational cost. However, the DC-12 method; usually exhibits much better numerical stability and can be significantly; cheaper than the DC-06 in the problematic cases as the result of the improved; convergence. For the comparison of the quality of these methods",MatchSource.WIKI,psi4manual/4.0b4/dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft.html
Deployability,update,updates,"ties. The additive; separability of the density cumulant guarantees that all of the DCFT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of the OPDM is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; the TPDM.; In order to obtain the DCFT energy, two conditions must be satisfied:; 1) The energy must be stationary with respect to the variation of the; idempotent part of the one-particle density matrix . This is; achieved by the self-consistent diagonalization of the generalized Fock; operator matrix defined above, which introduces the relaxation of the orbitals.; 2) The energy must be stationary with respect to the variation of the density; cumulant , constrained to the N-representability conditions.; Making the energy stationary requires the solution of the two sets of coupled; equations for the orbital and cumulant updates, respectively (also known as; residual equations). At the present moment three different algorithms for the; solution of the system of coupled equations are available (see section; Iterative Algorithms for details).; Publications resulting from the use of the DCFT code should cite contributions; listed here. Methods¶; Currently two DCFT methods (functionals) are available: DC-06 and DC-12. Both; methods use approximate N-representability conditions derived from the; second-order perturbation theory, but differ in the description of the; correlated (non-idempotent) part of the one-particle density; matrix. While in the DC-06 method is derived from the density cumulant; in an approximate way, the DC-12 method derives this contribution exactly, and; therefore takes full advantage of the N-representability conditions. Both DC-06; and DC-12 methods have similar computational cost. However, the DC-12 method; usually exhibits much better numerical stabil",MatchSource.WIKI,psi4manual/4.0b4/dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft.html
Energy Efficiency,energy,energy,"﻿. DCFT: Density Cumulant Functional Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». DCFT: Density Cumulant Functional Theory¶; Code author: Alexander Yu. Sokolov and Andrew C. Simmonett; Section author: Alexander Yu. Sokolov; Module: Keywords, PSI Variables, DCFT. Theory¶; Density cumulant functional theory (DCFT) is a density-based ab initio theory; that can compute electronic energies without the use of the wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (OPDM and TPDM):. Here we used Einstein convention for the summation over the repeated indices,; and are the standard one- and two-electron integrals,; and are the elements of the OPDM and TPDM,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements and; cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCFT one takes a different route and; replaces the TPDM in favor of its two-particle density cumulant:. The one-particle density matrix is separated into its idempotent part; and a correction :. The idempotent part of the OPDM corresponds to a Hartree-Fock-like density of; non-interacting electrons, while the non-idempotent correction ; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the ene",MatchSource.WIKI,psi4manual/4.0b4/dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft.html
Integrability,rout,route,"ression in terms of the one- and; two-particle density matrices (OPDM and TPDM):. Here we used Einstein convention for the summation over the repeated indices,; and are the standard one- and two-electron integrals,; and are the elements of the OPDM and TPDM,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements and; cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCFT one takes a different route and; replaces the TPDM in favor of its two-particle density cumulant:. The one-particle density matrix is separated into its idempotent part; and a correction :. The idempotent part of the OPDM corresponds to a Hartree-Fock-like density of; non-interacting electrons, while the non-idempotent correction ; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. Energy functional has several important properties. First,; the energy is now a function of two types of independent parameters, the; idempotent part of OPDM and the density cumulant; . As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCFT methods; are size-extensive and size-consist",MatchSource.WIKI,psi4manual/4.0b4/dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft.html
Modifiability,coupling,coupling,"he cumulant and the orbitals is achieved. As in the two-step algorithm, the DIIS; extrapolation is used to accelerate the convergence.; 3) Quadratically-convergent algorithm (set ALGORITHM to QC). The; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. The electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. By default the; electronic Hessian also contains the matrix elements that couple the orbitals; and the density cumulant. The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems. If the computation of the coupling elements; is not desired, it can be turned off by setting QC_COUPLING to FALSE.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below .; The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive ; cumulant updates. As a result, for the small closed-shell systems the two-step; algorithm is usually preferred, while for the larger systems and the molecules with the; open-shell character it is recommended to use the simultaneous algorithm. The; efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transf",MatchSource.WIKI,psi4manual/4.0b4/dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft.html
Performance,perform,performed,"putations can only be run with the unrestricted; orbitals. If the REFERENCE option is not specified in the input file,; the PSI4 Python driver will conveniently set it to UHF for the DCFT; computations. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCFT energy one; needs to solve the system of coupled equations for the orbitals and the density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option.; 1) Two-step algorithm (can be invoked by setting ALGORITHM option to; TWOSTEP and is currently the default). In two-step algorithm the DCFT equations; are solved in macroiterations. Each macroiteration consists of two sets of; microiterations. In the first set the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. The convergence of the two-step algorithm is accelerated using the; DIIS extrapolation technique.; 2) Simultaneous algorithm (set ALGORITHM to SIMULTANEOUS). In this algorithm; each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and the orbitals is achieved. As in the two-step algorithm, the DIIS; extrapolation is used to accelerate the convergence.; 3) Quadratically-convergent algorithm (set ALGORITHM to QC). The; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update follo",MatchSource.WIKI,psi4manual/4.0b4/dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft.html
Safety,avoid,avoiding,"ds to faster convergence and is; recommended for open-shell systems. If the computation of the coupling elements; is not desired, it can be turned off by setting QC_COUPLING to FALSE.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below .; The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive ; cumulant updates. As a result, for the small closed-shell systems the two-step; algorithm is usually preferred, while for the larger systems and the molecules with the; open-shell character it is recommended to use the simultaneous algorithm. The; efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK. For more recommendations on the choice of the algorithm see; Recommendations section. Analytic Gradients¶; Analytic gradients are available for the DC-06 method. Gradients are only; available if the ALGORITHM option is set to TWOSTEP or SIMULTANEOUS for; the energy computation. In addition, AO_BASIS option must be set to NONE; (default). Evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: two-step (default) and simultaneous. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit the similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradient",MatchSource.WIKI,psi4manual/4.0b4/dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft.html
Testability,test,test,"the density cumulant; in an approximate way, the DC-12 method derives this contribution exactly, and; therefore takes full advantage of the N-representability conditions. Both DC-06; and DC-12 methods have similar computational cost. However, the DC-12 method; usually exhibits much better numerical stability and can be significantly; cheaper than the DC-06 in the problematic cases as the result of the improved; convergence. For the comparison of the quality of these methods we refer; user to the recent publications.; The DCFT functional can be specified by the DCFT_FUNCTIONAL option. The; default choice is the DC-06 functional. In addition to the two methods listed; above, DCFT_FUNCTIONAL option can be set to CEPA0 (coupled electron; pair approximation zero, equivalent to linearized coupled cluster doubles; method, LCCD). CEPA0 can be considered as a particular case of the DC-06 and DC-12; methods in the limit of zero non-idempotency of OPDM. This option has a limited; functionality and should only be used for the test purposes.; At the present moment DCFT computations can only be run with the unrestricted; orbitals. If the REFERENCE option is not specified in the input file,; the PSI4 Python driver will conveniently set it to UHF for the DCFT; computations. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCFT energy one; needs to solve the system of coupled equations for the orbitals and the density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option.; 1) Two-step algorithm (can be invoked by setting ALGORITHM option to; TWOSTEP and is currently the default). In two-step algorithm the DCFT equations; are solved in macroiterations. Each macroiteration consists of two sets of; microiterations. In the first set the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After th",MatchSource.WIKI,psi4manual/4.0b4/dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft.html
Usability,simpl,simple," Sokolov; Module: Keywords, PSI Variables, DCFT. Theory¶; Density cumulant functional theory (DCFT) is a density-based ab initio theory; that can compute electronic energies without the use of the wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (OPDM and TPDM):. Here we used Einstein convention for the summation over the repeated indices,; and are the standard one- and two-electron integrals,; and are the elements of the OPDM and TPDM,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements and; cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCFT one takes a different route and; replaces the TPDM in favor of its two-particle density cumulant:. The one-particle density matrix is separated into its idempotent part; and a correction :. The idempotent part of the OPDM corresponds to a Hartree-Fock-like density of; non-interacting electrons, while the non-idempotent correction ; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. Energy functional has several important properties. First,; the energy is now a function of two types of independent parameters, the; idempotent part of OPDM and the den",MatchSource.WIKI,psi4manual/4.0b4/dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft.html
Availability,avail,available," rules are included in the CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. Use of DETCI for CASSCF; wavefunctions is described in another section of this manual.; As just mentioned, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; The division of the molecular orbitals into various subspaces such as; RAS spaces, or frozen vs. active orbitals, etc., needs to be clear not; only to detci, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus, orbital; subspace keywords such as RAS1,; RAS2, RAS3, FROZEN_DOCC, FROZEN_UOCC,; ACTIVE, etc., should be set; in the global section of input so they may also be read by other modules.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. Higher order; single-refernce CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specifed by fci. More complicate",MatchSource.WIKI,psi4manual/4.0b4/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci-1.html
Deployability,configurat,configuration,"﻿. CI: Configuration Interaction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b4/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci-1.html
Energy Efficiency,adapt,adapted,"﻿. CI: Configuration Interaction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b4/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci-1.html
Integrability,interface,interface,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4manual/4.0b4/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci-1.html
Modifiability,adapt,adapted,"﻿. CI: Configuration Interaction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b4/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci-1.html
Performance,optimiz,optimized,"a diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are include",MatchSource.WIKI,psi4manual/4.0b4/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci-1.html
Testability,test,testing,"rsion of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. Table Of Contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; FROZEN_UOCC; MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Previous topic; PSIMRCC Implementation of Mk-MRCC Theory; Next topic; SAPT: Symmetry-Adapted Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] »",MatchSource.WIKI,psi4manual/4.0b4/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci-1.html
Usability,simpl,simplest,"﻿. CI: Configuration Interaction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b4/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci-1.html
Availability,avail,available," rules are included in the CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. Use of DETCI for CASSCF; wavefunctions is described in another section of this manual.; As just mentioned, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; The division of the molecular orbitals into various subspaces such as; RAS spaces, or frozen vs. active orbitals, etc., needs to be clear not; only to detci, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus, orbital; subspace keywords such as RAS1,; RAS2, RAS3, FROZEN_DOCC, FROZEN_UOCC,; ACTIVE, etc., should be set; in the global section of input so they may also be read by other modules.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. Higher order; single-refernce CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specifed by fci. More complicate",MatchSource.WIKI,psi4manual/4.0b4/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci.html
Deployability,configurat,configuration,"﻿. CI: Configuration Interaction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b4/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci.html
Energy Efficiency,adapt,adapted,"﻿. CI: Configuration Interaction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b4/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci.html
Integrability,interface,interface,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4manual/4.0b4/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci.html
Modifiability,adapt,adapted,"﻿. CI: Configuration Interaction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b4/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci.html
Performance,optimiz,optimized,"a diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are include",MatchSource.WIKI,psi4manual/4.0b4/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci.html
Testability,test,testing,"rsion of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. Table Of Contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; FROZEN_UOCC; MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Previous topic; PSIMRCC Implementation of Mk-MRCC Theory; Next topic; SAPT: Symmetry-Adapted Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] »",MatchSource.WIKI,psi4manual/4.0b4/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci.html
Usability,simpl,simplest,"﻿. CI: Configuration Interaction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». CI: Configuration Interaction¶; Code author: C. David Sherrill and Matthew L. Leininger; Section author: C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the ",MatchSource.WIKI,psi4manual/4.0b4/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/detci.html
Availability,robust,robust,"arrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted integrals and then builds the; full tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; re",MatchSource.WIKI,psi4manual/4.0b4/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2-1.html
Deployability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b4/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2-1.html
Energy Efficiency,efficient,efficient,"﻿. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with",MatchSource.WIKI,psi4manual/4.0b4/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2-1.html
Integrability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b4/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2-1.html
Modifiability,variab,variable,"ary; basis exists for the atom in question). If it does not, use the; DF_BASIS_MP2 keyword to manually specify the basis.; DFMP2 likes memory. At a minimum, doubles are required,; where is the size of the auxiliary basis set. However, there is; one disk transpose of the tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the DF_INTS_NUM_THREADS to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Table Of Contents. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Previous topic; DCFT: Density Cumulant Functional Theory; Next topic; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . ne",MatchSource.WIKI,psi4manual/4.0b4/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2-1.html
Usability,simpl,simplification,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b4/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2-1.html
Availability,robust,robust,"arrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted integrals and then builds the; full tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; re",MatchSource.WIKI,psi4manual/4.0b4/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2.html
Deployability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b4/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2.html
Energy Efficiency,efficient,efficient,"﻿. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, DFMP2. Introduction¶; Second-order Møller-Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic products in the; bra- and ket- of the -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('df-mp2'). The energy('df-mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with",MatchSource.WIKI,psi4manual/4.0b4/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2.html
Integrability,integrat,integration,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b4/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2.html
Modifiability,variab,variable,"ary; basis exists for the atom in question). If it does not, use the; DF_BASIS_MP2 keyword to manually specify the basis.; DFMP2 likes memory. At a minimum, doubles are required,; where is the size of the auxiliary basis set. However, there is; one disk transpose of the tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the DF_INTS_NUM_THREADS to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Table Of Contents. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. Previous topic; DCFT: Density Cumulant Functional Theory; Next topic; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . ne",MatchSource.WIKI,psi4manual/4.0b4/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2.html
Usability,simpl,simplification,"s ERIs.; For converged RHF and UHF references, the singles correction,. is zero due to the Brillioun Condition, and the first contribution to the; perturbation series is at the second order:. In the DFMP2 module, the first-order contribution, or “singles energy” is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF E_CONVERGENCE and/or D_CONVERGENCE keywords; and try again.; To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme’s Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist’s integrals over spatial orbitals). and. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. and. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations¶; All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix DFMP2). Some basic recommendations are included below:. DFMP2 should be run with the -type RI or MP2FIT auxiliary; basis sets, not the -JKFIT basis sets. The",MatchSource.WIKI,psi4manual/4.0b4/dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dfmp2.html
Availability,failure,failures,"am matrix,. which is diagonalized to form the Kohn-Sham orbitals in the same manner as in; Hartree-Fock.; In practice the local functional kernel and its required; partial derivatives are exceedingly complex, and are not analytically; integrable. In this case, atom-centered numerical quadratures are used to; evaluate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn",MatchSource.WIKI,psi4manual/4.0b4/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft-1.html
Deployability,integrat,integrated,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, mp2 algorithms.; -D Functionals; We have several -D2 functionals implemented, -D3 functionls are available; with the installation of Grimme’s DFTD3 program, and we; will shortly be adding many; more combinations of -D2 and -D3 functionals. For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results,",MatchSource.WIKI,psi4manual/4.0b4/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft-1.html
Energy Efficiency,energy,energy,"﻿. DFT: Density Functional Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». DFT: Density Functional Theory¶; Code author: Robert M. Parrish and Justin M. Turney; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBFUNCTIONAL, LIBFOCK, LIBSCF_SOLVER; Both density functional theory and Hartree–Fock theory are controlled; through the SCF module, and the SCF Introduction; section is also relevant here. Theory¶; Generalized Kohn-Sham Density Functional Theory (KS-DFT) is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio.; Pure Kohn-Sham DFT is based on the ideas that A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning ",MatchSource.WIKI,psi4manual/4.0b4/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft-1.html
Integrability,depend,depending,"ng the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density is incorporated. The most canonical variant; of these functionals rely on the spin kinetic energy density ; and ,. A generic local meta-GGA functional may then be written as,. The potential corresponding to this energy functional is,. This potential is u",MatchSource.WIKI,psi4manual/4.0b4/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft-1.html
Modifiability,extend,extended,"valuate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn-Sham; potential.; The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree-Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that",MatchSource.WIKI,psi4manual/4.0b4/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft-1.html
Performance,optimiz,optimization,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b4/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft-1.html
Testability,test,test,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b4/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft-1.html
Usability,simpl,simply," the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density i",MatchSource.WIKI,psi4manual/4.0b4/dft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft-1.html
Availability,failure,failures,"am matrix,. which is diagonalized to form the Kohn-Sham orbitals in the same manner as in; Hartree-Fock.; In practice the local functional kernel and its required; partial derivatives are exceedingly complex, and are not analytically; integrable. In this case, atom-centered numerical quadratures are used to; evaluate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn",MatchSource.WIKI,psi4manual/4.0b4/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft.html
Deployability,integrat,integrated,"t these functionals are not appropriate for modeling; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead.; Hybrid Functionals; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems.; LRC Functionals; LRC functionals are a particular area of interest of the PSI4 DFT team.; LRC functionals are all denoted by a lower-case “w” in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon’s wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, mp2 algorithms.; -D Functionals; We have several -D2 functionals implemented, -D3 functionls are available; with the installation of Grimme’s DFTD3 program, and we; will shortly be adding many; more combinations of -D2 and -D3 functionals. For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results,",MatchSource.WIKI,psi4manual/4.0b4/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft.html
Energy Efficiency,energy,energy,"﻿. DFT: Density Functional Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». DFT: Density Functional Theory¶; Code author: Robert M. Parrish and Justin M. Turney; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBFUNCTIONAL, LIBFOCK, LIBSCF_SOLVER; Both density functional theory and Hartree–Fock theory are controlled; through the SCF module, and the SCF Introduction; section is also relevant here. Theory¶; Generalized Kohn-Sham Density Functional Theory (KS-DFT) is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio.; Pure Kohn-Sham DFT is based on the ideas that A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning ",MatchSource.WIKI,psi4manual/4.0b4/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft.html
Integrability,depend,depending,"ng the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density is incorporated. The most canonical variant; of these functionals rely on the spin kinetic energy density ; and ,. A generic local meta-GGA functional may then be written as,. The potential corresponding to this energy functional is,. This potential is u",MatchSource.WIKI,psi4manual/4.0b4/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft.html
Modifiability,extend,extended,"valuate the Kohn-Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree-Fock; with potentially exact treatment of electron correlation for “free” was one of; the primary motivations for KS-DFT’s adoption by chemists in the late 1980s and; early 1990s.; Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn-Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions.; Generalized Kohn-Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as “implicit” density; functionals, as the orbitals are themselves functionals of the Kohn-Sham; potential.; The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree-Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that",MatchSource.WIKI,psi4manual/4.0b4/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft.html
Performance,optimiz,optimization,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b4/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft.html
Testability,test,test,"to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results.; A more advanced GKS functional technology which has developed enormous; popularity in recent years is the Long-Range Corrected (LRC) ansatz. LRC; recognizes that the local DFA is potentially exact at short range in the; exchange hole, and that the hybrid-exchange energy of the noninteracting; quasiparticles is also exact for true electrons at long range in the exchange; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by f",MatchSource.WIKI,psi4manual/4.0b4/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft.html
Usability,simpl,simply," the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn-Sham orbitals. KS-DFT borrows much of the machinery of Hartree-Fock, as is; evident by looking at the energy expression,. Here is the noninteracting quasiparticle kinetic energy operator,; is the nucleus-electron attraction potential, ; is the total electron density matrix, and is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; or ,. The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; , or; to build an inhomogeneity; parameter. where,. GGA functionals are essentially the same cost as LSDA functionals, and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density i",MatchSource.WIKI,psi4manual/4.0b4/dft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft.html
Availability,down,downloadable,"﻿. Interface to DFTD3 by S. Grimme — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to DFTD3 by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; PSI4 contains code to interface to the DFTD3 program of S. Grimme, which is freely; downloadable from http://toc.uni-muenster.de/DFTD3/). Installation¶; Follow the instructions provided with the source to build the DFTD3; program (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). For the moment, you must apply a patch,; psi4/lib/scripts/patch_grimme_dftd3, to the dftd3 source before building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabula",MatchSource.WIKI,psi4manual/4.0b4/dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3-1.html
Deployability,patch,patch,"﻿. Interface to DFTD3 by S. Grimme — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to DFTD3 by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; PSI4 contains code to interface to the DFTD3 program of S. Grimme, which is freely; downloadable from http://toc.uni-muenster.de/DFTD3/). Installation¶; Follow the instructions provided with the source to build the DFTD3; program (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). For the moment, you must apply a patch,; psi4/lib/scripts/patch_grimme_dftd3, to the dftd3 source before building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabula",MatchSource.WIKI,psi4manual/4.0b4/dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3-1.html
Energy Efficiency,energy,energy,"ore building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , modulated; by a damping function, , that gradually activates; the dispersion correction (at a rate characterized by ); over a distance characterized by the sum of the two atomic vdW radii,; , while an overall scaling term, , is optimized; to be unique to each functional. ( is; sometimes allowed to vary as well.). (1). Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]; which incorporates an additional term in the dispersion; series and adjusts the combination formula and damping; function. The individual atomic are interpolated from; several reference values based upon coordination numbers extracted from; the molecul",MatchSource.WIKI,psi4manual/4.0b4/dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3-1.html
Integrability,interface,interface,"﻿. Interface to DFTD3 by S. Grimme — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to DFTD3 by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; PSI4 contains code to interface to the DFTD3 program of S. Grimme, which is freely; downloadable from http://toc.uni-muenster.de/DFTD3/). Installation¶; Follow the instructions provided with the source to build the DFTD3; program (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). For the moment, you must apply a patch,; psi4/lib/scripts/patch_grimme_dftd3, to the dftd3 source before building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabula",MatchSource.WIKI,psi4manual/4.0b4/dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3-1.html
Modifiability,variab,variable,"unning DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO;  . -D3ZERO; -D3 [4] w/ original zero-damping through dftd3; [, , , ]. -D3BJ; -D3 [5] w/ newer Becke-Johnson rational damping through dftd3; [, , , ]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default param",MatchSource.WIKI,psi4manual/4.0b4/dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3-1.html
Performance,optimiz,optimized,"O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , modulated; by a damping function, , that gradually activates; the dispersion correction (at a rate characterized by ); over a distance characterized by the sum of the two atomic vdW radii,; , while an overall scaling term, , is optimized; to be unique to each functional. ( is; sometimes allowed to vary as well.). (1). Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]; which incorporates an additional term in the dispersion; series and adjusts the combination formula and damping; function. The individual atomic are interpolated from; several reference values based upon coordination numbers extracted from; the molecular structure, rather than assigned solely by atomic identity as; in DFT-D2, and thereby incorporate some awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson wa",MatchSource.WIKI,psi4manual/4.0b4/dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3-1.html
Safety,redund,redundant,"nunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now , ,; , and . All parameters characterizing the dispersion correction are taken from; http://toc.uni-muenster.de/DFTD3/; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO;  . -D3ZERO; -D3 [4] w/ original zero-damping through dftd3; [, , , ]. -D3BJ; -D3 [5] w/ newer Becke-Johnson rational damping through dftd3; [, , , ]. Footnotes. [1]No",MatchSource.WIKI,psi4manual/4.0b4/dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3-1.html
Usability,simpl,simple,"ome awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now , ,; , and . All parameters characterizing the dispersion correction are taken from; http://toc.uni-muenster.de/DFTD3/; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO",MatchSource.WIKI,psi4manual/4.0b4/dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3-1.html
Availability,down,downloadable,"﻿. Interface to DFTD3 by S. Grimme — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to DFTD3 by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; PSI4 contains code to interface to the DFTD3 program of S. Grimme, which is freely; downloadable from http://toc.uni-muenster.de/DFTD3/). Installation¶; Follow the instructions provided with the source to build the DFTD3; program (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). For the moment, you must apply a patch,; psi4/lib/scripts/patch_grimme_dftd3, to the dftd3 source before building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabula",MatchSource.WIKI,psi4manual/4.0b4/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3.html
Deployability,patch,patch,"﻿. Interface to DFTD3 by S. Grimme — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to DFTD3 by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; PSI4 contains code to interface to the DFTD3 program of S. Grimme, which is freely; downloadable from http://toc.uni-muenster.de/DFTD3/). Installation¶; Follow the instructions provided with the source to build the DFTD3; program (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). For the moment, you must apply a patch,; psi4/lib/scripts/patch_grimme_dftd3, to the dftd3 source before building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabula",MatchSource.WIKI,psi4manual/4.0b4/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3.html
Energy Efficiency,energy,energy,"ore building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , modulated; by a damping function, , that gradually activates; the dispersion correction (at a rate characterized by ); over a distance characterized by the sum of the two atomic vdW radii,; , while an overall scaling term, , is optimized; to be unique to each functional. ( is; sometimes allowed to vary as well.). (1). Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]; which incorporates an additional term in the dispersion; series and adjusts the combination formula and damping; function. The individual atomic are interpolated from; several reference values based upon coordination numbers extracted from; the molecul",MatchSource.WIKI,psi4manual/4.0b4/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3.html
Integrability,interface,interface,"﻿. Interface to DFTD3 by S. Grimme — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to DFTD3 by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; PSI4 contains code to interface to the DFTD3 program of S. Grimme, which is freely; downloadable from http://toc.uni-muenster.de/DFTD3/). Installation¶; Follow the instructions provided with the source to build the DFTD3; program (essentially, unpack the source, edit the Makefile to select a; Fortran compiler, and run make). For the moment, you must apply a patch,; psi4/lib/scripts/patch_grimme_dftd3, to the dftd3 source before building.; To be used by PSI4, the program binary (dftd3) must be found in; your PATH. If PSI4 is unable to execute the binary, an; error will be reported.; >>> cd dftd3; >>> ls; dftd3.tar; patch_grimme_dftd3; >>> tar -xvf dftd3.tar; copyc6.f; dftd3.f; Makefile; man.pdf; pars.f; param; >>> patch < patch_grimme_dftd3; patching file Makefile; patching file dftd3.f; >>> make; making dftd3.o from dftd3.f; gfortran -O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabula",MatchSource.WIKI,psi4manual/4.0b4/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3.html
Modifiability,variab,variable,"unning DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO;  . -D3ZERO; -D3 [4] w/ original zero-damping through dftd3; [, , , ]. -D3BJ; -D3 [5] w/ newer Becke-Johnson rational damping through dftd3; [, , , ]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default param",MatchSource.WIKI,psi4manual/4.0b4/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3.html
Performance,optimiz,optimized,"O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , modulated; by a damping function, , that gradually activates; the dispersion correction (at a rate characterized by ); over a distance characterized by the sum of the two atomic vdW radii,; , while an overall scaling term, , is optimized; to be unique to each functional. ( is; sometimes allowed to vary as well.). (1). Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]; which incorporates an additional term in the dispersion; series and adjusts the combination formula and damping; function. The individual atomic are interpolated from; several reference values based upon coordination numbers extracted from; the molecular structure, rather than assigned solely by atomic identity as; in DFT-D2, and thereby incorporate some awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson wa",MatchSource.WIKI,psi4manual/4.0b4/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3.html
Safety,redund,redundant,"nunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now , ,; , and . All parameters characterizing the dispersion correction are taken from; http://toc.uni-muenster.de/DFTD3/; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO;  . -D3ZERO; -D3 [4] w/ original zero-damping through dftd3; [, , , ]. -D3BJ; -D3 [5] w/ newer Becke-Johnson rational damping through dftd3; [, , , ]. Footnotes. [1]No",MatchSource.WIKI,psi4manual/4.0b4/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3.html
Usability,simpl,simple,"ome awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now , ,; , and . All parameters characterizing the dispersion correction are taken from; http://toc.uni-muenster.de/DFTD3/; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO",MatchSource.WIKI,psi4manual/4.0b4/dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3.html
Availability,avail,available,﻿. DFT Functionals — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». DFT Functionals¶. All Available¶. DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 ,MatchSource.WIKI,psi4manual/4.0b4/dft_byfunctional-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft_byfunctional-1.html
Deployability,update,updated,"00; 1.37300; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D1; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; 1.00000; 0.72200; 1.21700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; 1.00000; 0.78750; —; —; 0.42890; 4.44070; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; 0.60000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.92800; 1.28700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; 0.25330; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Table Of Contents. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 06, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/dft_byfunctional-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft_byfunctional-1.html
Availability,avail,available,﻿. DFT Functionals — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». DFT Functionals¶. All Available¶. DFT functionals available in PSI4. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.200000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.194300; —; —; —; —; —. B97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional; Y; —; —; 0.210000; —; —; —; —; —. B97-2; B97-2 ,MatchSource.WIKI,psi4manual/4.0b4/dft_byfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft_byfunctional.html
Deployability,update,updated,"00; 1.37300; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE-D1; PBE GGA Exchange-Correlation Functional; 0.75000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; 1.00000; 0.72200; 1.21700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; 1.00000; 0.78750; —; —; 0.42890; 4.44070; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; 0.60000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.92800; 1.28700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; 0.25330; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. Table Of Contents. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. Previous topic; <no title>; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 06, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/dft_byfunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dft_byfunctional.html
Availability,error,error,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/diatomic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/diatomic-1.html
Deployability,update,updated,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/diatomic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/diatomic-1.html
Energy Efficiency,energy,energy,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/diatomic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/diatomic-1.html
Availability,error,error,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/diatomic.html
Deployability,update,updated,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/diatomic.html
Energy Efficiency,energy,energy,"﻿. Spectroscopic Constants for Diatomics — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Spectroscopic Constants for Diatomics¶; Code author: Andrew C. Simmonett. diatomic_anharmonicity(rvals, energies)[source]¶; Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. Parameters:; rvals (list) – The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array; energies (list) – The energies (Eh) computed at the bond lengths in the rvals list. Returns:(dict) Keys: “re”, “r0”, “we”, “wexe”, “nu”, “ZPVE(harmonic)”, “ZPVE(anharmonic)”, “Be”, “B0”, “ae”, “De”; corresponding to the spectroscopic constants in cm-1. Previous topic; <no title>; Next topic; Function Intercalls; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/diatomic.html
Availability,avail,available,"﻿. Documentation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html;",MatchSource.WIKI,psi4manual/4.0b4/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html
Deployability,release,release,"﻿. Documentation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html;",MatchSource.WIKI,psi4manual/4.0b4/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html
Integrability,depend,depending,"uild the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments i",MatchSource.WIKI,psi4manual/4.0b4/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html
Modifiability,plugin,plugin,"IR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, ru",MatchSource.WIKI,psi4manual/4.0b4/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html
Security,access,accessible,"﻿. Documentation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html;",MatchSource.WIKI,psi4manual/4.0b4/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html
Testability,test,tests,"IR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, ru",MatchSource.WIKI,psi4manual/4.0b4/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html
Usability,clear,clears,"s from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locat",MatchSource.WIKI,psi4manual/4.0b4/documentation-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html
Availability,avail,available,"﻿. Documentation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html;",MatchSource.WIKI,psi4manual/4.0b4/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation.html
Deployability,release,release,"﻿. Documentation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html;",MatchSource.WIKI,psi4manual/4.0b4/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation.html
Integrability,depend,depending,"uild the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments i",MatchSource.WIKI,psi4manual/4.0b4/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation.html
Modifiability,plugin,plugin,"IR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, ru",MatchSource.WIKI,psi4manual/4.0b4/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation.html
Security,access,accessible,"﻿. Documentation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». Documentation¶; PSI4’s documentation is generated by Sphinx; and lives in psi4/doc/sphinxman. It is available online at; http://sirius.chem.vt.edu/psi4manual/latest/index.html; for the latest public release and at; http://sirius.chem.vt.edu/psi4manual/master/index.html; for the latest development branch (not all links may be publically; accessible). Installing Sphinx¶; Installing Sphinx is only necessary to build the documentation; yourself, locally. The docs are served from; from trac and psicode, so most users/developers won’t need Sphinx; installed. Nevertheless, installation is easy.; On Mac:; >>> easy_install sphinx. On Linux:. Download; >>> curl -O http://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.1.3.tar.gz. Unpack, etc. Build and Install; >>> python setup.py build; >>> sudo python setup.py install. Check the path; >>> which sphinx-build; >>> which latex; >>> which dvipng. LaTeX and dvipng are needed to render math. If the latter is missing,; the following may work.; >>> sudo yum install dvipng. Documentation Structure¶; Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in; the same format, hyperlinking within and to trac/external websites, and; generating documentation in different formats from the same source.; PSI4’s documentation is a unified document covering information for; both users and programmers, with different portions served up depending on; the target audience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html;",MatchSource.WIKI,psi4manual/4.0b4/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation.html
Testability,test,tests,"IR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, ru",MatchSource.WIKI,psi4manual/4.0b4/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation.html
Usability,clear,clears,"s from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locat",MatchSource.WIKI,psi4manual/4.0b4/documentation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation.html
Deployability,configurat,configuration," coupled electron pair approximation, equiv. linear. CCD [manual]. cepa(0); coupled electron pair approximation variant 0 [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. acpf; averaged coupled-pair functional [manual]. aqcc; averaged quadratic coupled cluster [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. qcisd(t); QCISD with perturbative triples [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. fno-df-ccsd(t); CCSD(T) with density fitting and frozen natural orbitals [manual]. bccd(t); BCCD with perturbative triples [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. gaussian-2 (g2); gaussian-2 composite method [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sa",MatchSource.WIKI,psi4manual/4.0b4/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/energy-1.html
Energy Efficiency,energy,energy,"﻿. Energy — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mcscf; multiconfigurational self consistent field (SCF). mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp3; 3rd-order Moller-Plesset perturbation theory (MP3) [manual]. mp2.5; average of MP2 and MP3 [manual]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. mp4; full MP4 [manual]. mpn; nth-order Moller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation, equiv. linear. CCD [manual]. cepa(0); coupled electron pair approximation variant 0 [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. acpf; averaged coupled-pair functional [manual]. aqcc; averaged quadratic coupled cluster [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. bccd; Brueckner coupled cluster doubles (BCCD) [manu",MatchSource.WIKI,psi4manual/4.0b4/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/energy-1.html
Modifiability,variab,variables,"﻿. Energy — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mcscf; multiconfigurational self consistent field (SCF). mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp3; 3rd-order Moller-Plesset perturbation theory (MP3) [manual]. mp2.5; average of MP2 and MP3 [manual]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. mp4; full MP4 [manual]. mpn; nth-order Moller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation, equiv. linear. CCD [manual]. cepa(0); coupled electron pair approximation variant 0 [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. acpf; averaged coupled-pair functional [manual]. aqcc; averaged quadratic coupled cluster [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. bccd; Brueckner coupled cluster doubles (BCCD) [manu",MatchSource.WIKI,psi4manual/4.0b4/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/energy-1.html
Performance,optimiz,optimized,"y(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mcscf; multiconfigurational self consistent field (SCF). mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp3; 3rd-order Moller-Plesset perturbation theory (MP3) [manual]. mp2.5; average of MP2 and MP3 [manual]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. mp4; full MP4 [manual]. mpn; nth-order Moller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation, equiv. linear. CCD [manual]. cepa(0); coupled electron pair approximation variant 0 [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. acpf; averaged coupled-pair functional [manual]. aqcc; averaged quadratic coupled cluster [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. qcisd(t); QCISD with perturbative triples [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. fno-df-ccsd(t); CCSD(T) with density fitting and frozen natural",MatchSource.WIKI,psi4manual/4.0b4/energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/energy-1.html
Deployability,configurat,configuration," coupled electron pair approximation, equiv. linear. CCD [manual]. cepa(0); coupled electron pair approximation variant 0 [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. acpf; averaged coupled-pair functional [manual]. aqcc; averaged quadratic coupled cluster [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. qcisd(t); QCISD with perturbative triples [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. fno-df-ccsd(t); CCSD(T) with density fitting and frozen natural orbitals [manual]. bccd(t); BCCD with perturbative triples [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual]. fci; full configuration interaction (FCI) [manual]. detci; expert full control over detci module. gaussian-2 (g2); gaussian-2 composite method [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sa",MatchSource.WIKI,psi4manual/4.0b4/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/energy.html
Energy Efficiency,energy,energy,"﻿. Energy — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mcscf; multiconfigurational self consistent field (SCF). mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp3; 3rd-order Moller-Plesset perturbation theory (MP3) [manual]. mp2.5; average of MP2 and MP3 [manual]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. mp4; full MP4 [manual]. mpn; nth-order Moller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation, equiv. linear. CCD [manual]. cepa(0); coupled electron pair approximation variant 0 [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. acpf; averaged coupled-pair functional [manual]. aqcc; averaged quadratic coupled cluster [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. bccd; Brueckner coupled cluster doubles (BCCD) [manu",MatchSource.WIKI,psi4manual/4.0b4/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/energy.html
Modifiability,variab,variables,"﻿. Energy — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Energy¶. energy(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mcscf; multiconfigurational self consistent field (SCF). mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp3; 3rd-order Moller-Plesset perturbation theory (MP3) [manual]. mp2.5; average of MP2 and MP3 [manual]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. mp4; full MP4 [manual]. mpn; nth-order Moller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation, equiv. linear. CCD [manual]. cepa(0); coupled electron pair approximation variant 0 [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. acpf; averaged coupled-pair functional [manual]. aqcc; averaged quadratic coupled cluster [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. bccd; Brueckner coupled cluster doubles (BCCD) [manu",MatchSource.WIKI,psi4manual/4.0b4/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/energy.html
Performance,optimiz,optimized,"y(name[, bypass_scf, molecule])[source]¶; Function to compute the single-point electronic energy. Returns:(float) Total electronic energy in Hartrees. SAPT returns interaction energy. Psi variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mcscf; multiconfigurational self consistent field (SCF). mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp3; 3rd-order Moller-Plesset perturbation theory (MP3) [manual]. mp2.5; average of MP2 and MP3 [manual]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual]. mp4; full MP4 [manual]. mpn; nth-order Moller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation, equiv. linear. CCD [manual]. cepa(0); coupled electron pair approximation variant 0 [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. acpf; averaged coupled-pair functional [manual]. aqcc; averaged quadratic coupled cluster [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. bccd; Brueckner coupled cluster doubles (BCCD) [manual]. qcisd(t); QCISD with perturbative triples [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. fno-df-ccsd(t); CCSD(T) with density fitting and frozen natural",MatchSource.WIKI,psi4manual/4.0b4/energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/energy.html
Availability,avail,available,"﻿. Installation and Runtime Configuration — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, ",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Deployability,install,installation,"﻿. Installation and Runtime Configuration — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, ",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Energy Efficiency,efficient,efficiently,"rated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to e",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Integrability,depend,depending," Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated sc",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Modifiability,config,configuration,"uration — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execu",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Performance,perform,performing,"ch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). ",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Safety,safe,safe,"user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). which is equivalent to; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficien",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Security,access,accessible,"H Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Testability,test,testing,"﻿. Installation and Runtime Configuration — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, ",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Usability,guid,guide,". To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). which is equivalent to; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are ",MatchSource.WIKI,psi4manual/4.0b4/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html
Availability,avail,available,"﻿. Installation and Runtime Configuration — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, ",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Deployability,install,installation,"﻿. Installation and Runtime Configuration — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, ",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Energy Efficiency,efficient,efficiently,"rated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to e",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Integrability,depend,depending," Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated sc",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Modifiability,config,configuration,"uration — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execu",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Performance,perform,performing,"ch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). ",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Safety,safe,safe,"user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). which is equivalent to; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficien",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Security,access,accessible,"H Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Testability,test,testing,"﻿. Installation and Runtime Configuration — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Installation and Runtime Configuration¶. Obtaining PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to; Compiling and Installing (same information as; the file psi4/INSTALL distributed with the package). Compiling and Installing¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. Scratch Files and the ~/.psi4rc File¶; One very important part of user configuration at the end of the; installation process (details here); is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, ",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Usability,guid,guide,". To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). which is equivalent to; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are ",MatchSource.WIKI,psi4manual/4.0b4/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external.html
Availability,avail,available,"MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see Ref. [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3); where we have chosen the intermediate normalization, . The CISD correlation energy is given by. (4); and the amplitudes can be determined by the solution to the c",MatchSource.WIKI,psi4manual/4.0b4/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html
Deployability,configurat,configuration,"f the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in Ref. [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; energy('fno-ccsd(t)'). QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1); where we have chosen the intermediate normalization,; , and the symbols ; and represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in and :. (2); QCISD is slightly cheaper that CCSD computationally, but it retains the; complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to pertur",MatchSource.WIKI,psi4manual/4.0b4/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html
Energy Efficiency,reduce,reduced,"﻿. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, FNOCC. Frozen natural orbitals (FNO)¶; The computational cost of the QCISD(T), CCSD(T), CEPA, and MP4 methods can; be reduced by constructing a compact representation of the virtual space; based on the natural orbitals of second-order perturbation theory. The; most demanding steps in the CCSD and (T) algorithms scale as; and , where ; and represent the number of oribitals that are occupied and; unoccupied (virtual) in the reference function, respectively. By reducing; the the size of the virtual space, the cost of evaluating these terms; reduces by a factor of , where ; represents the number of virtual orbitals retained after the FNO; truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in Ref. [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid",MatchSource.WIKI,psi4manual/4.0b4/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html
Integrability,depend,depend,"have chosen the intermediate normalization, . The CISD correlation energy is given by. (4); and the amplitudes can be determined by the solution to the coupled set of; eqations:. (5); The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, , with generalized shifts for the; doubles and singles equations, and :. (6); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7); Methods whose shifts ( and ) do not; explicitly depend on orbitals or (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) or resolution of the identity (RI) techniques are; popular in quantum chemistry to avoid the computation and storage of the; 4-index electron repulsion integral (ERI) tensor and even to reduce the; computational scaling of some terms. DF-CCSD(T) computations are; available in PSI4, with or without the use of FNOs, through the FNOCC; module. The implementation and accuracy of the DF-CCSD(T) method are; described in Ref. [DePrince:2013:inprep].; The default auxiliary basis set for a DF-CCSD computation is chosen to be; the RI set (optimized for DFMP2) most similar to ",MatchSource.WIKI,psi4manual/4.0b4/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html
Modifiability,config,configuration,"f the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in Ref. [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; energy('fno-ccsd(t)'). QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1); where we have chosen the intermediate normalization,; , and the symbols ; and represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in and :. (2); QCISD is slightly cheaper that CCSD computationally, but it retains the; complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to pertur",MatchSource.WIKI,psi4manual/4.0b4/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html
Performance,optimiz,optimized,"itly depend on orbitals or (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) or resolution of the identity (RI) techniques are; popular in quantum chemistry to avoid the computation and storage of the; 4-index electron repulsion integral (ERI) tensor and even to reduce the; computational scaling of some terms. DF-CCSD(T) computations are; available in PSI4, with or without the use of FNOs, through the FNOCC; module. The implementation and accuracy of the DF-CCSD(T) method are; described in Ref. [DePrince:2013:inprep].; The default auxiliary basis set for a DF-CCSD computation is chosen to be; the RI set (optimized for DFMP2) most similar to the primary basis set.; For example, if the primary basis set is aug-cc-pVDZ, the default; auxiliary basis set will be the aug-cc-pVDZ-RI set. PSI4 of course; allows the user to specify any supported predefined basis set as the; auxiliary set. Alternatively, the user can request a set defined by the; partial Cholesky decomposition of the 4-index ERI tensor.; The following is a minimal input file that describes a DF-CCSD(T); computation using 3-index integrals obtained by partial Cholesky; decomposition of the 4-index ERI tensor.; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; df_basis_cc cholesky; basis aug-cc-pvdz; freeze_core true; }; energy('df-ccsd(t)'). The accuracy of the Cholesky decomposition may be controlled through the; keyword CHOLESKY_TOLERANCE. Note that the keyword; SCF_TYPE has not been specified here. By default, a DF-CCSD(T); computation exploits DF technology in the SCF procedure, but one can; override ",MatchSource.WIKI,psi4manual/4.0b4/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html
Safety,avoid,avoid,"es for and used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7); Methods whose shifts ( and ) do not; explicitly depend on orbitals or (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) or resolution of the identity (RI) techniques are; popular in quantum chemistry to avoid the computation and storage of the; 4-index electron repulsion integral (ERI) tensor and even to reduce the; computational scaling of some terms. DF-CCSD(T) computations are; available in PSI4, with or without the use of FNOs, through the FNOCC; module. The implementation and accuracy of the DF-CCSD(T) method are; described in Ref. [DePrince:2013:inprep].; The default auxiliary basis set for a DF-CCSD computation is chosen to be; the RI set (optimized for DFMP2) most similar to the primary basis set.; For example, if the primary basis set is aug-cc-pVDZ, the default; auxiliary basis set will be the aug-cc-pVDZ-RI set. PSI4 of course; allows the user to specify any supported predefined basis set as the; auxiliary set. Alternatively, the user can request a set defined by the; partial Cholesky decomposition of the 4-index ERI tensor.; The following is a minimal input file that describes a DF-CCSD(T); computation using 3-index integrals obtained by partial Cholesky; decomposition of the 4-i",MatchSource.WIKI,psi4manual/4.0b4/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html
Usability,simpl,simplified,"issing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in Ref. [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; energy('fno-ccsd(t)'). QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1); where we have chosen the intermediate normalization,; , and the symbols ; and represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in and :. (2); QCISD is slightly cheaper that CCSD computationally, but it retains the; complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the",MatchSource.WIKI,psi4manual/4.0b4/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html
Availability,avail,available,"MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see Ref. [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3); where we have chosen the intermediate normalization, . The CISD correlation energy is given by. (4); and the amplitudes can be determined by the solution to the c",MatchSource.WIKI,psi4manual/4.0b4/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc.html
Deployability,configurat,configuration,"f the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in Ref. [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; energy('fno-ccsd(t)'). QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1); where we have chosen the intermediate normalization,; , and the symbols ; and represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in and :. (2); QCISD is slightly cheaper that CCSD computationally, but it retains the; complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to pertur",MatchSource.WIKI,psi4manual/4.0b4/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc.html
Energy Efficiency,reduce,reduced,"﻿. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, FNOCC. Frozen natural orbitals (FNO)¶; The computational cost of the QCISD(T), CCSD(T), CEPA, and MP4 methods can; be reduced by constructing a compact representation of the virtual space; based on the natural orbitals of second-order perturbation theory. The; most demanding steps in the CCSD and (T) algorithms scale as; and , where ; and represent the number of oribitals that are occupied and; unoccupied (virtual) in the reference function, respectively. By reducing; the the size of the virtual space, the cost of evaluating these terms; reduces by a factor of , where ; represents the number of virtual orbitals retained after the FNO; truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in Ref. [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid",MatchSource.WIKI,psi4manual/4.0b4/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc.html
Integrability,depend,depend,"have chosen the intermediate normalization, . The CISD correlation energy is given by. (4); and the amplitudes can be determined by the solution to the coupled set of; eqations:. (5); The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, , with generalized shifts for the; doubles and singles equations, and :. (6); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7); Methods whose shifts ( and ) do not; explicitly depend on orbitals or (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) or resolution of the identity (RI) techniques are; popular in quantum chemistry to avoid the computation and storage of the; 4-index electron repulsion integral (ERI) tensor and even to reduce the; computational scaling of some terms. DF-CCSD(T) computations are; available in PSI4, with or without the use of FNOs, through the FNOCC; module. The implementation and accuracy of the DF-CCSD(T) method are; described in Ref. [DePrince:2013:inprep].; The default auxiliary basis set for a DF-CCSD computation is chosen to be; the RI set (optimized for DFMP2) most similar to ",MatchSource.WIKI,psi4manual/4.0b4/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc.html
Modifiability,config,configuration,"f the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in Ref. [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; energy('fno-ccsd(t)'). QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1); where we have chosen the intermediate normalization,; , and the symbols ; and represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in and :. (2); QCISD is slightly cheaper that CCSD computationally, but it retains the; complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to pertur",MatchSource.WIKI,psi4manual/4.0b4/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc.html
Performance,optimiz,optimized,"itly depend on orbitals or (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) or resolution of the identity (RI) techniques are; popular in quantum chemistry to avoid the computation and storage of the; 4-index electron repulsion integral (ERI) tensor and even to reduce the; computational scaling of some terms. DF-CCSD(T) computations are; available in PSI4, with or without the use of FNOs, through the FNOCC; module. The implementation and accuracy of the DF-CCSD(T) method are; described in Ref. [DePrince:2013:inprep].; The default auxiliary basis set for a DF-CCSD computation is chosen to be; the RI set (optimized for DFMP2) most similar to the primary basis set.; For example, if the primary basis set is aug-cc-pVDZ, the default; auxiliary basis set will be the aug-cc-pVDZ-RI set. PSI4 of course; allows the user to specify any supported predefined basis set as the; auxiliary set. Alternatively, the user can request a set defined by the; partial Cholesky decomposition of the 4-index ERI tensor.; The following is a minimal input file that describes a DF-CCSD(T); computation using 3-index integrals obtained by partial Cholesky; decomposition of the 4-index ERI tensor.; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; df_basis_cc cholesky; basis aug-cc-pvdz; freeze_core true; }; energy('df-ccsd(t)'). The accuracy of the Cholesky decomposition may be controlled through the; keyword CHOLESKY_TOLERANCE. Note that the keyword; SCF_TYPE has not been specified here. By default, a DF-CCSD(T); computation exploits DF technology in the SCF procedure, but one can; override ",MatchSource.WIKI,psi4manual/4.0b4/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc.html
Safety,avoid,avoid,"es for and used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7); Methods whose shifts ( and ) do not; explicitly depend on orbitals or (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) or resolution of the identity (RI) techniques are; popular in quantum chemistry to avoid the computation and storage of the; 4-index electron repulsion integral (ERI) tensor and even to reduce the; computational scaling of some terms. DF-CCSD(T) computations are; available in PSI4, with or without the use of FNOs, through the FNOCC; module. The implementation and accuracy of the DF-CCSD(T) method are; described in Ref. [DePrince:2013:inprep].; The default auxiliary basis set for a DF-CCSD computation is chosen to be; the RI set (optimized for DFMP2) most similar to the primary basis set.; For example, if the primary basis set is aug-cc-pVDZ, the default; auxiliary basis set will be the aug-cc-pVDZ-RI set. PSI4 of course; allows the user to specify any supported predefined basis set as the; auxiliary set. Alternatively, the user can request a set defined by the; partial Cholesky decomposition of the 4-index ERI tensor.; The following is a minimal input file that describes a DF-CCSD(T); computation using 3-index integrals obtained by partial Cholesky; decomposition of the 4-i",MatchSource.WIKI,psi4manual/4.0b4/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc.html
Usability,simpl,simplified,"issing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in Ref. [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; energy('fno-ccsd(t)'). QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1); where we have chosen the intermediate normalization,; , and the symbols ; and represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in and :. (2); QCISD is slightly cheaper that CCSD computationally, but it retains the; complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the",MatchSource.WIKI,psi4manual/4.0b4/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc.html
Availability,avail,available,"﻿. Frequency — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25,",MatchSource.WIKI,psi4manual/4.0b4/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/freq-1.html
Deployability,update,updated,"n. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/freq-1.html
Energy Efficiency,energy,energy,"﻿. Frequency — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25,",MatchSource.WIKI,psi4manual/4.0b4/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/freq-1.html
Performance,perform,performed,"﻿. Frequency — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25,",MatchSource.WIKI,psi4manual/4.0b4/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/freq-1.html
Availability,avail,available,"﻿. Frequency — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25,",MatchSource.WIKI,psi4manual/4.0b4/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/freq.html
Deployability,update,updated,"n. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/freq.html
Energy Efficiency,energy,energy,"﻿. Frequency — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25,",MatchSource.WIKI,psi4manual/4.0b4/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/freq.html
Performance,perform,performed,"﻿. Frequency — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Frequency¶. frequency(name[, func, dertype, irrep, molecule])[source]¶; Function to compute harmonic vibrational frequencies. Aliases :frequencies(), freq(). Returns:(float) Total electronic energy in Hartrees. Note; Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. Caution; Some features are not yet implemented. Buy a developer a coffee. Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. dertype (dertype) – 'hessian' || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – -1 || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; , requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). Previous topic; Optimize; Next topic; Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25,",MatchSource.WIKI,psi4manual/4.0b4/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/freq.html
Availability,avail,available,"T). ALGORITHM (DCFT). aliases module. all_casings() in module procutil. ANALYZE (CCENERGY). (CCRESPONSE). AO_BASIS (CCDENSITY). (CCENERGY). (CCLAMBDA). (CCSORT). (DCFT). (TRANSQT). (TRANSQT2). AQCCCORRELATIONENERGY. AQCCDIPOLEX. AQCCDIPOLEY. AQCCDIPOLEZ. AQCCQUADRUPOLEXX. AQCCQUADRUPOLEXY. AQCCQUADRUPOLEXZ. AQCCQUADRUPOLEYY. AQCCQUADRUPOLEYZ. AQCCQUADRUPOLEZZ. AQCCTOTALENERGY. arbitrary-order coupled-cluster theory; . CI. arbitrary-order perturbation theory; . CI. architectures. atom_at_position() LibmintsMolecule method. atom_entry() LibmintsMolecule method. atom_to_unique() LibmintsMolecule method. atom_to_unique_offset() LibmintsMolecule method. auto_fragments() in module wrappers. Molecule method. AVG_STATES (DETCI). AVG_WEIGHTS (DETCI). B. B_RAS3_MAX (DETCI). bad_option_syntax() in module input. BAKERJCC93 module, [1]. BAKERJCC96 module, [1]. banner() in module text. BASIC module, [1]. BASIS (DFMP2). (DFTSAPT). (MINTS). (SAPT). (SCF). basis set; . adding new. auxiliary. available by element. available by family. default auxiliary. extrapolation. multiple within molecule. specification. BASIS_GUESS (SCF). BasisFamily class in basislist. basislist module. basislistdunning module. basislistother module. BB_M_FILE (TRANSQT). BBB(T)CORRECTIONENERGY. BENCH (DFTSAPT). (GLOBALS). BENCH12 module, [1]. BENDAZZOLI (DETCI). BFS() in module molutil. Molecule method. BRUECKNER_MAXITER (FNOCC). BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY). BRUECKNERCONVERGED. bugs. build_b2plyp_superfunctional() in module functional. build_b2plypd2gr_superfunctional() in module functional. build_b2plypd2p4_superfunctional() in module functional. build_b2plypd3bj_superfunctional() in module functional. build_b2plypd3zero_superfunctional() in module functional. build_b3_x_functional() in module functional. build_b3lyp5_superfunctional() in module functional. build_b3lyp5d2gr_superfunctional() in module functional. build_b3lyp5d2p4_superfunctional() in module functional. build_b3lyp5d3bj_superfunctio",MatchSource.WIKI,psi4manual/4.0b4/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html
Deployability,install,installing,"SS (SCF). GUESS_VECTOR (DETCI). H. H0_BLOCK_COUPLING (DETCI). H0_BLOCK_COUPLING_SIZE (DETCI). H0_BLOCKSIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. has_inversion() LibmintsMolecule method. has_symmetry_element() LibmintsMolecule method. HBC6 module, [1]. HD_AVG (DETCI). HD_OTF (DETCI). HEFF4 (PSIMRCC). HEFF_PRINT (PSIMRCC). HESS_UPDATE (OPTKING). HESS_UPDATE_LIMIT (OPTKING). HESS_UPDATE_LIMIT_MAX (OPTKING). HESS_UPDATE_LIMIT_SCALE (OPTKING). HESS_UPDATE_USE_LAST (OPTKING). hessian() in module driver. HESSIAN_WRITE (FINDIF). HF. HFTOTALENERGY. highest_1() in module wrappers. HSG module, [1]. HTBH module, [1]. I. ICORE (DETCI). IGNORE_TAU (DCFT). import_ignorecase() in module procutil. IncompleteAtomError. inertia_tensor() LibmintsMolecule method. init_with_checkpoint() LibmintsMolecule method. init_with_io() LibmintsMolecule method. init_with_xyz() qcdb.libmintsmolecule.LibmintsMolecule class method. qcdb.molecule.Molecule class method. input module. installing. INTCO_FIXED_EQ_FORCE_CONSTANT (OPTKING). INTCOS_GENERATE_EXIT (OPTKING). INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (CCSORT). (DCFT). (DFMP2). (LMP2). (MRCC). (SAPT). (SCF). (TRANSQT). (TRANSQT2). invalidate() CartesianEntry method. CoordValue method. ZMatrixEntry method. ip_fitting() in module frac. IP_POLES (OCC). IRC; . geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). irrep_labels() LibmintsMolecule method. is_axis() LibmintsMolecule method. is_computed() CoordEntry method. is_equivalent_to() CoordEntry method. is_ghosted() CoordEntry method. is_linear_planar() LibmintsMolecule method. is_plane() LibmintsMolecule method. is_variable() LibmintsMolec",MatchSource.WIKI,psi4manual/4.0b4/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html
Energy Efficiency,charge,charge,ENERGY. CCSDT(Q)CORRELATIONENERGY. CCSDT(Q)TOTALENERGY. CCSDT-1aCORRELATIONENERGY. CCSDT-1aTOTALENERGY. CCSDT-1bCORRELATIONENERGY. CCSDT-1bTOTALENERGY. CCSDT-3CORRELATIONENERGY. CCSDT-3TOTALENERGY. CCSDTCORRELATIONENERGY. CCSDTOTALENERGY. CCSDTQ-1aCORRELATIONENERGY. CCSDTQ-1aTOTALENERGY. CCSDTQ-1bCORRELATIONENERGY. CCSDTQ-1bTOTALENERGY. CCSDTQ-3CORRELATIONENERGY. CCSDTQ-3TOTALENERGY. CCSDTQCORRELATIONENERGY. CCSDTQTOTALENERGY. CCSDTTOTALENERGY. CCTOTALENERGY. center_of_mass() LibmintsMolecule method. CEPA. CEPA(0)CORRELATIONENERGY. CEPA(0)DIPOLEX. CEPA(0)DIPOLEY. CEPA(0)DIPOLEZ. CEPA(0)QUADRUPOLEXX. CEPA(0)QUADRUPOLEXY. CEPA(0)QUADRUPOLEXZ. CEPA(0)QUADRUPOLEYY. CEPA(0)QUADRUPOLEYZ. CEPA(0)QUADRUPOLEZZ. CEPA(0)TOTALENERGY. CEPA(1)CORRELATIONENERGY. CEPA(1)TOTALENERGY. CEPA(2)CORRELATIONENERGY. CEPA(2)TOTALENERGY. CEPA(3)CORRELATIONENERGY. CEPA(3)TOTALENERGY. CEPA_LEVEL (FNOCC). CEPA_NO_SINGLES (FNOCC). CEPA_OS_SCALE (OCC). CEPA_SOS_SCALE (OCC). CEPA_SS_SCALE (OCC). CEPA_TYPE (OCC). charge; . molecule. charge() CoordEntry method. LibmintsMolecule method. charge_specified() LibmintsMolecule method. CHECK_C_ORTHONORM (TRANSQT). check_parentheses_and_brackets() in module input. CHOLESKY_TOLERANCE (FNOCC). CI. arbitrary-order coupled-cluster theory. arbitrary-order perturbation theory. basic-keywords. theory. CI_DIIS (MCSCF). CI_NUM_THREADS (DETCI). CIBLKS_PRINT (DETCI). CICORRELATIONENERGY. CIDIPOLEX. CIDIPOLEY. CIDIPOLEZ. CInCORRELATIONENERGY. CInTOTALENERGY. CIQUADRUPOLEXX. CIQUADRUPOLEXY. CIQUADRUPOLEXZ. CIQUADRUPOLEYY. CIQUADRUPOLEYZ. CIQUADRUPOLEZZ. CIROOTn->ROOTmDIPOLEX. CIROOTn->ROOTmDIPOLEY. CIROOTn->ROOTmDIPOLEZ. CIROOTn->ROOTmQUADRUPOLEXX. CIROOTn->ROOTmQUADRUPOLEXY. CIROOTn->ROOTmQUADRUPOLEXZ. CIROOTn->ROOTmQUADRUPOLEYY. CIROOTn->ROOTmQUADRUPOLEYZ. CIROOTn->ROOTmQUADRUPOLEZZ. CIROOTnCORRELATIONENERGY. CIROOTnDIPOLEX. CIROOTnDIPOLEY. CIROOTnDIPOLEZ. CIROOTnQUADRUPOLEXX. CIROOTnQUADRUPOLEXY. CIROOTnQUADRUPOLEXZ. CIROOTnQUADRUPOLEYY. CIROOTnQUADRUPOLEYZ. CIROOTnQ,MatchSource.WIKI,psi4manual/4.0b4/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html
Integrability,wrap,wrappers,"method. ADD_AUXILIARY_BONDS (OPTKING). add_dualfit() BasisFamily method. add_jkfit() BasisFamily method. add_rifit() BasisFamily method. addChargeAngstrom() QMMM method. addChargeBohr() QMMM method. addDiffuse() QMMM method. adding new; . basis set. database(). method alias. AEL (CCDENSITY). AIO_CPHF (SAPT). AIO_DF_INTS (SAPT). ALGORITHM (DCFT). aliases module. all_casings() in module procutil. ANALYZE (CCENERGY). (CCRESPONSE). AO_BASIS (CCDENSITY). (CCENERGY). (CCLAMBDA). (CCSORT). (DCFT). (TRANSQT). (TRANSQT2). AQCCCORRELATIONENERGY. AQCCDIPOLEX. AQCCDIPOLEY. AQCCDIPOLEZ. AQCCQUADRUPOLEXX. AQCCQUADRUPOLEXY. AQCCQUADRUPOLEXZ. AQCCQUADRUPOLEYY. AQCCQUADRUPOLEYZ. AQCCQUADRUPOLEZZ. AQCCTOTALENERGY. arbitrary-order coupled-cluster theory; . CI. arbitrary-order perturbation theory; . CI. architectures. atom_at_position() LibmintsMolecule method. atom_entry() LibmintsMolecule method. atom_to_unique() LibmintsMolecule method. atom_to_unique_offset() LibmintsMolecule method. auto_fragments() in module wrappers. Molecule method. AVG_STATES (DETCI). AVG_WEIGHTS (DETCI). B. B_RAS3_MAX (DETCI). bad_option_syntax() in module input. BAKERJCC93 module, [1]. BAKERJCC96 module, [1]. banner() in module text. BASIC module, [1]. BASIS (DFMP2). (DFTSAPT). (MINTS). (SAPT). (SCF). basis set; . adding new. auxiliary. available by element. available by family. default auxiliary. extrapolation. multiple within molecule. specification. BASIS_GUESS (SCF). BasisFamily class in basislist. basislist module. basislistdunning module. basislistother module. BB_M_FILE (TRANSQT). BBB(T)CORRECTIONENERGY. BENCH (DFTSAPT). (GLOBALS). BENCH12 module, [1]. BENDAZZOLI (DETCI). BFS() in module molutil. Molecule method. BRUECKNER_MAXITER (FNOCC). BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY). BRUECKNERCONVERGED. bugs. build_b2plyp_superfunctional() in module functional. build_b2plypd2gr_superfunctional() in module functional. build_b2plypd2p4_superfunctional() in module functional. build_b2plypd3bj_superfunctional(",MatchSource.WIKI,psi4manual/4.0b4/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html
Modifiability,plugin,plugin,"﻿. Index — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » . Index. Symbols; | A; | B; | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W; | X; | Y; | Z. Symbols. (T)CORRECTIONENERGY. --new-plugin <name>; . psi4 command line option. -a, --append; . psi4 command line option. -d, --debug; . psi4 command line option. -h, --help; . psi4 command line option. -i <filename>, --input <filename>; . psi4 command line option. -m, --messy; . psi4 command line option. -n <threads>, --nthread <threads>; . psi4 command line option. -o <filename>, --output <filename>; . psi4 command line option. -p <prefix>, --prefix <prefix>; . psi4 command line option. -v, --verbose; . psi4 command line option. -V, --version; . psi4 command line option. -w, --wipe; . psi4 command line option. A. a() CoordEntry static method. A_RAS3_MAX (DETCI). AA_M_FILE (TRANSQT). AAA(T)CORRECTIONENERGY. AAB(T)CORRECTIONENERGY. Ab initio Polarization Propagator. AB_M_FILE (TRANSQT). ABB(T)CORRECTIONENERGY. ABCD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). absolute_to_relative() Table method. ACENES module, [1]. ACPFCORRELATIONENERGY. ACPFDIPOLEX. ACPFDIPOLEY. ACPFDIPOLEZ. ACPFQUADRUPOLEXX. ACPFQUADRUPOLEXY. ACPFQUADRUPOLEXZ. ACPFQUADRUPOLEYY. ACPFQUADRUPOLEYZ. ACPFQUADRUPOLEZZ. ACPFTOTALENERGY. activate() in module molutil. activate_all_fragments() LibmintsMolecule method. ACTIVE (DETCI). (PSIMRCC). ADC. theory. add() in module qcdb.vecutil. add_atom() LibmintsMolecule method. ADD_AUXILIARY_BONDS (OPTKING). add_dualfit() BasisFamily method. add_jkfit() BasisFamily method. add_rifit() BasisFamily method. addChargeAngstrom() QMMM method. addChargeBohr() QMMM method. addDiffuse() QMMM method. adding new; . basis set. database(). method alias. AEL (CCDENSITY). AIO_CPHF (SAPT). AIO_DF_INTS (SAPT). ALGORITHM (DCFT). aliases module. all_casings() in module procutil. ANALYZE (CCENERGY). (CCRESPONSE). AO_BASIS (CCDENSITY). (CCENERGY",MatchSource.WIKI,psi4manual/4.0b4/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html
Performance,optimiz,optimization,"F). FRAG_MODE (OPTKING). FREEZE_CORE (GLOBALS). (SAPT). FREEZE_INTERFRAG (OPTKING). FREEZE_INTRAFRAG (OPTKING). frequency() in module driver. Frozen natural orbital coupled cluster. Frozen Natural Orbitals. FROZEN_BEND (OPTKING). FROZEN_DIHEDRAL (OPTKING). FROZEN_DISTANCE (OPTKING). FROZEN_DOCC (GLOBALS). (PSIMRCC). FROZEN_UOCC (GLOBALS). (PSIMRCC). fsymbol() LibmintsMolecule method. full_geometry() LibmintsMolecule method. FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). full_pg_n() LibmintsMolecule method. full_point_group_with_n() LibmintsMolecule method. FullPointGroupList LibmintsMolecule attribute. functional module. functional_list() in module functional. fx() LibmintsMolecule method. fxyz() LibmintsMolecule method. fy() LibmintsMolecule method. fz() LibmintsMolecule method. fZ() LibmintsMolecule method. FZC_A_FILE (TRANSQT). FZC_B_FILE (TRANSQT). FZC_FILE (TRANSQT). G. G_CONVERGENCE (OPTKING). GAUGE (CCDENSITY). (CCRESPONSE). gaussian_n module. GEOM_MAXITER (OPTKING). geometry optimization. IRC. constrained. convergence criteria. minima. output. transition state. geometry() in module molutil. LibmintsMolecule method. get_anchor_atom() LibmintsMolecule method. get_coord_value() LibmintsMolecule method. get_full_point_group() LibmintsMolecule method. get_memory() in module util. get_num_threads() in module util. get_psifile() in module procutil. get_variable() LibmintsMolecule method. getattr_ignorecase() in module procutil. getCartesian() PubChemObj method. getMoleculeString() PubChemObj method. getPubChemResults() in module pubchem. getSDF() PubChemObj method. getXYZFile() PubChemObj method. Ghost Atoms. gradient() in module driver. GRADIENT_WRITE (FINDIF). GUESS (SCF). GUESS_VECTOR (DETCI). H. H0_BLOCK_COUPLING (DETCI). H0_BLOCK_COUPLING_SIZE (DETCI). H0_BLOCKSIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. has_inversion() LibmintsMolecule method. has_symmetry_element() LibmintsMolecule method. HBC6 module, [1]. HD_AVG (DETCI). HD_",MatchSource.WIKI,psi4manual/4.0b4/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html
Usability,clear,clear,"IROOTn->ROOTmDIPOLEX. CIROOTn->ROOTmDIPOLEY. CIROOTn->ROOTmDIPOLEZ. CIROOTn->ROOTmQUADRUPOLEXX. CIROOTn->ROOTmQUADRUPOLEXY. CIROOTn->ROOTmQUADRUPOLEXZ. CIROOTn->ROOTmQUADRUPOLEYY. CIROOTn->ROOTmQUADRUPOLEYZ. CIROOTn->ROOTmQUADRUPOLEZZ. CIROOTnCORRELATIONENERGY. CIROOTnDIPOLEX. CIROOTnDIPOLEY. CIROOTnDIPOLEZ. CIROOTnQUADRUPOLEXX. CIROOTnQUADRUPOLEXY. CIROOTnQUADRUPOLEXZ. CIROOTnQUADRUPOLEYY. CIROOTnQUADRUPOLEYZ. CIROOTnQUADRUPOLEZZ. CIROOTnTOTALENERGY. CIS_AD_STATES (CPHF). CIS_AMPLITUDE_CUTOFF (CPHF). CIS_DOPDM_STATES (CPHF). CIS_MEM_SAFETY_FACTOR (CPHF). CIS_NO_STATES (CPHF). CIS_OPDM_STATES (CPHF). CIS_TOPDM_STATES (CPHF). CISDCORRELATIONENERGY. CISDDIPOLEX. CISDDIPOLEY. CISDDIPOLEZ. CISDQUADRUPOLEXX. CISDQUADRUPOLEXY. CISDQUADRUPOLEXZ. CISDQUADRUPOLEYY. CISDQUADRUPOLEYZ. CISDQUADRUPOLEZZ. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module util. compare_matrices() in module qcdb.psiutil. in module util. compare_strings() in module util. compare_values() in module qcdb.psiutil. in module util. compare_vectors() in module util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. COMPUTE_MP4_TRIPLES (FNOCC). COMPUTE_TRIPLES (FNOCC). CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() in module wrappers. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module util. copy_file_to_scratch() in module util. CORE module, [1]. corl_xtpl_helgaker_2() in module wra",MatchSource.WIKI,psi4manual/4.0b4/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html
Availability,avail,available,"lectronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; in Eq. (1). (1); Unl",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables-1.html
Deployability,configurat,configuration," component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables-1.html
Energy Efficiency,energy,energy,"rs in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; Th",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables-1.html
Modifiability,variab,variable,"﻿. PSI Variables by Alpha — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The t",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables-1.html
Performance,optimiz,optimizer,"CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DFT FUNCTIONAL TOTAL ENERGY¶; The tot",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables-1.html
Availability,avail,available,"lectronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; in Eq. (1). (1); Unl",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables.html
Deployability,configurat,configuration," component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables.html
Energy Efficiency,energy,energy,"rs in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n TOTAL ENERGY¶; Th",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables.html
Modifiability,variab,variable,"﻿. PSI Variables by Alpha — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Components of the coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The t",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables.html
Performance,optimiz,optimizer,"CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. DFT FUNCTIONAL TOTAL ENERGY¶; The tot",MatchSource.WIKI,psi4manual/4.0b4/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/glossary_psivariables.html
Deployability,update,updated,"ler–Plesset Perturbation Theories; OCC: Conventional Møller–Plesset Perturbation Theories; CC: Coupled Cluster Methods; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; SAPT: Symmetry-Adapted Perturbation Theory; ADC: Ab Initio Polarization Propagator; Geometry Optimization; Evaluation of One-Electron Properties. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay; Interface to DFTD3 by S. Grimme; Interface to Molden. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; gaussian_n; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. Next topic; Introduction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/index.html
Integrability,wrap,wrappers,"ler–Plesset Perturbation Theories; OCC: Conventional Møller–Plesset Perturbation Theories; CC: Coupled Cluster Methods; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; SAPT: Symmetry-Adapted Perturbation Theory; ADC: Ab Initio Polarization Propagator; Geometry Optimization; Evaluation of One-Electron Properties. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay; Interface to DFTD3 by S. Grimme; Interface to Molden. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; gaussian_n; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. Next topic; Introduction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/index.html
Availability,avail,available,"preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). POSIX threads (Pthreads) library (optional). Python interpreter (2.6 or higher; psi4 is Python3 compatible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). For Ubuntu users, you will need the following packages installed:; gfortran [for linking to BLAS/LAPACK], g++, autoconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installation¶; This section outlines the main steps of configuring, compiling, and; installing PSI. More detail is given below in Section III. Autoconf. For unusual architectures (or for developers working in the development; branch), one needs to first run autoconf to generate; the file “configure” in the top-level psi4 directory. For most Linux; and Mac compilations, this should not be necessary because the configure; file provided with PSI4 should be sufficient. To replace the general; configure file with one specific to your architecture, in the top-level; psi4 directory, run autoconf:; >>> autoconf. Configuration and Compilation; Make an object directory in which you can compile the cod",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Deployability,install,installed,"III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. I. Compilation Prerequisites¶. C++ Compiler. F77 Compiler (the F95 compiler, gfortran, with gcc-4.X will work). Note; The F77 compiler is only used to determine the symbol-naming; convention of and some system routines for the BLAS and LAPACK libraries; on a few architectures. It is optional in a few cases (e.g. Mac OS X; systems). Optimized BLAS library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). Optimized LAPACK library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). POSIX threads (Pthreads) library (optional). Python interpreter (2.6 or higher; psi4 is Python3 compatible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). For Ubuntu users, you will need the following packages installed:; gfortran [for linking to BLAS/LAPACK], g++, autoconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installation¶; This section out",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Energy Efficiency,efficient,efficient,"nding speed and efficiency of the available BLAS and LAPACK libraries; (especially the former). In addition, the most common compilation problems; involve these libraries. Users may therefore wish to consider the following; BLAS and LAPACK recommendations when building PSI4:. It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat. This library is usually just the; netlib distribution and is completely unoptimized. PSI4’s; performance will suffer if you choose this route.; The choice of LAPACK is less critical, and so the unoptimized; netlib distribution is acceptable. If you do choose to use the; RedHat/Fedora stock BLAS and LAPACK, make sure that the blas-devel; and lapack-devel packages are installed. Perhaps the best choice, if you have it available, is; Intel’s MKL library, which includes BLAS and LAPACK (note: use; version 11 or later, we had difficulty with version 10 for very; large coupled-cluster computations). MKL is efficient and works; well in threaded mode.; Otherwise, the simplest choice is to use ATLAS; (http://math-atlas.sourceforge.net/), which is readily available; on all Linux distributions. Another alternative is OpenBLAS; (https://github.com/xianyi/OpenBLAS, formerly GotoBLAS). These; work well on nearly every achitecture to which the PSI4 developers; have access, though we have identified at least one case in which; the Goto libraries yielded faulty DGEMM calls. On Mac OS X; systems, the vecLib package that comes with Xcode works well. PSI4 does not require a Fortran compiler, unless the resident BLAS; and LAPACK libraries require Fortran-based system libraries. If you see; compiler complaints about missing symbols like “do_fio” or “e_wsfe”, then; your libraries were most likely compiled with g77 or gfortran, which; require -lg2c to resolve the Fortran I/O calls. Use of the same gcc; package for PSI4 should normally resolve this problem. The PSI4 configure script can often identify and use several; diffe",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Integrability,rout,routines,"﻿. Installation Instructions for PSI4 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » . Installation Instructions for PSI4¶. I. Compilation Prerequisites; II. Brief Summary of Configuration, Compilation, and Installation; III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. I. Compilation Prerequisites¶. C++ Compiler. F77 Compiler (the F95 compiler, gfortran, with gcc-4.X will work). Note; The F77 compiler is only used to determine the symbol-naming; convention of and some system routines for the BLAS and LAPACK libraries; on a few architectures. It is optional in a few cases (e.g. Mac OS X; systems). Optimized BLAS library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). Optimized LAPACK library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). POSIX threads (Pthreads) library (optional). Python interpreter (2.6 or higher; psi4 is Python3 compatible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or ",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Modifiability,config,config,"III. Detailed Installation Instructions; IV. Recommendations for BLAS and LAPACK libraries; V. Miscellaneous architecture-specific notes; VI. Common Problems with PSI Compilation. I. Compilation Prerequisites¶. C++ Compiler. F77 Compiler (the F95 compiler, gfortran, with gcc-4.X will work). Note; The F77 compiler is only used to determine the symbol-naming; convention of and some system routines for the BLAS and LAPACK libraries; on a few architectures. It is optional in a few cases (e.g. Mac OS X; systems). Optimized BLAS library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). Optimized LAPACK library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). POSIX threads (Pthreads) library (optional). Python interpreter (2.6 or higher; psi4 is Python3 compatible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). For Ubuntu users, you will need the following packages installed:; gfortran [for linking to BLAS/LAPACK], g++, autoconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installation¶; This section out",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Performance,optimiz,optimized," file (all on one long line). Replace the; text after prefix with whatever directory you want to use for your; installation directory. Intel compiler with MKL math library [highly recommended; if you don’t use; this, then at least make sure you have a threaded BLAS (see BLAS; recommendations at Section IV below)]; ../configure --prefix=/usr/local/psi4 --with-blas='-mkl' --with-cc=icc --with-cxx=icpc --with-fc=ifort --with-opt='-O2 -static -no-prec-div' --with-incdirs=-mkl. Note; It’s -mkl, not -lmkl. Warning; There seems to be a problem with icpc 12.0.2 and possibly earlier; 12.0 versions, giving an error like:; error: identifier ""__is_trivial"" is undefined. Use at least version 12.0.4. Gnu compiler with ACML math library (better than MKL for AMD processors); ../configure --prefix=/usr/local/psi4 --with-cc=gcc --with-cxx=g++ --with-fc=gfortran --with-opt=-O2 --with-blas=""-L/opt/acml5.2.0/gfortran64_mp/lib -lacml_mp"" --with-lapack=""-L/opt/acml5.2.0/gfortran64_mp/lib -lacml_mp"". g++, optimized; ../configure --prefix=/usr/local/psi4. g++, for debugging; ../configure --prefix=/usr/local/psi4 --without-opt --with-debug. Compiling for Mac; PSI4 has been compiled on OS X 10.7 (Lion) and 10.8 (Mountain Lion).; To get the compilers needed, it’s easiest to install XCode.; However, XCode does not provide a Fortran compiler. Although; Fortran compilers are not needed to compile Psi, a broken one can; prevent Psi from configuring properly. Do not download the latest; version of GFortran from the HPC website; this is unlikely to be; compatible with your version of GCC. Instead, you should run gcc; -v to find out what version of GCC you’re using, and then; download the corresponding GFortran from; http://r.research.att.com/tools/. If you configure Psi on a Mac; without any Fortran compiler it will set itself up correctly, so; this is only necessary if you want a Fortran compiler for other; purposes. You can configure Psi by adding something like; ../configure --with-plugins. to th",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Safety,detect,detected," Note; The F77 compiler is only used to determine the symbol-naming; convention of and some system routines for the BLAS and LAPACK libraries; on a few architectures. It is optional in a few cases (e.g. Mac OS X; systems). Optimized BLAS library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). Optimized LAPACK library (preferably NOT one supplied by a standard; Linux distribution; see recommendations at Section IV below). POSIX threads (Pthreads) library (optional). Python interpreter (2.6 or higher; psi4 is Python3 compatible). Python developer libraries corresponding to your interpreter. Note; To check to see if you have the Python developer libraries; installed look for the Python config program. If your Python interpreter; is named python look for the config program python-config,; likewise if your interpreter is python2.6, the config program is; python2.6-config. If you cannot find the config program the; developer libraries will not be detected and the PSI4 configure script; will fail. The library is called python-devel for Fedora and; python-dev for Ubuntu. GNU utilities: (see http://www.gnu.org). make. autoconf (version 2.52 or higher). Note; autoconf is only needed for special; architectures or to compile the; development branch. aclocal. fileutils (esp. install). For documentation: (available pre-built off http://www.psicode.org). latex; sphinx (version 1.1 or higher); dvipng (for latex math in html). For Ubuntu users, you will need the following packages installed:; gfortran [for linking to BLAS/LAPACK], g++, autoconf, python-dev. II. Brief Summary of Configuration, Compilation, and Installation¶; This section outlines the main steps of configuring, compiling, and; installing PSI. More detail is given below in Section III. Autoconf. For unusual architectures (or for developers working in the development; branch), one needs to first run autoconf to generate; the file “configure” in the top-level psi4",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Security,access,access,"available at http://sirius.chem.vt.edu/psi4manual/latest/index.html; (link “docs” off http://www.psicode.org), and it is automatically updated. However,; if your system has the appropriate utilities (notably the sphinx package; and LaTeX), you may build the package documentation from the top-level; $objdir by running make doc. The resulting files will appear in the; $prefix/doc area. Step 6: Cleaning; All object files and libraries can be removed to save disk space by running; make clean in $objdir. Step 7: User Configuration; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location /usr/local/psi, then in C shell,; the user should add something like the following to their .cshrc file:; setenv PSI /usr/local/psi; set path = ($path $PSI/bin). Next, the user needs to tell the PSI4 I/O manager how to handle scratch files.; Identify the path to a fast scratch disk for which the user has write access.; If the local /tmp volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended. Warning; Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the network; and negatively impact other users. Specify scratch location by editing the .cshrc file to set the scratch; environment variable PSI_SCRATCH. If the selected location is; /scratch/user, add something like the following:; setenv PSI_SCRATCH /scratch/user. In a bash shell, the corresponding commands to be added to .bashrc is; the following:; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user. More advanced control of scratch files and is handled through a; .psi4rc file, which is discussed at section Scratch Files and the ~/.psi4rc File. Note; For developers: during compilation and testing, PSI4 finds its basis sets,; gri",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Testability,test,tests,"l psi4 directory. For most Linux; and Mac compilations, this should not be necessary because the configure; file provided with PSI4 should be sufficient. To replace the general; configure file with one specific to your architecture, in the top-level; psi4 directory, run autoconf:; >>> autoconf. Configuration and Compilation; Make an object directory in which you can compile the code; >>> mkdir obj. Next you need to configure the code. Find a configuration; option line or combination of; configuration options at Section III(1)A. Either, use the line directly:; >>> cd obj; >>> ../configure [your compilation configuration options here]. or, save your configuration options for a future compilation.; In the top-level psi4 directory, create a file like “do-configure” with; the configure command and options on one line.; >>> cat do-configure; ../configure [your compilation configuration options here]; >>> chmod u+x do-configure; >>> cd obj; >>> ../do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommend that you choose for the top-level psi4 source; directory something other than /usr/local/psi; $HOME/psi4 or; /usr/local/src/psi4 are convenient choices. Next, in the top-level psi4; source directory you’ve chosen, first run autoconf to generate the configure; script from configure.ac. It is best to keep the source code separate; from the compilation area, so you must first choose a subdirectory for; compilation of the codes. A simple option is psi4/objdir, which should; work for most environments. However, i",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Usability,simpl,simple,"./do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommend that you choose for the top-level psi4 source; directory something other than /usr/local/psi; $HOME/psi4 or; /usr/local/src/psi4 are convenient choices. Next, in the top-level psi4; source directory you’ve chosen, first run autoconf to generate the configure; script from configure.ac. It is best to keep the source code separate; from the compilation area, so you must first choose a subdirectory for; compilation of the codes. A simple option is psi4/objdir, which should; work for most environments. However, if you need executables for several; architectures, you should choose more meaningful subdirectory names. Note; The compilation directory will be referred to as $objdir for the; remainder of these instructions. In $objdir, run the configure script found in the PSI4 top-level source; directory. This script will scan your system to locate certain libraries,; header files, etc. needed for complete compilation. The script accepts a; number of options, all of which are listed above. The most important of; these is the --prefix option, which selects the installation directory for; the executables, the libraries, header files, basis set data, and other; administrative files. The default --prefix is /usr/local/psi. Note; The configure script’s --prefix directory will be referred to as; $prefix for the remainder of these instructions. Besides --prefix, PSI often needs a few additional options for the; configure script. To make it easy to recompile ",MatchSource.WIKI,psi4manual/4.0b4/installfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html
Deployability,update,updated,"Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/intercalls-1.html
Energy Efficiency,energy,energy,"﻿. Function Intercalls — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b4/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/intercalls-1.html
Performance,optimiz,optimize,"﻿. Function Intercalls — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b4/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/intercalls-1.html
Security,validat,validated,"﻿. Function Intercalls — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b4/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/intercalls-1.html
Deployability,update,updated,"Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/intercalls.html
Energy Efficiency,energy,energy,"﻿. Function Intercalls — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b4/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/intercalls.html
Performance,optimiz,optimize,"﻿. Function Intercalls — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b4/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/intercalls.html
Security,validat,validated,"﻿. Function Intercalls — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Function Intercalls¶; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions. Caller; Callee.  ; cp; db; opt; cbs; energy. Counterpoise Correct;  ; —; Y; Y; Y. Database; —;  ; Y; Y; Y. Optimize; —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Energy; —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap_all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Previous topic; Spectroscopic Constants for Diatomics; Next topic; Customization: Adding Simple Extensions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [be",MatchSource.WIKI,psi4manual/4.0b4/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/intercalls.html
Deployability,update,updated,"﻿. Interfaces: Enhancing PSI4 Capabilities — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilites have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to MRCC by M. Kállay; Installation; Running MRCC. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to Molden. Previous topic; Evaluation of One-Electron Properties; Next topic; Interface to MRCC by M. Kállay; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/interfacing-1.html
Deployability,update,updated,"﻿. Interfaces: Enhancing PSI4 Capabilities — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilites have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to MRCC by M. Kállay; Installation; Running MRCC. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to Molden. Previous topic; Evaluation of One-Electron Properties; Next topic; Interface to MRCC by M. Kállay; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/interfacing.html
Availability,avail,available,"mate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci. 2, 556 (2012).; (doi: 10.1002/wcms.93). Depending on the particular modules used, the user may also wish to; cite some of the following references for theoretical, algorithmic,; or implementa",MatchSource.WIKI,psi4manual/4.0b4/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction-1.html
Deployability,configurat,configuration,"etical, algorithmic,; or implementation contributions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below). Density Cumulant Functional Theory (DCFT)¶. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423).; “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/4.0b4/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction-1.html
Energy Efficiency,efficient,efficiently,"﻿. Introduction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic s",MatchSource.WIKI,psi4manual/4.0b4/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction-1.html
Integrability,rout,routine,"﻿. Introduction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic s",MatchSource.WIKI,psi4manual/4.0b4/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction-1.html
Modifiability,config,configuration,"etical, algorithmic,; or implementation contributions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below). Density Cumulant Functional Theory (DCFT)¶. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423).; “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/4.0b4/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction-1.html
Performance,optimiz,optimization," machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci. 2, 556 (2012).; (doi: 1",MatchSource.WIKI,psi4manual/4.0b4/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction-1.html
Testability,test,tested,"mponent and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134). Bozkaya and C. D. Sherrill, (unpublished). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or 12.1 (we have had; trouble with version 12.0). See Sec. Compiling and Installing for details. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient, and Frequency. Summary of theoretical methods available in PSI4. Method; Energy; Gradient; Reference; Parallelism. SCF (HF and DFT); Y; Y [4]; RHF/ROHF/UHF/RKS/UKS; threaded. DF-SCF (HF and DFT); Y; Y [4]; RHF/ROHF/UHF/RKS/UKS; threaded. DCFT; Y; Y; UHF; p",MatchSource.WIKI,psi4manual/4.0b4/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction-1.html
Usability,simpl,simple,"﻿. Introduction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic s",MatchSource.WIKI,psi4manual/4.0b4/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction-1.html
Availability,avail,available,"mate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci. 2, 556 (2012).; (doi: 10.1002/wcms.93). Depending on the particular modules used, the user may also wish to; cite some of the following references for theoretical, algorithmic,; or implementa",MatchSource.WIKI,psi4manual/4.0b4/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction.html
Deployability,configurat,configuration,"etical, algorithmic,; or implementation contributions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below). Density Cumulant Functional Theory (DCFT)¶. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423).; “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/4.0b4/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction.html
Energy Efficiency,efficient,efficiently,"﻿. Introduction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic s",MatchSource.WIKI,psi4manual/4.0b4/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction.html
Integrability,rout,routine,"﻿. Introduction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic s",MatchSource.WIKI,psi4manual/4.0b4/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction.html
Modifiability,config,configuration,"etical, algorithmic,; or implementation contributions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below). Density Cumulant Functional Theory (DCFT)¶. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423).; “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/4.0b4/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction.html
Performance,optimiz,optimization," machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci. 2, 556 (2012).; (doi: 1",MatchSource.WIKI,psi4manual/4.0b4/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction.html
Testability,test,tested,"mponent and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134). Bozkaya and C. D. Sherrill, (unpublished). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or 12.1 (we have had; trouble with version 12.0). See Sec. Compiling and Installing for details. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient, and Frequency. Summary of theoretical methods available in PSI4. Method; Energy; Gradient; Reference; Parallelism. SCF (HF and DFT); Y; Y [4]; RHF/ROHF/UHF/RKS/UKS; threaded. DF-SCF (HF and DFT); Y; Y [4]; RHF/ROHF/UHF/RKS/UKS; threaded. DCFT; Y; Y; UHF; p",MatchSource.WIKI,psi4manual/4.0b4/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction.html
Usability,simpl,simple,"﻿. Introduction — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4: An open-source ab initio electronic s",MatchSource.WIKI,psi4manual/4.0b4/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction.html
Availability,avail,available,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DCFT: Density Cumulant Functional Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Minimal Input; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. PSIMRCC Implementati",MatchSource.WIKI,psi4manual/4.0b4/methods-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/methods-1.html
Deployability,configurat,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DCFT: Density Cumulant Functional Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Minimal Input; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. PSIMRCC Implementati",MatchSource.WIKI,psi4manual/4.0b4/methods-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/methods-1.html
Modifiability,config,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DCFT: Density Cumulant Functional Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Minimal Input; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. PSIMRCC Implementati",MatchSource.WIKI,psi4manual/4.0b4/methods-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/methods-1.html
Availability,avail,available,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DCFT: Density Cumulant Functional Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Minimal Input; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. PSIMRCC Implementati",MatchSource.WIKI,psi4manual/4.0b4/methods.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/methods.html
Deployability,configurat,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DCFT: Density Cumulant Functional Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Minimal Input; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. PSIMRCC Implementati",MatchSource.WIKI,psi4manual/4.0b4/methods.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/methods.html
Modifiability,config,configuration,"﻿. Theoretical Methods: SCF to FCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Theoretical Methods: SCF to FCI¶; Several electronic structure methods are available in the PSI4; package, from Hartree–Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; Keywords by Module. Notes on Options; HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations. DCFT: Density Cumulant Functional Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Minimal Input; Recommendations. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; Advanced Keywords. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords. CC: Coupled Cluster Methods; Basic Keywords; Larger Calculations; Excited State Coupled Cluster Calculations; Linear Response (CCLR) Calculations. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. PSIMRCC Implementati",MatchSource.WIKI,psi4manual/4.0b4/methods.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/methods.html
Availability,avail,available,"﻿. Interface to Molden — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to Molden¶; Code author: Justin M. Turney; Section author: C. David Sherrill; PSI4 contains an interface to the Molden program. Molden is a; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at; http://www.cmbi.ru.nl/molden/. Molden can; plot atomic orbitals, densities, electrostatic potentials (ESP’s), etc.; PSI4 can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the; so-called Molden format. This file is; written by the SCF module (see Section SCF); if the user sets the MOLDEN_WRITE keyword to true. This Molden file is; also used to pass information between PSI4 and WebMO, if PSI4; computations are invoked using the WebMO GUI. The filename of the; Molden file ends in ”.molden”, and the prefix is determined by; WRITER_FILE_LABEL (if set), or else by the name of the output; file plus the name of the current molecule. Previous topic; Interface to DFTD3 by S. Grimme; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/molden-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/molden-1.html
Deployability,update,updated,"﻿. Interface to Molden — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to Molden¶; Code author: Justin M. Turney; Section author: C. David Sherrill; PSI4 contains an interface to the Molden program. Molden is a; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at; http://www.cmbi.ru.nl/molden/. Molden can; plot atomic orbitals, densities, electrostatic potentials (ESP’s), etc.; PSI4 can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the; so-called Molden format. This file is; written by the SCF module (see Section SCF); if the user sets the MOLDEN_WRITE keyword to true. This Molden file is; also used to pass information between PSI4 and WebMO, if PSI4; computations are invoked using the WebMO GUI. The filename of the; Molden file ends in ”.molden”, and the prefix is determined by; WRITER_FILE_LABEL (if set), or else by the name of the output; file plus the name of the current molecule. Previous topic; Interface to DFTD3 by S. Grimme; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/molden-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/molden-1.html
Integrability,interface,interface,"﻿. Interface to Molden — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to Molden¶; Code author: Justin M. Turney; Section author: C. David Sherrill; PSI4 contains an interface to the Molden program. Molden is a; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at; http://www.cmbi.ru.nl/molden/. Molden can; plot atomic orbitals, densities, electrostatic potentials (ESP’s), etc.; PSI4 can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the; so-called Molden format. This file is; written by the SCF module (see Section SCF); if the user sets the MOLDEN_WRITE keyword to true. This Molden file is; also used to pass information between PSI4 and WebMO, if PSI4; computations are invoked using the WebMO GUI. The filename of the; Molden file ends in ”.molden”, and the prefix is determined by; WRITER_FILE_LABEL (if set), or else by the name of the output; file plus the name of the current molecule. Previous topic; Interface to DFTD3 by S. Grimme; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/molden-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/molden-1.html
Availability,avail,available,"﻿. Interface to Molden — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to Molden¶; Code author: Justin M. Turney; Section author: C. David Sherrill; PSI4 contains an interface to the Molden program. Molden is a; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at; http://www.cmbi.ru.nl/molden/. Molden can; plot atomic orbitals, densities, electrostatic potentials (ESP’s), etc.; PSI4 can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the; so-called Molden format. This file is; written by the SCF module (see Section SCF); if the user sets the MOLDEN_WRITE keyword to true. This Molden file is; also used to pass information between PSI4 and WebMO, if PSI4; computations are invoked using the WebMO GUI. The filename of the; Molden file ends in ”.molden”, and the prefix is determined by; WRITER_FILE_LABEL (if set), or else by the name of the output; file plus the name of the current molecule. Previous topic; Interface to DFTD3 by S. Grimme; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/molden.html
Deployability,update,updated,"﻿. Interface to Molden — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to Molden¶; Code author: Justin M. Turney; Section author: C. David Sherrill; PSI4 contains an interface to the Molden program. Molden is a; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at; http://www.cmbi.ru.nl/molden/. Molden can; plot atomic orbitals, densities, electrostatic potentials (ESP’s), etc.; PSI4 can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the; so-called Molden format. This file is; written by the SCF module (see Section SCF); if the user sets the MOLDEN_WRITE keyword to true. This Molden file is; also used to pass information between PSI4 and WebMO, if PSI4; computations are invoked using the WebMO GUI. The filename of the; Molden file ends in ”.molden”, and the prefix is determined by; WRITER_FILE_LABEL (if set), or else by the name of the output; file plus the name of the current molecule. Previous topic; Interface to DFTD3 by S. Grimme; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/molden.html
Integrability,interface,interface,"﻿. Interface to Molden — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to Molden¶; Code author: Justin M. Turney; Section author: C. David Sherrill; PSI4 contains an interface to the Molden program. Molden is a; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at; http://www.cmbi.ru.nl/molden/. Molden can; plot atomic orbitals, densities, electrostatic potentials (ESP’s), etc.; PSI4 can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the; so-called Molden format. This file is; written by the SCF module (see Section SCF); if the user sets the MOLDEN_WRITE keyword to true. This Molden file is; also used to pass information between PSI4 and WebMO, if PSI4; computations are invoked using the WebMO GUI. The filename of the; Molden file ends in ”.molden”, and the prefix is determined by; WRITER_FILE_LABEL (if set), or else by the name of the output; file plus the name of the current molecule. Previous topic; Interface to DFTD3 by S. Grimme; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/molden.html
Availability,error,error,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ",MatchSource.WIKI,psi4manual/4.0b4/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc-1.html
Deployability,update,updated,"C simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; Interface to DFTD3 by S. Grimme; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc-1.html
Energy Efficiency,energy,energy,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ",MatchSource.WIKI,psi4manual/4.0b4/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc-1.html
Integrability,interface,interface,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ",MatchSource.WIKI,psi4manual/4.0b4/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc-1.html
Performance,perform,perform,"es: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6,",MatchSource.WIKI,psi4manual/4.0b4/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc-1.html
Usability,simpl,simply,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ",MatchSource.WIKI,psi4manual/4.0b4/mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc-1.html
Availability,error,error,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ",MatchSource.WIKI,psi4manual/4.0b4/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc.html
Deployability,update,updated,"C simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; Interface to DFTD3 by S. Grimme; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc.html
Energy Efficiency,energy,energy,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ",MatchSource.WIKI,psi4manual/4.0b4/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc.html
Integrability,interface,interface,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ",MatchSource.WIKI,psi4manual/4.0b4/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc.html
Performance,perform,perform,"es: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6,",MatchSource.WIKI,psi4manual/4.0b4/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc.html
Usability,simpl,simply,"﻿. Interface to MRCC by M. Kállay — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ",MatchSource.WIKI,psi4manual/4.0b4/mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc.html
Availability,toler,tolerance,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_c-1.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_c-1.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_c-1.html
Availability,toler,tolerance,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_c.html
Deployability,update,updated,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_c.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Notes on Options¶. Note; The options referred to in the Theoretical Methods: SCF to FCI section below; and indexed in Keywords by Module are placed in set blocks as; described in Job Control, not as arguments to a Python function; (like energy()). Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The few exceptions are documented for the database() function,; where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number of an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to , the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Previous topic; Theoretical Methods: SCF to FCI; Next topic; HF: Hartree–Fock Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_c.html
Deployability,update,updated,"[beta4] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_py-1.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoki",MatchSource.WIKI,psi4manual/4.0b4/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_py-1.html
Integrability,wrap,wrapped,"[beta4] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_py-1.html
Performance,optimiz,optimize,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoki",MatchSource.WIKI,psi4manual/4.0b4/notes_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_py-1.html
Deployability,update,updated,"[beta4] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_py.html
Energy Efficiency,energy,energy,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoki",MatchSource.WIKI,psi4manual/4.0b4/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_py.html
Integrability,wrap,wrapped,"[beta4] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_py.html
Performance,optimiz,optimize,"﻿. Notes on Options — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoki",MatchSource.WIKI,psi4manual/4.0b4/notes_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_py.html
Availability,avail,available,"ns it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. OCC: Conventional Møller–Plesset Perturbation Theories¶; Module: Keywords, PSI Variables, OCC; PSI4 also has a non-density-fitted MP2 algorithm for RHF and UHF; energies and gradients. The; density-fitted module DFMP2 is always the default, so to access the; conventional MP2 code, set MP2_TYPE to conv and call as usual; energy('mp2')/optimize('mp2'). Basic Keywords¶. MP2_TYPE¶. Algorithm to use for non-OO MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. Non-orbital-optimized counterparts to higher order MPn methods are also; available. Summarizing from tables above, the following methods are; available and can be controlled through OCC keywards. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. mp3; MP3; Y; Y; RHF/UHF. mp2.5; MP2.5; Y; Y; RHF/UHF. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Table Of Contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; WFN_TYPE; ORB_OPT. Advanced Keywords; OPT_METHOD; MO_DIIS_NUM_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; NAT_ORBS; OCC_ORBS_PRINT; TPDM_ABCD_TYPE; DO_DIIS; DO_LEVEL_SHIFT. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords; MP2_TYPE; MP2_OS_SCALE; MP2_SS_SCALE. Previous topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation ",MatchSource.WIKI,psi4manual/4.0b4/occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html
Deployability,update,updated,"bation Theories¶; Module: Keywords, PSI Variables, OCC; PSI4 also has a non-density-fitted MP2 algorithm for RHF and UHF; energies and gradients. The; density-fitted module DFMP2 is always the default, so to access the; conventional MP2 code, set MP2_TYPE to conv and call as usual; energy('mp2')/optimize('mp2'). Basic Keywords¶. MP2_TYPE¶. Algorithm to use for non-OO MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. Non-orbital-optimized counterparts to higher order MPn methods are also; available. Summarizing from tables above, the following methods are; available and can be controlled through OCC keywards. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. mp3; MP3; Y; Y; RHF/UHF. mp2.5; MP2.5; Y; Y; RHF/UHF. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Table Of Contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; WFN_TYPE; ORB_OPT. Advanced Keywords; OPT_METHOD; MO_DIIS_NUM_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; NAT_ORBS; OCC_ORBS_PRINT; TPDM_ABCD_TYPE; DO_DIIS; DO_LEVEL_SHIFT. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords; MP2_TYPE; MP2_OS_SCALE; MP2_SS_SCALE. Previous topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Next topic; CC: Coupled Cluster Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html
Energy Efficiency,energy,energy,"bed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical; molecular properties such as vibrational frequencies. However, orbital optimized MP2 (hence Orbital optimized MP3); will solve this N-representability problem by disregarding orbital response contribution of one-partical; density matrix.; Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched; geometries [Bozkaya:2012:odtl]. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster ba",MatchSource.WIKI,psi4manual/4.0b4/occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html
Integrability,depend,depending,"P2.5 Methods. Name; Calls Method; Energy; Gradient; Reference. mp2.5; MP2.5; Y; Y; RHF/UHF. omp2.5; Orbital-Optimized MP2.5; Y; Y; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized CEPA methods currently supported in PSI4 are outlined in Table OCEPA Methods. Name; Calls Method; Energy; Gradient; Reference. ocepa; Orbital-Optimized CEPA; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-ocepa; Spin-Component Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-ocepa; Spin-Opposite Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-8. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer;",MatchSource.WIKI,psi4manual/4.0b4/occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html
Performance,optimiz,optimized,"﻿. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories¶; Code author: Ugur Bozkaya; Section author: Ugur Bozkaya; Module: Keywords, PSI Variables, OCC. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem a",MatchSource.WIKI,psi4manual/4.0b4/occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html
Safety,avoid,avoids,"ical Methods: SCF to FCI ». OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories¶; Code author: Ugur Bozkaya; Section author: Ugur Bozkaya; Module: Keywords, PSI Variables, OCC. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). Th",MatchSource.WIKI,psi4manual/4.0b4/occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html
Security,access,access,"SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. OCC: Conventional Møller–Plesset Perturbation Theories¶; Module: Keywords, PSI Variables, OCC; PSI4 also has a non-density-fitted MP2 algorithm for RHF and UHF; energies and gradients. The; density-fitted module DFMP2 is always the default, so to access the; conventional MP2 code, set MP2_TYPE to conv and call as usual; energy('mp2')/optimize('mp2'). Basic Keywords¶. MP2_TYPE¶. Algorithm to use for non-OO MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. Non-orbital-optimized counterparts to higher order MPn methods are also; available. Summarizing from tables above, the following methods are; available and can be controlled through OCC keywards. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. mp3; MP3; Y; Y; RHF/UHF. mp2.5; MP2.5; Y; Y; RHF/UHF. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Table Of Contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; ",MatchSource.WIKI,psi4manual/4.0b4/occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html
Availability,avail,available,"ns it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. OCC: Conventional Møller–Plesset Perturbation Theories¶; Module: Keywords, PSI Variables, OCC; PSI4 also has a non-density-fitted MP2 algorithm for RHF and UHF; energies and gradients. The; density-fitted module DFMP2 is always the default, so to access the; conventional MP2 code, set MP2_TYPE to conv and call as usual; energy('mp2')/optimize('mp2'). Basic Keywords¶. MP2_TYPE¶. Algorithm to use for non-OO MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. Non-orbital-optimized counterparts to higher order MPn methods are also; available. Summarizing from tables above, the following methods are; available and can be controlled through OCC keywards. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. mp3; MP3; Y; Y; RHF/UHF. mp2.5; MP2.5; Y; Y; RHF/UHF. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Table Of Contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; WFN_TYPE; ORB_OPT. Advanced Keywords; OPT_METHOD; MO_DIIS_NUM_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; NAT_ORBS; OCC_ORBS_PRINT; TPDM_ABCD_TYPE; DO_DIIS; DO_LEVEL_SHIFT. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords; MP2_TYPE; MP2_OS_SCALE; MP2_SS_SCALE. Previous topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation ",MatchSource.WIKI,psi4manual/4.0b4/occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ.html
Deployability,update,updated,"bation Theories¶; Module: Keywords, PSI Variables, OCC; PSI4 also has a non-density-fitted MP2 algorithm for RHF and UHF; energies and gradients. The; density-fitted module DFMP2 is always the default, so to access the; conventional MP2 code, set MP2_TYPE to conv and call as usual; energy('mp2')/optimize('mp2'). Basic Keywords¶. MP2_TYPE¶. Algorithm to use for non-OO MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. Non-orbital-optimized counterparts to higher order MPn methods are also; available. Summarizing from tables above, the following methods are; available and can be controlled through OCC keywards. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. mp3; MP3; Y; Y; RHF/UHF. mp2.5; MP2.5; Y; Y; RHF/UHF. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Table Of Contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; WFN_TYPE; ORB_OPT. Advanced Keywords; OPT_METHOD; MO_DIIS_NUM_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; NAT_ORBS; OCC_ORBS_PRINT; TPDM_ABCD_TYPE; DO_DIIS; DO_LEVEL_SHIFT. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords; MP2_TYPE; MP2_OS_SCALE; MP2_SS_SCALE. Previous topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Next topic; CC: Coupled Cluster Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ.html
Energy Efficiency,energy,energy,"bed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical; molecular properties such as vibrational frequencies. However, orbital optimized MP2 (hence Orbital optimized MP3); will solve this N-representability problem by disregarding orbital response contribution of one-partical; density matrix.; Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched; geometries [Bozkaya:2012:odtl]. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster ba",MatchSource.WIKI,psi4manual/4.0b4/occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ.html
Integrability,depend,depending,"P2.5 Methods. Name; Calls Method; Energy; Gradient; Reference. mp2.5; MP2.5; Y; Y; RHF/UHF. omp2.5; Orbital-Optimized MP2.5; Y; Y; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized CEPA methods currently supported in PSI4 are outlined in Table OCEPA Methods. Name; Calls Method; Energy; Gradient; Reference. ocepa; Orbital-Optimized CEPA; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-ocepa; Spin-Component Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-ocepa; Spin-Opposite Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-8. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer;",MatchSource.WIKI,psi4manual/4.0b4/occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ.html
Performance,optimiz,optimized,"﻿. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories¶; Code author: Ugur Bozkaya; Section author: Ugur Bozkaya; Module: Keywords, PSI Variables, OCC. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem a",MatchSource.WIKI,psi4manual/4.0b4/occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ.html
Safety,avoid,avoids,"ical Methods: SCF to FCI ». OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories¶; Code author: Ugur Bozkaya; Section author: Ugur Bozkaya; Module: Keywords, PSI Variables, OCC. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). Th",MatchSource.WIKI,psi4manual/4.0b4/occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ.html
Security,access,access,"SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. OCC: Conventional Møller–Plesset Perturbation Theories¶; Module: Keywords, PSI Variables, OCC; PSI4 also has a non-density-fitted MP2 algorithm for RHF and UHF; energies and gradients. The; density-fitted module DFMP2 is always the default, so to access the; conventional MP2 code, set MP2_TYPE to conv and call as usual; energy('mp2')/optimize('mp2'). Basic Keywords¶. MP2_TYPE¶. Algorithm to use for non-OO MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. Non-orbital-optimized counterparts to higher order MPn methods are also; available. Summarizing from tables above, the following methods are; available and can be controlled through OCC keywards. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. mp3; MP3; Y; Y; RHF/UHF. mp2.5; MP2.5; Y; Y; RHF/UHF. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Table Of Contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; ",MatchSource.WIKI,psi4manual/4.0b4/occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ.html
Availability,avail,available,"aluation of One-Electron Properties — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Evaluation of One-Electron Properties¶; Code author: Robert M. Parrish and Andrew C. Simmonett; Section author: Andrew C. Simmonett; PSI4 is capable of computing a number of one-electron properties; summarized in the table below. The properties will be computed from the last; computed one-particle density, using the following syntax:; oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). The named argument, title, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword",MatchSource.WIKI,psi4manual/4.0b4/oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/oeprop-1.html
Deployability,update,updated,"; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Table Of Contents. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Geometry Optimization; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/oeprop-1.html
Energy Efficiency,charge,charges,"and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Table Of Contents. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Geometry Optimization; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . nex",MatchSource.WIKI,psi4manual/4.0b4/oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/oeprop-1.html
Modifiability,variab,variables,"﻿. Evaluation of One-Electron Properties — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Evaluation of One-Electron Properties¶; Code author: Robert M. Parrish and Andrew C. Simmonett; Section author: Andrew C. Simmonett; PSI4 is capable of computing a number of one-electron properties; summarized in the table below. The properties will be computed from the last; computed one-particle density, using the following syntax:; oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). The named argument, title, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN ke",MatchSource.WIKI,psi4manual/4.0b4/oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/oeprop-1.html
Availability,avail,available,"aluation of One-Electron Properties — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Evaluation of One-Electron Properties¶; Code author: Robert M. Parrish and Andrew C. Simmonett; Section author: Andrew C. Simmonett; PSI4 is capable of computing a number of one-electron properties; summarized in the table below. The properties will be computed from the last; computed one-particle density, using the following syntax:; oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). The named argument, title, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword",MatchSource.WIKI,psi4manual/4.0b4/oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/oeprop.html
Deployability,update,updated,"; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Table Of Contents. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Geometry Optimization; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/oeprop.html
Energy Efficiency,charge,charges,"and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN keyword. The keyword takes an array with; the following possible values:. Allowed origin specifications. Keyword; Interpretation. [x, y, z]; Origin is at the coordinates, in the same units as the geometry specification. [“COM”]; Origin is at the center of mass. [“NUCLEAR_CHARGE”]; Origin is at the center of nuclear charge. Table Of Contents. Evaluation of One-Electron Properties; Basic Keywords. Previous topic; Geometry Optimization; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . nex",MatchSource.WIKI,psi4manual/4.0b4/oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/oeprop.html
Modifiability,variab,variables,"﻿. Evaluation of One-Electron Properties — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Evaluation of One-Electron Properties¶; Code author: Robert M. Parrish and Andrew C. Simmonett; Section author: Andrew C. Simmonett; PSI4 is capable of computing a number of one-electron properties; summarized in the table below. The properties will be computed from the last; computed one-particle density, using the following syntax:; oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). The named argument, title, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table below. Current one-electron property capabilities of PSI4. Feature; Keyword; Notes. Electric dipole moment; DIPOLE;  . Electric quadrupole moment; QUADRUPOLE; Raw (traced) moments and traceless multipoles. All moments up order N; MULTIPOLE(N); Only raw (traced) moments. Sets global variables e.g. “DIPOLE X”, “32-POLE XYYZZ”. Transition dipole moment; TRANSITION_DIPOLE;  . Transition quadrupole moment; TRANSITION_QUADRUPOLE;  . Electrostatic potential, at nuclei; ESP_AT_NUCLEI; Sets global variables “ESP AT CENTER n”, n = 1 to natoms. Molecular orbital extents; MO_EXTENTS;  . Mulliken atomic charges; MULLIKEN_CHARGES;  . Löwdin atomic charges; LOWDIN_CHARGES;  . Wiberg bond indices; WIBERG_LOWDIN_INDICES; Uses (Löwdin) symmetrically orthogonalized orbitals. Mayer bond indices; MAYER_INDICES;  . Natural orbital occupations; NO_OCCUPATIONS;  . Basic Keywords¶; Multipole moments may be computed at any origin, which is controlled by the; global PROPERTIES_ORIGIN ke",MatchSource.WIKI,psi4manual/4.0b4/oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/oeprop.html
Availability,avail,available,"﻿. Optimize — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp2.5; MP2.5 [manual]. mp3; third-order MP perturbation theory [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation(0) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme",MatchSource.WIKI,psi4manual/4.0b4/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt-1.html
Deployability,continuous,continuous,"z Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). For further discussion of geometry optimization, see; Sec. Geometry Optimization. Previous topic; Counterpoise Correct; Next topic; Frequency; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [",MatchSource.WIKI,psi4manual/4.0b4/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt-1.html
Energy Efficiency,energy,energy,"﻿. Optimize — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp2.5; MP2.5 [manual]. mp3; third-order MP perturbation theory [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation(0) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme",MatchSource.WIKI,psi4manual/4.0b4/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt-1.html
Modifiability,variab,variables,"﻿. Optimize — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp2.5; MP2.5 [manual]. mp3; third-order MP perturbation theory [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation(0) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme",MatchSource.WIKI,psi4manual/4.0b4/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt-1.html
Performance,optimiz,optimize,"﻿. Optimize — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp2.5; MP2.5 [manual]. mp3; third-order MP perturbation theory [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation(0) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme",MatchSource.WIKI,psi4manual/4.0b4/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt-1.html
Security,access,accesses,"WN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd",MatchSource.WIKI,psi4manual/4.0b4/opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt-1.html
Availability,avail,available,"﻿. Optimize — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp2.5; MP2.5 [manual]. mp3; third-order MP perturbation theory [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation(0) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme",MatchSource.WIKI,psi4manual/4.0b4/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt.html
Deployability,continuous,continuous,"z Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). For further discussion of geometry optimization, see; Sec. Geometry Optimization. Previous topic; Counterpoise Correct; Next topic; Frequency; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [",MatchSource.WIKI,psi4manual/4.0b4/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt.html
Energy Efficiency,energy,energy,"﻿. Optimize — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp2.5; MP2.5 [manual]. mp3; third-order MP perturbation theory [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation(0) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme",MatchSource.WIKI,psi4manual/4.0b4/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt.html
Modifiability,variab,variables,"﻿. Optimize — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp2.5; MP2.5 [manual]. mp3; third-order MP perturbation theory [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation(0) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme",MatchSource.WIKI,psi4manual/4.0b4/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt.html
Performance,optimiz,optimize,"﻿. Optimize — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Optimize¶. optimize(name[, func, mode, dertype, molecule])[source]¶; Function to perform a geometry optimization. Aliases :opt(). Returns:(float) Total electronic energy of optimized structure in Hartrees. Psi variables:. CURRENT ENERGY. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual]. df-mp2; MP2 with density fitting [manual]. conv-mp2; conventional MP2 (non-density-fitting) [manual]. mp2.5; MP2.5 [manual]. mp3; third-order MP perturbation theory [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. ocepa; orbital-optimized coupled electron pair approximation [manual]. cepa0; coupled electron pair approximation(0) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional. b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b3lyp-d3bj; B3LYP Hybrid-GGA Exchange-Correlation Functional w/ Grimme",MatchSource.WIKI,psi4manual/4.0b4/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt.html
Security,access,accesses,"WN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd",MatchSource.WIKI,psi4manual/4.0b4/opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt.html
Availability,avail,available,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b4/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html
Deployability,update,updated," scope by the user. PsiMod.has_local_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched in the scope of; the specified module, by either user or code. Notwithstanding, code is; written such that in practice, this returns whether the option has been; touched in the module scope by the user. PsiMod.has_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched either locally; to specified module or globally, by either user or code.; Notwithstanding, code is written such that in practice, this returns; whether the option has been touched by the user. PsiMod.revoke_global_option_changed(keyword)¶; Given a string of keyword name, sets the has_changed attribute in the; global options scope to false. Used in python driver when a function; sets the value of an option. Before the function exits, this command is; called on the option so that has_changed reflects whether the user (not; the program) has touched the option. PsiMod.revoke_local_option_changed(module, keyword)¶; Given a string of keyword name and a particular module, sets the; has_changed attribute in the module options scope to false. Used in; python driver when a function sets the value of an option. Before the; function exits, this command is called on the option so that; has_changed reflects whether the user (not the program) has touched the; option. Table Of Contents. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver; PsiMod Options Commands. Previous topic; Programming: Using the Core Libraries; Next topic; Adding Methods to Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html
Integrability,rout,routine,"I4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.",MatchSource.WIKI,psi4manual/4.0b4/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html
Modifiability,plugin,plugin,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b4/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html
Performance,perform,performed,"gative changed status (revoke_changed), can only be done for a specific; scope, either global or local to the specified module. Querying, either a; value (get) or a changed status (has_changed), can be done in the global; scope, in a specified local scope, or in the context of “What will the; specified module use?”. Note; “Global” in the sense of the discussion has nothing; to do with the globals section at the top of read_options.cc . That; section is just a convenient place for options and associated values; that are used by most, if not all, modules. There are two primary purposes for interacting with options in the python driver. Preserving User Options (Enforcing definition [a] of has_changed); The first, less-interesting, use of retrieving user option values has; been to preserve them so that they may be restored at the end after the; procedure itself has clobbered them. By decoupling global_option and; local_option commands, this can now be performed neatly by saving at the; beginning the global and local values and the global and local; has_changed values, then restoring them at the end. Below is an example; of this procedure; don’t actually do this.; g_user_scftype = PsiMod.get_global_option('SCF_TYPE'); l_user_scftype_scf = PsiMod.get_local_option('SCF', 'SCF_TYPE'); bg_user_scftype = PsiMod.has_global_option_changed('SCF_TYPE'); bl_user_scftype_scf = PsiMod.has_local_option_changed('SCF', 'SCF_TYPE'). g_user_wfn = PsiMod.get_global_option('WFN'); l_user_wfn = PsiMod.get_local_option('MP2', 'WFN'); bg_user_wfn = PsiMod.has_global_option_changed('WFN'); bl_user_wfn = PsiMod.has_local_option_changed('MP2', 'WFN'). # body of function; # scf_type and wfn are freely changed, LOCALLY; # PsiMod.scf() and PsiMod.mp2() are run. PsiMod.set_global_option('SCF_TYPE', g_user_scftype); if not bg_user_scftype:; PsiMod.revoke_global_option_changed('SCF_TYPE'); PsiMod.set_local_option('SCF', 'SCF_TYPE', l_user_scftype_scf); if not bl_user_scftype_scf:; PsiMod.revoke_local_o",MatchSource.WIKI,psi4manual/4.0b4/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html
Security,access,accessible,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b4/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html
Usability,simpl,simplify,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b4/optionshandling-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html
Availability,avail,available,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b4/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling.html
Deployability,update,updated," scope by the user. PsiMod.has_local_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched in the scope of; the specified module, by either user or code. Notwithstanding, code is; written such that in practice, this returns whether the option has been; touched in the module scope by the user. PsiMod.has_option_changed(module, keyword)¶; Returns boolean for whether keyword has been touched either locally; to specified module or globally, by either user or code.; Notwithstanding, code is written such that in practice, this returns; whether the option has been touched by the user. PsiMod.revoke_global_option_changed(keyword)¶; Given a string of keyword name, sets the has_changed attribute in the; global options scope to false. Used in python driver when a function; sets the value of an option. Before the function exits, this command is; called on the option so that has_changed reflects whether the user (not; the program) has touched the option. PsiMod.revoke_local_option_changed(module, keyword)¶; Given a string of keyword name and a particular module, sets the; has_changed attribute in the module options scope to false. Used in; python driver when a function sets the value of an option. Before the; function exits, this command is called on the option so that; has_changed reflects whether the user (not the program) has touched the; option. Table Of Contents. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver; PsiMod Options Commands. Previous topic; Programming: Using the Core Libraries; Next topic; Adding Methods to Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling.html
Integrability,rout,routine,"I4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.",MatchSource.WIKI,psi4manual/4.0b4/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling.html
Modifiability,plugin,plugin,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b4/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling.html
Performance,perform,performed,"gative changed status (revoke_changed), can only be done for a specific; scope, either global or local to the specified module. Querying, either a; value (get) or a changed status (has_changed), can be done in the global; scope, in a specified local scope, or in the context of “What will the; specified module use?”. Note; “Global” in the sense of the discussion has nothing; to do with the globals section at the top of read_options.cc . That; section is just a convenient place for options and associated values; that are used by most, if not all, modules. There are two primary purposes for interacting with options in the python driver. Preserving User Options (Enforcing definition [a] of has_changed); The first, less-interesting, use of retrieving user option values has; been to preserve them so that they may be restored at the end after the; procedure itself has clobbered them. By decoupling global_option and; local_option commands, this can now be performed neatly by saving at the; beginning the global and local values and the global and local; has_changed values, then restoring them at the end. Below is an example; of this procedure; don’t actually do this.; g_user_scftype = PsiMod.get_global_option('SCF_TYPE'); l_user_scftype_scf = PsiMod.get_local_option('SCF', 'SCF_TYPE'); bg_user_scftype = PsiMod.has_global_option_changed('SCF_TYPE'); bl_user_scftype_scf = PsiMod.has_local_option_changed('SCF', 'SCF_TYPE'). g_user_wfn = PsiMod.get_global_option('WFN'); l_user_wfn = PsiMod.get_local_option('MP2', 'WFN'); bg_user_wfn = PsiMod.has_global_option_changed('WFN'); bl_user_wfn = PsiMod.has_local_option_changed('MP2', 'WFN'). # body of function; # scf_type and wfn are freely changed, LOCALLY; # PsiMod.scf() and PsiMod.mp2() are run. PsiMod.set_global_option('SCF_TYPE', g_user_scftype); if not bg_user_scftype:; PsiMod.revoke_global_option_changed('SCF_TYPE'); PsiMod.set_local_option('SCF', 'SCF_TYPE', l_user_scftype_scf); if not bl_user_scftype_scf:; PsiMod.revoke_local_o",MatchSource.WIKI,psi4manual/4.0b4/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling.html
Security,access,accessible,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b4/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling.html
Usability,simpl,simplify,"﻿. LibOptions: globals, locals, has_changed and all that — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algor",MatchSource.WIKI,psi4manual/4.0b4/optionshandling.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling.html
Availability,redundant,redundant,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html
Deployability,update,update,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html
Energy Efficiency,energy,energy,"ence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed dur",MatchSource.WIKI,psi4manual/4.0b4/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html
Performance,optimiz,optimizations,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html
Safety,redund,redundant,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html
Testability,test,tested,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html
Usability,simpl,simple,"ted. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Generate the internal coord",MatchSource.WIKI,psi4manual/4.0b4/optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html
Availability,redundant,redundant,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking.html
Deployability,update,update,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking.html
Energy Efficiency,energy,energy,"ence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed dur",MatchSource.WIKI,psi4manual/4.0b4/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking.html
Performance,optimiz,optimizations,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking.html
Safety,redund,redundant,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking.html
Testability,test,tested,"﻿. Geometry Optimization — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». Geometry Optimization¶; Code author: Rollin A. King; Section author: Rollin A. King and Lori A. Burns; Module: Keywords, PSI Variables, OPTKING; PSI4 carries out molecular optimizations using a module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, a RFO step, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representati",MatchSource.WIKI,psi4manual/4.0b4/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking.html
Usability,simpl,simple,"ted. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Generate the internal coord",MatchSource.WIKI,psi4manual/4.0b4/optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking.html
Availability,down,down,"osal PEP1) protocol to organize; PSI4. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; ",MatchSource.WIKI,psi4manual/4.0b4/pep0001-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/pep0001-1.html
Deployability,update,updated,"e statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB; This is an example comment that refers to PEP1: Proposing PsiPEP for PSI4 and a trac ticket #221. Table Of Contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. Previous topic; PsiPEP: Plans and Practices to Organize PSI4; Next topic; Programming: Using the Core Libraries; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 »; PsiPEP: Plans and Practices to Organize PSI4 ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/pep0001-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/pep0001-1.html
Integrability,protocol,protocol,"﻿. PEP1: Proposing PsiPEP for PSI4 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 »; PsiPEP: Plans and Practices to Organize PSI4 ». PEP1: Proposing PsiPEP for PSI4¶. PEP:1. Title:Proposing PsiPEP for PSI4. Last-Modified:04-Jul-2012. Author:Lori Burns. Content-Type:text/x-rst. Created:04-Jul-2012. This document proposes using a (much more informal) version of Python’s; PEP (Python Enhancement Proposal PEP1) protocol to organize; PSI4. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices o",MatchSource.WIKI,psi4manual/4.0b4/pep0001-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/pep0001-1.html
Usability,simpl,simple,"e is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them.",MatchSource.WIKI,psi4manual/4.0b4/pep0001-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/pep0001-1.html
Availability,down,down,"osal PEP1) protocol to organize; PSI4. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; ",MatchSource.WIKI,psi4manual/4.0b4/pep0001.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/pep0001.html
Deployability,update,updated,"e statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB; This is an example comment that refers to PEP1: Proposing PsiPEP for PSI4 and a trac ticket #221. Table Of Contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. Previous topic; PsiPEP: Plans and Practices to Organize PSI4; Next topic; Programming: Using the Core Libraries; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 »; PsiPEP: Plans and Practices to Organize PSI4 ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/pep0001.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/pep0001.html
Integrability,protocol,protocol,"﻿. PEP1: Proposing PsiPEP for PSI4 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 »; PsiPEP: Plans and Practices to Organize PSI4 ». PEP1: Proposing PsiPEP for PSI4¶. PEP:1. Title:Proposing PsiPEP for PSI4. Last-Modified:04-Jul-2012. Author:Lori Burns. Content-Type:text/x-rst. Created:04-Jul-2012. This document proposes using a (much more informal) version of Python’s; PEP (Python Enhancement Proposal PEP1) protocol to organize; PSI4. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices o",MatchSource.WIKI,psi4manual/4.0b4/pep0001.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/pep0001.html
Usability,simpl,simple,"e is aware of it; unless cc’d), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP¶. Someone creates a file psi4/doc/sphinxman/source/pepXXXX.rst modeled; on psi4/doc/sphinxman/source/pep0000model.rst and adds; it to STATICDOC in psi4/doc/sphinxman/Makefile.in. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them.",MatchSource.WIKI,psi4manual/4.0b4/pep0001.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/pep0001.html
Availability,avail,available,"plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction; >>> psi4 --new-plugin myplugin +scf. Several stable sample plugin directories are available to consult in the; psi4/plugins directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/plugins/aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/plugins/mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/plugins/mp2/mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/plugins/sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. ",MatchSource.WIKI,psi4manual/4.0b4/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html
Deployability,update,updated,"or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofile). doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Documentation; for building documentation and Available Plugins; for this file’s final destination. To create a purely Python plugin, create a new plugin directory, then; remove the Makefile and myplugin.cc files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; input.dat as a model for loading the plugin, no recompile ever; necessary. Table Of Contents. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Previous topic; Contributions: Intro to Programming in PSI4; Next topic; Best Practices for Python Functions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html
Energy Efficiency,energy,energy,"tegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin.; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additio",MatchSource.WIKI,psi4manual/4.0b4/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html
Integrability,wrap,wrapped,"s: Adding New Functionality to PSI4¶. Modular Approach to Development¶; The redesign of PSI4 into a single-executable changed the way that; code development is done. The standalone nature of modules in previous; versions of Psi made their development very easy, as new functionality; could be implemented almost as a standalone executable, which could easily; be ported into the Psi code when completed. The new design specifies that; these modules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this ",MatchSource.WIKI,psi4manual/4.0b4/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html
Modifiability,plugin,plugin," be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI",MatchSource.WIKI,psi4manual/4.0b4/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html
Performance,load,loaded,"ality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplu",MatchSource.WIKI,psi4manual/4.0b4/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html
Security,access,accessed,"recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin.; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b4/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html
Testability,test,tests," In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction; >>> psi4 --new-plugin myplugin +scf. Several stable sample plugin directories are available to consult in the; psi4/plugins directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/plugins/aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/plugins/mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/plugins/mp2/mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/plugins/sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.da",MatchSource.WIKI,psi4manual/4.0b4/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html
Usability,learn,learn,"dules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In ",MatchSource.WIKI,psi4manual/4.0b4/plugins-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html
Availability,avail,available,"plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction; >>> psi4 --new-plugin myplugin +scf. Several stable sample plugin directories are available to consult in the; psi4/plugins directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/plugins/aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/plugins/mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/plugins/mp2/mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/plugins/sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. ",MatchSource.WIKI,psi4manual/4.0b4/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins.html
Deployability,update,updated,"or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofile). doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Documentation; for building documentation and Available Plugins; for this file’s final destination. To create a purely Python plugin, create a new plugin directory, then; remove the Makefile and myplugin.cc files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; input.dat as a model for loading the plugin, no recompile ever; necessary. Table Of Contents. Plugins: Adding New Functionality to PSI4; Modular Approach to Development; Creating a New Plugin; Files in a Plugin Directory. Previous topic; Contributions: Intro to Programming in PSI4; Next topic; Best Practices for Python Functions; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins.html
Energy Efficiency,energy,energy,"tegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin.; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additio",MatchSource.WIKI,psi4manual/4.0b4/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins.html
Integrability,wrap,wrapped,"s: Adding New Functionality to PSI4¶. Modular Approach to Development¶; The redesign of PSI4 into a single-executable changed the way that; code development is done. The standalone nature of modules in previous; versions of Psi made their development very easy, as new functionality; could be implemented almost as a standalone executable, which could easily; be ported into the Psi code when completed. The new design specifies that; these modules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this ",MatchSource.WIKI,psi4manual/4.0b4/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins.html
Modifiability,plugin,plugin," be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI",MatchSource.WIKI,psi4manual/4.0b4/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins.html
Performance,load,loaded,"ality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplu",MatchSource.WIKI,psi4manual/4.0b4/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins.html
Security,access,accessed,"recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin.; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofi",MatchSource.WIKI,psi4manual/4.0b4/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins.html
Testability,test,tests," In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction; >>> psi4 --new-plugin myplugin +scf. Several stable sample plugin directories are available to consult in the; psi4/plugins directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/plugins/aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/plugins/mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/plugins/mp2/mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/plugins/sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.da",MatchSource.WIKI,psi4manual/4.0b4/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins.html
Usability,learn,learn,"dules are now libraries, not separate executables, which are; linked into the main Psi executable. The single-executable design is; conducive to code reuse, as it allows common tasks to be implemented as a; class instead of a module; the functionality can then be easily obtained; throughout the code by creating objects as required. Examples of this are; the LibMints class, which provides similar functionality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In ",MatchSource.WIKI,psi4manual/4.0b4/plugins.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins.html
Deployability,update,updated," without a module in; OptionsState.; # include if necessary as globals; PsiMod.set_global_option('BASIS', guessbasis); PsiMod.set_global_option('DF_BASIS_SCF', guessbasisdf). # include if necessary as locals; PsiMod.set_local_option('TRANSQT2', 'WFN', 'MP2'); PsiMod.set_local_option('CCSORT', 'WFN', 'MP2'); PsiMod.set_local_option('MP2', 'WFN', 'MP2'). If the regular scf module is to be run, run it through; scf_helper() so that cast-up can be used. Also, add the; option to bypass it by pre-running scf, then running the module with this; bypass_scf kwarg. Also, if the full two-electron integrals are; necessary for the post-scf, compute them if only the df integrals were run; previously.; # include if scf module is to be run. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # include if TEI are needed beyond scf. # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). Direct any post-scf modules to be run.; # include if further post-scf modules are needed; PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.mp2(). If an OptionsState object was set up, those options; need to be returned to the original user state with the following.; # include if optstash = OptionsState( was set up previously; optstash.restore(). No function should return anything. CURRENT ENERGY will be set by; energy(), etc.; # never include; return returnvalue. Previous topic; LibOptions: globals, locals, has_changed and all that; Next topic; Python Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/proc_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py-1.html
Energy Efficiency,energy,energy,"﻿. Adding Methods to Driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». Adding Methods to Driver¶; This is concerned at present with normal methods added first to the; procedures table in driver.py that associates method names with functions; to run them located in proc.py .; The function should start with a declaration, as below. methodname is; never seen by users, so it’s good to be specific; if there’s lots of; modules that can run mp2, call methodname modulenamemethodname, perhaps.; The function must always take as arguments (name, **kwargs).; # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of name several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; energy(), etc. in driver.py and need not be repeated here.; # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). It’s often necessary to The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; OptionsState object is set up. See; LibOptions: globals, locals, has_changed and all that for details. All options set by the; function need to be included here, and only options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module.; # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['PUREAM'],; ['FREEZE_CORE'],; # all others should have an associated module; ['SCF', 'SCF_TYPE'],; ['SCF', 'GUESS'],; ['DFMP2', 'MP2_",MatchSource.WIKI,psi4manual/4.0b4/proc_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py-1.html
Integrability,rout,routine,"ave an associated module; ['SCF', 'SCF_TYPE'],; ['SCF', 'GUESS'],; ['DFMP2', 'MP2_OS_SCALE'],; ). If options need to be set, set them anywhere here. Options should be set; locally to a module, except for those without a module in; OptionsState.; # include if necessary as globals; PsiMod.set_global_option('BASIS', guessbasis); PsiMod.set_global_option('DF_BASIS_SCF', guessbasisdf). # include if necessary as locals; PsiMod.set_local_option('TRANSQT2', 'WFN', 'MP2'); PsiMod.set_local_option('CCSORT', 'WFN', 'MP2'); PsiMod.set_local_option('MP2', 'WFN', 'MP2'). If the regular scf module is to be run, run it through; scf_helper() so that cast-up can be used. Also, add the; option to bypass it by pre-running scf, then running the module with this; bypass_scf kwarg. Also, if the full two-electron integrals are; necessary for the post-scf, compute them if only the df integrals were run; previously.; # include if scf module is to be run. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # include if TEI are needed beyond scf. # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). Direct any post-scf modules to be run.; # include if further post-scf modules are needed; PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.mp2(). If an OptionsState object was set up, those options; need to be returned to the original user state with the following.; # include if optstash = OptionsState( was set up previously; optstash.restore(). No function should return anything. CURRENT ENERGY will be set by; energy(), etc.; # never include; return returnvalue. Previous topic; LibOptions: globals, locals, has_changed and all that; Next topic; Python Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. i",MatchSource.WIKI,psi4manual/4.0b4/proc_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py-1.html
Modifiability,variab,variable,"﻿. Adding Methods to Driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». Adding Methods to Driver¶; This is concerned at present with normal methods added first to the; procedures table in driver.py that associates method names with functions; to run them located in proc.py .; The function should start with a declaration, as below. methodname is; never seen by users, so it’s good to be specific; if there’s lots of; modules that can run mp2, call methodname modulenamemethodname, perhaps.; The function must always take as arguments (name, **kwargs).; # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of name several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; energy(), etc. in driver.py and need not be repeated here.; # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). It’s often necessary to The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; OptionsState object is set up. See; LibOptions: globals, locals, has_changed and all that for details. All options set by the; function need to be included here, and only options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module.; # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['PUREAM'],; ['FREEZE_CORE'],; # all others should have an associated module; ['SCF', 'SCF_TYPE'],; ['SCF', 'GUESS'],; ['DFMP2', 'MP2_",MatchSource.WIKI,psi4manual/4.0b4/proc_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py-1.html
Testability,test,test,"﻿. Adding Methods to Driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». Adding Methods to Driver¶; This is concerned at present with normal methods added first to the; procedures table in driver.py that associates method names with functions; to run them located in proc.py .; The function should start with a declaration, as below. methodname is; never seen by users, so it’s good to be specific; if there’s lots of; modules that can run mp2, call methodname modulenamemethodname, perhaps.; The function must always take as arguments (name, **kwargs).; # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of name several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; energy(), etc. in driver.py and need not be repeated here.; # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). It’s often necessary to The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; OptionsState object is set up. See; LibOptions: globals, locals, has_changed and all that for details. All options set by the; function need to be included here, and only options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module.; # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['PUREAM'],; ['FREEZE_CORE'],; # all others should have an associated module; ['SCF', 'SCF_TYPE'],; ['SCF', 'GUESS'],; ['DFMP2', 'MP2_",MatchSource.WIKI,psi4manual/4.0b4/proc_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py-1.html
Deployability,update,updated," without a module in; OptionsState.; # include if necessary as globals; PsiMod.set_global_option('BASIS', guessbasis); PsiMod.set_global_option('DF_BASIS_SCF', guessbasisdf). # include if necessary as locals; PsiMod.set_local_option('TRANSQT2', 'WFN', 'MP2'); PsiMod.set_local_option('CCSORT', 'WFN', 'MP2'); PsiMod.set_local_option('MP2', 'WFN', 'MP2'). If the regular scf module is to be run, run it through; scf_helper() so that cast-up can be used. Also, add the; option to bypass it by pre-running scf, then running the module with this; bypass_scf kwarg. Also, if the full two-electron integrals are; necessary for the post-scf, compute them if only the df integrals were run; previously.; # include if scf module is to be run. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # include if TEI are needed beyond scf. # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). Direct any post-scf modules to be run.; # include if further post-scf modules are needed; PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.mp2(). If an OptionsState object was set up, those options; need to be returned to the original user state with the following.; # include if optstash = OptionsState( was set up previously; optstash.restore(). No function should return anything. CURRENT ENERGY will be set by; energy(), etc.; # never include; return returnvalue. Previous topic; LibOptions: globals, locals, has_changed and all that; Next topic; Python Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/proc_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py.html
Energy Efficiency,energy,energy,"﻿. Adding Methods to Driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». Adding Methods to Driver¶; This is concerned at present with normal methods added first to the; procedures table in driver.py that associates method names with functions; to run them located in proc.py .; The function should start with a declaration, as below. methodname is; never seen by users, so it’s good to be specific; if there’s lots of; modules that can run mp2, call methodname modulenamemethodname, perhaps.; The function must always take as arguments (name, **kwargs).; # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of name several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; energy(), etc. in driver.py and need not be repeated here.; # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). It’s often necessary to The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; OptionsState object is set up. See; LibOptions: globals, locals, has_changed and all that for details. All options set by the; function need to be included here, and only options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module.; # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['PUREAM'],; ['FREEZE_CORE'],; # all others should have an associated module; ['SCF', 'SCF_TYPE'],; ['SCF', 'GUESS'],; ['DFMP2', 'MP2_",MatchSource.WIKI,psi4manual/4.0b4/proc_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py.html
Integrability,rout,routine,"ave an associated module; ['SCF', 'SCF_TYPE'],; ['SCF', 'GUESS'],; ['DFMP2', 'MP2_OS_SCALE'],; ). If options need to be set, set them anywhere here. Options should be set; locally to a module, except for those without a module in; OptionsState.; # include if necessary as globals; PsiMod.set_global_option('BASIS', guessbasis); PsiMod.set_global_option('DF_BASIS_SCF', guessbasisdf). # include if necessary as locals; PsiMod.set_local_option('TRANSQT2', 'WFN', 'MP2'); PsiMod.set_local_option('CCSORT', 'WFN', 'MP2'); PsiMod.set_local_option('MP2', 'WFN', 'MP2'). If the regular scf module is to be run, run it through; scf_helper() so that cast-up can be used. Also, add the; option to bypass it by pre-running scf, then running the module with this; bypass_scf kwarg. Also, if the full two-electron integrals are; necessary for the post-scf, compute them if only the df integrals were run; previously.; # include if scf module is to be run. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # include if TEI are needed beyond scf. # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). Direct any post-scf modules to be run.; # include if further post-scf modules are needed; PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.mp2(). If an OptionsState object was set up, those options; need to be returned to the original user state with the following.; # include if optstash = OptionsState( was set up previously; optstash.restore(). No function should return anything. CURRENT ENERGY will be set by; energy(), etc.; # never include; return returnvalue. Previous topic; LibOptions: globals, locals, has_changed and all that; Next topic; Python Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. i",MatchSource.WIKI,psi4manual/4.0b4/proc_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py.html
Modifiability,variab,variable,"﻿. Adding Methods to Driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». Adding Methods to Driver¶; This is concerned at present with normal methods added first to the; procedures table in driver.py that associates method names with functions; to run them located in proc.py .; The function should start with a declaration, as below. methodname is; never seen by users, so it’s good to be specific; if there’s lots of; modules that can run mp2, call methodname modulenamemethodname, perhaps.; The function must always take as arguments (name, **kwargs).; # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of name several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; energy(), etc. in driver.py and need not be repeated here.; # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). It’s often necessary to The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; OptionsState object is set up. See; LibOptions: globals, locals, has_changed and all that for details. All options set by the; function need to be included here, and only options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module.; # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['PUREAM'],; ['FREEZE_CORE'],; # all others should have an associated module; ['SCF', 'SCF_TYPE'],; ['SCF', 'GUESS'],; ['DFMP2', 'MP2_",MatchSource.WIKI,psi4manual/4.0b4/proc_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py.html
Testability,test,test,"﻿. Adding Methods to Driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». Adding Methods to Driver¶; This is concerned at present with normal methods added first to the; procedures table in driver.py that associates method names with functions; to run them located in proc.py .; The function should start with a declaration, as below. methodname is; never seen by users, so it’s good to be specific; if there’s lots of; modules that can run mp2, call methodname modulenamemethodname, perhaps.; The function must always take as arguments (name, **kwargs).; # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of name several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; energy(), etc. in driver.py and need not be repeated here.; # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). It’s often necessary to The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; OptionsState object is set up. See; LibOptions: globals, locals, has_changed and all that for details. All options set by the; function need to be included here, and only options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module.; # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['PUREAM'],; ['FREEZE_CORE'],; # all others should have an associated module; ['SCF', 'SCF_TYPE'],; ['SCF', 'GUESS'],; ['DFMP2', 'MP2_",MatchSource.WIKI,psi4manual/4.0b4/proc_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py.html
Deployability,update,updated,"﻿. Programming: Using the Core Libraries — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Programming: Using the Core Libraries¶. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver; PsiMod Options Commands. Adding Methods to Driver. Previous topic; PEP1: Proposing PsiPEP for PSI4; Next topic; LibOptions: globals, locals, has_changed and all that; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/programming-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/programming-1.html
Deployability,update,updated,"﻿. Programming: Using the Core Libraries — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Programming: Using the Core Libraries¶. LibOptions: globals, locals, has_changed and all that; Declaring Options; What is has_changed ?; Reading Options in Module; Handling Options in Driver; PsiMod Options Commands. Adding Methods to Driver. Previous topic; PEP1: Proposing PsiPEP for PSI4; Next topic; LibOptions: globals, locals, has_changed and all that; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/programming.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/programming.html
Deployability,update,updated,"﻿. Property — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). df-mp2; MP2 with density fitting. eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/prop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/prop-1.html
Deployability,update,updated,"﻿. Property — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». Property¶. property(name[, properties, molecule])[source]¶; Function to compute various properties. Aliases :prop(). Returns:none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities. name; calls method. scf; Self-consistent field method(s). cc2; 2nd-order approximate CCSD. ccsd; coupled cluster singles and doubles (CCSD). df-mp2; MP2 with density fitting. eom-cc2; 2nd-order approximate EOM-CCSD. eom-ccsd; equation-of-motion coupled cluster singles and doubles (EOM-CCSD). Parameters:; name (string) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (array of strings) – [] || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). Previous topic; Energy; Next topic; Counterpoise Correct; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/prop.html
Availability,fault,faulty,"on>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | __getattr__ = new_get_attr(self, name); | Function to redefine get_attr method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine set_attr method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (opt",MatchSource.WIKI,psi4manual/4.0b4/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html
Deployability,configurat,configuration," -> float :; Runs the equation of motion coupled cluster code, for excited states.; ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; dftsapt(...); dftsapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :; Runs the DFT variant of the symmetry adapted perturbation theory code.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1)",MatchSource.WIKI,psi4manual/4.0b4/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html
Energy Efficiency,energy,energy,"| ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Db(...); | Db( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fa(...); | Fa( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fb(...); | Fb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | add_postiteration_callback(...); | add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | add_preiteration_callback(...); | add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | alpha_orbital_space(...); | alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | basisset(...); | basisset( (Wavefunction)arg1) -> BasisSet :; | docstring; | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frzcpi(...); | frzcpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | frzvpi(...); | frzvpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | gradient(...); | gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | molecule(...); | molecule( (Wavefunction)arg1) -> Molecule :; | docstring; | ; | nalpha(...); | nalpha( (Wavefunction)arg1) -> int :; | docstring; | ; | nalphapi(...); | nalphapi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | nbeta(...); | nbeta( (Wavefunction)arg1) -> int :; | docstring; | ; | nbetapi(...); | nbetapi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | nirrep(...); | nirrep( (Wavef",MatchSource.WIKI,psi4manual/4.0b4/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html
Integrability,contract,contracts,"atrices.; ; ccenergy(...); ccenergy() -> float :; Runs the coupled cluster energy code.; ; cceom(...); cceom() -> float :; Runs the equation of motion coupled cluster code, for excited states.; ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; dftsapt(...); dftsapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :; Runs the DFT variant of the symmetry adapted perturbation theory code.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a f",MatchSource.WIKI,psi4manual/4.0b4/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html
Modifiability,inherit,inherited,"sSetParser; CdSalcList; Checkpoint; CorrelationFactor; FittedSlaterCorrelationFactor; DFChargeFitter; Dimension; Dispersion; Environment; ExternalPotential; FittingMetric; Functional; GridProp; IO; IOManager; IntVector; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OrbitalSpace; PetiteList; PointGroup; Process; PseudoTrial; SOBasisSet; SuperFunctional; SymmetryOperation; Vector; Vector3; View; Wavefunction; HF; RHF(HF, Wavefunction); matrix_vector; ; class Arguments(Boost.Python.instance); | Method resolution order:; | Arguments; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Arguments)arg1, (int)arg2) -> str :; | docstring; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 56; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | has_puream(...); | has_puream( (BasisSet)arg1) -> bool :; | docstring; | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | docstring; | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | docstring; | ; | nbf(...); | nbf( (BasisSet)arg1) -> int :; | docstring; | ; | nprimitive(...); | npri",MatchSource.WIKI,psi4manual/4.0b4/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html
Performance,load,load,"Matrix)arg3]) -> Matrix; | ; | cholesky_factorize(...); | cholesky_factorize( (Matrix)arg1) -> None :; | docstring; | ; | clone(...); | clone( (Matrix)arg1) -> Matrix :; | docstring; | ; | coldim(...); | coldim( (Matrix)arg1) -> Dimension :; | docstring; | ; | cols(...); | cols( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | copy_lower_to_upper(...); | copy_lower_to_upper( (Matrix)arg1) -> None :; | docstring; | ; | copy_upper_to_lower(...); | copy_upper_to_lower( (Matrix)arg1) -> None :; | docstring; | ; | diagonalize(...); | diagonalize( (Matrix)arg1, (Matrix)arg2, (Vector)arg3, (DiagonalizeOrder)arg4) -> None :; | docstring; | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> i",MatchSource.WIKI,psi4manual/4.0b4/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html
Security,hash,hash,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/4.0b4/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html
Usability,clear,clear,"defined here:; | ; | __instance_size__ = 368; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new o",MatchSource.WIKI,psi4manual/4.0b4/psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html
Availability,fault,faulty,"on>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | __getattr__ = new_get_attr(self, name); | Function to redefine get_attr method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine set_attr method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (opt",MatchSource.WIKI,psi4manual/4.0b4/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod.html
Deployability,configurat,configuration," -> float :; Runs the equation of motion coupled cluster code, for excited states.; ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; dftsapt(...); dftsapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :; Runs the DFT variant of the symmetry adapted perturbation theory code.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1)",MatchSource.WIKI,psi4manual/4.0b4/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod.html
Energy Efficiency,energy,energy,"| ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Db(...); | Db( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fa(...); | Fa( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | Fb(...); | Fb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | add_postiteration_callback(...); | add_postiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | add_preiteration_callback(...); | add_preiteration_callback( (Wavefunction)arg1, (object)arg2) -> None :; | docstring; | ; | alpha_orbital_space(...); | alpha_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | basisset(...); | basisset( (Wavefunction)arg1) -> BasisSet :; | docstring; | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | frzcpi(...); | frzcpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | frzvpi(...); | frzvpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | gradient(...); | gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | molecule(...); | molecule( (Wavefunction)arg1) -> Molecule :; | docstring; | ; | nalpha(...); | nalpha( (Wavefunction)arg1) -> int :; | docstring; | ; | nalphapi(...); | nalphapi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | nbeta(...); | nbeta( (Wavefunction)arg1) -> int :; | docstring; | ; | nbetapi(...); | nbetapi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | nirrep(...); | nirrep( (Wavef",MatchSource.WIKI,psi4manual/4.0b4/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod.html
Integrability,contract,contracts,"atrices.; ; ccenergy(...); ccenergy() -> float :; Runs the coupled cluster energy code.; ; cceom(...); cceom() -> float :; Runs the equation of motion coupled cluster code, for excited states.; ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; dftsapt(...); dftsapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :; Runs the DFT variant of the symmetry adapted perturbation theory code.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a f",MatchSource.WIKI,psi4manual/4.0b4/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod.html
Modifiability,inherit,inherited,"sSetParser; CdSalcList; Checkpoint; CorrelationFactor; FittedSlaterCorrelationFactor; DFChargeFitter; Dimension; Dispersion; Environment; ExternalPotential; FittingMetric; Functional; GridProp; IO; IOManager; IntVector; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OrbitalSpace; PetiteList; PointGroup; Process; PseudoTrial; SOBasisSet; SuperFunctional; SymmetryOperation; Vector; Vector3; View; Wavefunction; HF; RHF(HF, Wavefunction); matrix_vector; ; class Arguments(Boost.Python.instance); | Method resolution order:; | Arguments; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Arguments)arg1, (int)arg2) -> str :; | docstring; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 56; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | has_puream(...); | has_puream( (BasisSet)arg1) -> bool :; | docstring; | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | docstring; | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | docstring; | ; | nbf(...); | nbf( (BasisSet)arg1) -> int :; | docstring; | ; | nprimitive(...); | npri",MatchSource.WIKI,psi4manual/4.0b4/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod.html
Performance,load,load,"Matrix)arg3]) -> Matrix; | ; | cholesky_factorize(...); | cholesky_factorize( (Matrix)arg1) -> None :; | docstring; | ; | clone(...); | clone( (Matrix)arg1) -> Matrix :; | docstring; | ; | coldim(...); | coldim( (Matrix)arg1) -> Dimension :; | docstring; | ; | cols(...); | cols( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | copy_lower_to_upper(...); | copy_lower_to_upper( (Matrix)arg1) -> None :; | docstring; | ; | copy_upper_to_lower(...); | copy_upper_to_lower( (Matrix)arg1) -> None :; | docstring; | ; | diagonalize(...); | diagonalize( (Matrix)arg1, (Matrix)arg2, (Vector)arg3, (DiagonalizeOrder)arg4) -> None :; | docstring; | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> i",MatchSource.WIKI,psi4manual/4.0b4/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod.html
Security,hash,hash,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/4.0b4/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod.html
Usability,clear,clear,"defined here:; | ; | __instance_size__ = 368; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new o",MatchSource.WIKI,psi4manual/4.0b4/psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod.html
Availability,avail,available,"f the; totally-symmetric state. The FOLLOW_ROOT option may be used; to follow different roots of the effective Hamiltonian. A value of 1; instructs PSIMRCC to follow the solution with the lowest energy given; a certain set of determinants.; molecule o2 {; 0 3; O; O 1 2.265122720724; units au; }; set {; basis cc-pvtz; }; set mcscf {; reference rohf; docc [3,0,0,0,0,2,1,1] # Doubly occupied MOs; socc [0,0,1,1,0,0,0,0] # Singly occupied MOs; }; set psimrcc {; corr_wfn ccsd # Do Mk-MRCCSD; frozen_docc [1,0,0,0,0,1,0,0] # Frozen MOs; restricted_docc [2,0,0,0,0,1,1,1] # Doubly occupied MOs; active [0,0,1,1,0,0,0,0] # Active MOs; frozen_uocc [0,0,0,0,0,0,0,0] # Frozen virtual MOs; corr_multp 1 # Select the Ms = 0 component; root 1; wfn_sym B1g # Select the B1g state; }; energy('psimrcc'). Note that the oxygen molecule has 16 electrons (including core), while; the docc array contains only 7 doubly-occupied orbitals (or 14; electrons). Hence, two more electrons are available to place into; the active space (given by active), which consists of 2 orbitals.; Thus there are two active electrons in two orbitals. In this particular; example, we are using standard ROHF orbitals for the Mk-MRCCSD procedure,; rather than TCSCF orbitals. Nevertheless, with the present code,; these orbitals must be provided through the MCSCF module, as specified in the; set mcscf section above. Orbital ordering and selection of the model space¶; The reference determinants are specified in PSIMRCC; via occupational numbers. PSIMRCC requires that four arrays be specified; for this purpose. Frozen doubly occupied orbitals (FROZEN_DOCC) are doubly; occupied in each reference determinant and are not correlated in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; al",MatchSource.WIKI,psi4manual/4.0b4/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc-1.html
Deployability,configurat,configuration,"C effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCS",MatchSource.WIKI,psi4manual/4.0b4/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc-1.html
Energy Efficiency,power,powerful,"﻿. PSIMRCC Implementation of Mk-MRCC Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». PSIMRCC Implementation of Mk-MRCC Theory¶; Code author: Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in PSI4 implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the; wavefunction, . where are the reference determinants,; are reference-specific excitation operators, and; are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS",MatchSource.WIKI,psi4manual/4.0b4/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc-1.html
Integrability,contract,contracted," Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in PSI4 implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the; wavefunction, . where are the reference determinants,; are reference-specific excitation operators, and; are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the cod",MatchSource.WIKI,psi4manual/4.0b4/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc-1.html
Modifiability,config,configuration,"C effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCS",MatchSource.WIKI,psi4manual/4.0b4/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc-1.html
Performance,perform,perform,"k-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCSCF module regardless of what; orbital type is chosen, twocon, rhf, or rohf. An example of the; MCSCF input is given below.; PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (e.g., triplets), but in general, not all the required ",MatchSource.WIKI,psi4manual/4.0b4/psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc-1.html
Availability,avail,available,"f the; totally-symmetric state. The FOLLOW_ROOT option may be used; to follow different roots of the effective Hamiltonian. A value of 1; instructs PSIMRCC to follow the solution with the lowest energy given; a certain set of determinants.; molecule o2 {; 0 3; O; O 1 2.265122720724; units au; }; set {; basis cc-pvtz; }; set mcscf {; reference rohf; docc [3,0,0,0,0,2,1,1] # Doubly occupied MOs; socc [0,0,1,1,0,0,0,0] # Singly occupied MOs; }; set psimrcc {; corr_wfn ccsd # Do Mk-MRCCSD; frozen_docc [1,0,0,0,0,1,0,0] # Frozen MOs; restricted_docc [2,0,0,0,0,1,1,1] # Doubly occupied MOs; active [0,0,1,1,0,0,0,0] # Active MOs; frozen_uocc [0,0,0,0,0,0,0,0] # Frozen virtual MOs; corr_multp 1 # Select the Ms = 0 component; root 1; wfn_sym B1g # Select the B1g state; }; energy('psimrcc'). Note that the oxygen molecule has 16 electrons (including core), while; the docc array contains only 7 doubly-occupied orbitals (or 14; electrons). Hence, two more electrons are available to place into; the active space (given by active), which consists of 2 orbitals.; Thus there are two active electrons in two orbitals. In this particular; example, we are using standard ROHF orbitals for the Mk-MRCCSD procedure,; rather than TCSCF orbitals. Nevertheless, with the present code,; these orbitals must be provided through the MCSCF module, as specified in the; set mcscf section above. Orbital ordering and selection of the model space¶; The reference determinants are specified in PSIMRCC; via occupational numbers. PSIMRCC requires that four arrays be specified; for this purpose. Frozen doubly occupied orbitals (FROZEN_DOCC) are doubly; occupied in each reference determinant and are not correlated in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; al",MatchSource.WIKI,psi4manual/4.0b4/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc.html
Deployability,configurat,configuration,"C effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCS",MatchSource.WIKI,psi4manual/4.0b4/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc.html
Energy Efficiency,power,powerful,"﻿. PSIMRCC Implementation of Mk-MRCC Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». PSIMRCC Implementation of Mk-MRCC Theory¶; Code author: Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in PSI4 implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the; wavefunction, . where are the reference determinants,; are reference-specific excitation operators, and; are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS",MatchSource.WIKI,psi4manual/4.0b4/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc.html
Integrability,contract,contracted," Francesco A. Evangelista and Andrew C. Simmonett; Section author: Alexander E. Vaughn; Module: Keywords, PSI Variables, PSIMRCC; State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in PSI4 implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113] and [Evangelista:2008:124104]. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668] for the; wavefunction, . where are the reference determinants,; are reference-specific excitation operators, and; are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the cod",MatchSource.WIKI,psi4manual/4.0b4/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc.html
Modifiability,config,configuration,"C effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. where. and. The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,. where. PSI4 currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCS",MatchSource.WIKI,psi4manual/4.0b4/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc.html
Performance,perform,perform,"k-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CAS-CI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CAS-CI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CAS-CI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCSCF module regardless of what; orbital type is chosen, twocon, rhf, or rohf. An example of the; MCSCF input is given below.; PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (e.g., triplets), but in general, not all the required ",MatchSource.WIKI,psi4manual/4.0b4/psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimrcc.html
Deployability,update,updated,"﻿. PsiPEP: Plans and Practices to Organize PSI4 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». PsiPEP: Plans and Practices to Organize PSI4¶. PEP1: Proposing PsiPEP for PSI4. Previous topic; Documentation; Next topic; PEP1: Proposing PsiPEP for PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 06, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/psipep-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psipep-1.html
Deployability,update,updated,"﻿. PsiPEP: Plans and Practices to Organize PSI4 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». PsiPEP: Plans and Practices to Organize PSI4¶. PEP1: Proposing PsiPEP for PSI4. Previous topic; Documentation; Next topic; PEP1: Proposing PsiPEP for PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Contributions: Intro to Programming in PSI4 ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 06, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/psipep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psipep.html
Deployability,update,updated,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Interface to Molden; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/psithonfunc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithonfunc-1.html
Energy Efficiency,efficient,efficient,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Interface to Molden; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/psithonfunc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithonfunc-1.html
Performance,perform,performed,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Interface to Molden; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/psithonfunc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithonfunc-1.html
Deployability,update,updated,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Interface to Molden; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/psithonfunc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithonfunc.html
Energy Efficiency,efficient,efficient,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Interface to Molden; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/psithonfunc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithonfunc.html
Performance,perform,performed,"﻿. Psithon Functions: Invoking a Calculation — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon Functions: Invoking a Calculation¶; To allow arbitrarily complex computations to be performed, PSI4 is built; upon the Python interpreter, with modifications termed Psithon. Sec.; Psithon: Structuring an Input File describes the non-standard Python associated with; clean molecule, basis, and option specification in the PSI4 input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent PSI4’s functionality. Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Output; Available Databases. Complete Basis Set; Output; Extrapolation Schemes. Spectroscopic Constants for Diatomics; Function Intercalls. Previous topic; Interface to Molden; Next topic; Notes on Options; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/psithonfunc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithonfunc.html
Availability,avail,available,"some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # ",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Deployability,patch,patch,"hon syntax, indentation within; the molecule block does not matter, although the molecule keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which i",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Energy Efficiency,meter,meters," if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # Atomic mass units to kg conversion factor ; psi_au2amu = 5.485799097E-4 # Atomic units (m$@@e$) to atomic mass units conversion factor ; psi_hartree2J = 4.359744E-18 # Hartree to joule conversion factor ; psi_hartree2aJ = 4.359744 # Hartree to attojoule (10$^{-18}$J) conversion factor ; psi_cal2J = 4.184 # Calorie to joule conversion factor ; psi_dipmom_au2si = 8.47835281E-30 # Atomic units to SI units (Cm) conversion factor for dipoles ; psi_dipmom_au2debye = 2.54174623 # Atomic units to Debye conversion factor for dipoles ; psi_dipmom_debye2si = 3.335640952E-30 # Debye to SI units (Cm) conversion factor for dipoles ; psi_c_au = 137.035999679 # Speed of light in atomic units ; psi_hartree2ev = 27.21138 # Hartree to eV conversion factor ; psi_hartree2wavenumbers = 219474.6 # Hartree to cm$^",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Integrability,depend,depends," H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule, and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; molecule h2{; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf'). molecule h{; H; }. set basis cc-pvdz; set reference uhf; energy('scf'). Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate keyword is provided. Using this keyword, the above in",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Modifiability,variab,variables,"ion. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversio",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Performance,perform,performed,"﻿. Psithon: Structuring an Input File — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Safety,detect,detected,"yword is provided. Using this keyword, the above input; file can be equivalently written as follows:; molecule h2{; H; H 1 0.9; }. molecule h{; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf'). activate(h); set basis cc-pvdz; set reference uhf; energy('scf'). Note that whenever the molecule is changed, the basis set must be specified; again. The following section provides more details about the job control; keywords used in the above examples. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule optional_molecule_name {...} block.; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (), respectively. The symmetry; can be specified by a line reading symmetry symbol, where; symbol is the Schönflies symbol of the; (Abelian) point group to use for the computation. This need not be; specified, as the molecular symmetry is automatically detected by; PSI4. Certain computations require that the molecule is not; reoriented; this can be achieved by adding either no_reorient or; noreorient. By default, Ångström units are used; this is changed by; adding a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr. Ghost Atoms¶; While many common computations, such as SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; molecule he2 {; He; Gh(He) 1 2.0; }. or; molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer, with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Geometries from the PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; co",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Security,access,accessed,"ailable to the job, not the memory per thread. Return Values and PSI Variables¶; To harness the power of Python, PSI4 makes the most pertinent results of; each computation are made available to the Python interpreter for; post-processing. To demonstrate, we can embellish the previous example of H2; and H atom:; molecule h2{; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'). molecule h{; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol*(2*h_energy - h2_energy); print""De=%f""%D_e. The energy() function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation.; Generally, there are multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module. These can be accessed through the get_variable() function.; For example, after performing a density fitted MP2 computation, both the; spin component scaled energy and the unscaled MP2 energy are made; available:; e_mp2=get_variable('MP2 TOTAL ENERGY'); e_scs_mp2=get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; accumulate over a PSI4 instance and are not cleared by clean().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the last will; include both SCF TOTAL ENERGY and FCI; TOTAL ENERGY. Don’t get excited that you got a; high-quality calculation cheaply. Loops¶; Python provides many control structures, which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; basis_sets=[""cc-pVDZ""",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Testability,test,test,"﻿. Psithon: Structuring an Input File — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Usability,simpl,simpler,"﻿. Psithon: Structuring an Input File — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b4/psithoninput-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html
Availability,avail,available,"some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # ",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Deployability,patch,patch,"hon syntax, indentation within; the molecule block does not matter, although the molecule keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which i",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Energy Efficiency,meter,meters," if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversion factor ; psi_bohr2m = 0.52917720859E-10 # Bohr to meters conversion factor ; psi_bohr2cm = 0.52917720859E-8 # Bohr to centimeters conversion factor ; psi_amu2g = 1.660538782E-24 # Atomic mass units to grams conversion factor ; psi_amu2kg = 1.660538782E-27 # Atomic mass units to kg conversion factor ; psi_au2amu = 5.485799097E-4 # Atomic units (m$@@e$) to atomic mass units conversion factor ; psi_hartree2J = 4.359744E-18 # Hartree to joule conversion factor ; psi_hartree2aJ = 4.359744 # Hartree to attojoule (10$^{-18}$J) conversion factor ; psi_cal2J = 4.184 # Calorie to joule conversion factor ; psi_dipmom_au2si = 8.47835281E-30 # Atomic units to SI units (Cm) conversion factor for dipoles ; psi_dipmom_au2debye = 2.54174623 # Atomic units to Debye conversion factor for dipoles ; psi_dipmom_debye2si = 3.335640952E-30 # Debye to SI units (Cm) conversion factor for dipoles ; psi_c_au = 137.035999679 # Speed of light in atomic units ; psi_hartree2ev = 27.21138 # Hartree to eV conversion factor ; psi_hartree2wavenumbers = 219474.6 # Hartree to cm$^",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Integrability,depend,depends," H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule, and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; molecule h2{; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf'). molecule h{; H; }. set basis cc-pvdz; set reference uhf; energy('scf'). Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate keyword is provided. Using this keyword, the above in",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Modifiability,variab,variables,"ion. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$^{-1}$) ; psi_bohr2angstroms = 0.52917720859 # Bohr to Angstroms conversio",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Performance,perform,performed,"﻿. Psithon: Structuring an Input File — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Safety,detect,detected,"yword is provided. Using this keyword, the above input; file can be equivalently written as follows:; molecule h2{; H; H 1 0.9; }. molecule h{; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf'). activate(h); set basis cc-pvdz; set reference uhf; energy('scf'). Note that whenever the molecule is changed, the basis set must be specified; again. The following section provides more details about the job control; keywords used in the above examples. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule optional_molecule_name {...} block.; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (), respectively. The symmetry; can be specified by a line reading symmetry symbol, where; symbol is the Schönflies symbol of the; (Abelian) point group to use for the computation. This need not be; specified, as the molecular symmetry is automatically detected by; PSI4. Certain computations require that the molecule is not; reoriented; this can be achieved by adding either no_reorient or; noreorient. By default, Ångström units are used; this is changed by; adding a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr. Ghost Atoms¶; While many common computations, such as SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; molecule he2 {; He; Gh(He) 1 2.0; }. or; molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer, with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Geometries from the PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; co",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Security,access,accessed,"ailable to the job, not the memory per thread. Return Values and PSI Variables¶; To harness the power of Python, PSI4 makes the most pertinent results of; each computation are made available to the Python interpreter for; post-processing. To demonstrate, we can embellish the previous example of H2; and H atom:; molecule h2{; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'). molecule h{; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol*(2*h_energy - h2_energy); print""De=%f""%D_e. The energy() function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation.; Generally, there are multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module. These can be accessed through the get_variable() function.; For example, after performing a density fitted MP2 computation, both the; spin component scaled energy and the unscaled MP2 energy are made; available:; e_mp2=get_variable('MP2 TOTAL ENERGY'); e_scs_mp2=get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; accumulate over a PSI4 instance and are not cleared by clean().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the last will; include both SCF TOTAL ENERGY and FCI; TOTAL ENERGY. Don’t get excited that you got a; high-quality calculation cheaply. Loops¶; Python provides many control structures, which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; basis_sets=[""cc-pVDZ""",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Testability,test,test,"﻿. Psithon: Structuring an Input File — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Usability,simpl,simpler,"﻿. Psithon: Structuring an Input File — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory, and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from the 3rd edition of the IUPAC Green; book [Cohen:GreenBook:2008]) are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that ~/.psi4rc values can be overridden by; the user).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files.; psi_h = 6.62606896E-34 # The Planck constant (Js) ; psi_c = 2.99792458E8 # Speed of light (ms$^{-1}$) ; psi_kb = 1.3806504E-23 # The Boltzmann constant (JK$^{-1}$) ; psi_R = 8.314472 # Universal gas constant (JK$^{-1}$mol$",MatchSource.WIKI,psi4manual/4.0b4/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput.html
Deployability,update,updated,"﻿. Python Module Index — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » . Python Module Index. a | ; b | ; c | ; d | ; f | ; g | ; h | ; i | ; j | ; m | ; n | ; o | ; p | ; q | ; r | ; s | ; t | ; u | ; w.  . a. ACENES. aliases.  . b. BAKERJCC93. BAKERJCC96. BASIC. basislist. basislistdunning. basislistother. BENCH12.  . c. CORE.  . d. dashparam. diatomic. driver.  . f. frac. functional.  . g. gaussian_n.  . h. HBC6. HSG. HTBH.  . i. input.  . j. JSCH.  . m. molutil.  . n. NBC10. NCB31. NHTBH.  . o. optproc.  . p. physconst. proc. procutil. psiexceptions. pubchem.  . q. qcdb.    ; qcdb.__init__.    ; qcdb.dbproc.    ; qcdb.exceptions.    ; qcdb.libmintscoordentry.    ; qcdb.libmintsmolecule.    ; qcdb.molecule.    ; qcdb.periodictable.    ; qcdb.physconst.    ; qcdb.psiutil.    ; qcdb.vecutil. qmmm.  . r. RGC10. RSE42.  . s. S22. S22by5. S66.  . t. text.  . u. util.  . w. wrappers. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/py-modindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/py-modindex.html
Integrability,wrap,wrappers,"﻿. Python Module Index — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » . Python Module Index. a | ; b | ; c | ; d | ; f | ; g | ; h | ; i | ; j | ; m | ; n | ; o | ; p | ; q | ; r | ; s | ; t | ; u | ; w.  . a. ACENES. aliases.  . b. BAKERJCC93. BAKERJCC96. BASIC. basislist. basislistdunning. basislistother. BENCH12.  . c. CORE.  . d. dashparam. diatomic. driver.  . f. frac. functional.  . g. gaussian_n.  . h. HBC6. HSG. HTBH.  . i. input.  . j. JSCH.  . m. molutil.  . n. NBC10. NCB31. NHTBH.  . o. optproc.  . p. physconst. proc. procutil. psiexceptions. pubchem.  . q. qcdb.    ; qcdb.__init__.    ; qcdb.dbproc.    ; qcdb.exceptions.    ; qcdb.libmintscoordentry.    ; qcdb.libmintsmolecule.    ; qcdb.molecule.    ; qcdb.periodictable.    ; qcdb.physconst.    ; qcdb.psiutil.    ; qcdb.vecutil. qmmm.  . r. RGC10. RSE42.  . s. S22. S22by5. S66.  . t. text.  . u. util.  . w. wrappers. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/py-modindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/py-modindex.html
Availability,avail,available,"﻿. Defining a Method Alias — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias-1.html
Deployability,update,updated,"e('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; energy('mp2.5'). Previous topic; User-Defined Basis Sets; Next topic; Creating a Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias-1.html
Energy Efficiency,energy,energy,"﻿. Defining a Method Alias — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias-1.html
Modifiability,variab,variables,"﻿. Defining a Method Alias — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias-1.html
Performance,optimiz,optimizer,"n/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias-1.html
Security,access,accessed,"﻿. Defining a Method Alias — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias-1.html
Availability,avail,available,"﻿. Defining a Method Alias — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias.html
Deployability,update,updated,"e('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; energy('mp2.5'). Previous topic; User-Defined Basis Sets; Next topic; Creating a Database; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias.html
Energy Efficiency,energy,energy,"﻿. Defining a Method Alias — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias.html
Modifiability,variab,variables,"﻿. Defining a Method Alias — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias.html
Performance,optimiz,optimizer,"n/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""PsiMod.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias.html
Security,access,accessed,"﻿. Defining a Method Alias — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR aka psi4/lib, including those described below. Defining a Method Alias¶; Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/lib/python/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/lib/python/aliases.py.; The rationale for the changes is indicated in the comments below.; def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; ",MatchSource.WIKI,psi4manual/4.0b4/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddalias.html
Deployability,update,updated,"nto a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.file, where the path can be either relative or absolute.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one above that includes; [basis name], PUREAM; value, and element basis set specifications. Hash signs denote comments.; Copy the section into a PSI4 input file and surround it with the command basis {...},; as shown below.; Multiple basis sets can be specified by adding additional sections within the surrounding brackets.; basis {; # basis set section like in snippet above goes here; # additional basis set sections follow; }. Previous topic; Customization: Adding Simple Extensions; Next topic; Defining a Method Alias; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickaddbasis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddbasis-1.html
Integrability,rout,routes,"﻿. User-Defined Basis Sets — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. User-Defined Basis Sets¶; There are three routes by which a basis set in G94 format can be introduced to PSI4’s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; Name the file with the name of the basis set and a .gbs extension, after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/lib/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/lib/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/lib/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.fi",MatchSource.WIKI,psi4manual/4.0b4/quickaddbasis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddbasis-1.html
Deployability,update,updated,"nto a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.file, where the path can be either relative or absolute.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one above that includes; [basis name], PUREAM; value, and element basis set specifications. Hash signs denote comments.; Copy the section into a PSI4 input file and surround it with the command basis {...},; as shown below.; Multiple basis sets can be specified by adding additional sections within the surrounding brackets.; basis {; # basis set section like in snippet above goes here; # additional basis set sections follow; }. Previous topic; Customization: Adding Simple Extensions; Next topic; Defining a Method Alias; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickaddbasis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddbasis.html
Integrability,rout,routes,"﻿. User-Defined Basis Sets — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. User-Defined Basis Sets¶; There are three routes by which a basis set in G94 format can be introduced to PSI4’s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; Name the file with the name of the basis set and a .gbs extension, after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/lib/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/lib/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/lib/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the basis set name in brackets.; As the second line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; The combination of [basis name], PUREAM value, and element basis set specifications; forms a section, like the one shown below.; Multiple basis sets can be specified in the same file by adding additional sections to the file.; Specify the location of the new basis set file in a PSI4 input file with the command; basis file path/to/basis.fi",MatchSource.WIKI,psi4manual/4.0b4/quickaddbasis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickaddbasis.html
Availability,avail,available,"le molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (int",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase-1.html
Deployability,update,updated,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase-1.html
Energy Efficiency,energy,energy,"﻿. Creating a Database — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in t",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase-1.html
Integrability,rout,route,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase-1.html
Modifiability,variab,variable,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase-1.html
Usability,simpl,simply,"essary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an examp",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase-1.html
Availability,avail,available,"le molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (int",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase.html
Deployability,update,updated,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase.html
Energy Efficiency,energy,energy,"﻿. Creating a Database — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in t",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase.html
Integrability,rout,route,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase.html
Modifiability,variab,variable,"r of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/lib/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/lib/databases. Previous topic; Defining a Method Alias; Next topic; Contributions: Intro to Programming in PSI4; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Customization: Adding Simple Extensions ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase.html
Usability,simpl,simply,"essary for changes made to; files in $PSIDATADIR, including those described below. Creating a Database¶; A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an examp",MatchSource.WIKI,psi4manual/4.0b4/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/quickadddatabase.html
Availability,avail,available,"ithout computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pic",MatchSource.WIKI,psi4manual/4.0b4/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt-1.html
Deployability,update,updated," given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; CI: Configuration Interaction; Next topic; ADC: Ab Initio Polarization Propagator; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt-1.html
Energy Efficiency,adapt,adapted,"﻿. SAPT: Symmetry-Adapted Perturbation Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density",MatchSource.WIKI,psi4manual/4.0b4/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt-1.html
Modifiability,adapt,adapted,"﻿. SAPT: Symmetry-Adapted Perturbation Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density",MatchSource.WIKI,psi4manual/4.0b4/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt-1.html
Performance,perform,performance," interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set globals {; basis aug-cc-pvdz; }. en",MatchSource.WIKI,psi4manual/4.0b4/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt-1.html
Safety,recover,recover,"ies (defined above),; they are composed of subsets of the individual terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; CI: Configuration Interaction; Next topic; ADC: A",MatchSource.WIKI,psi4manual/4.0b4/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt-1.html
Testability,test,tested,"asis, we can; throw away virtual orbitals that are expected to contribute little to the; dispersion energy. Speedups in excess of are possible. In; practice, this approximation is very good and should always be applied.; Publications resulting from the use of MP2 NO-based approximations should; cite the following: [Hohenstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for evaluating the triples contribution to dispersion. Type: conv double; Default: 1.0e-6. Advanced Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'). A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-trans",MatchSource.WIKI,psi4manual/4.0b4/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt-1.html
Usability,simpl,simplest,"T provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0",MatchSource.WIKI,psi4manual/4.0b4/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt-1.html
Availability,avail,available,"ithout computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pic",MatchSource.WIKI,psi4manual/4.0b4/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt.html
Deployability,update,updated," given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; CI: Configuration Interaction; Next topic; ADC: Ab Initio Polarization Propagator; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt.html
Energy Efficiency,adapt,adapted,"﻿. SAPT: Symmetry-Adapted Perturbation Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density",MatchSource.WIKI,psi4manual/4.0b4/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt.html
Modifiability,adapt,adapted,"﻿. SAPT: Symmetry-Adapted Perturbation Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein; Section author: Edward G. Hohenstein; Module: Keywords, PSI Variables, LIBSAPT_SOLVER; Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density",MatchSource.WIKI,psi4manual/4.0b4/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt.html
Performance,perform,performance," interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set globals {; basis aug-cc-pvdz; }. en",MatchSource.WIKI,psi4manual/4.0b4/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt.html
Safety,recover,recover,"ies (defined above),; they are composed of subsets of the individual terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. , , etc. in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space. The Est.Disp22(T); value used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Table Of Contents. SAPT: Symmetry-Adapted Perturbation Theory; A First Example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; SAPT_OS_SCALE; SAPT_SS_SCALE; DEBUG. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS; OCC_TOLERANCE. Advanced Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2. Charge-Transfer in SAPT; Interpreting SAPT Results. Previous topic; CI: Configuration Interaction; Next topic; ADC: A",MatchSource.WIKI,psi4manual/4.0b4/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt.html
Testability,test,tested,"asis, we can; throw away virtual orbitals that are expected to contribute little to the; dispersion energy. Speedups in excess of are possible. In; practice, this approximation is very good and should always be applied.; Publications resulting from the use of MP2 NO-based approximations should; cite the following: [Hohenstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for evaluating the triples contribution to dispersion. Type: conv double; Default: 1.0e-6. Advanced Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'). A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-trans",MatchSource.WIKI,psi4manual/4.0b4/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt.html
Usability,simpl,simplest,"T provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, , the fluctuation potential of each monomer, , and the; interaction potential, . The monomer Fock operators, , are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of , , and .; Through first-order in , electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in . For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1); In this notation, defines the order in and in ; the; subscript, , indicates that orbital relaxation effects are included. (2). (3). (4). (5); A thorough analysis of the performance of these truncations of SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs].; The SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligable errors into the SAPT energy and greatly; improves efficiency. A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0",MatchSource.WIKI,psi4manual/4.0b4/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt.html
Availability,avail,available,"uess converged.; ... @UHF iter 9: -149.62730705470665 -3.63645e-04 8.63718e-05 DIIS; @UHF iter 10: -149.62730737347948 -3.18773e-07 1.50227e-05 DIIS; @UHF iter 11: -149.62730738537107 -1.18916e-08 3.80497e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69250e-10 7.06690e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set use the exact (but much slower) PK algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested PK integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/conventional procedure can significantly accelerate SCF; computations requiring exact integrals, especially when used in concert with the; integral-direct conventional algorithm.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions oft",MatchSource.WIKI,psi4manual/4.0b4/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html
Deployability,update,updated,"the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment. Also, the SAD; UHF guess is very slow in large basis sets, so you may want to cast up for; >TZ.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your primary basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). Table Of Contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. Previous topic; Notes on Options; Next topic; DFT: Density Functional Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html
Energy Efficiency,efficient,efficient,"﻿. HF: Hartree–Fock Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». HF: Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type pk; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a PK algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. DF integrals are; automatically used to converge the DF-SCF solution before the PK algorithm is; activated. After printing all manner of titles, geometries, sizings, and; algorithm choices, the SCF finally reaches the iterations:; Total Energy Delta E RMS |[F,P]|. @UHF iter 0: -149.76816019169962 -1.49768e+02 1.36000e-01; @UHF iter 1: -149.59759112756984 1.70569e-01 2.42437e-02; @UHF iter 2: -149.62372414554761 -2.61330e-02 6.10239e-03 DIIS; @UHF iter 3: -149.62643112722810 -2.70698e-03 2.17299e-03 DIIS; @UHF iter 4: -149.62690062294968 -4.69496e-04 5.66895e-04 DIIS; @UHF iter 5: -149.62694151409750 -4.08911e-05 1.26359e-04 DIIS; @UHF iter 6: -149.62694337042228 -1.85632e-06 1.84114e-05 DI",MatchSource.WIKI,psi4manual/4.0b4/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html
Integrability,contract,contracted,"; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested PK integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/conventional procedure can significantly accelerate SCF; computations requiring exact integrals, especially when used in concert with the; integral-direct conventional algorithm.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the ge",MatchSource.WIKI,psi4manual/4.0b4/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html
Modifiability,enhance,enhanced,"f; energy('scf', brokensymmetry=True). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems or for; systems where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs ",MatchSource.WIKI,psi4manual/4.0b4/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html
Performance,perform,performed,"ent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested PK integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/conventional procedure can significantly accelerate SCF; computations requiring exact integrals, especially when used in concert with the; integral-direct conventional algorithm.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamilt",MatchSource.WIKI,psi4manual/4.0b4/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html
Safety,avoid,avoid,"orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree-Fock; theory, including:. Restricted Hartree-Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree-Fock (UHF); Appropriate for most open-shell systems, and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to an; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree-Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree-Fock (CUHF); A variant of ROHF that starts from a UHF ansatz, and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4, and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, ",MatchSource.WIKI,psi4manual/4.0b4/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html
Usability,simpl,simplest," guess. This hybrid DF/conventional procedure can significantly accelerate SCF; computations requiring exact integrals, especially when used in concert with the; integral-direct conventional algorithm.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. The eigenvalues are the orbital energies, and the metric matrix; is the AO-basis overlap matrix. Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbita",MatchSource.WIKI,psi4manual/4.0b4/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html
Availability,avail,available,"uess converged.; ... @UHF iter 9: -149.62730705470665 -3.63645e-04 8.63718e-05 DIIS; @UHF iter 10: -149.62730737347948 -3.18773e-07 1.50227e-05 DIIS; @UHF iter 11: -149.62730738537107 -1.18916e-08 3.80497e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69250e-10 7.06690e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set use the exact (but much slower) PK algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested PK integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/conventional procedure can significantly accelerate SCF; computations requiring exact integrals, especially when used in concert with the; integral-direct conventional algorithm.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions oft",MatchSource.WIKI,psi4manual/4.0b4/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf.html
Deployability,update,updated,"the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment. Also, the SAD; UHF guess is very slow in large basis sets, so you may want to cast up for; >TZ.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your primary basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). Table Of Contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess/Convergence Stabilization; ERI Algorithms; Convergence and Algorithm Defaults; Recommendations. Previous topic; Notes on Options; Next topic; DFT: Density Functional Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf.html
Energy Efficiency,efficient,efficient,"﻿. HF: Hartree–Fock Theory — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». HF: Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type pk; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a PK algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. DF integrals are; automatically used to converge the DF-SCF solution before the PK algorithm is; activated. After printing all manner of titles, geometries, sizings, and; algorithm choices, the SCF finally reaches the iterations:; Total Energy Delta E RMS |[F,P]|. @UHF iter 0: -149.76816019169962 -1.49768e+02 1.36000e-01; @UHF iter 1: -149.59759112756984 1.70569e-01 2.42437e-02; @UHF iter 2: -149.62372414554761 -2.61330e-02 6.10239e-03 DIIS; @UHF iter 3: -149.62643112722810 -2.70698e-03 2.17299e-03 DIIS; @UHF iter 4: -149.62690062294968 -4.69496e-04 5.66895e-04 DIIS; @UHF iter 5: -149.62694151409750 -4.08911e-05 1.26359e-04 DIIS; @UHF iter 6: -149.62694337042228 -1.85632e-06 1.84114e-05 DI",MatchSource.WIKI,psi4manual/4.0b4/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf.html
Integrability,contract,contracted,"; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested PK integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/conventional procedure can significantly accelerate SCF; computations requiring exact integrals, especially when used in concert with the; integral-direct conventional algorithm.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the ge",MatchSource.WIKI,psi4manual/4.0b4/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf.html
Modifiability,enhance,enhanced,"f; energy('scf', brokensymmetry=True). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems or for; systems where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs ",MatchSource.WIKI,psi4manual/4.0b4/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf.html
Performance,perform,performed,"ent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested PK integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/conventional procedure can significantly accelerate SCF; computations requiring exact integrals, especially when used in concert with the; integral-direct conventional algorithm.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamilt",MatchSource.WIKI,psi4manual/4.0b4/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf.html
Safety,avoid,avoid,"orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree-Fock; theory, including:. Restricted Hartree-Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree-Fock (UHF); Appropriate for most open-shell systems, and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to an; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree-Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree-Fock (CUHF); A variant of ROHF that starts from a UHF ansatz, and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4, and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, ",MatchSource.WIKI,psi4manual/4.0b4/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf.html
Usability,simpl,simplest," guess. This hybrid DF/conventional procedure can significantly accelerate SCF; computations requiring exact integrals, especially when used in concert with the; integral-direct conventional algorithm.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. The eigenvalues are the orbital energies, and the metric matrix; is the AO-basis overlap matrix. Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbita",MatchSource.WIKI,psi4manual/4.0b4/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf.html
Deployability,update,updated,"﻿. Search — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » . Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/search.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/search.html
Availability,checkpoint,checkpoint,"pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, wit",MatchSource.WIKI,psi4manual/4.0b4/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite-1.html
Deployability,update,update,"F. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals.",MatchSource.WIKI,psi4manual/4.0b4/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite-1.html
Energy Efficiency,energy,energy,"﻿. Test Suite and Sample Inputs — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ ",MatchSource.WIKI,psi4manual/4.0b4/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite-1.html
Integrability,depend,depend,"nzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-3",MatchSource.WIKI,psi4manual/4.0b4/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite-1.html
Modifiability,variab,variables,"/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mp2_5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit s",MatchSource.WIKI,psi4manual/4.0b4/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite-1.html
Performance,optimiz,optimization," Suite and Sample Inputs — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computa",MatchSource.WIKI,psi4manual/4.0b4/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite-1.html
Safety,avoid,avoided,"rogram can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mp2_5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite ",MatchSource.WIKI,psi4manual/4.0b4/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite-1.html
Testability,test,test,"﻿. Test Suite and Sample Inputs — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ ",MatchSource.WIKI,psi4manual/4.0b4/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite-1.html
Availability,checkpoint,checkpoint,"pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, wit",MatchSource.WIKI,psi4manual/4.0b4/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite.html
Deployability,update,update,"F. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals.",MatchSource.WIKI,psi4manual/4.0b4/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite.html
Energy Efficiency,energy,energy,"﻿. Test Suite and Sample Inputs — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ ",MatchSource.WIKI,psi4manual/4.0b4/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite.html
Integrability,depend,depend,"nzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-3",MatchSource.WIKI,psi4manual/4.0b4/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite.html
Modifiability,variab,variables,"/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mp2_5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit s",MatchSource.WIKI,psi4manual/4.0b4/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite.html
Performance,optimiz,optimization," Suite and Sample Inputs — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computa",MatchSource.WIKI,psi4manual/4.0b4/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite.html
Safety,avoid,avoided,"rogram can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mp2_5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite ",MatchSource.WIKI,psi4manual/4.0b4/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite.html
Testability,test,test,"﻿. Test Suite and Sample Inputs — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ ",MatchSource.WIKI,psi4manual/4.0b4/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite.html
Availability,down,downhill,"icted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Deployability,install,installation,"dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (subtracting any ”.in” or ”.dat” suffix),; plus a ”.out” suffix. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a clos",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Energy Efficiency,energy,energy,"t File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (subtracting any ”.in” or ”.dat” suffix),; plus a ”.out” suffix. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutra",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Integrability,message,message,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Modifiability,variab,variables,"le (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables ( and ), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; RO",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Performance,perform,perform," uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ---",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Safety,detect,detected,"n coordinates for each molecule, and separate the two with two; dashes, like this:; # Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. no_reorient; symmetry c1; }. Notice we have a couple of new keywords in the molecule specification.; no_reorient tells the program not to reorient the molecule; to a different coordinate system (this is important for SAPT to make; sure the same coordinate frame is used for the computations of the two; monomers and for the dimer). The next keyword symmetry c1 tells PSI4 to run; in C1 point-group symmetry (i.e., without using symmetry), even if a; higher symmetry is detected. SAPT computations know to turn off; symmetry and fix orientation even without the user specifying these; molecule keywords.; Here’s the second half of the input:; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set or set globals; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we ",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Security,access,accessed,"ted, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = cp('ccsd(t)'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function cp() does it all for us, automatically.; And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol, which is; defined in Sec. Scratch Files and the ~/.psi4rc File. Notice the loop over to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. Table Of Contents. A PSI4 Tutorial; Basic Input File Structure; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy wi",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Testability,test,test,"------------------------------------------------------------------------ ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking at the output from running the; previous example, we see that the OH bond length is about 0.9463 Ångstroms,; and the bond angle is about 104.575 degrees. It’s good to give this many; digits (or more) to make sure there’s not significant roundoff error in the; geometry when running a frequency computation. So, our frequency; computation input (which can be found as test case; tu4-h2o-freq) is:; #! Frequencies for H2O HF/cc-pVDZ at optimized geometry. memory 250 mb. molecule h2o {; O ; H 1 0.9463; H 1 0.9463 2 104.575; }. set basis cc-pVDZ; set scf_type pk; frequencies('scf'). Alternatively, it’s also possible for PSI4 to use Cartesian coordinate; input. Here, the Cartesian coordinates of the optimized geometry can be; extracted from the bottom of the optimization output. The input; would then look like this:; molecule h2o {; O 0.0000000000 0.0000000000 -0.0647163165; H 0.0000000000 -0.7490459647 0.5135474533; H 0.0000000000 0.7490459647 0.5135474533; }. set basis cc-pVDZ; frequencies('scf'). If either of the inputs above are run, the program should do some; computations and then finally report the following harmonic vibrational; frequencies (roundoff errors of around 0.1 cm-1 may exist):; Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1776.2423; A1 4113.7717; B2 4211.8290; -----------------------------------------------.",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Usability,simpl,simple,"ith the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line ",MatchSource.WIKI,psi4manual/4.0b4/tutorial-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html
Availability,down,downhill,"icted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Deployability,install,installation,"dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (subtracting any ”.in” or ”.dat” suffix),; plus a ”.out” suffix. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a clos",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Energy Efficiency,energy,energy,"t File Structure¶; PSI4 reads input from a text file, which can be prepared in any standard; text editor. The default input file name is input.dat and the; default output file name is output.dat. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:; >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (subtracting any ”.in” or ”.dat” suffix),; plus a ”.out” suffix. Running a Basic Hartree–Fock Calculation¶; In our first example, we will consider a Hartree–Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix.; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutra",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Integrability,message,message,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Modifiability,variab,variables,"le (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with 0 3 at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables ( and ), whose values are given; at the end of the Z-matrix specification.; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; RO",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Performance,perform,perform," uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ---",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Safety,detect,detected,"n coordinates for each molecule, and separate the two with two; dashes, like this:; # Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. no_reorient; symmetry c1; }. Notice we have a couple of new keywords in the molecule specification.; no_reorient tells the program not to reorient the molecule; to a different coordinate system (this is important for SAPT to make; sure the same coordinate frame is used for the computations of the two; monomers and for the dimer). The next keyword symmetry c1 tells PSI4 to run; in C1 point-group symmetry (i.e., without using symmetry), even if a; higher symmetry is detected. SAPT computations know to turn off; symmetry and fix orientation even without the user specifying these; molecule keywords.; Here’s the second half of the input:; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set or set globals; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we ",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Security,access,accessed,"ted, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = cp('ccsd(t)'), computes the counterpoise-corrected; CCSD(T) energy and places it in the ecp dictionary with R as; the index. Note we didn’t need to specify ghost atoms, and we didn’t need; to call the monomer and dimer computations separately. The built-in; Psithon function cp() does it all for us, automatically.; And that’s it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol, which is; defined in Sec. Scratch Files and the ~/.psi4rc File. Notice the loop over to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. Table Of Contents. A PSI4 Tutorial; Basic Input File Structure; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy wi",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Testability,test,test,"------------------------------------------------------------------------ ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking at the output from running the; previous example, we see that the OH bond length is about 0.9463 Ångstroms,; and the bond angle is about 104.575 degrees. It’s good to give this many; digits (or more) to make sure there’s not significant roundoff error in the; geometry when running a frequency computation. So, our frequency; computation input (which can be found as test case; tu4-h2o-freq) is:; #! Frequencies for H2O HF/cc-pVDZ at optimized geometry. memory 250 mb. molecule h2o {; O ; H 1 0.9463; H 1 0.9463 2 104.575; }. set basis cc-pVDZ; set scf_type pk; frequencies('scf'). Alternatively, it’s also possible for PSI4 to use Cartesian coordinate; input. Here, the Cartesian coordinates of the optimized geometry can be; extracted from the bottom of the optimization output. The input; would then look like this:; molecule h2o {; O 0.0000000000 0.0000000000 -0.0647163165; H 0.0000000000 -0.7490459647 0.5135474533; H 0.0000000000 0.7490459647 0.5135474533; }. set basis cc-pVDZ; frequencies('scf'). If either of the inputs above are run, the program should do some; computations and then finally report the following harmonic vibrational; frequencies (roundoff errors of around 0.1 cm-1 may exist):; Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1776.2423; A1 4113.7717; B2 4211.8290; -----------------------------------------------.",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Usability,simpl,simple,"ith the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). For your convenience, this example can be found in; tu1-h2o-energy.; You can run it if you wish.; Once PSI4 is in your path (see the User Configuration; section of the installation instructions), you can run this computation by typing; >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree–Fock energy in a section like this:; Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about , so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. Compiling and Installing).; This very simple input is sufficient to run the requested information.; Notice that we didn’t tell the program some otherwise useful information; like the charge on the molecule (0, it’s neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree–Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords.; Let’s consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let’s run a computation; on methylene (CH2), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity ).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, PSI4; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line ",MatchSource.WIKI,psi4manual/4.0b4/tutorial.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial.html
Availability,toler,tolerably,"790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent ",MatchSource.WIKI,psi4manual/4.0b5/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/adc-1.html
Deployability,configurat,configurations,"fold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for ",MatchSource.WIKI,psi4manual/4.0b5/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/adc-1.html
