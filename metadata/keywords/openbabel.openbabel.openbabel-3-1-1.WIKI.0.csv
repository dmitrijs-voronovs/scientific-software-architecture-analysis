id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
http://openbabel.org//genindex.html:134,Usability,Guid,Guide,134,﻿. Index — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Index. ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ,MatchSource.WIKI,genindex.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//genindex.html
http://openbabel.org//genindex.html:191,Usability,Guid,Guide,191,﻿. Index — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Index. ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ,MatchSource.WIKI,genindex.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//genindex.html
http://openbabel.org//index-wcopy.html:50598,Availability,error,errors,50598,"le Reference; Open Babel: tokenst.h Source File; Open Babel: transform.cpp File Reference; Open Babel: transform3d.cpp File Reference; Open Babel: transform3d.h File Reference; Open Babel: transform3d.h Source File; Open Babel: typer.cpp File Reference; Open Babel: typer.h File Reference; Open Babel: typer.h Source File; Open Babel: _AtomExpr Union Reference; Open Babel: Member List; Open Babel: _BondExpr Union Reference; Open Babel: Member List; Open Babel: vector3.cpp File Reference; Open Babel: vector3.h File Reference; Open Babel: vector3.h Source File; Open Babel: xml.h File Reference; Open Babel: xml.h Source File. api; api; api; api; api; API — Open Babel openbabel-3-1-1 documentation; index.html; index.html; index.html; index.html; index.html; API — Open Babel openbabel-3-1-1 documentation. cdn-cgi; . /l; ; Email Protection | Cloudflare. /scripts; . /5c5dd728; . /cloudflare-static; ; email-decode.min.js. /7d0fa10a; . /cloudflare-static; ; rocket-loader.min.js. /styles; ; cf.errors.css. dev-api; ; index.htm. docs; . /3DStructureGen; ; Generate multiple conformers — Open Babel openbabel-3-1-1 documentation; 3D Structure Generation — Open Babel openbabel-3-1-1 documentation; Generate a single conformer — Open Babel openbabel-3-1-1 documentation. /Aromaticity; ; Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. /Charges; ; Charge models — Open Babel openbabel-3-1-1 documentation. /Cheminf101; ; Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation; Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation; Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation; Representing Molecules — Open Babel openbabel-3-1-1 documentation; Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation; Molecular Similarity — Open Babel openbabel-3-1-1 documentation. /Command-line_tools; ; obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation; obabel vs Chemistry Too",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:57336,Availability,checkpoint,checkpoint,57336,"1-1 documentation; FASTA format (fa, fasta, fsa) — Open Babel openbabel-3-1-1 documentation; Fastsearch format (fs) — Open Babel openbabel-3-1-1 documentation; Feature format (feat) — Open Babel openbabel-3-1-1 documentation; Fenske-Hall Z-Matrix format (fh) — Open Babel openbabel-3-1-1 documentation; FHIaims XYZ format (fhiaims) — Open Babel openbabel-3-1-1 documentation; Fingerprint format (fpt) — Open Babel openbabel-3-1-1 documentation; FPS text fingerprint format (Dalke) (fps) — Open Babel openbabel-3-1-1 documentation; Free Form Fractional format (fract) — Open Babel openbabel-3-1-1 documentation; GAMESS Input (gamin, inp) — Open Babel openbabel-3-1-1 documentation; GAMESS Output (gam, gamess, gamout) — Open Babel openbabel-3-1-1 documentation; GAMESS-UK Input (gukin) — Open Babel openbabel-3-1-1 documentation; GAMESS-UK Output (gukout) — Open Babel openbabel-3-1-1 documentation; Gaussian cube format (cub, cube) — Open Babel openbabel-3-1-1 documentation; Gaussian formatted checkpoint file format (fch, fchk, fck) — Open Babel openbabel-3-1-1 documentation; Gaussian Input (com, gau, gjc, gjf) — Open Babel openbabel-3-1-1 documentation; Gaussian Output (g03, g09, g16, g92, g94, g98, gal) — Open Babel openbabel-3-1-1 documentation; Gaussian Z-Matrix Input (gzmat) — Open Babel openbabel-3-1-1 documentation; General XML format (xml) — Open Babel openbabel-3-1-1 documentation; Generic Output file format (dat, log, out, output) — Open Babel openbabel-3-1-1 documentation; Ghemical format (gpr) — Open Babel openbabel-3-1-1 documentation; GRO format (gro) — Open Babel openbabel-3-1-1 documentation; GROMOS96 format (gr96) — Open Babel openbabel-3-1-1 documentation; GULP format (got) — Open Babel openbabel-3-1-1 documentation; HyperChem HIN format (hin) — Open Babel openbabel-3-1-1 documentation; Image formats — Open Babel openbabel-3-1-1 documentation; InChI format (inchi) — Open Babel openbabel-3-1-1 documentation; InChIKey (inchikey) — Open Babel openbabel-3-1-1 documen",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:65312,Deployability,Install,Installation,65312,documentation; Molecular fingerprints and similarity searching — Open Babel openbabel-3-1-1 documentation; Spectrophores™ — Open Babel openbabel-3-1-1 documentation. /Forcefields; ; Generalized Amber Force Field (gaff) — Open Babel openbabel-3-1-1 documentation; Ghemical Force Field (ghemical) — Open Babel openbabel-3-1-1 documentation; MMFF94 Force Field (mmff94) — Open Babel openbabel-3-1-1 documentation; Molecular Mechanics and Force Fields — Open Babel openbabel-3-1-1 documentation; Universal Force Field (uff) — Open Babel openbabel-3-1-1 documentation. /GUI; ; The Open Babel GUI — Open Babel openbabel-3-1-1 documentation. /GUITutorial; ; Converting chemical file formats — Open Babel openbabel-3-1-1 documentation; Filtering structures — Open Babel openbabel-3-1-1 documentation; Tutorial on using the GUI — Open Babel openbabel-3-1-1 documentation; Substructure and similarity searching a large dataset — Open Babel openbabel-3-1-1 documentation. /Installation; ; Install Open Babel — Open Babel openbabel-3-1-1 documentation. /Introduction; ; Frequently Asked Questions — Open Babel openbabel-3-1-1 documentation; Goals of the Open Babel project — Open Babel openbabel-3-1-1 documentation; Introduction — Open Babel openbabel-3-1-1 documentation; Thanks — Open Babel openbabel-3-1-1 documentation. /ReleaseNotes; ; Release Notes — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.99 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.1.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.1.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.0 — Open Babel openbabel-3-1-1 documentation;,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:65328,Deployability,Install,Install,65328,documentation; Molecular fingerprints and similarity searching — Open Babel openbabel-3-1-1 documentation; Spectrophores™ — Open Babel openbabel-3-1-1 documentation. /Forcefields; ; Generalized Amber Force Field (gaff) — Open Babel openbabel-3-1-1 documentation; Ghemical Force Field (ghemical) — Open Babel openbabel-3-1-1 documentation; MMFF94 Force Field (mmff94) — Open Babel openbabel-3-1-1 documentation; Molecular Mechanics and Force Fields — Open Babel openbabel-3-1-1 documentation; Universal Force Field (uff) — Open Babel openbabel-3-1-1 documentation. /GUI; ; The Open Babel GUI — Open Babel openbabel-3-1-1 documentation. /GUITutorial; ; Converting chemical file formats — Open Babel openbabel-3-1-1 documentation; Filtering structures — Open Babel openbabel-3-1-1 documentation; Tutorial on using the GUI — Open Babel openbabel-3-1-1 documentation; Substructure and similarity searching a large dataset — Open Babel openbabel-3-1-1 documentation. /Installation; ; Install Open Babel — Open Babel openbabel-3-1-1 documentation. /Introduction; ; Frequently Asked Questions — Open Babel openbabel-3-1-1 documentation; Goals of the Open Babel project — Open Babel openbabel-3-1-1 documentation; Introduction — Open Babel openbabel-3-1-1 documentation; Thanks — Open Babel openbabel-3-1-1 documentation. /ReleaseNotes; ; Release Notes — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.99 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.1.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.1.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.0 — Open Babel openbabel-3-1-1 documentation;,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:65664,Deployability,Release,ReleaseNotes,65664,d (mmff94) — Open Babel openbabel-3-1-1 documentation; Molecular Mechanics and Force Fields — Open Babel openbabel-3-1-1 documentation; Universal Force Field (uff) — Open Babel openbabel-3-1-1 documentation. /GUI; ; The Open Babel GUI — Open Babel openbabel-3-1-1 documentation. /GUITutorial; ; Converting chemical file formats — Open Babel openbabel-3-1-1 documentation; Filtering structures — Open Babel openbabel-3-1-1 documentation; Tutorial on using the GUI — Open Babel openbabel-3-1-1 documentation; Substructure and similarity searching a large dataset — Open Babel openbabel-3-1-1 documentation. /Installation; ; Install Open Babel — Open Babel openbabel-3-1-1 documentation. /Introduction; ; Frequently Asked Questions — Open Babel openbabel-3-1-1 documentation; Goals of the Open Babel project — Open Babel openbabel-3-1-1 documentation; Introduction — Open Babel openbabel-3-1-1 documentation; Thanks — Open Babel openbabel-3-1-1 documentation. /ReleaseNotes; ; Release Notes — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.99 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.1.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.1.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.3 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.4.0 — Open Babel openbabel-3-1-1 docum,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:65680,Deployability,Release,Release,65680,d (mmff94) — Open Babel openbabel-3-1-1 documentation; Molecular Mechanics and Force Fields — Open Babel openbabel-3-1-1 documentation; Universal Force Field (uff) — Open Babel openbabel-3-1-1 documentation. /GUI; ; The Open Babel GUI — Open Babel openbabel-3-1-1 documentation. /GUITutorial; ; Converting chemical file formats — Open Babel openbabel-3-1-1 documentation; Filtering structures — Open Babel openbabel-3-1-1 documentation; Tutorial on using the GUI — Open Babel openbabel-3-1-1 documentation; Substructure and similarity searching a large dataset — Open Babel openbabel-3-1-1 documentation. /Installation; ; Install Open Babel — Open Babel openbabel-3-1-1 documentation. /Introduction; ; Frequently Asked Questions — Open Babel openbabel-3-1-1 documentation; Goals of the Open Babel project — Open Babel openbabel-3-1-1 documentation; Introduction — Open Babel openbabel-3-1-1 documentation; Thanks — Open Babel openbabel-3-1-1 documentation. /ReleaseNotes; ; Release Notes — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.100.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 1.99 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.0.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.1.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.1.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.2 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.3 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.4.0 — Open Babel openbabel-3-1-1 docum,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:67651,Deployability,Install,Install,67651, Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.3 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.4.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 3.0.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 3.1.0 — Open Babel openbabel-3-1-1 documentation. /Stereochemistry; ; Stereochemistry — Open Babel openbabel-3-1-1 documentation. /UseTheLibrary; ; The Open Babel API — Open Babel openbabel-3-1-1 documentation; C++ — Open Babel openbabel-3-1-1 documentation; CSharp and OBDotNet — Open Babel openbabel-3-1-1 documentation; Write software using the Open Babel library — Open Babel openbabel-3-1-1 documentation; Java — Open Babel openbabel-3-1-1 documentation; Updating to Open Babel 3.0 from 2.x — Open Babel openbabel-3-1-1 documentation; Perl — Open Babel openbabel-3-1-1 documentation; Python — Open Babel openbabel-3-1-1 documentation; Pybel — Open Babel openbabel-3-1-1 documentation; Pybel API — Open Babel openbabel-3-1-1 documentation; The openbabel module — Open Babel openbabel-3-1-1 documentation; Examples — Open Babel openbabel-3-1-1 documentation; Install Python bindings — Open Babel openbabel-3-1-1 documentation; Introduction — Open Babel openbabel-3-1-1 documentation; Ruby — Open Babel openbabel-3-1-1 documentation. /WritePlugins; ; How to add a new file format — Open Babel openbabel-3-1-1 documentation; Adding new operations and options — Open Babel openbabel-3-1-1 documentation; How to add a new descriptor — Open Babel openbabel-3-1-1 documentation; Adding plugins — Open Babel openbabel-3-1-1 documentation. User Guide — Open Babel openbabel-3-1-1 documentation; User Guide — Open Babel openbabel-3-1-1 documentation. Index — Open Babel openbabel-3-1-1 documentation; Open Babel - the chemistry toolbox — Open Babel openbabel-3-1-1 documentation; Search - Open Babel openbabel-3-1-1 documentation; searchindex.js. ,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:2095,Energy Efficiency,charge,chargemodel,2095, atomclass.h File Reference; Open Babel: atomclass.h Source File; Open Babel: base.cpp File Reference; Open Babel: base.h File Reference; Open Babel: base.h Source File; Open Babel: bitvec.cpp File Reference; Open Babel: bitvec.h File Reference; Open Babel: bitvec.h Source File; Open Babel: bond.cpp File Reference; Open Babel: bond.h File Reference; Open Babel: bond.h Source File; Open Babel: bondtyper.cpp File Reference; Open Babel: bondtyper.h File Reference; Open Babel: bondtyper.h Source File; Open Babel: builder.cpp File Reference; Open Babel: builder.h File Reference; Open Babel: builder.h Source File; Open Babel: canon.cpp File Reference; Open Babel: canon.h File Reference; Open Babel: canon.h Source File; Open Babel: Canonical Coding Algorithm; Open Babel: chains.cpp File Reference; Open Babel: chains.h File Reference; Open Babel: chains.h Source File; Open Babel: What's New in Version 2.1; Open Babel: What's New in Version 2.2; Open Babel: What's New in Version 2.3; Open Babel: chargemodel.cpp File Reference; Open Babel: chargemodel.h File Reference; Open Babel: chargemodel.h Source File; Open Babel: chiral.cpp File Reference; Open Babel: chiral.h File Reference; Open Babel: chiral.h Source File; Open Babel: cistrans.h File Reference; Open Babel: cistrans.h Source File; Open Babel: DLHandler Class Reference; Open Babel: Member List; Open Babel: Alphabetical List; Open Babel: AliasData Class Reference; Open Babel: Member List; Open Babel: FastSearch Class Reference; Open Babel: FastSearchIndexer Class Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: FilteringInputStreambuf< Extractor > Class Template Reference; Open Babel: Member List; Open Babel: GasteigerState Class Reference; Open Babel: Member List; Open Babel: LineEndingExtractor Class Reference; Open Babel: Member List; Open Babel: matrix3x3 Class Reference; Open Babel: Member List; Open Babel: OBAlign Class Reference; Open Babel: Member List; Open Babel: OBAngle Class Reference;,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:2139,Energy Efficiency,charge,chargemodel,2139,bel: atomclass.h Source File; Open Babel: base.cpp File Reference; Open Babel: base.h File Reference; Open Babel: base.h Source File; Open Babel: bitvec.cpp File Reference; Open Babel: bitvec.h File Reference; Open Babel: bitvec.h Source File; Open Babel: bond.cpp File Reference; Open Babel: bond.h File Reference; Open Babel: bond.h Source File; Open Babel: bondtyper.cpp File Reference; Open Babel: bondtyper.h File Reference; Open Babel: bondtyper.h Source File; Open Babel: builder.cpp File Reference; Open Babel: builder.h File Reference; Open Babel: builder.h Source File; Open Babel: canon.cpp File Reference; Open Babel: canon.h File Reference; Open Babel: canon.h Source File; Open Babel: Canonical Coding Algorithm; Open Babel: chains.cpp File Reference; Open Babel: chains.h File Reference; Open Babel: chains.h Source File; Open Babel: What's New in Version 2.1; Open Babel: What's New in Version 2.2; Open Babel: What's New in Version 2.3; Open Babel: chargemodel.cpp File Reference; Open Babel: chargemodel.h File Reference; Open Babel: chargemodel.h Source File; Open Babel: chiral.cpp File Reference; Open Babel: chiral.h File Reference; Open Babel: chiral.h Source File; Open Babel: cistrans.h File Reference; Open Babel: cistrans.h Source File; Open Babel: DLHandler Class Reference; Open Babel: Member List; Open Babel: Alphabetical List; Open Babel: AliasData Class Reference; Open Babel: Member List; Open Babel: FastSearch Class Reference; Open Babel: FastSearchIndexer Class Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: FilteringInputStreambuf< Extractor > Class Template Reference; Open Babel: Member List; Open Babel: GasteigerState Class Reference; Open Babel: Member List; Open Babel: LineEndingExtractor Class Reference; Open Babel: Member List; Open Babel: matrix3x3 Class Reference; Open Babel: Member List; Open Babel: OBAlign Class Reference; Open Babel: Member List; Open Babel: OBAngle Class Reference; Open Babel: OBAngleData Class Refe,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:2181,Energy Efficiency,charge,chargemodel,2181,ase.cpp File Reference; Open Babel: base.h File Reference; Open Babel: base.h Source File; Open Babel: bitvec.cpp File Reference; Open Babel: bitvec.h File Reference; Open Babel: bitvec.h Source File; Open Babel: bond.cpp File Reference; Open Babel: bond.h File Reference; Open Babel: bond.h Source File; Open Babel: bondtyper.cpp File Reference; Open Babel: bondtyper.h File Reference; Open Babel: bondtyper.h Source File; Open Babel: builder.cpp File Reference; Open Babel: builder.h File Reference; Open Babel: builder.h Source File; Open Babel: canon.cpp File Reference; Open Babel: canon.h File Reference; Open Babel: canon.h Source File; Open Babel: Canonical Coding Algorithm; Open Babel: chains.cpp File Reference; Open Babel: chains.h File Reference; Open Babel: chains.h Source File; Open Babel: What's New in Version 2.1; Open Babel: What's New in Version 2.2; Open Babel: What's New in Version 2.3; Open Babel: chargemodel.cpp File Reference; Open Babel: chargemodel.h File Reference; Open Babel: chargemodel.h Source File; Open Babel: chiral.cpp File Reference; Open Babel: chiral.h File Reference; Open Babel: chiral.h Source File; Open Babel: cistrans.h File Reference; Open Babel: cistrans.h Source File; Open Babel: DLHandler Class Reference; Open Babel: Member List; Open Babel: Alphabetical List; Open Babel: AliasData Class Reference; Open Babel: Member List; Open Babel: FastSearch Class Reference; Open Babel: FastSearchIndexer Class Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: FilteringInputStreambuf< Extractor > Class Template Reference; Open Babel: Member List; Open Babel: GasteigerState Class Reference; Open Babel: Member List; Open Babel: LineEndingExtractor Class Reference; Open Babel: Member List; Open Babel: matrix3x3 Class Reference; Open Babel: Member List; Open Babel: OBAlign Class Reference; Open Babel: Member List; Open Babel: OBAngle Class Reference; Open Babel: OBAngleData Class Reference; Open Babel: Member List; Open Babel:,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:28743,Energy Efficiency,charge,chargemodel,28743,ence; Open Babel: bindings.h Source File; Open Babel: bitvec.cpp File Reference; Open Babel: bitvec.h File Reference; Open Babel: bitvec.h Source File; Open Babel: bond.cpp File Reference; Open Babel: bond.h File Reference; Open Babel: bond.h Source File; Open Babel: bondtyper.cpp File Reference; Open Babel: bondtyper.h File Reference; Open Babel: bondtyper.h Source File; Open Babel: builder.cpp File Reference; Open Babel: builder.h File Reference; Open Babel: builder.h Source File; Open Babel: cairopainter.cpp File Reference; Open Babel: cairopainter.h File Reference; Open Babel: cairopainter.h Source File; Open Babel: canon.cpp File Reference; Open Babel: canon.h File Reference; Open Babel: canon.h Source File; Open Babel: Canonical Coding Algorithm; Open Babel: chains.cpp File Reference; Open Babel: chains.h File Reference; Open Babel: chains.h Source File; Open Babel: What's New in Version 2.1; Open Babel: What's New in Version 2.2; Open Babel: What's New in Version 2.3; Open Babel: chargemodel.cpp File Reference; Open Babel: chargemodel.h File Reference; Open Babel: chargemodel.h Source File; Open Babel: cistrans.h File Reference; Open Babel: cistrans.h Source File; Open Babel: DLHandler Class Reference; Open Babel: Member List; Open Babel: AliasData Class Reference; Open Babel: Member List; Open Babel: ASCIIPainter Class Reference; Open Babel: Member List; Open Babel: CairoPainter Class Reference; Open Babel: Member List; Open Babel: CommandPainter Class Reference; Open Babel: Member List; Open Babel: FastSearch Class Reference; Open Babel: FastSearchIndexer Class Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: FilteringInputStream< Extractor > Class Template Reference; Open Babel: FilteringInputStreambuf< Extractor > Class Template Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: GasteigerState Class Reference; Open Babel: Member List; Open Babel: LineEndingExtractor Class Reference; Open Babel: Member List; Ope,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:28787,Energy Efficiency,charge,chargemodel,28787,File; Open Babel: bitvec.cpp File Reference; Open Babel: bitvec.h File Reference; Open Babel: bitvec.h Source File; Open Babel: bond.cpp File Reference; Open Babel: bond.h File Reference; Open Babel: bond.h Source File; Open Babel: bondtyper.cpp File Reference; Open Babel: bondtyper.h File Reference; Open Babel: bondtyper.h Source File; Open Babel: builder.cpp File Reference; Open Babel: builder.h File Reference; Open Babel: builder.h Source File; Open Babel: cairopainter.cpp File Reference; Open Babel: cairopainter.h File Reference; Open Babel: cairopainter.h Source File; Open Babel: canon.cpp File Reference; Open Babel: canon.h File Reference; Open Babel: canon.h Source File; Open Babel: Canonical Coding Algorithm; Open Babel: chains.cpp File Reference; Open Babel: chains.h File Reference; Open Babel: chains.h Source File; Open Babel: What's New in Version 2.1; Open Babel: What's New in Version 2.2; Open Babel: What's New in Version 2.3; Open Babel: chargemodel.cpp File Reference; Open Babel: chargemodel.h File Reference; Open Babel: chargemodel.h Source File; Open Babel: cistrans.h File Reference; Open Babel: cistrans.h Source File; Open Babel: DLHandler Class Reference; Open Babel: Member List; Open Babel: AliasData Class Reference; Open Babel: Member List; Open Babel: ASCIIPainter Class Reference; Open Babel: Member List; Open Babel: CairoPainter Class Reference; Open Babel: Member List; Open Babel: CommandPainter Class Reference; Open Babel: Member List; Open Babel: FastSearch Class Reference; Open Babel: FastSearchIndexer Class Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: FilteringInputStream< Extractor > Class Template Reference; Open Babel: FilteringInputStreambuf< Extractor > Class Template Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: GasteigerState Class Reference; Open Babel: Member List; Open Babel: LineEndingExtractor Class Reference; Open Babel: Member List; Open Babel: matrix3x3 Class Reference;,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:28829,Energy Efficiency,charge,chargemodel,28829,; Open Babel: bitvec.h File Reference; Open Babel: bitvec.h Source File; Open Babel: bond.cpp File Reference; Open Babel: bond.h File Reference; Open Babel: bond.h Source File; Open Babel: bondtyper.cpp File Reference; Open Babel: bondtyper.h File Reference; Open Babel: bondtyper.h Source File; Open Babel: builder.cpp File Reference; Open Babel: builder.h File Reference; Open Babel: builder.h Source File; Open Babel: cairopainter.cpp File Reference; Open Babel: cairopainter.h File Reference; Open Babel: cairopainter.h Source File; Open Babel: canon.cpp File Reference; Open Babel: canon.h File Reference; Open Babel: canon.h Source File; Open Babel: Canonical Coding Algorithm; Open Babel: chains.cpp File Reference; Open Babel: chains.h File Reference; Open Babel: chains.h Source File; Open Babel: What's New in Version 2.1; Open Babel: What's New in Version 2.2; Open Babel: What's New in Version 2.3; Open Babel: chargemodel.cpp File Reference; Open Babel: chargemodel.h File Reference; Open Babel: chargemodel.h Source File; Open Babel: cistrans.h File Reference; Open Babel: cistrans.h Source File; Open Babel: DLHandler Class Reference; Open Babel: Member List; Open Babel: AliasData Class Reference; Open Babel: Member List; Open Babel: ASCIIPainter Class Reference; Open Babel: Member List; Open Babel: CairoPainter Class Reference; Open Babel: Member List; Open Babel: CommandPainter Class Reference; Open Babel: Member List; Open Babel: FastSearch Class Reference; Open Babel: FastSearchIndexer Class Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: FilteringInputStream< Extractor > Class Template Reference; Open Babel: FilteringInputStreambuf< Extractor > Class Template Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: GasteigerState Class Reference; Open Babel: Member List; Open Babel: LineEndingExtractor Class Reference; Open Babel: Member List; Open Babel: matrix3x3 Class Reference; Open Babel: Member List; Open Babel: OBAli,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:50957,Energy Efficiency,Charge,Charges,50957,"en Babel: _BondExpr Union Reference; Open Babel: Member List; Open Babel: vector3.cpp File Reference; Open Babel: vector3.h File Reference; Open Babel: vector3.h Source File; Open Babel: xml.h File Reference; Open Babel: xml.h Source File. api; api; api; api; api; API — Open Babel openbabel-3-1-1 documentation; index.html; index.html; index.html; index.html; index.html; API — Open Babel openbabel-3-1-1 documentation. cdn-cgi; . /l; ; Email Protection | Cloudflare. /scripts; . /5c5dd728; . /cloudflare-static; ; email-decode.min.js. /7d0fa10a; . /cloudflare-static; ; rocket-loader.min.js. /styles; ; cf.errors.css. dev-api; ; index.htm. docs; . /3DStructureGen; ; Generate multiple conformers — Open Babel openbabel-3-1-1 documentation; 3D Structure Generation — Open Babel openbabel-3-1-1 documentation; Generate a single conformer — Open Babel openbabel-3-1-1 documentation. /Aromaticity; ; Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. /Charges; ; Charge models — Open Babel openbabel-3-1-1 documentation. /Cheminf101; ; Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation; Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation; Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation; Representing Molecules — Open Babel openbabel-3-1-1 documentation; Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation; Molecular Similarity — Open Babel openbabel-3-1-1 documentation. /Command-line_tools; ; obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation; obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. /Contributing; ; Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation; Developing Open Babel — Open Babel openbabel-3-1-1 documentation; Documentation — Open Babel openbabel-3-1-1 documentation; Overview — Open Babel openbabel-3-1-1 documentation; Software Archaeology — Open Babel openbabel-3-1-1 documentation; A",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:50968,Energy Efficiency,Charge,Charge,50968,"en Babel: _BondExpr Union Reference; Open Babel: Member List; Open Babel: vector3.cpp File Reference; Open Babel: vector3.h File Reference; Open Babel: vector3.h Source File; Open Babel: xml.h File Reference; Open Babel: xml.h Source File. api; api; api; api; api; API — Open Babel openbabel-3-1-1 documentation; index.html; index.html; index.html; index.html; index.html; API — Open Babel openbabel-3-1-1 documentation. cdn-cgi; . /l; ; Email Protection | Cloudflare. /scripts; . /5c5dd728; . /cloudflare-static; ; email-decode.min.js. /7d0fa10a; . /cloudflare-static; ; rocket-loader.min.js. /styles; ; cf.errors.css. dev-api; ; index.htm. docs; . /3DStructureGen; ; Generate multiple conformers — Open Babel openbabel-3-1-1 documentation; 3D Structure Generation — Open Babel openbabel-3-1-1 documentation; Generate a single conformer — Open Babel openbabel-3-1-1 documentation. /Aromaticity; ; Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. /Charges; ; Charge models — Open Babel openbabel-3-1-1 documentation. /Cheminf101; ; Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation; Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation; Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation; Representing Molecules — Open Babel openbabel-3-1-1 documentation; Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation; Molecular Similarity — Open Babel openbabel-3-1-1 documentation. /Command-line_tools; ; obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation; obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. /Contributing; ; Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation; Developing Open Babel — Open Babel openbabel-3-1-1 documentation; Documentation — Open Babel openbabel-3-1-1 documentation; Overview — Open Babel openbabel-3-1-1 documentation; Software Archaeology — Open Babel openbabel-3-1-1 documentation; A",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:15809,Modifiability,Variab,Variables,15809,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:15848,Modifiability,Variab,Variables,15848,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:15887,Modifiability,Variab,Variables,15887,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:15926,Modifiability,Variab,Variables,15926,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:15965,Modifiability,Variab,Variables,15965,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16004,Modifiability,Variab,Variables,16004,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16043,Modifiability,Variab,Variables,16043,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16082,Modifiability,Variab,Variables,16082,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16121,Modifiability,Variab,Variables,16121,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16160,Modifiability,Variab,Variables,16160,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16199,Modifiability,Variab,Variables,16199,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16238,Modifiability,Variab,Variables,16238,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16277,Modifiability,Variab,Variables,16277,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16316,Modifiability,Variab,Variables,16316,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16355,Modifiability,Variab,Variables,16355,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16394,Modifiability,Variab,Variables,16394,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16433,Modifiability,Variab,Variables,16433,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16472,Modifiability,Variab,Variables,16472,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16511,Modifiability,Variab,Variables,16511,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16550,Modifiability,Variab,Variables,16550,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16589,Modifiability,Variab,Variables,16589,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16628,Modifiability,Variab,Variables,16628,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16667,Modifiability,Variab,Variables,16667,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:16706,Modifiability,Variab,Variables,16706,ss Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Functions; Open Babel: Class Members - Related Functions; Open Babel: Class Members - Typedefs; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: Class Members - Variables; Open Babel: generic.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:18467,Modifiability,Plugin,Plugins,18467,l: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: Class Members; Open Babel: graphsym.cpp File Reference; Open Babel: graphsym.h File Reference; Open Babel: graphsym.h Source File; Open Babel: grid.cpp File Reference; Open Babel: grid.h File Reference; Open Babel: grid.h Source File; Open Babel: griddata.cpp File Reference; Open Babel: griddata.h File Reference; Open Babel: griddata.h Source File; Open Babel: Conformer Searching; Open Babel: Getting Started; Open Babel: Plugins; Open Babel: Stereochemistry; Open Babel: Substructure Searching; Open Babel: groupcontrib.h File Reference; Open Babel: groupcontrib.h Source File; Open Babel: Hierarchical Index; Open Babel: API Documentation; Open Babel: internalcoord.h File Reference; Open Babel: internalcoord.h Source File; Open Babel: isomorphism.cpp File Reference; Open Babel: isomorphism.h File Reference; Open Babel: isomorphism.h Source File; Open Babel: kekulize.cpp File Reference; Open Babel: kinetics.h File Reference; Open Babel: kinetics.h Source File; Open Babel: lineend.h File Reference; Open Babel: lineend.h Source File; Open Babel: locale.cpp File Reference; Open Babel: locale.h File Reference; Open Babel: locale.h Source File; Open Babel: Classes Overview; Open Babel: matrix.cpp File Reference; Open Babel: matrix.h File Reference; Open Babel: matrix.h Source File; Open Babel: matrix3x3.cpp File Reference; Open Babel: matrix3x3.h File Reference; Open Babel: matrix3x3.h Source File; Open Babel: mcdlu,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:23165,Modifiability,plugin,plugin,23165,en Babel: obforcefield_energy.cpp; Open Babel: obiter.cpp File Reference; Open Babel: obiter.h File Reference; Open Babel: obiter.h Source File; Open Babel: obmolecformat.cpp File Reference; Open Babel: obmolecformat.h File Reference; Open Babel: obmolecformat.h Source File; Open Babel: obutil.cpp File Reference; Open Babel: obutil.h File Reference; Open Babel: obutil.h Source File; Open Babel: op.cpp File Reference; Open Babel: op.h File Reference; Open Babel: op.h Source File; Open Babel: optransform.h File Reference; Open Babel: optransform.h Source File; Open Babel: Page Index; Open Babel: painter.h File Reference; Open Babel: painter.h Source File; Open Babel: parsmart.cpp File Reference; Open Babel: parsmart.h File Reference; Open Babel: parsmart.h Source File; Open Babel: patty.cpp File Reference; Open Babel: patty.h File Reference; Open Babel: patty.h Source File; Open Babel: phmodel.cpp File Reference; Open Babel: phmodel.h File Reference; Open Babel: phmodel.h Source File; Open Babel: plugin.cpp File Reference; Open Babel: plugin.h File Reference; Open Babel: plugin.h Source File; Open Babel: pointgroup.cpp File Reference; Open Babel: pointgroup.h File Reference; Open Babel: pointgroup.h Source File; Open Babel: query.cpp File Reference; Open Babel: query.h File Reference; Open Babel: query.h Source File; Open Babel: rand.cpp File Reference; Open Babel: rand.h File Reference; Open Babel: rand.h Source File; Open Babel: RDKitConv.h File Reference; Open Babel: RDKitConv.h Source File; Open Babel: reaction.h File Reference; Open Babel: reaction.h Source File; Open Babel: residue.cpp File Reference; Open Babel: residue.h File Reference; Open Babel: residue.h Source File; Open Babel: ring.cpp File Reference; Open Babel: ring.h File Reference; Open Babel: ring.h Source File; Open Babel: rotamer.cpp File Reference; Open Babel: rotamer.h File Reference; Open Babel: rotamer.h Source File; Open Babel: rotor.cpp File Reference; Open Babel: rotor.h File Reference; Ope,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:23204,Modifiability,plugin,plugin,23204,pen Babel: obiter.cpp File Reference; Open Babel: obiter.h File Reference; Open Babel: obiter.h Source File; Open Babel: obmolecformat.cpp File Reference; Open Babel: obmolecformat.h File Reference; Open Babel: obmolecformat.h Source File; Open Babel: obutil.cpp File Reference; Open Babel: obutil.h File Reference; Open Babel: obutil.h Source File; Open Babel: op.cpp File Reference; Open Babel: op.h File Reference; Open Babel: op.h Source File; Open Babel: optransform.h File Reference; Open Babel: optransform.h Source File; Open Babel: Page Index; Open Babel: painter.h File Reference; Open Babel: painter.h Source File; Open Babel: parsmart.cpp File Reference; Open Babel: parsmart.h File Reference; Open Babel: parsmart.h Source File; Open Babel: patty.cpp File Reference; Open Babel: patty.h File Reference; Open Babel: patty.h Source File; Open Babel: phmodel.cpp File Reference; Open Babel: phmodel.h File Reference; Open Babel: phmodel.h Source File; Open Babel: plugin.cpp File Reference; Open Babel: plugin.h File Reference; Open Babel: plugin.h Source File; Open Babel: pointgroup.cpp File Reference; Open Babel: pointgroup.h File Reference; Open Babel: pointgroup.h Source File; Open Babel: query.cpp File Reference; Open Babel: query.h File Reference; Open Babel: query.h Source File; Open Babel: rand.cpp File Reference; Open Babel: rand.h File Reference; Open Babel: rand.h Source File; Open Babel: RDKitConv.h File Reference; Open Babel: RDKitConv.h Source File; Open Babel: reaction.h File Reference; Open Babel: reaction.h Source File; Open Babel: residue.cpp File Reference; Open Babel: residue.h File Reference; Open Babel: residue.h Source File; Open Babel: ring.cpp File Reference; Open Babel: ring.h File Reference; Open Babel: ring.h Source File; Open Babel: rotamer.cpp File Reference; Open Babel: rotamer.h File Reference; Open Babel: rotamer.h Source File; Open Babel: rotor.cpp File Reference; Open Babel: rotor.h File Reference; Open Babel: rotor.h Source File. /search,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:23241,Modifiability,plugin,plugin,23241,Open Babel: obiter.h File Reference; Open Babel: obiter.h Source File; Open Babel: obmolecformat.cpp File Reference; Open Babel: obmolecformat.h File Reference; Open Babel: obmolecformat.h Source File; Open Babel: obutil.cpp File Reference; Open Babel: obutil.h File Reference; Open Babel: obutil.h Source File; Open Babel: op.cpp File Reference; Open Babel: op.h File Reference; Open Babel: op.h Source File; Open Babel: optransform.h File Reference; Open Babel: optransform.h Source File; Open Babel: Page Index; Open Babel: painter.h File Reference; Open Babel: painter.h Source File; Open Babel: parsmart.cpp File Reference; Open Babel: parsmart.h File Reference; Open Babel: parsmart.h Source File; Open Babel: patty.cpp File Reference; Open Babel: patty.h File Reference; Open Babel: patty.h Source File; Open Babel: phmodel.cpp File Reference; Open Babel: phmodel.h File Reference; Open Babel: phmodel.h Source File; Open Babel: plugin.cpp File Reference; Open Babel: plugin.h File Reference; Open Babel: plugin.h Source File; Open Babel: pointgroup.cpp File Reference; Open Babel: pointgroup.h File Reference; Open Babel: pointgroup.h Source File; Open Babel: query.cpp File Reference; Open Babel: query.h File Reference; Open Babel: query.h Source File; Open Babel: rand.cpp File Reference; Open Babel: rand.h File Reference; Open Babel: rand.h Source File; Open Babel: RDKitConv.h File Reference; Open Babel: RDKitConv.h Source File; Open Babel: reaction.h File Reference; Open Babel: reaction.h Source File; Open Babel: residue.cpp File Reference; Open Babel: residue.h File Reference; Open Babel: residue.h Source File; Open Babel: ring.cpp File Reference; Open Babel: ring.h File Reference; Open Babel: ring.h Source File; Open Babel: rotamer.cpp File Reference; Open Babel: rotamer.h File Reference; Open Babel: rotamer.h Source File; Open Babel: rotor.cpp File Reference; Open Babel: rotor.h File Reference; Open Babel: rotor.h Source File. /search; ; search.css; search.js. Open Babel:,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:25432,Modifiability,Config,Config,25432,"abel: spacegroup.h Source File; Open Babel: spectrophore.cpp File Reference; Open Babel: spectrophore.h File Reference; Open Babel: spectrophore.h Source File; Open Babel: squareplanar.h File Reference; Open Babel: squareplanar.h Source File; Open Babel: stereo.h File Reference; Open Babel: stereo.h Source File; Open Babel: AtomSpec Struct Reference; Open Babel: Member List; Open Babel: BondSpec Struct Reference; Open Babel: Member List; Open Babel: CharPtrLess Struct Reference; Open Babel: Member List; Open Babel: DeleteObject Struct Reference; Open Babel: Member List; Open Babel: max_value< T, size > Struct Template Reference; Open Babel: max_value< T, 0 > Struct Template Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: DoubleType Struct Reference; Open Babel: Member List; Open Babel: FptIndex Struct Reference; Open Babel: FptIndexHeader Struct Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: LineSearchType Struct Reference; Open Babel: Member List; Open Babel: OBCisTransStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBColor Class Reference; Open Babel: OBFontMetrics Class Reference; Open Babel: OBSquarePlanarStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBStereo Class Reference; Open Babel: OBStereoUnit Struct Reference; Open Babel: Member List; Open Babel: OBTetrahedralStereo::Config Struct Reference; Open Babel: Member List; Open Babel: ParseState Struct Reference; Open Babel: Member List; Open Babel: Pattern Struct Reference; Open Babel: Member List; Open Babel: quad< T1, T2, T3, T4 > Class Template Reference; Open Babel: triple< T1, T2, T3 > Class Template Reference; tabs.css; Open Babel: tetrahedral.h File Reference; Open Babel: tetrahedral.h Source File; Open Babel: tetranonplanar.h File Reference; Open Babel: tetranonplanar.h Source File; Open Babel: tetraplanar.h File Reference; Open Babel: tetraplanar.h Source File; Open Babel: text.h File Reference; Open Babel",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:25596,Modifiability,Config,Config,25596,"abel: spacegroup.h Source File; Open Babel: spectrophore.cpp File Reference; Open Babel: spectrophore.h File Reference; Open Babel: spectrophore.h Source File; Open Babel: squareplanar.h File Reference; Open Babel: squareplanar.h Source File; Open Babel: stereo.h File Reference; Open Babel: stereo.h Source File; Open Babel: AtomSpec Struct Reference; Open Babel: Member List; Open Babel: BondSpec Struct Reference; Open Babel: Member List; Open Babel: CharPtrLess Struct Reference; Open Babel: Member List; Open Babel: DeleteObject Struct Reference; Open Babel: Member List; Open Babel: max_value< T, size > Struct Template Reference; Open Babel: max_value< T, 0 > Struct Template Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: DoubleType Struct Reference; Open Babel: Member List; Open Babel: FptIndex Struct Reference; Open Babel: FptIndexHeader Struct Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: LineSearchType Struct Reference; Open Babel: Member List; Open Babel: OBCisTransStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBColor Class Reference; Open Babel: OBFontMetrics Class Reference; Open Babel: OBSquarePlanarStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBStereo Class Reference; Open Babel: OBStereoUnit Struct Reference; Open Babel: Member List; Open Babel: OBTetrahedralStereo::Config Struct Reference; Open Babel: Member List; Open Babel: ParseState Struct Reference; Open Babel: Member List; Open Babel: Pattern Struct Reference; Open Babel: Member List; Open Babel: quad< T1, T2, T3, T4 > Class Template Reference; Open Babel: triple< T1, T2, T3 > Class Template Reference; tabs.css; Open Babel: tetrahedral.h File Reference; Open Babel: tetrahedral.h Source File; Open Babel: tetranonplanar.h File Reference; Open Babel: tetranonplanar.h Source File; Open Babel: tetraplanar.h File Reference; Open Babel: tetraplanar.h Source File; Open Babel: text.h File Reference; Open Babel",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:25785,Modifiability,Config,Config,25785,"abel: spacegroup.h Source File; Open Babel: spectrophore.cpp File Reference; Open Babel: spectrophore.h File Reference; Open Babel: spectrophore.h Source File; Open Babel: squareplanar.h File Reference; Open Babel: squareplanar.h Source File; Open Babel: stereo.h File Reference; Open Babel: stereo.h Source File; Open Babel: AtomSpec Struct Reference; Open Babel: Member List; Open Babel: BondSpec Struct Reference; Open Babel: Member List; Open Babel: CharPtrLess Struct Reference; Open Babel: Member List; Open Babel: DeleteObject Struct Reference; Open Babel: Member List; Open Babel: max_value< T, size > Struct Template Reference; Open Babel: max_value< T, 0 > Struct Template Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: DoubleType Struct Reference; Open Babel: Member List; Open Babel: FptIndex Struct Reference; Open Babel: FptIndexHeader Struct Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: LineSearchType Struct Reference; Open Babel: Member List; Open Babel: OBCisTransStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBColor Class Reference; Open Babel: OBFontMetrics Class Reference; Open Babel: OBSquarePlanarStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBStereo Class Reference; Open Babel: OBStereoUnit Struct Reference; Open Babel: Member List; Open Babel: OBTetrahedralStereo::Config Struct Reference; Open Babel: Member List; Open Babel: ParseState Struct Reference; Open Babel: Member List; Open Babel: Pattern Struct Reference; Open Babel: Member List; Open Babel: quad< T1, T2, T3, T4 > Class Template Reference; Open Babel: triple< T1, T2, T3 > Class Template Reference; tabs.css; Open Babel: tetrahedral.h File Reference; Open Babel: tetrahedral.h Source File; Open Babel: tetranonplanar.h File Reference; Open Babel: tetranonplanar.h Source File; Open Babel: tetraplanar.h File Reference; Open Babel: tetraplanar.h Source File; Open Babel: text.h File Reference; Open Babel",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:42174,Modifiability,Plugin,Plugins,42174,elementtable.h Source File; Open Babel: erf.h File Reference; Open Babel: erf.h Source File; Open Babel: Examples; Open Babel: fingerprint.cpp File Reference; Open Babel: fingerprint.h File Reference; Open Babel: fingerprint.h Source File; Open Babel: forcefield.cpp File Reference; Open Babel: forcefield.h File Reference; Open Babel: forcefield.h Source File; Open Babel: format.cpp File Reference; Open Babel: format.h File Reference; Open Babel: format.h Source File; Open Babel: generic.cpp File Reference; Open Babel: generic.h File Reference; Open Babel: generic.h Source File; Open Babel: graphsym.cpp File Reference; Open Babel: graphsym.h File Reference; Open Babel: graphsym.h Source File; Open Babel: grid.cpp File Reference; Open Babel: grid.h File Reference; Open Babel: grid.h Source File; Open Babel: griddata.cpp File Reference; Open Babel: griddata.h File Reference; Open Babel: griddata.h Source File; Open Babel: Conformer Searching; Open Babel: Getting Started; Open Babel: Plugins; Open Babel: Stereochemistry; Open Babel: Substructure Searching; Open Babel: groupcontrib.h File Reference; Open Babel: groupcontrib.h Source File; Open Babel: API Documentation; Open Babel: internalcoord.h File Reference; Open Babel: internalcoord.h Source File; Open Babel: isomorphism.cpp File Reference; Open Babel: isomorphism.h File Reference; Open Babel: isomorphism.h Source File; jquery.js; Open Babel: json.h File Reference; Open Babel: json.h Source File; Open Babel: kekulize.cpp File Reference; Open Babel: kekulize.h File Reference; Open Babel: kekulize.h Source File; Open Babel: kinetics.h File Reference; Open Babel: kinetics.h Source File; Open Babel: lineend.h File Reference; Open Babel: lineend.h Source File; Open Babel: locale.cpp File Reference; Open Babel: locale.h File Reference; Open Babel: locale.h Source File; Open Babel: Classes Overview; Open Babel: matrix.cpp File Reference; Open Babel: matrix.h File Reference; Open Babel: matrix.h Source File; Open Babel: mat,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:45575,Modifiability,plugin,plugin,45575,s.h File Reference; Open Babel: obfunctions.h Source File; Open Babel: obiter.cpp File Reference; Open Babel: obiter.h File Reference; Open Babel: obiter.h Source File; Open Babel: obmolecformat.cpp File Reference; Open Babel: obmolecformat.h File Reference; Open Babel: obmolecformat.h Source File; Open Babel: obutil.cpp File Reference; Open Babel: obutil.h File Reference; Open Babel: obutil.h Source File; Open Babel: op.cpp File Reference; Open Babel: op.h File Reference; Open Babel: op.h Source File; Open Babel: optransform.h File Reference; Open Babel: optransform.h Source File; Open Babel: painter.h File Reference; Open Babel: painter.h Source File; Open Babel: parsmart.cpp File Reference; Open Babel: parsmart.h File Reference; Open Babel: parsmart.h Source File; Open Babel: patty.cpp File Reference; Open Babel: patty.h File Reference; Open Babel: patty.h Source File; Open Babel: phmodel.cpp File Reference; Open Babel: phmodel.h File Reference; Open Babel: phmodel.h Source File; Open Babel: plugin.cpp File Reference; Open Babel: plugin.h File Reference; Open Babel: plugin.h Source File; Open Babel: pointgroup.cpp File Reference; Open Babel: pointgroup.h File Reference; Open Babel: pointgroup.h Source File; Open Babel: query.cpp File Reference; Open Babel: query.h File Reference; Open Babel: query.h Source File; Open Babel: rand.cpp File Reference; Open Babel: rand.h File Reference; Open Babel: rand.h Source File; Open Babel: RDKitConv.h File Reference; Open Babel: RDKitConv.h Source File; Open Babel: reaction.h File Reference; Open Babel: reaction.h Source File; Open Babel: reactionfacade.cpp File Reference; Open Babel: reactionfacade.h File Reference; Open Babel: reactionfacade.h Source File; Open Babel: residue.cpp File Reference; Open Babel: residue.h File Reference; Open Babel: residue.h Source File; Open Babel: ring.cpp File Reference; Open Babel: ring.h File Reference; Open Babel: ring.h Source File; Open Babel: rotamer.cpp File Reference; Open Babel: rota,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:45614,Modifiability,plugin,plugin,45614,nctions.h Source File; Open Babel: obiter.cpp File Reference; Open Babel: obiter.h File Reference; Open Babel: obiter.h Source File; Open Babel: obmolecformat.cpp File Reference; Open Babel: obmolecformat.h File Reference; Open Babel: obmolecformat.h Source File; Open Babel: obutil.cpp File Reference; Open Babel: obutil.h File Reference; Open Babel: obutil.h Source File; Open Babel: op.cpp File Reference; Open Babel: op.h File Reference; Open Babel: op.h Source File; Open Babel: optransform.h File Reference; Open Babel: optransform.h Source File; Open Babel: painter.h File Reference; Open Babel: painter.h Source File; Open Babel: parsmart.cpp File Reference; Open Babel: parsmart.h File Reference; Open Babel: parsmart.h Source File; Open Babel: patty.cpp File Reference; Open Babel: patty.h File Reference; Open Babel: patty.h Source File; Open Babel: phmodel.cpp File Reference; Open Babel: phmodel.h File Reference; Open Babel: phmodel.h Source File; Open Babel: plugin.cpp File Reference; Open Babel: plugin.h File Reference; Open Babel: plugin.h Source File; Open Babel: pointgroup.cpp File Reference; Open Babel: pointgroup.h File Reference; Open Babel: pointgroup.h Source File; Open Babel: query.cpp File Reference; Open Babel: query.h File Reference; Open Babel: query.h Source File; Open Babel: rand.cpp File Reference; Open Babel: rand.h File Reference; Open Babel: rand.h Source File; Open Babel: RDKitConv.h File Reference; Open Babel: RDKitConv.h Source File; Open Babel: reaction.h File Reference; Open Babel: reaction.h Source File; Open Babel: reactionfacade.cpp File Reference; Open Babel: reactionfacade.h File Reference; Open Babel: reactionfacade.h Source File; Open Babel: residue.cpp File Reference; Open Babel: residue.h File Reference; Open Babel: residue.h Source File; Open Babel: ring.cpp File Reference; Open Babel: ring.h File Reference; Open Babel: ring.h Source File; Open Babel: rotamer.cpp File Reference; Open Babel: rotamer.h File Reference; Open Babel: rot,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:45651,Modifiability,plugin,plugin,45651,ter.cpp File Reference; Open Babel: obiter.h File Reference; Open Babel: obiter.h Source File; Open Babel: obmolecformat.cpp File Reference; Open Babel: obmolecformat.h File Reference; Open Babel: obmolecformat.h Source File; Open Babel: obutil.cpp File Reference; Open Babel: obutil.h File Reference; Open Babel: obutil.h Source File; Open Babel: op.cpp File Reference; Open Babel: op.h File Reference; Open Babel: op.h Source File; Open Babel: optransform.h File Reference; Open Babel: optransform.h Source File; Open Babel: painter.h File Reference; Open Babel: painter.h Source File; Open Babel: parsmart.cpp File Reference; Open Babel: parsmart.h File Reference; Open Babel: parsmart.h Source File; Open Babel: patty.cpp File Reference; Open Babel: patty.h File Reference; Open Babel: patty.h Source File; Open Babel: phmodel.cpp File Reference; Open Babel: phmodel.h File Reference; Open Babel: phmodel.h Source File; Open Babel: plugin.cpp File Reference; Open Babel: plugin.h File Reference; Open Babel: plugin.h Source File; Open Babel: pointgroup.cpp File Reference; Open Babel: pointgroup.h File Reference; Open Babel: pointgroup.h Source File; Open Babel: query.cpp File Reference; Open Babel: query.h File Reference; Open Babel: query.h Source File; Open Babel: rand.cpp File Reference; Open Babel: rand.h File Reference; Open Babel: rand.h Source File; Open Babel: RDKitConv.h File Reference; Open Babel: RDKitConv.h Source File; Open Babel: reaction.h File Reference; Open Babel: reaction.h Source File; Open Babel: reactionfacade.cpp File Reference; Open Babel: reactionfacade.h File Reference; Open Babel: reactionfacade.h Source File; Open Babel: residue.cpp File Reference; Open Babel: residue.h File Reference; Open Babel: residue.h Source File; Open Babel: ring.cpp File Reference; Open Babel: ring.h File Reference; Open Babel: ring.h Source File; Open Babel: rotamer.cpp File Reference; Open Babel: rotamer.h File Reference; Open Babel: rotamer.h Source File; Open Babel: rotor.,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:48063,Modifiability,Config,Config,48063," squareplanar.h Source File; Open Babel: stereo.h File Reference; Open Babel: stereo.h Source File; Open Babel: AtomSpec Struct Reference; Open Babel: Member List; Open Babel: BondSpec Struct Reference; Open Babel: Member List; Open Babel: CharPtrLess Struct Reference; Open Babel: Member List; Open Babel: DeleteObject Struct Reference; Open Babel: Member List; Open Babel: max_value< T, size > Struct Template Reference; Open Babel: max_value< T, 0 > Struct Template Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: DoubleType Struct Reference; Open Babel: Member List; Open Babel: FptIndex Struct Reference; Open Babel: FptIndexHeader Struct Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: LineSearchType Struct Reference; Open Babel: Member List; Open Babel: OBCisTransConfig Struct Reference; Open Babel: Member List; Open Babel: OBCisTransStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBColor Class Reference; Open Babel: Member List; Open Babel: OBConversion::StreamState Struct Reference; Open Babel: Member List; Open Babel: OBFontMetrics Class Reference; Open Babel: Member List; Open Babel: OBSquarePlanarConfig Struct Reference; Open Babel: Member List; Open Babel: OBSquarePlanarStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBStereo Class Reference; Open Babel: Member List; Open Babel: OBStereoUnit Struct Reference; Open Babel: Member List; Open Babel: OBTetrahedralConfig Struct Reference; Open Babel: Member List; Open Babel: OBTetrahedralStereo::Config Struct Reference; Open Babel: Member List; Open Babel: ParseState Struct Reference; Open Babel: Member List; Open Babel: Pattern Struct Reference; Open Babel: Member List; Open Babel: quad< T1, T2, T3, T4 > Class Template Reference; Open Babel: Member List; Open Babel: triple< T1, T2, T3 > Class Template Reference; Open Babel: Member List; tabs.css; Open Babel: tautomer.cpp File Reference; Open Babel: tautomer.h File Reference; ",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:48434,Modifiability,Config,Config,48434," squareplanar.h Source File; Open Babel: stereo.h File Reference; Open Babel: stereo.h Source File; Open Babel: AtomSpec Struct Reference; Open Babel: Member List; Open Babel: BondSpec Struct Reference; Open Babel: Member List; Open Babel: CharPtrLess Struct Reference; Open Babel: Member List; Open Babel: DeleteObject Struct Reference; Open Babel: Member List; Open Babel: max_value< T, size > Struct Template Reference; Open Babel: max_value< T, 0 > Struct Template Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: DoubleType Struct Reference; Open Babel: Member List; Open Babel: FptIndex Struct Reference; Open Babel: FptIndexHeader Struct Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: LineSearchType Struct Reference; Open Babel: Member List; Open Babel: OBCisTransConfig Struct Reference; Open Babel: Member List; Open Babel: OBCisTransStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBColor Class Reference; Open Babel: Member List; Open Babel: OBConversion::StreamState Struct Reference; Open Babel: Member List; Open Babel: OBFontMetrics Class Reference; Open Babel: Member List; Open Babel: OBSquarePlanarConfig Struct Reference; Open Babel: Member List; Open Babel: OBSquarePlanarStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBStereo Class Reference; Open Babel: Member List; Open Babel: OBStereoUnit Struct Reference; Open Babel: Member List; Open Babel: OBTetrahedralConfig Struct Reference; Open Babel: Member List; Open Babel: OBTetrahedralStereo::Config Struct Reference; Open Babel: Member List; Open Babel: ParseState Struct Reference; Open Babel: Member List; Open Babel: Pattern Struct Reference; Open Babel: Member List; Open Babel: quad< T1, T2, T3, T4 > Class Template Reference; Open Babel: Member List; Open Babel: triple< T1, T2, T3 > Class Template Reference; Open Babel: Member List; tabs.css; Open Babel: tautomer.cpp File Reference; Open Babel: tautomer.h File Reference; ",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:48723,Modifiability,Config,Config,48723," squareplanar.h Source File; Open Babel: stereo.h File Reference; Open Babel: stereo.h Source File; Open Babel: AtomSpec Struct Reference; Open Babel: Member List; Open Babel: BondSpec Struct Reference; Open Babel: Member List; Open Babel: CharPtrLess Struct Reference; Open Babel: Member List; Open Babel: DeleteObject Struct Reference; Open Babel: Member List; Open Babel: max_value< T, size > Struct Template Reference; Open Babel: max_value< T, 0 > Struct Template Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: DoubleType Struct Reference; Open Babel: Member List; Open Babel: FptIndex Struct Reference; Open Babel: FptIndexHeader Struct Reference; Open Babel: Member List; Open Babel: Member List; Open Babel: LineSearchType Struct Reference; Open Babel: Member List; Open Babel: OBCisTransConfig Struct Reference; Open Babel: Member List; Open Babel: OBCisTransStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBColor Class Reference; Open Babel: Member List; Open Babel: OBConversion::StreamState Struct Reference; Open Babel: Member List; Open Babel: OBFontMetrics Class Reference; Open Babel: Member List; Open Babel: OBSquarePlanarConfig Struct Reference; Open Babel: Member List; Open Babel: OBSquarePlanarStereo::Config Struct Reference; Open Babel: Member List; Open Babel: OBStereo Class Reference; Open Babel: Member List; Open Babel: OBStereoUnit Struct Reference; Open Babel: Member List; Open Babel: OBTetrahedralConfig Struct Reference; Open Babel: Member List; Open Babel: OBTetrahedralStereo::Config Struct Reference; Open Babel: Member List; Open Babel: ParseState Struct Reference; Open Babel: Member List; Open Babel: Pattern Struct Reference; Open Babel: Member List; Open Babel: quad< T1, T2, T3, T4 > Class Template Reference; Open Babel: Member List; Open Babel: triple< T1, T2, T3 > Class Template Reference; Open Babel: Member List; tabs.css; Open Babel: tautomer.cpp File Reference; Open Babel: tautomer.h File Reference; ",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:55983,Modifiability,CONFIG,CONFIG,55983,"t (c3d1) — Open Babel openbabel-3-1-1 documentation; Chem3D Cartesian 2 format (c3d2) — Open Babel openbabel-3-1-1 documentation; ChemDoodle JSON (cdjson) — Open Babel openbabel-3-1-1 documentation; ChemDraw binary format (cdx) — Open Babel openbabel-3-1-1 documentation; ChemDraw CDXML format (cdxml) — Open Babel openbabel-3-1-1 documentation; ChemDraw Connection Table format (ct) — Open Babel openbabel-3-1-1 documentation; Chemical Markup Language (cml, mrv) — Open Babel openbabel-3-1-1 documentation; Chemical Resource Kit 3D format (crk3d) — Open Babel openbabel-3-1-1 documentation; Chemical Resource Kit diagram(2D) (crk2d) — Open Babel openbabel-3-1-1 documentation; ChemKin format (ck) — Open Babel openbabel-3-1-1 documentation; Chemtool format (cht) — Open Babel openbabel-3-1-1 documentation; CML Reaction format (cmlr) — Open Babel openbabel-3-1-1 documentation; Common cheminformatics formats — Open Babel openbabel-3-1-1 documentation; Compare molecules using InChI (k) — Open Babel openbabel-3-1-1 documentation; Computational chemistry formats — Open Babel openbabel-3-1-1 documentation; Confab report format (confabreport) — Open Babel openbabel-3-1-1 documentation; Copy raw text (copy) — Open Babel openbabel-3-1-1 documentation; Crystal 09 output format (c09out) — Open Babel openbabel-3-1-1 documentation; Crystallographic Information File (cif) — Open Babel openbabel-3-1-1 documentation; Crystallography formats — Open Babel openbabel-3-1-1 documentation; CSD CSSR format (cssr) — Open Babel openbabel-3-1-1 documentation; Culgi object file format (cof) — Open Babel openbabel-3-1-1 documentation; DALTON input format (dalmol) — Open Babel openbabel-3-1-1 documentation; DALTON output format (dallog) — Open Babel openbabel-3-1-1 documentation; DL-POLY CONFIG (CONFIG) — Open Babel openbabel-3-1-1 documentation; DL-POLY HISTORY (HISTORY) — Open Babel openbabel-3-1-1 documentation; DMol3 coordinates format (dmol, outmol) — Open Babel openbabel-3-1-1 documentation; Dock 3.",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:55991,Modifiability,CONFIG,CONFIG,55991,"t (c3d1) — Open Babel openbabel-3-1-1 documentation; Chem3D Cartesian 2 format (c3d2) — Open Babel openbabel-3-1-1 documentation; ChemDoodle JSON (cdjson) — Open Babel openbabel-3-1-1 documentation; ChemDraw binary format (cdx) — Open Babel openbabel-3-1-1 documentation; ChemDraw CDXML format (cdxml) — Open Babel openbabel-3-1-1 documentation; ChemDraw Connection Table format (ct) — Open Babel openbabel-3-1-1 documentation; Chemical Markup Language (cml, mrv) — Open Babel openbabel-3-1-1 documentation; Chemical Resource Kit 3D format (crk3d) — Open Babel openbabel-3-1-1 documentation; Chemical Resource Kit diagram(2D) (crk2d) — Open Babel openbabel-3-1-1 documentation; ChemKin format (ck) — Open Babel openbabel-3-1-1 documentation; Chemtool format (cht) — Open Babel openbabel-3-1-1 documentation; CML Reaction format (cmlr) — Open Babel openbabel-3-1-1 documentation; Common cheminformatics formats — Open Babel openbabel-3-1-1 documentation; Compare molecules using InChI (k) — Open Babel openbabel-3-1-1 documentation; Computational chemistry formats — Open Babel openbabel-3-1-1 documentation; Confab report format (confabreport) — Open Babel openbabel-3-1-1 documentation; Copy raw text (copy) — Open Babel openbabel-3-1-1 documentation; Crystal 09 output format (c09out) — Open Babel openbabel-3-1-1 documentation; Crystallographic Information File (cif) — Open Babel openbabel-3-1-1 documentation; Crystallography formats — Open Babel openbabel-3-1-1 documentation; CSD CSSR format (cssr) — Open Babel openbabel-3-1-1 documentation; Culgi object file format (cof) — Open Babel openbabel-3-1-1 documentation; DALTON input format (dalmol) — Open Babel openbabel-3-1-1 documentation; DALTON output format (dallog) — Open Babel openbabel-3-1-1 documentation; DL-POLY CONFIG (CONFIG) — Open Babel openbabel-3-1-1 documentation; DL-POLY HISTORY (HISTORY) — Open Babel openbabel-3-1-1 documentation; DMol3 coordinates format (dmol, outmol) — Open Babel openbabel-3-1-1 documentation; Dock 3.",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:56267,Modifiability,Extend,Extended,56267,,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:68072,Modifiability,plugin,plugins,68072, Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.3 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.4.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 3.0.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 3.1.0 — Open Babel openbabel-3-1-1 documentation. /Stereochemistry; ; Stereochemistry — Open Babel openbabel-3-1-1 documentation. /UseTheLibrary; ; The Open Babel API — Open Babel openbabel-3-1-1 documentation; C++ — Open Babel openbabel-3-1-1 documentation; CSharp and OBDotNet — Open Babel openbabel-3-1-1 documentation; Write software using the Open Babel library — Open Babel openbabel-3-1-1 documentation; Java — Open Babel openbabel-3-1-1 documentation; Updating to Open Babel 3.0 from 2.x — Open Babel openbabel-3-1-1 documentation; Perl — Open Babel openbabel-3-1-1 documentation; Python — Open Babel openbabel-3-1-1 documentation; Pybel — Open Babel openbabel-3-1-1 documentation; Pybel API — Open Babel openbabel-3-1-1 documentation; The openbabel module — Open Babel openbabel-3-1-1 documentation; Examples — Open Babel openbabel-3-1-1 documentation; Install Python bindings — Open Babel openbabel-3-1-1 documentation; Introduction — Open Babel openbabel-3-1-1 documentation; Ruby — Open Babel openbabel-3-1-1 documentation. /WritePlugins; ; How to add a new file format — Open Babel openbabel-3-1-1 documentation; Adding new operations and options — Open Babel openbabel-3-1-1 documentation; How to add a new descriptor — Open Babel openbabel-3-1-1 documentation; Adding plugins — Open Babel openbabel-3-1-1 documentation. User Guide — Open Babel openbabel-3-1-1 documentation; User Guide — Open Babel openbabel-3-1-1 documentation. Index — Open Babel openbabel-3-1-1 documentation; Open Babel - the chemistry toolbox — Open Babel openbabel-3-1-1 documentation; Search - Open Babel openbabel-3-1-1 documentation; searchindex.js. ,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:50569,Performance,load,loader,50569,"cpp File Reference; Open Babel: tokenst.h File Reference; Open Babel: tokenst.h Source File; Open Babel: transform.cpp File Reference; Open Babel: transform3d.cpp File Reference; Open Babel: transform3d.h File Reference; Open Babel: transform3d.h Source File; Open Babel: typer.cpp File Reference; Open Babel: typer.h File Reference; Open Babel: typer.h Source File; Open Babel: _AtomExpr Union Reference; Open Babel: Member List; Open Babel: _BondExpr Union Reference; Open Babel: Member List; Open Babel: vector3.cpp File Reference; Open Babel: vector3.h File Reference; Open Babel: vector3.h Source File; Open Babel: xml.h File Reference; Open Babel: xml.h Source File. api; api; api; api; api; API — Open Babel openbabel-3-1-1 documentation; index.html; index.html; index.html; index.html; index.html; API — Open Babel openbabel-3-1-1 documentation. cdn-cgi; . /l; ; Email Protection | Cloudflare. /scripts; . /5c5dd728; . /cloudflare-static; ; email-decode.min.js. /7d0fa10a; . /cloudflare-static; ; rocket-loader.min.js. /styles; ; cf.errors.css. dev-api; ; index.htm. docs; . /3DStructureGen; ; Generate multiple conformers — Open Babel openbabel-3-1-1 documentation; 3D Structure Generation — Open Babel openbabel-3-1-1 documentation; Generate a single conformer — Open Babel openbabel-3-1-1 documentation. /Aromaticity; ; Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. /Charges; ; Charge models — Open Babel openbabel-3-1-1 documentation. /Cheminf101; ; Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation; Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation; Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation; Representing Molecules — Open Babel openbabel-3-1-1 documentation; Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation; Molecular Similarity — Open Babel openbabel-3-1-1 documentation. /Command-line_tools; ; obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:53897,Performance,CAChe,CAChe,53897,"n; ACR format (acr) — Open Babel openbabel-3-1-1 documentation; ADF Band output format (adfband) — Open Babel openbabel-3-1-1 documentation; ADF cartesian input format (adf) — Open Babel openbabel-3-1-1 documentation; ADF DFTB output format (adfdftb) — Open Babel openbabel-3-1-1 documentation; ADF output format (adfout) — Open Babel openbabel-3-1-1 documentation; ADF TAPE41 format (t41) — Open Babel openbabel-3-1-1 documentation; Alchemy format (alc) — Open Babel openbabel-3-1-1 documentation; Amber Prep format (prep) — Open Babel openbabel-3-1-1 documentation; ASCII format (ascii) — Open Babel openbabel-3-1-1 documentation; AutoDock PDBQT format (pdbqt) — Open Babel openbabel-3-1-1 documentation; Ball and Stick format (bs) — Open Babel openbabel-3-1-1 documentation; Biological data formats — Open Babel openbabel-3-1-1 documentation; Cacao Cartesian format (caccrt) — Open Babel openbabel-3-1-1 documentation; Cacao Internal format (cacint) — Open Babel openbabel-3-1-1 documentation; CAChe MolStruct format (cac, cache) — Open Babel openbabel-3-1-1 documentation; Canonical SMILES format (can) — Open Babel openbabel-3-1-1 documentation; CASTEP format (castep) — Open Babel openbabel-3-1-1 documentation; CCC format (ccc) — Open Babel openbabel-3-1-1 documentation; Chem3D Cartesian 1 format (c3d1) — Open Babel openbabel-3-1-1 documentation; Chem3D Cartesian 2 format (c3d2) — Open Babel openbabel-3-1-1 documentation; ChemDoodle JSON (cdjson) — Open Babel openbabel-3-1-1 documentation; ChemDraw binary format (cdx) — Open Babel openbabel-3-1-1 documentation; ChemDraw CDXML format (cdxml) — Open Babel openbabel-3-1-1 documentation; ChemDraw Connection Table format (ct) — Open Babel openbabel-3-1-1 documentation; Chemical Markup Language (cml, mrv) — Open Babel openbabel-3-1-1 documentation; Chemical Resource Kit 3D format (crk3d) — Open Babel openbabel-3-1-1 documentation; Chemical Resource Kit diagram(2D) (crk2d) — Open Babel openbabel-3-1-1 documentation; ChemKin format (ck)",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:53926,Performance,cache,cache,53926,"bel openbabel-3-1-1 documentation; ADF Band output format (adfband) — Open Babel openbabel-3-1-1 documentation; ADF cartesian input format (adf) — Open Babel openbabel-3-1-1 documentation; ADF DFTB output format (adfdftb) — Open Babel openbabel-3-1-1 documentation; ADF output format (adfout) — Open Babel openbabel-3-1-1 documentation; ADF TAPE41 format (t41) — Open Babel openbabel-3-1-1 documentation; Alchemy format (alc) — Open Babel openbabel-3-1-1 documentation; Amber Prep format (prep) — Open Babel openbabel-3-1-1 documentation; ASCII format (ascii) — Open Babel openbabel-3-1-1 documentation; AutoDock PDBQT format (pdbqt) — Open Babel openbabel-3-1-1 documentation; Ball and Stick format (bs) — Open Babel openbabel-3-1-1 documentation; Biological data formats — Open Babel openbabel-3-1-1 documentation; Cacao Cartesian format (caccrt) — Open Babel openbabel-3-1-1 documentation; Cacao Internal format (cacint) — Open Babel openbabel-3-1-1 documentation; CAChe MolStruct format (cac, cache) — Open Babel openbabel-3-1-1 documentation; Canonical SMILES format (can) — Open Babel openbabel-3-1-1 documentation; CASTEP format (castep) — Open Babel openbabel-3-1-1 documentation; CCC format (ccc) — Open Babel openbabel-3-1-1 documentation; Chem3D Cartesian 1 format (c3d1) — Open Babel openbabel-3-1-1 documentation; Chem3D Cartesian 2 format (c3d2) — Open Babel openbabel-3-1-1 documentation; ChemDoodle JSON (cdjson) — Open Babel openbabel-3-1-1 documentation; ChemDraw binary format (cdx) — Open Babel openbabel-3-1-1 documentation; ChemDraw CDXML format (cdxml) — Open Babel openbabel-3-1-1 documentation; ChemDraw Connection Table format (ct) — Open Babel openbabel-3-1-1 documentation; Chemical Markup Language (cml, mrv) — Open Babel openbabel-3-1-1 documentation; Chemical Resource Kit 3D format (crk3d) — Open Babel openbabel-3-1-1 documentation; Chemical Resource Kit diagram(2D) (crk2d) — Open Babel openbabel-3-1-1 documentation; ChemKin format (ck) — Open Babel openbabel-3-1-1",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:52002,Testability,test,test,52002,"-1 documentation. /Aromaticity; ; Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. /Charges; ; Charge models — Open Babel openbabel-3-1-1 documentation. /Cheminf101; ; Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation; Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation; Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation; Representing Molecules — Open Babel openbabel-3-1-1 documentation; Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation; Molecular Similarity — Open Babel openbabel-3-1-1 documentation. /Command-line_tools; ; obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation; obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. /Contributing; ; Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation; Developing Open Babel — Open Babel openbabel-3-1-1 documentation; Documentation — Open Babel openbabel-3-1-1 documentation; Overview — Open Babel openbabel-3-1-1 documentation; Software Archaeology — Open Babel openbabel-3-1-1 documentation; Adding a new test — Open Babel openbabel-3-1-1 documentation. /Depiction; ; 2D Depiction — Open Babel openbabel-3-1-1 documentation. /Descriptors; ; Descriptors — Open Babel openbabel-3-1-1 documentation. /Features; ; Radicals and SMILES extensions — Open Babel openbabel-3-1-1 documentation. /FileFormats; ; 2D drawing formats — Open Babel openbabel-3-1-1 documentation; 3D viewer formats — Open Babel openbabel-3-1-1 documentation; ABINIT Output Format (abinit) — Open Babel openbabel-3-1-1 documentation; Accelrys/MSI Biosym/Insight II CAR format (arc, car) — Open Babel openbabel-3-1-1 documentation; Accelrys/MSI Cerius II MSI format (msi) — Open Babel openbabel-3-1-1 documentation; Accelrys/MSI Quanta CSR format (csr) — Open Babel openbabel-3-1-1 documentation; ACES input format (acesin) — Open Babel openbabel-3-1-1 documentation; ACES output format (aces",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:57774,Testability,log,log,57774,"el-3-1-1 documentation; Fingerprint format (fpt) — Open Babel openbabel-3-1-1 documentation; FPS text fingerprint format (Dalke) (fps) — Open Babel openbabel-3-1-1 documentation; Free Form Fractional format (fract) — Open Babel openbabel-3-1-1 documentation; GAMESS Input (gamin, inp) — Open Babel openbabel-3-1-1 documentation; GAMESS Output (gam, gamess, gamout) — Open Babel openbabel-3-1-1 documentation; GAMESS-UK Input (gukin) — Open Babel openbabel-3-1-1 documentation; GAMESS-UK Output (gukout) — Open Babel openbabel-3-1-1 documentation; Gaussian cube format (cub, cube) — Open Babel openbabel-3-1-1 documentation; Gaussian formatted checkpoint file format (fch, fchk, fck) — Open Babel openbabel-3-1-1 documentation; Gaussian Input (com, gau, gjc, gjf) — Open Babel openbabel-3-1-1 documentation; Gaussian Output (g03, g09, g16, g92, g94, g98, gal) — Open Babel openbabel-3-1-1 documentation; Gaussian Z-Matrix Input (gzmat) — Open Babel openbabel-3-1-1 documentation; General XML format (xml) — Open Babel openbabel-3-1-1 documentation; Generic Output file format (dat, log, out, output) — Open Babel openbabel-3-1-1 documentation; Ghemical format (gpr) — Open Babel openbabel-3-1-1 documentation; GRO format (gro) — Open Babel openbabel-3-1-1 documentation; GROMOS96 format (gr96) — Open Babel openbabel-3-1-1 documentation; GULP format (got) — Open Babel openbabel-3-1-1 documentation; HyperChem HIN format (hin) — Open Babel openbabel-3-1-1 documentation; Image formats — Open Babel openbabel-3-1-1 documentation; InChI format (inchi) — Open Babel openbabel-3-1-1 documentation; InChIKey (inchikey) — Open Babel openbabel-3-1-1 documentation; Jaguar input format (jin) — Open Babel openbabel-3-1-1 documentation; Jaguar output format (jout) — Open Babel openbabel-3-1-1 documentation; JSON formats — Open Babel openbabel-3-1-1 documentation; Kinetics and Thermodynamics formats — Open Babel openbabel-3-1-1 documentation; LPMD format (lpmd) — Open Babel openbabel-3-1-1 documentation; M.",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:60117,Usability,simpl,simplified,60117,"bel openbabel-3-1-1 documentation; MDL MOL format (mdl, mol, sd, sdf) — Open Babel openbabel-3-1-1 documentation; MDL RXN format (rxn) — Open Babel openbabel-3-1-1 documentation; Miscellaneous formats — Open Babel openbabel-3-1-1 documentation; Molden format (mold, molden, molf) — Open Babel openbabel-3-1-1 documentation; Molecular dynamics and docking formats — Open Babel openbabel-3-1-1 documentation; Molecular fingerprint formats — Open Babel openbabel-3-1-1 documentation; MolPrint2D format (mpd) — Open Babel openbabel-3-1-1 documentation; Molpro input format (mp) — Open Babel openbabel-3-1-1 documentation; Molpro output format (mpo) — Open Babel openbabel-3-1-1 documentation; MOPAC Cartesian format (mop, mopcrt, mpc) — Open Babel openbabel-3-1-1 documentation; MOPAC Internal (mopin) — Open Babel openbabel-3-1-1 documentation; MOPAC Output format (moo, mopout) — Open Babel openbabel-3-1-1 documentation; MPQC output format (mpqc) — Open Babel openbabel-3-1-1 documentation; MPQC simplified input format (mpqcin) — Open Babel openbabel-3-1-1 documentation; MSI BGF format (bgf) — Open Babel openbabel-3-1-1 documentation; Multilevel Neighborhoods of Atoms (MNA) (mna) — Open Babel openbabel-3-1-1 documentation; NWChem input format (nw) — Open Babel openbabel-3-1-1 documentation; NWChem output format (nwo) — Open Babel openbabel-3-1-1 documentation; Obscure formats — Open Babel openbabel-3-1-1 documentation; Open Babel molecule report (molreport) — Open Babel openbabel-3-1-1 documentation; Open Babel report format (report) — Open Babel openbabel-3-1-1 documentation; OpenDX cube format for APBS (dx) — Open Babel openbabel-3-1-1 documentation; ORCA input format (orcainp) — Open Babel openbabel-3-1-1 documentation; ORCA output format (orca) — Open Babel openbabel-3-1-1 documentation; Other cheminformatics formats — Open Babel openbabel-3-1-1 documentation; Outputs nothing (nul) — Open Babel openbabel-3-1-1 documentation; Supported File Formats and Options — Open Babel openba",MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:68129,Usability,Guid,Guide,68129, Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.3 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.4.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 3.0.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 3.1.0 — Open Babel openbabel-3-1-1 documentation. /Stereochemistry; ; Stereochemistry — Open Babel openbabel-3-1-1 documentation. /UseTheLibrary; ; The Open Babel API — Open Babel openbabel-3-1-1 documentation; C++ — Open Babel openbabel-3-1-1 documentation; CSharp and OBDotNet — Open Babel openbabel-3-1-1 documentation; Write software using the Open Babel library — Open Babel openbabel-3-1-1 documentation; Java — Open Babel openbabel-3-1-1 documentation; Updating to Open Babel 3.0 from 2.x — Open Babel openbabel-3-1-1 documentation; Perl — Open Babel openbabel-3-1-1 documentation; Python — Open Babel openbabel-3-1-1 documentation; Pybel — Open Babel openbabel-3-1-1 documentation; Pybel API — Open Babel openbabel-3-1-1 documentation; The openbabel module — Open Babel openbabel-3-1-1 documentation; Examples — Open Babel openbabel-3-1-1 documentation; Install Python bindings — Open Babel openbabel-3-1-1 documentation; Introduction — Open Babel openbabel-3-1-1 documentation; Ruby — Open Babel openbabel-3-1-1 documentation. /WritePlugins; ; How to add a new file format — Open Babel openbabel-3-1-1 documentation; Adding new operations and options — Open Babel openbabel-3-1-1 documentation; How to add a new descriptor — Open Babel openbabel-3-1-1 documentation; Adding plugins — Open Babel openbabel-3-1-1 documentation. User Guide — Open Babel openbabel-3-1-1 documentation; User Guide — Open Babel openbabel-3-1-1 documentation. Index — Open Babel openbabel-3-1-1 documentation; Open Babel - the chemistry toolbox — Open Babel openbabel-3-1-1 documentation; Search - Open Babel openbabel-3-1-1 documentation; searchindex.js. ,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index-wcopy.html:68184,Usability,Guid,Guide,68184, Open Babel openbabel-3-1-1 documentation; Open Babel 2.2.3 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.3.1 — Open Babel openbabel-3-1-1 documentation; Open Babel 2.4.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 3.0.0 — Open Babel openbabel-3-1-1 documentation; Open Babel 3.1.0 — Open Babel openbabel-3-1-1 documentation. /Stereochemistry; ; Stereochemistry — Open Babel openbabel-3-1-1 documentation. /UseTheLibrary; ; The Open Babel API — Open Babel openbabel-3-1-1 documentation; C++ — Open Babel openbabel-3-1-1 documentation; CSharp and OBDotNet — Open Babel openbabel-3-1-1 documentation; Write software using the Open Babel library — Open Babel openbabel-3-1-1 documentation; Java — Open Babel openbabel-3-1-1 documentation; Updating to Open Babel 3.0 from 2.x — Open Babel openbabel-3-1-1 documentation; Perl — Open Babel openbabel-3-1-1 documentation; Python — Open Babel openbabel-3-1-1 documentation; Pybel — Open Babel openbabel-3-1-1 documentation; Pybel API — Open Babel openbabel-3-1-1 documentation; The openbabel module — Open Babel openbabel-3-1-1 documentation; Examples — Open Babel openbabel-3-1-1 documentation; Install Python bindings — Open Babel openbabel-3-1-1 documentation; Introduction — Open Babel openbabel-3-1-1 documentation; Ruby — Open Babel openbabel-3-1-1 documentation. /WritePlugins; ; How to add a new file format — Open Babel openbabel-3-1-1 documentation; Adding new operations and options — Open Babel openbabel-3-1-1 documentation; How to add a new descriptor — Open Babel openbabel-3-1-1 documentation; Adding plugins — Open Babel openbabel-3-1-1 documentation. User Guide — Open Babel openbabel-3-1-1 documentation; User Guide — Open Babel openbabel-3-1-1 documentation. Index — Open Babel openbabel-3-1-1 documentation; Open Babel - the chemistry toolbox — Open Babel openbabel-3-1-1 documentation; Search - Open Babel openbabel-3-1-1 documentation; searchindex.js. ,MatchSource.WIKI,index-wcopy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index-wcopy.html
http://openbabel.org//index.html:888,Availability,Down,Downloaded,888,"﻿. Open Babel - the chemistry toolbox — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Open Babel - the chemistry toolbox#; Open Babel is a chemical toolbox designed to speak the many languages of chemical data. It’s an open, collaborative project allowing anyone to search, convert, analyze, or store data from molecular modeling, chemistry, solid-state materials, biochemistry, or related areas. Ready-to-use programs, and complete programmer’s toolkit; Read, write and convert over 110 chemical file formats; Filter and search molecular files using SMARTS and other methods; Supports molecular modeling, cheminformatics, bioinformatics; Organic chemistry, inorganic chemistry, solid-state materials, nuclear chemistry; Downloaded over 700,000 times and used by over 40 related projects; How to cite Open Babel: The Open Babel and Pybel papers. next; User Guide. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index.html
http://openbabel.org//index.html:163,Usability,Guid,Guide,163,"﻿. Open Babel - the chemistry toolbox — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Open Babel - the chemistry toolbox#; Open Babel is a chemical toolbox designed to speak the many languages of chemical data. It’s an open, collaborative project allowing anyone to search, convert, analyze, or store data from molecular modeling, chemistry, solid-state materials, biochemistry, or related areas. Ready-to-use programs, and complete programmer’s toolkit; Read, write and convert over 110 chemical file formats; Filter and search molecular files using SMARTS and other methods; Supports molecular modeling, cheminformatics, bioinformatics; Organic chemistry, inorganic chemistry, solid-state materials, nuclear chemistry; Downloaded over 700,000 times and used by over 40 related projects; How to cite Open Babel: The Open Babel and Pybel papers. next; User Guide. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index.html
http://openbabel.org//index.html:220,Usability,Guid,Guide,220,"﻿. Open Babel - the chemistry toolbox — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Open Babel - the chemistry toolbox#; Open Babel is a chemical toolbox designed to speak the many languages of chemical data. It’s an open, collaborative project allowing anyone to search, convert, analyze, or store data from molecular modeling, chemistry, solid-state materials, biochemistry, or related areas. Ready-to-use programs, and complete programmer’s toolkit; Read, write and convert over 110 chemical file formats; Filter and search molecular files using SMARTS and other methods; Supports molecular modeling, cheminformatics, bioinformatics; Organic chemistry, inorganic chemistry, solid-state materials, nuclear chemistry; Downloaded over 700,000 times and used by over 40 related projects; How to cite Open Babel: The Open Babel and Pybel papers. next; User Guide. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index.html
http://openbabel.org//index.html:1024,Usability,Guid,Guide,1024,"﻿. Open Babel - the chemistry toolbox — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Open Babel - the chemistry toolbox#; Open Babel is a chemical toolbox designed to speak the many languages of chemical data. It’s an open, collaborative project allowing anyone to search, convert, analyze, or store data from molecular modeling, chemistry, solid-state materials, biochemistry, or related areas. Ready-to-use programs, and complete programmer’s toolkit; Read, write and convert over 110 chemical file formats; Filter and search molecular files using SMARTS and other methods; Supports molecular modeling, cheminformatics, bioinformatics; Organic chemistry, inorganic chemistry, solid-state materials, nuclear chemistry; Downloaded over 700,000 times and used by over 40 related projects; How to cite Open Babel: The Open Babel and Pybel papers. next; User Guide. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//index.html
http://openbabel.org//search.html:233,Availability,Error,Error,233,﻿. Search - Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Search. Error; Please activate JavaScript to enable the search functionality. Ctrl+K. ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ,MatchSource.WIKI,search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//search.html
http://openbabel.org//search.html:135,Usability,Guid,Guide,135,﻿. Search - Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Search. Error; Please activate JavaScript to enable the search functionality. Ctrl+K. ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ,MatchSource.WIKI,search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//search.html
http://openbabel.org//search.html:192,Usability,Guid,Guide,192,﻿. Search - Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Search. Error; Please activate JavaScript to enable the search functionality. Ctrl+K. ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ,MatchSource.WIKI,search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//search.html
http://openbabel.org//api/index.html:132,Usability,Guid,Guide,132,﻿. API — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. API. API#; The latest version of the API documentation is 3.0; Older API docs for historical purposes. 2.3; 2.2; 2.1; 2.0. previous; Open Babel 1.99. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ,MatchSource.WIKI,api/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/index.html
http://openbabel.org//api/index.html:189,Usability,Guid,Guide,189,﻿. API — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. API. API#; The latest version of the API documentation is 3.0; Older API docs for historical purposes. 2.3; 2.2; 2.1; 2.0. previous; Open Babel 1.99. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ,MatchSource.WIKI,api/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/index.html
http://openbabel.org//docs/index.html:945,Availability,avail,available,945,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:263,Deployability,Install,Install,263,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:796,Deployability,Release,Release,796,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:1090,Deployability,Install,Install,1090,"igation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity searching; Fingerprint format; Spectrophores™. obabel vs Chemistry Toolkit Rosetta; Heavy atom counts from an SD file; Convert",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:1110,Deployability,Install,Install,1110,"igation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity searching; Fingerprint format; Spectrophores™. obabel vs Chemistry Toolkit Rosetta; Heavy atom counts from an SD file; Convert",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:4634,Deployability,Release,Release,4634,"try information; The Config() object; Modifying the stereochemistry; Stereo perception; Miscellaneous stereo functions in the API. Handling of aromaticity; How is aromaticity information stored?; Perception of aromaticity; SMILES reading and writing; Effect of modifying the structure. Radicals and SMILES extensions; The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; How to add a new file format; Adding new operations and options; How to add a new descriptor. Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Numerical descriptors; Textual descriptors; Descriptors for filtering. Charge models; Cheminformatics charge models; Special charge models. Release Notes; Open Babel 3.1.0; Open Babel 3.0.0; Open Babel 2.4.0; Open Babel 2.3.1; Open Babel 2.3.0; Open Babel 2.2.3; Open Babel 2.2.2; Open Babel 2.2.1; Open Babel 2.2.0; Open Babel 2.1.1; Open Babel 2.1.0; Open Babel 2.0.2; Open Babel 2.0.1; Open Babel 2.0; Open Babel 1.100.2; Open Babel 1.100.1; Open Babel 1.100.0; Open Babel 1.99. previous; Open Babel - the chemistry toolbox. next; Introduction. On this page; . Open Babel, or how I learned to love the chemistry file format. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:781,Energy Efficiency,Charge,Charge,781,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:1506,Energy Efficiency,energy,energy,1506,"lecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity searching; Fingerprint format; Spectrophores™. obabel vs Chemistry Toolkit Rosetta; Heavy atom counts from an SD file; Convert a SMILES string to canonical SMILES; Report how many SD file records are within a certain molecular weight range; Convert SMILES file to SD file; Report the similarity between two structures; Find the 10 nearest neighbors in a data set; Depict a compound as an im",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:4565,Energy Efficiency,Charge,Charge,4565,"try information; The Config() object; Modifying the stereochemistry; Stereo perception; Miscellaneous stereo functions in the API. Handling of aromaticity; How is aromaticity information stored?; Perception of aromaticity; SMILES reading and writing; Effect of modifying the structure. Radicals and SMILES extensions; The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; How to add a new file format; Adding new operations and options; How to add a new descriptor. Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Numerical descriptors; Textual descriptors; Descriptors for filtering. Charge models; Cheminformatics charge models; Special charge models. Release Notes; Open Babel 3.1.0; Open Babel 3.0.0; Open Babel 2.4.0; Open Babel 2.3.1; Open Babel 2.3.0; Open Babel 2.2.3; Open Babel 2.2.2; Open Babel 2.2.1; Open Babel 2.2.0; Open Babel 2.1.1; Open Babel 2.1.0; Open Babel 2.0.2; Open Babel 2.0.1; Open Babel 2.0; Open Babel 1.100.2; Open Babel 1.100.1; Open Babel 1.100.0; Open Babel 1.99. previous; Open Babel - the chemistry toolbox. next; Introduction. On this page; . Open Babel, or how I learned to love the chemistry file format. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:4596,Energy Efficiency,charge,charge,4596,"try information; The Config() object; Modifying the stereochemistry; Stereo perception; Miscellaneous stereo functions in the API. Handling of aromaticity; How is aromaticity information stored?; Perception of aromaticity; SMILES reading and writing; Effect of modifying the structure. Radicals and SMILES extensions; The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; How to add a new file format; Adding new operations and options; How to add a new descriptor. Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Numerical descriptors; Textual descriptors; Descriptors for filtering. Charge models; Cheminformatics charge models; Special charge models. Release Notes; Open Babel 3.1.0; Open Babel 3.0.0; Open Babel 2.4.0; Open Babel 2.3.1; Open Babel 2.3.0; Open Babel 2.2.3; Open Babel 2.2.2; Open Babel 2.2.1; Open Babel 2.2.0; Open Babel 2.1.1; Open Babel 2.1.0; Open Babel 2.0.2; Open Babel 2.0.1; Open Babel 2.0; Open Babel 1.100.2; Open Babel 1.100.1; Open Babel 1.100.0; Open Babel 1.99. previous; Open Babel - the chemistry toolbox. next; Introduction. On this page; . Open Babel, or how I learned to love the chemistry file format. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:4619,Energy Efficiency,charge,charge,4619,"try information; The Config() object; Modifying the stereochemistry; Stereo perception; Miscellaneous stereo functions in the API. Handling of aromaticity; How is aromaticity information stored?; Perception of aromaticity; SMILES reading and writing; Effect of modifying the structure. Radicals and SMILES extensions; The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; How to add a new file format; Adding new operations and options; How to add a new descriptor. Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Numerical descriptors; Textual descriptors; Descriptors for filtering. Charge models; Cheminformatics charge models; Special charge models. Release Notes; Open Babel 3.1.0; Open Babel 3.0.0; Open Babel 2.4.0; Open Babel 2.3.1; Open Babel 2.3.0; Open Babel 2.2.3; Open Babel 2.2.2; Open Babel 2.2.1; Open Babel 2.2.0; Open Babel 2.1.1; Open Babel 2.1.0; Open Babel 2.0.2; Open Babel 2.0.1; Open Babel 2.0; Open Babel 1.100.2; Open Babel 1.100.1; Open Babel 1.100.0; Open Babel 1.99. previous; Open Babel - the chemistry toolbox. next; Introduction. On this page; . Open Babel, or how I learned to love the chemistry file format. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:723,Modifiability,plugin,plugins,723,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:3289,Modifiability,Config,Config,3289,s; Find the 10 nearest neighbors in a data set; Depict a compound as an image; Highlight a substructure in the depiction; Align the depiction using a fixed substructure; Perform a substructure search on an SDF file and report the number of false positives; Calculate TPSA; Working with SD tag data; Unattempted tasks. 2D Depiction; Molecular graphics. 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Generalized Amber Force Field (gaff); Ghemical Force Field (ghemical); MMFF94 Force Field (mmff94); Universal Force Field (uff). Write software using the Open Babel library; The Open Babel API; C++; Python; Java; Perl; CSharp and OBDotNet; Ruby; Updating to Open Babel 3.0 from 2.x. Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Accessing stereochemistry information; The Config() object; Modifying the stereochemistry; Stereo perception; Miscellaneous stereo functions in the API. Handling of aromaticity; How is aromaticity information stored?; Perception of aromaticity; SMILES reading and writing; Effect of modifying the structure. Radicals and SMILES extensions; The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; How to add a new file format; Adding new operations and options; How to add a new descriptor. Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics ,MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:3924,Modifiability,plugin,plugins,3924,abel API; C++; Python; Java; Perl; CSharp and OBDotNet; Ruby; Updating to Open Babel 3.0 from 2.x. Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Accessing stereochemistry information; The Config() object; Modifying the stereochemistry; Stereo perception; Miscellaneous stereo functions in the API. Handling of aromaticity; How is aromaticity information stored?; Perception of aromaticity; SMILES reading and writing; Effect of modifying the structure. Radicals and SMILES extensions; The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; How to add a new file format; Adding new operations and options; How to add a new descriptor. Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Numerical descriptors; Textual descriptors; Descriptors for filtering. Charge models; Cheminformatics charge models; Special charge models. Release Notes; Open Babel 3.1.0; Open Babel 3.0.0; Open Babel 2.4.0; Open Babel 2.3.1; Open Babel 2.3.0; Open Babel 2.2.3; Open Babel 2.2.2; Open Babel 2.2.1; Open Babel 2.2.0; Open Babel 2.1.1; Open Babel 2.1.0; Open Babel 2.0.2; Open Babel 2.0.1; Open Babel 2.0; Open Babel 1.100.2; Open Babel 1.100.1; Open Babel 1.100.0; Open Babel 1,MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:2483,Performance,Perform,Perform,2483,tering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity searching; Fingerprint format; Spectrophores™. obabel vs Chemistry Toolkit Rosetta; Heavy atom counts from an SD file; Convert a SMILES string to canonical SMILES; Report how many SD file records are within a certain molecular weight range; Convert SMILES file to SD file; Report the similarity between two structures; Find the 10 nearest neighbors in a data set; Depict a compound as an image; Highlight a substructure in the depiction; Align the depiction using a fixed substructure; Perform a substructure search on an SDF file and report the number of false positives; Calculate TPSA; Working with SD tag data; Unattempted tasks. 2D Depiction; Molecular graphics. 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Generalized Amber Force Field (gaff); Ghemical Force Field (ghemical); MMFF94 Force Field (mmff94); Universal Force Field (uff). Write software using the Open Babel library; The Open Babel API; C++; Python; Java; Perl; CSharp and OBDotNet; Ruby; Updating to Open Babel 3.0 from 2.x. Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Accessing stereochemistry information; The Config() object; Modifying the stereochemistry; ,MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:3246,Security,Access,Accessing,3246,s; Find the 10 nearest neighbors in a data set; Depict a compound as an image; Highlight a substructure in the depiction; Align the depiction using a fixed substructure; Perform a substructure search on an SDF file and report the number of false positives; Calculate TPSA; Working with SD tag data; Unattempted tasks. 2D Depiction; Molecular graphics. 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Generalized Amber Force Field (gaff); Ghemical Force Field (ghemical); MMFF94 Force Field (mmff94); Universal Force Field (uff). Write software using the Open Babel library; The Open Babel API; C++; Python; Java; Perl; CSharp and OBDotNet; Ruby; Updating to Open Babel 3.0 from 2.x. Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Accessing stereochemistry information; The Config() object; Modifying the stereochemistry; Stereo perception; Miscellaneous stereo functions in the API. Handling of aromaticity; How is aromaticity information stored?; Perception of aromaticity; SMILES reading and writing; Effect of modifying the structure. Radicals and SMILES extensions; The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; How to add a new file format; Adding new operations and options; How to add a new descriptor. Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics ,MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:3889,Testability,test,test,3889, MMFF94 Force Field (mmff94); Universal Force Field (uff). Write software using the Open Babel library; The Open Babel API; C++; Python; Java; Perl; CSharp and OBDotNet; Ruby; Updating to Open Babel 3.0 from 2.x. Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Accessing stereochemistry information; The Config() object; Modifying the stereochemistry; Stereo perception; Miscellaneous stereo functions in the API. Handling of aromaticity; How is aromaticity information stored?; Perception of aromaticity; SMILES reading and writing; Effect of modifying the structure. Radicals and SMILES extensions; The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; How to add a new file format; Adding new operations and options; How to add a new descriptor. Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Numerical descriptors; Textual descriptors; Descriptors for filtering. Charge models; Cheminformatics charge models; Special charge models. Release Notes; Open Babel 3.1.0; Open Babel 3.0.0; Open Babel 2.4.0; Open Babel 2.3.1; Open Babel 2.3.0; Open Babel 2.2.3; Open Babel 2.2.2; Open Babel 2.2.1; Open Babel 2.2.0; Open Babel 2.1.1; Open Babel 2.1.0; Open Babel ,MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:8,Usability,Guid,Guide,8,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:139,Usability,Guid,Guide,139,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:196,Usability,Guid,Guide,196,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:816,Usability,Guid,Guide,816,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:828,Usability,Guid,Guide,828,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:857,Usability,learn,learned,857,"﻿. User Guide — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide. User Guide#. Open Babel, or how I learned to love the chemistry file format#; The latest version of this documentation is available in several formats from http://openbabel.org/docs/. Introduction; Goals of the Open Babel project; Frequently Asked Questions; Thanks. Install Open Babel; Install a binary package; Compiling Open Babel. obabel - Convert, Filter and Manipulate Chemical Data; Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. The Open Babel GUI; Basic operation; Options; Multiple input files; Wildcards in filenames; Local input; Output file; Graphical display; Using a restricted set of formats; Other features; Example files. Tutorial on using the GUI; Converting chemical file formats; Filtering structures; Substructure and similarity searching a large dataset. Molecular fingerprints and similarity sear",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//docs/index.html:5079,Usability,learn,learned,5079,"try information; The Config() object; Modifying the stereochemistry; Stereo perception; Miscellaneous stereo functions in the API. Handling of aromaticity; How is aromaticity information stored?; Perception of aromaticity; SMILES reading and writing; Effect of modifying the structure. Radicals and SMILES extensions; The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; How to add a new file format; Adding new operations and options; How to add a new descriptor. Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Numerical descriptors; Textual descriptors; Descriptors for filtering. Charge models; Cheminformatics charge models; Special charge models. Release Notes; Open Babel 3.1.0; Open Babel 3.0.0; Open Babel 2.4.0; Open Babel 2.3.1; Open Babel 2.3.0; Open Babel 2.2.3; Open Babel 2.2.2; Open Babel 2.2.1; Open Babel 2.2.0; Open Babel 2.1.1; Open Babel 2.1.0; Open Babel 2.0.2; Open Babel 2.0.1; Open Babel 2.0; Open Babel 1.100.2; Open Babel 1.100.1; Open Babel 1.100.0; Open Babel 1.99. previous; Open Babel - the chemistry toolbox. next; Introduction. On this page; . Open Babel, or how I learned to love the chemistry file format. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/index.html
http://openbabel.org//api/2.3.0/index.html:986,Deployability,release,releases,986,"﻿. Open Babel: API Documentation. Main Page; Related Pages; Modules; Namespaces; Classes; Files; Examples. API Documentation . 2.3 ; Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) .  All Classes Namespaces Files Functions Variables Typedefs Enumerations Enumerator Friends Defines. This file is part of the documentation for Open Babel, version 2.3. Documentation copyright © 1998-2007, the Open Babel Developers.; Open Babel is hosted by: . Generated on Mon Oct 25 2010 11:55:06 by  1.7.2. ",MatchSource.WIKI,api/2.3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/2.3.0/index.html
http://openbabel.org//api/2.3.0/index.html:1044,Deployability,release,releases,1044,"﻿. Open Babel: API Documentation. Main Page; Related Pages; Modules; Namespaces; Classes; Files; Examples. API Documentation . 2.3 ; Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) .  All Classes Namespaces Files Functions Variables Typedefs Enumerations Enumerator Friends Defines. This file is part of the documentation for Open Babel, version 2.3. Documentation copyright © 1998-2007, the Open Babel Developers.; Open Babel is hosted by: . Generated on Mon Oct 25 2010 11:55:06 by  1.7.2. ",MatchSource.WIKI,api/2.3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/2.3.0/index.html
http://openbabel.org//api/2.3.0/index.html:1102,Deployability,release,releases,1102,"﻿. Open Babel: API Documentation. Main Page; Related Pages; Modules; Namespaces; Classes; Files; Examples. API Documentation . 2.3 ; Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) .  All Classes Namespaces Files Functions Variables Typedefs Enumerations Enumerator Friends Defines. This file is part of the documentation for Open Babel, version 2.3. Documentation copyright © 1998-2007, the Open Babel Developers.; Open Babel is hosted by: . Generated on Mon Oct 25 2010 11:55:06 by  1.7.2. ",MatchSource.WIKI,api/2.3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/2.3.0/index.html
http://openbabel.org//api/2.3.0/index.html:367,Integrability,interface,interfaces,367,"﻿. Open Babel: API Documentation. Main Page; Related Pages; Modules; Namespaces; Classes; Files; Examples. API Documentation . 2.3 ; Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) .  All Classes Namespaces Files Functions Variables Typedefs Enumerations Enumerator Friends Defines. This file is part of the documentation for Open Babel, version 2.3. Documentation copyright © 1998-2007, the Open Babel Developers.; Open Babel is hosted by: . Generated on Mon Oct 25 2010 11:55:06 by  1.7.2. ",MatchSource.WIKI,api/2.3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/2.3.0/index.html
http://openbabel.org//api/2.3.0/index.html:522,Integrability,interface,interface,522,"﻿. Open Babel: API Documentation. Main Page; Related Pages; Modules; Namespaces; Classes; Files; Examples. API Documentation . 2.3 ; Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) .  All Classes Namespaces Files Functions Variables Typedefs Enumerations Enumerator Friends Defines. This file is part of the documentation for Open Babel, version 2.3. Documentation copyright © 1998-2007, the Open Babel Developers.; Open Babel is hosted by: . Generated on Mon Oct 25 2010 11:55:06 by  1.7.2. ",MatchSource.WIKI,api/2.3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/2.3.0/index.html
http://openbabel.org//api/2.3.0/index.html:1207,Modifiability,Variab,Variables,1207,"﻿. Open Babel: API Documentation. Main Page; Related Pages; Modules; Namespaces; Classes; Files; Examples. API Documentation . 2.3 ; Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) .  All Classes Namespaces Files Functions Variables Typedefs Enumerations Enumerator Friends Defines. This file is part of the documentation for Open Babel, version 2.3. Documentation copyright © 1998-2007, the Open Babel Developers.; Open Babel is hosted by: . Generated on Mon Oct 25 2010 11:55:06 by  1.7.2. ",MatchSource.WIKI,api/2.3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/2.3.0/index.html
http://openbabel.org//api/3.0/index.html:925,Deployability,release,releases,925,"﻿. Open Babel: API Documentation. Open Babel;  3.0. API Documentation . Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) . Generated on Tue Oct 15 2019 21:28:06 for Open Babel by  . 1.8.13. ",MatchSource.WIKI,api/3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/3.0/index.html
http://openbabel.org//api/3.0/index.html:983,Deployability,release,releases,983,"﻿. Open Babel: API Documentation. Open Babel;  3.0. API Documentation . Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) . Generated on Tue Oct 15 2019 21:28:06 for Open Babel by  . 1.8.13. ",MatchSource.WIKI,api/3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/3.0/index.html
http://openbabel.org//api/3.0/index.html:1041,Deployability,release,releases,1041,"﻿. Open Babel: API Documentation. Open Babel;  3.0. API Documentation . Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) . Generated on Tue Oct 15 2019 21:28:06 for Open Babel by  . 1.8.13. ",MatchSource.WIKI,api/3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/3.0/index.html
http://openbabel.org//api/3.0/index.html:306,Integrability,interface,interfaces,306,"﻿. Open Babel: API Documentation. Open Babel;  3.0. API Documentation . Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) . Generated on Tue Oct 15 2019 21:28:06 for Open Babel by  . 1.8.13. ",MatchSource.WIKI,api/3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/3.0/index.html
http://openbabel.org//api/3.0/index.html:461,Integrability,interface,interface,461,"﻿. Open Babel: API Documentation. Open Babel;  3.0. API Documentation . Introduction; Open Babel is a full chemical software toolbox. In addition to converting file formats, it offers a complete programming library for developing chemistry software. The library is written primarily in C++ and also offers interfaces to other languages (e.g., Perl, Python, Ruby, and Java) using essentially the same API.; This documentation outlines the Open Babel programming interface, providing information on all public classes, methods, and data. In particular, strives to provide as much (or as little) detail as needed. More information can also be found on the main website and through the openbabel-discuss mailing list. Getting Started ; (where to begin, example code, using Open Babel in real life, ...); Classes Overview ; (overview the most important classes ordered by category); What's New in Version 2.3 ; (Changes since 2.2 releases); What's New in Version 2.2 ; (Changes since 2.1 releases); What's New in Version 2.1 ; (Changes since 2.0 releases); All Classes ; (all classes with brief descriptions) . Generated on Tue Oct 15 2019 21:28:06 for Open Babel by  . 1.8.13. ",MatchSource.WIKI,api/3.0/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//api/3.0/index.html
http://openbabel.org//cdn-cgi/l/email-protection.html:693,Performance,Perform,Performance,693,"﻿. . Email Protection | Cloudflare. Please enable cookies. Email Protection; You are unable to access this email address openbabel.org. The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.; If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare. How does Cloudflare protect email addresses on website from spammers?; Can I sign up for Cloudflare?. Cloudflare Ray ID: 8dfec284694306c4; •. Your IP:; Click to reveal; 213.93.130.35; •. Performance & security by Cloudflare. ",MatchSource.WIKI,cdn-cgi/l/email-protection.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//cdn-cgi/l/email-protection.html
http://openbabel.org//cdn-cgi/l/email-protection.html:95,Security,access,access,95,"﻿. . Email Protection | Cloudflare. Please enable cookies. Email Protection; You are unable to access this email address openbabel.org. The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.; If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare. How does Cloudflare protect email addresses on website from spammers?; Can I sign up for Cloudflare?. Cloudflare Ray ID: 8dfec284694306c4; •. Your IP:; Click to reveal; 213.93.130.35; •. Performance & security by Cloudflare. ",MatchSource.WIKI,cdn-cgi/l/email-protection.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//cdn-cgi/l/email-protection.html
http://openbabel.org//cdn-cgi/l/email-protection.html:287,Security,access,accessed,287,"﻿. . Email Protection | Cloudflare. Please enable cookies. Email Protection; You are unable to access this email address openbabel.org. The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.; If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare. How does Cloudflare protect email addresses on website from spammers?; Can I sign up for Cloudflare?. Cloudflare Ray ID: 8dfec284694306c4; •. Your IP:; Click to reveal; 213.93.130.35; •. Performance & security by Cloudflare. ",MatchSource.WIKI,cdn-cgi/l/email-protection.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//cdn-cgi/l/email-protection.html
http://openbabel.org//cdn-cgi/l/email-protection.html:707,Security,secur,security,707,"﻿. . Email Protection | Cloudflare. Please enable cookies. Email Protection; You are unable to access this email address openbabel.org. The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.; If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare. How does Cloudflare protect email addresses on website from spammers?; Can I sign up for Cloudflare?. Cloudflare Ray ID: 8dfec284694306c4; •. Your IP:; Click to reveal; 213.93.130.35; •. Performance & security by Cloudflare. ",MatchSource.WIKI,cdn-cgi/l/email-protection.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//cdn-cgi/l/email-protection.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:1973,Availability,avail,available,1973,"o conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-line using: obabel -L conformer. Although labelled as “Conformer Searching”, if you choose the genetic algorithm method (which is the default) then you can save the conformers in the final generation using --writeconformers. For example, the following line creates 30 conformers optimized for RMSD diversity:; obabel startingConformer.mol -O ga_conformers.sdf --conformer --nconf 30; --score rmsd --writeconformers. In this case --score rmsd was not strictly necessary as RMSD diversity was the default in any case. Confab#; Confab systematically generates all diverse low-energy conformers for molecules. To run Confab use the --confab operation, and to assess the results by calculating RMSDs to reference structures, use the confabreport output format.; confab operator. obabel <inputfile> -O <outputfile> --confab [confab options] for typical usage; obabel -L confab for help text. The inputfile should contain one or more 3D structures (note that 2D structures will generate err",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:281,Deployability,Install,Install,281,"﻿. Generate multiple conformers — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-lin",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:873,Deployability,Release,Release,873,"﻿. Generate multiple conformers — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-lin",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:858,Energy Efficiency,Charge,Charge,858,"﻿. Generate multiple conformers — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-lin",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:1065,Energy Efficiency,energy,energy,1065,"Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-line using: obabel -L conformer. Alth",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:1478,Energy Efficiency,energy,energy,1478,"; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-line using: obabel -L conformer. Although labelled as “Conformer Searching”, if you choose the genetic algorithm method (which is the default) then you can save the conformers in the final generation using --writeconformers. For example, the following line creates 30 conformers optimized for RMSD diversity:; obabel startingConformer.mol -O ga_conformers.sdf --conformer --nconf 30; --score rmsd --writeconformers. In this case --score rmsd was not st",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:1606,Energy Efficiency,energy,energy,1606,"rate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-line using: obabel -L conformer. Although labelled as “Conformer Searching”, if you choose the genetic algorithm method (which is the default) then you can save the conformers in the final generation using --writeconformers. For example, the following line creates 30 conformers optimized for RMSD diversity:; obabel startingConformer.mol -O ga_conformers.sdf --conformer --nconf 30; --score rmsd --writeconformers. In this case --score rmsd was not strictly necessary as RMSD diversity was the default in any case. Confab#; Confab systematically generates all div",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:1925,Energy Efficiency,energy,energy,1925,"iptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-line using: obabel -L conformer. Although labelled as “Conformer Searching”, if you choose the genetic algorithm method (which is the default) then you can save the conformers in the final generation using --writeconformers. For example, the following line creates 30 conformers optimized for RMSD diversity:; obabel startingConformer.mol -O ga_conformers.sdf --conformer --nconf 30; --score rmsd --writeconformers. In this case --score rmsd was not strictly necessary as RMSD diversity was the default in any case. Confab#; Confab systematically generates all diverse low-energy conformers for molecules. To run Confab use the --confab operation, and to assess the results by calculating RMSDs to reference structures, use the confabreport output format.; confab operator. obabel <inputfile> -O <outputfile> --confab [confab options] for typical usage;",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:2571,Energy Efficiency,energy,energy,2571,"that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-line using: obabel -L conformer. Although labelled as “Conformer Searching”, if you choose the genetic algorithm method (which is the default) then you can save the conformers in the final generation using --writeconformers. For example, the following line creates 30 conformers optimized for RMSD diversity:; obabel startingConformer.mol -O ga_conformers.sdf --conformer --nconf 30; --score rmsd --writeconformers. In this case --score rmsd was not strictly necessary as RMSD diversity was the default in any case. Confab#; Confab systematically generates all diverse low-energy conformers for molecules. To run Confab use the --confab operation, and to assess the results by calculating RMSDs to reference structures, use the confabreport output format.; confab operator. obabel <inputfile> -O <outputfile> --confab [confab options] for typical usage; obabel -L confab for help text. The inputfile should contain one or more 3D structures (note that 2D structures will generate erroneous results). Generated conformers are written to the outputfile. All of the conformers for a particular molecule will have the same title as the original molecule. --rcutoff <rmsd>; RMSD cutoff (default 0.5 Angstrom). --ecutoff <energy>; Energy cutoff (default 50.0 kcal/mol). --conf <#confs>; Max number of conformers to test (default is 1 million). --original; Include the input conformation as the first conformer. --verbose; Verbose - display information on torsions found. confabreport format. obabel <inputfile> [-O <outputfile>] -o confabreport -xf <reference_file> ",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:3214,Energy Efficiency,energy,energy,3214,"r example, the following line creates 30 conformers optimized for RMSD diversity:; obabel startingConformer.mol -O ga_conformers.sdf --conformer --nconf 30; --score rmsd --writeconformers. In this case --score rmsd was not strictly necessary as RMSD diversity was the default in any case. Confab#; Confab systematically generates all diverse low-energy conformers for molecules. To run Confab use the --confab operation, and to assess the results by calculating RMSDs to reference structures, use the confabreport output format.; confab operator. obabel <inputfile> -O <outputfile> --confab [confab options] for typical usage; obabel -L confab for help text. The inputfile should contain one or more 3D structures (note that 2D structures will generate erroneous results). Generated conformers are written to the outputfile. All of the conformers for a particular molecule will have the same title as the original molecule. --rcutoff <rmsd>; RMSD cutoff (default 0.5 Angstrom). --ecutoff <energy>; Energy cutoff (default 50.0 kcal/mol). --conf <#confs>; Max number of conformers to test (default is 1 million). --original; Include the input conformation as the first conformer. --verbose; Verbose - display information on torsions found. confabreport format. obabel <inputfile> [-O <outputfile>] -o confabreport -xf <reference_file> [-xr <rmsd>] for typical usage; obabel -L confabreport for help text. Once a file containing conformers has been generated by Confab, the result can be compared to the original input structures or a set of reference structures using this output format. Conformers are matched with reference structures using the molecule title. For every conformer, there should be a reference structure (but not necessarily vice versa). -f <filename>; File containing reference structures. -r <rmsd>; RMSD cutoff (default 0.5 Angstrom); The number of structures with conformers within this RMSD cutoff; of the reference will be reported. Example; The example file, bostrom.sdf, contai",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:3223,Energy Efficiency,Energy,Energy,3223,"r example, the following line creates 30 conformers optimized for RMSD diversity:; obabel startingConformer.mol -O ga_conformers.sdf --conformer --nconf 30; --score rmsd --writeconformers. In this case --score rmsd was not strictly necessary as RMSD diversity was the default in any case. Confab#; Confab systematically generates all diverse low-energy conformers for molecules. To run Confab use the --confab operation, and to assess the results by calculating RMSDs to reference structures, use the confabreport output format.; confab operator. obabel <inputfile> -O <outputfile> --confab [confab options] for typical usage; obabel -L confab for help text. The inputfile should contain one or more 3D structures (note that 2D structures will generate erroneous results). Generated conformers are written to the outputfile. All of the conformers for a particular molecule will have the same title as the original molecule. --rcutoff <rmsd>; RMSD cutoff (default 0.5 Angstrom). --ecutoff <energy>; Energy cutoff (default 50.0 kcal/mol). --conf <#confs>; Max number of conformers to test (default is 1 million). --original; Include the input conformation as the first conformer. --verbose; Verbose - display information on torsions found. confabreport format. obabel <inputfile> [-O <outputfile>] -o confabreport -xf <reference_file> [-xr <rmsd>] for typical usage; obabel -L confabreport for help text. Once a file containing conformers has been generated by Confab, the result can be compared to the original input structures or a set of reference structures using this output format. Conformers are matched with reference structures using the molecule title. For every conformer, there should be a reference structure (but not necessarily vice versa). -f <filename>; File containing reference structures. -r <rmsd>; RMSD cutoff (default 0.5 Angstrom); The number of structures with conformers within this RMSD cutoff; of the reference will be reported. Example; The example file, bostrom.sdf, contai",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:4296,Energy Efficiency,Green,Greenwood,4296,"number of conformers to test (default is 1 million). --original; Include the input conformation as the first conformer. --verbose; Verbose - display information on torsions found. confabreport format. obabel <inputfile> [-O <outputfile>] -o confabreport -xf <reference_file> [-xr <rmsd>] for typical usage; obabel -L confabreport for help text. Once a file containing conformers has been generated by Confab, the result can be compared to the original input structures or a set of reference structures using this output format. Conformers are matched with reference structures using the molecule title. For every conformer, there should be a reference structure (but not necessarily vice versa). -f <filename>; File containing reference structures. -r <rmsd>; RMSD cutoff (default 0.5 Angstrom); The number of structures with conformers within this RMSD cutoff; of the reference will be reported. Example; The example file, bostrom.sdf, contains 36 molecules which have from 1 to 11 rotatable bonds (see Bostrom, Greenwood, Gottfries, J Mol Graph Model, 2003, 21, 449).; We can generate and test up to 100K conformers using Confab as follows:; > obabel bostrom.sdf -O confs.sdf --confab --conf 100000. **Starting Confab 1.1.0; **To support, cite Journal of Cheminformatics, 2011, 3, 8.; ..Input format = sdf; ..Output format = sdf; ..RMSD cutoff = 0.5; ..Energy cutoff = 50; ..Conformer cutoff = 1000000; ..Write input conformation? False; ..Verbose? False. **Molecule 1; ..title = 1a28_STR_1_A_1__C__; ..number of rotatable bonds = 1; ..tot conformations = 12; ..tot confs tested = 12; ..below energy threshold = 10; ..generated 3 conformers. ... etc, etc. 0 molecules converted. To check how many of the generated conformers are within 1.0 A RMSD of the original structures, we can use the confabreport format as follows:; > obabel confs.sdf -oconfabreport -xf bostrom.sdf -xr 1.0. **Generating Confab Report; ..Reference file = bostrom.sdf; ..Conformer file = confs.sdf. ..Molecule 1; ..title = 1a2",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:4638,Energy Efficiency,Energy,Energy,4638,"ng conformers has been generated by Confab, the result can be compared to the original input structures or a set of reference structures using this output format. Conformers are matched with reference structures using the molecule title. For every conformer, there should be a reference structure (but not necessarily vice versa). -f <filename>; File containing reference structures. -r <rmsd>; RMSD cutoff (default 0.5 Angstrom); The number of structures with conformers within this RMSD cutoff; of the reference will be reported. Example; The example file, bostrom.sdf, contains 36 molecules which have from 1 to 11 rotatable bonds (see Bostrom, Greenwood, Gottfries, J Mol Graph Model, 2003, 21, 449).; We can generate and test up to 100K conformers using Confab as follows:; > obabel bostrom.sdf -O confs.sdf --confab --conf 100000. **Starting Confab 1.1.0; **To support, cite Journal of Cheminformatics, 2011, 3, 8.; ..Input format = sdf; ..Output format = sdf; ..RMSD cutoff = 0.5; ..Energy cutoff = 50; ..Conformer cutoff = 1000000; ..Write input conformation? False; ..Verbose? False. **Molecule 1; ..title = 1a28_STR_1_A_1__C__; ..number of rotatable bonds = 1; ..tot conformations = 12; ..tot confs tested = 12; ..below energy threshold = 10; ..generated 3 conformers. ... etc, etc. 0 molecules converted. To check how many of the generated conformers are within 1.0 A RMSD of the original structures, we can use the confabreport format as follows:; > obabel confs.sdf -oconfabreport -xf bostrom.sdf -xr 1.0. **Generating Confab Report; ..Reference file = bostrom.sdf; ..Conformer file = confs.sdf. ..Molecule 1; ..title = 1a28_STR_1_A_1__C__; ..number of confs = 3; ..minimum rmsd = 0.0644801; ..confs less than cutoffs: 0.2 0.5 1 1.5 2 3 4 100; ..1 1 3 3 3 3 3 3; ..cutoff (1) passed = Yes. ... etc, etc. **Summary; ..number of molecules = 36; ..less than cutoff(1) = 35; 52271 molecules converted. previous; Generate a single conformer. next; Molecular Mechanics and Force Fields. On this",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:4878,Energy Efficiency,energy,energy,4878,"ed with reference structures using the molecule title. For every conformer, there should be a reference structure (but not necessarily vice versa). -f <filename>; File containing reference structures. -r <rmsd>; RMSD cutoff (default 0.5 Angstrom); The number of structures with conformers within this RMSD cutoff; of the reference will be reported. Example; The example file, bostrom.sdf, contains 36 molecules which have from 1 to 11 rotatable bonds (see Bostrom, Greenwood, Gottfries, J Mol Graph Model, 2003, 21, 449).; We can generate and test up to 100K conformers using Confab as follows:; > obabel bostrom.sdf -O confs.sdf --confab --conf 100000. **Starting Confab 1.1.0; **To support, cite Journal of Cheminformatics, 2011, 3, 8.; ..Input format = sdf; ..Output format = sdf; ..RMSD cutoff = 0.5; ..Energy cutoff = 50; ..Conformer cutoff = 1000000; ..Write input conformation? False; ..Verbose? False. **Molecule 1; ..title = 1a28_STR_1_A_1__C__; ..number of rotatable bonds = 1; ..tot conformations = 12; ..tot confs tested = 12; ..below energy threshold = 10; ..generated 3 conformers. ... etc, etc. 0 molecules converted. To check how many of the generated conformers are within 1.0 A RMSD of the original structures, we can use the confabreport format as follows:; > obabel confs.sdf -oconfabreport -xf bostrom.sdf -xr 1.0. **Generating Confab Report; ..Reference file = bostrom.sdf; ..Conformer file = confs.sdf. ..Molecule 1; ..title = 1a28_STR_1_A_1__C__; ..number of confs = 3; ..minimum rmsd = 0.0644801; ..confs less than cutoffs: 0.2 0.5 1 1.5 2 3 4 100; ..1 1 3 3 3 3 3 3; ..cutoff (1) passed = Yes. ... etc, etc. **Summary; ..number of molecules = 36; ..less than cutoff(1) = 35; 52271 molecules converted. previous; Generate a single conformer. next; Molecular Mechanics and Force Fields. On this page; . Genetic algorithm; Confab. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:800,Modifiability,plugin,plugins,800,"﻿. Generate multiple conformers — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-lin",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:2277,Performance,optimiz,optimized,2277,"e useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-line using: obabel -L conformer. Although labelled as “Conformer Searching”, if you choose the genetic algorithm method (which is the default) then you can save the conformers in the final generation using --writeconformers. For example, the following line creates 30 conformers optimized for RMSD diversity:; obabel startingConformer.mol -O ga_conformers.sdf --conformer --nconf 30; --score rmsd --writeconformers. In this case --score rmsd was not strictly necessary as RMSD diversity was the default in any case. Confab#; Confab systematically generates all diverse low-energy conformers for molecules. To run Confab use the --confab operation, and to assess the results by calculating RMSDs to reference structures, use the confabreport output format.; confab operator. obabel <inputfile> -O <outputfile> --confab [confab options] for typical usage; obabel -L confab for help text. The inputfile should contain one or more 3D structures (note that 2D structures will generate erroneous results). Generated conformers are written to the outputfile. All of the conformers for a particular molecule will have the same title as the original molecule. --rcutoff <rmsd>; RMSD cutoff (default 0.5 Angstrom). --ecutoff <energy>; Energy cutoff (default 50.0 kcal/mol). --conf <#confs>;",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:3307,Testability,test,test,3307,"versity:; obabel startingConformer.mol -O ga_conformers.sdf --conformer --nconf 30; --score rmsd --writeconformers. In this case --score rmsd was not strictly necessary as RMSD diversity was the default in any case. Confab#; Confab systematically generates all diverse low-energy conformers for molecules. To run Confab use the --confab operation, and to assess the results by calculating RMSDs to reference structures, use the confabreport output format.; confab operator. obabel <inputfile> -O <outputfile> --confab [confab options] for typical usage; obabel -L confab for help text. The inputfile should contain one or more 3D structures (note that 2D structures will generate erroneous results). Generated conformers are written to the outputfile. All of the conformers for a particular molecule will have the same title as the original molecule. --rcutoff <rmsd>; RMSD cutoff (default 0.5 Angstrom). --ecutoff <energy>; Energy cutoff (default 50.0 kcal/mol). --conf <#confs>; Max number of conformers to test (default is 1 million). --original; Include the input conformation as the first conformer. --verbose; Verbose - display information on torsions found. confabreport format. obabel <inputfile> [-O <outputfile>] -o confabreport -xf <reference_file> [-xr <rmsd>] for typical usage; obabel -L confabreport for help text. Once a file containing conformers has been generated by Confab, the result can be compared to the original input structures or a set of reference structures using this output format. Conformers are matched with reference structures using the molecule title. For every conformer, there should be a reference structure (but not necessarily vice versa). -f <filename>; File containing reference structures. -r <rmsd>; RMSD cutoff (default 0.5 Angstrom); The number of structures with conformers within this RMSD cutoff; of the reference will be reported. Example; The example file, bostrom.sdf, contains 36 molecules which have from 1 to 11 rotatable bonds (see Bostrom, Gr",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:4374,Testability,test,test,4374,"mer. --verbose; Verbose - display information on torsions found. confabreport format. obabel <inputfile> [-O <outputfile>] -o confabreport -xf <reference_file> [-xr <rmsd>] for typical usage; obabel -L confabreport for help text. Once a file containing conformers has been generated by Confab, the result can be compared to the original input structures or a set of reference structures using this output format. Conformers are matched with reference structures using the molecule title. For every conformer, there should be a reference structure (but not necessarily vice versa). -f <filename>; File containing reference structures. -r <rmsd>; RMSD cutoff (default 0.5 Angstrom); The number of structures with conformers within this RMSD cutoff; of the reference will be reported. Example; The example file, bostrom.sdf, contains 36 molecules which have from 1 to 11 rotatable bonds (see Bostrom, Greenwood, Gottfries, J Mol Graph Model, 2003, 21, 449).; We can generate and test up to 100K conformers using Confab as follows:; > obabel bostrom.sdf -O confs.sdf --confab --conf 100000. **Starting Confab 1.1.0; **To support, cite Journal of Cheminformatics, 2011, 3, 8.; ..Input format = sdf; ..Output format = sdf; ..RMSD cutoff = 0.5; ..Energy cutoff = 50; ..Conformer cutoff = 1000000; ..Write input conformation? False; ..Verbose? False. **Molecule 1; ..title = 1a28_STR_1_A_1__C__; ..number of rotatable bonds = 1; ..tot conformations = 12; ..tot confs tested = 12; ..below energy threshold = 10; ..generated 3 conformers. ... etc, etc. 0 molecules converted. To check how many of the generated conformers are within 1.0 A RMSD of the original structures, we can use the confabreport format as follows:; > obabel confs.sdf -oconfabreport -xf bostrom.sdf -xr 1.0. **Generating Confab Report; ..Reference file = bostrom.sdf; ..Conformer file = confs.sdf. ..Molecule 1; ..title = 1a28_STR_1_A_1__C__; ..number of confs = 3; ..minimum rmsd = 0.0644801; ..confs less than cutoffs: 0.2 0.5 1 1.5 2 3 ",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:4857,Testability,test,tested,4857,"ed with reference structures using the molecule title. For every conformer, there should be a reference structure (but not necessarily vice versa). -f <filename>; File containing reference structures. -r <rmsd>; RMSD cutoff (default 0.5 Angstrom); The number of structures with conformers within this RMSD cutoff; of the reference will be reported. Example; The example file, bostrom.sdf, contains 36 molecules which have from 1 to 11 rotatable bonds (see Bostrom, Greenwood, Gottfries, J Mol Graph Model, 2003, 21, 449).; We can generate and test up to 100K conformers using Confab as follows:; > obabel bostrom.sdf -O confs.sdf --confab --conf 100000. **Starting Confab 1.1.0; **To support, cite Journal of Cheminformatics, 2011, 3, 8.; ..Input format = sdf; ..Output format = sdf; ..RMSD cutoff = 0.5; ..Energy cutoff = 50; ..Conformer cutoff = 1000000; ..Write input conformation? False; ..Verbose? False. **Molecule 1; ..title = 1a28_STR_1_A_1__C__; ..number of rotatable bonds = 1; ..tot conformations = 12; ..tot confs tested = 12; ..below energy threshold = 10; ..generated 3 conformers. ... etc, etc. 0 molecules converted. To check how many of the generated conformers are within 1.0 A RMSD of the original structures, we can use the confabreport format as follows:; > obabel confs.sdf -oconfabreport -xf bostrom.sdf -xr 1.0. **Generating Confab Report; ..Reference file = bostrom.sdf; ..Conformer file = confs.sdf. ..Molecule 1; ..title = 1a28_STR_1_A_1__C__; ..number of confs = 3; ..minimum rmsd = 0.0644801; ..confs less than cutoffs: 0.2 0.5 1 1.5 2 3 4 100; ..1 1 3 3 3 3 3 3; ..cutoff (1) passed = Yes. ... etc, etc. **Summary; ..number of molecules = 36; ..less than cutoff(1) = 35; 52271 molecules converted. previous; Generate a single conformer. next; Molecular Mechanics and Force Fields. On this page; . Genetic algorithm; Confab. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:157,Usability,Guid,Guide,157,"﻿. Generate multiple conformers — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-lin",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:214,Usability,Guid,Guide,214,"﻿. Generate multiple conformers — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-lin",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:893,Usability,Guid,Guide,893,"﻿. Generate multiple conformers — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-lin",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/multipleconformers.html:1044,Usability,simpl,simply,1044,"Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate... Generate multiple conformers#; In contrast to conformer searching, the goal of conformer generation is not simply to find a low energy conformation but to generate several different conformations. Such conformations may be required by another piece of software such as some protein-ligand docking and pharmacophore programs. They may also be useful if considering writing some sort of shape comparison method.; Open Babel has two distinct conformer generating codes:. Confab: A systematic conformer generator that generates all diverse; low-energy conformers.; Genetic algorithm: This is a stochastic conformer generator that generates; diverse conformers either on an energy or RMSD basis. Genetic algorithm#; A genetic algorithm is a general computational method to find a globally optimum solution to some multiparameter problem. It involves a population of conformers which after a series of generations, iteratively arrive at an optimal solution in terms of either RMSD diversity or energy.; Information about using this method is available at the command-line using: obabel -L conformer. Alth",MatchSource.WIKI,docs/3DStructureGen/multipleconformers.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/multipleconformers.html
http://openbabel.org//docs/3DStructureGen/Overview.html:276,Deployability,Install,Install,276,"﻿. 3D Structure Generation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D... 3D Structure Generation#; Open Babel provides support for generating a reasonable 3D structure just given connectivity information. It also has the ability to generate multiple conformers for each molecule. These topics are discussed below. Generate a single conformer; OBBuilder; Conformer searching; Gen3D. Generate multiple conformers; Genetic algorithm; Confab. previous; 2D Depiction. next; Generate a single conformer. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/Overview.html
http://openbabel.org//docs/3DStructureGen/Overview.html:868,Deployability,Release,Release,868,"﻿. 3D Structure Generation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D... 3D Structure Generation#; Open Babel provides support for generating a reasonable 3D structure just given connectivity information. It also has the ability to generate multiple conformers for each molecule. These topics are discussed below. Generate a single conformer; OBBuilder; Conformer searching; Gen3D. Generate multiple conformers; Genetic algorithm; Confab. previous; 2D Depiction. next; Generate a single conformer. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/Overview.html
http://openbabel.org//docs/3DStructureGen/Overview.html:853,Energy Efficiency,Charge,Charge,853,"﻿. 3D Structure Generation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D... 3D Structure Generation#; Open Babel provides support for generating a reasonable 3D structure just given connectivity information. It also has the ability to generate multiple conformers for each molecule. These topics are discussed below. Generate a single conformer; OBBuilder; Conformer searching; Gen3D. Generate multiple conformers; Genetic algorithm; Confab. previous; 2D Depiction. next; Generate a single conformer. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/Overview.html
http://openbabel.org//docs/3DStructureGen/Overview.html:795,Modifiability,plugin,plugins,795,"﻿. 3D Structure Generation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D... 3D Structure Generation#; Open Babel provides support for generating a reasonable 3D structure just given connectivity information. It also has the ability to generate multiple conformers for each molecule. These topics are discussed below. Generate a single conformer; OBBuilder; Conformer searching; Gen3D. Generate multiple conformers; Genetic algorithm; Confab. previous; 2D Depiction. next; Generate a single conformer. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/Overview.html
http://openbabel.org//docs/3DStructureGen/Overview.html:152,Usability,Guid,Guide,152,"﻿. 3D Structure Generation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D... 3D Structure Generation#; Open Babel provides support for generating a reasonable 3D structure just given connectivity information. It also has the ability to generate multiple conformers for each molecule. These topics are discussed below. Generate a single conformer; OBBuilder; Conformer searching; Gen3D. Generate multiple conformers; Genetic algorithm; Confab. previous; 2D Depiction. next; Generate a single conformer. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/Overview.html
http://openbabel.org//docs/3DStructureGen/Overview.html:209,Usability,Guid,Guide,209,"﻿. 3D Structure Generation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D... 3D Structure Generation#; Open Babel provides support for generating a reasonable 3D structure just given connectivity information. It also has the ability to generate multiple conformers for each molecule. These topics are discussed below. Generate a single conformer; OBBuilder; Conformer searching; Gen3D. Generate multiple conformers; Genetic algorithm; Confab. previous; 2D Depiction. next; Generate a single conformer. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/Overview.html
http://openbabel.org//docs/3DStructureGen/Overview.html:888,Usability,Guid,Guide,888,"﻿. 3D Structure Generation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D... 3D Structure Generation#; Open Babel provides support for generating a reasonable 3D structure just given connectivity information. It also has the ability to generate multiple conformers for each molecule. These topics are discussed below. Generate a single conformer; OBBuilder; Conformer searching; Gen3D. Generate multiple conformers; Genetic algorithm; Confab. previous; 2D Depiction. next; Generate a single conformer. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/Overview.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:1792,Availability,avail,available,1792,"ns; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordinate generation features in Open Babel.; The functionality of OBBuilder is not directly available through obabel but it is used as the necessary first step of the Gen3D operation discussed below. Conformer searching#; Given a 3D structure, the goal of conformer searching is to find a low energy conformation. This may be useful as a “clean-up” procedure after an initial 3D structure generation. Note that conformer searching does not alter stereochemistry.; The Open Babel library provides access to several algorithms for conformer searching. All of these algorithms adopt the torsion-driving approach; that is, conformations are generated by setting torsion angles to one of a number of allowed values. The allowed values are listed in the data file torlib.txt; for example, C-C bonds in alkanes hav",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:2089,Availability,avail,available,2089,"of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordinate generation features in Open Babel.; The functionality of OBBuilder is not directly available through obabel but it is used as the necessary first step of the Gen3D operation discussed below. Conformer searching#; Given a 3D structure, the goal of conformer searching is to find a low energy conformation. This may be useful as a “clean-up” procedure after an initial 3D structure generation. Note that conformer searching does not alter stereochemistry.; The Open Babel library provides access to several algorithms for conformer searching. All of these algorithms adopt the torsion-driving approach; that is, conformations are generated by setting torsion angles to one of a number of allowed values. The allowed values are listed in the data file torlib.txt; for example, C-C bonds in alkanes have three allowed values: -60, 60 and 180. :obapi:`Systematic Rotor Search <SystematicRotorSearch>`: Systematically; iterate through all possible; conformers according to Open Babel’s torsion library.; This approach is thorough and will; find the global minimum. However as; the number of conformations increases by ",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:4268,Availability,avail,available,4268,"s. This approach scales to the power of N, where N is the; number of rotatable bonds.; :obapi:`Fast Rotor Search <FastRotorSearch>`: This iterates through the; same conformer space as the; SystematicRotorSearch but it greedily optimises the torsion angle at each; rotatable bond in turn, starting from the most central. Thus it scales; linearly with the number of rotatable bonds.; :obapi:`Random Rotor Search <RandomRotorSearch>`: Conformations are; generated by randomly choosing from the allowed torsion angles.; :obapi:`Weighted Rotor Search <WeightedRotorSearch>`: This method uses an; iterative procedure to find a; global minimum. As with the Random Rotor Search, it randomly choses from; the allowed torsion angles but the choice is reweighted based on the energy; of the generated conformer. Over time, the generated conformer for each; step should become increasingly better. For each of these methods, the lowest energy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many; of these methods include an option to optimize the geometry of conformations; during the search. This greatly slows down the procedure but may produce more; accurate results.; The choice of which algorithm to use depends on the speed/accuracy tradeoff with; which you are happy, and also on the number of rotatable bonds in the molecule.; Are you looking for a reasonable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods migh",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:4401,Availability,down,down,4401," as the; SystematicRotorSearch but it greedily optimises the torsion angle at each; rotatable bond in turn, starting from the most central. Thus it scales; linearly with the number of rotatable bonds.; :obapi:`Random Rotor Search <RandomRotorSearch>`: Conformations are; generated by randomly choosing from the allowed torsion angles.; :obapi:`Weighted Rotor Search <WeightedRotorSearch>`: This method uses an; iterative procedure to find a; global minimum. As with the Random Rotor Search, it randomly choses from; the allowed torsion angles but the choice is reweighted based on the energy; of the generated conformer. Over time, the generated conformer for each; step should become increasingly better. For each of these methods, the lowest energy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many; of these methods include an option to optimize the geometry of conformations; during the search. This greatly slows down the procedure but may produce more; accurate results.; The choice of which algorithm to use depends on the speed/accuracy tradeoff with; which you are happy, and also on the number of rotatable bonds in the molecule.; Are you looking for a reasonable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following s",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:280,Deployability,Install,Install,280,"﻿. Generate a single conformer — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordi",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:872,Deployability,Release,Release,872,"﻿. Generate a single conformer — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordi",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:857,Energy Efficiency,Charge,Charge,857,"﻿. Generate a single conformer — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordi",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:1021,Energy Efficiency,energy,energy,1021,"﻿. Generate a single conformer — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordi",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:1579,Energy Efficiency,energy,energy,1579,"le conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordinate generation features in Open Babel.; The functionality of OBBuilder is not directly available through obabel but it is used as the necessary first step of the Gen3D operation discussed below. Conformer searching#; Given a 3D structure, the goal of conformer searching is to find a low energy conformation. This may be useful as a “clean-up” procedure after an initial 3D structure generation. Note that conformer searching does not alter stereochemistry.; The Open Babel library provides access to several algorithms for conformer searching. All of these algorithms a",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:1812,Energy Efficiency,efficient,efficient,1812,"ns; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordinate generation features in Open Babel.; The functionality of OBBuilder is not directly available through obabel but it is used as the necessary first step of the Gen3D operation discussed below. Conformer searching#; Given a 3D structure, the goal of conformer searching is to find a low energy conformation. This may be useful as a “clean-up” procedure after an initial 3D structure generation. Note that conformer searching does not alter stereochemistry.; The Open Babel library provides access to several algorithms for conformer searching. All of these algorithms adopt the torsion-driving approach; that is, conformations are generated by setting torsion angles to one of a number of allowed values. The allowed values are listed in the data file torlib.txt; for example, C-C bonds in alkanes hav",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:2290,Energy Efficiency,energy,energy,2290,"on of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordinate generation features in Open Babel.; The functionality of OBBuilder is not directly available through obabel but it is used as the necessary first step of the Gen3D operation discussed below. Conformer searching#; Given a 3D structure, the goal of conformer searching is to find a low energy conformation. This may be useful as a “clean-up” procedure after an initial 3D structure generation. Note that conformer searching does not alter stereochemistry.; The Open Babel library provides access to several algorithms for conformer searching. All of these algorithms adopt the torsion-driving approach; that is, conformations are generated by setting torsion angles to one of a number of allowed values. The allowed values are listed in the data file torlib.txt; for example, C-C bonds in alkanes have three allowed values: -60, 60 and 180. :obapi:`Systematic Rotor Search <SystematicRotorSearch>`: Systematically; iterate through all possible; conformers according to Open Babel’s torsion library.; This approach is thorough and will; find the global minimum. However as; the number of conformations increases by multiples for each additional; rotational bond, this can take quite a while for molecules with even just; 7 rotatable bonds. This appro",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:3271,Energy Efficiency,power,power,3271," a low energy conformation. This may be useful as a “clean-up” procedure after an initial 3D structure generation. Note that conformer searching does not alter stereochemistry.; The Open Babel library provides access to several algorithms for conformer searching. All of these algorithms adopt the torsion-driving approach; that is, conformations are generated by setting torsion angles to one of a number of allowed values. The allowed values are listed in the data file torlib.txt; for example, C-C bonds in alkanes have three allowed values: -60, 60 and 180. :obapi:`Systematic Rotor Search <SystematicRotorSearch>`: Systematically; iterate through all possible; conformers according to Open Babel’s torsion library.; This approach is thorough and will; find the global minimum. However as; the number of conformations increases by multiples for each additional; rotational bond, this can take quite a while for molecules with even just; 7 rotatable bonds. This approach scales to the power of N, where N is the; number of rotatable bonds.; :obapi:`Fast Rotor Search <FastRotorSearch>`: This iterates through the; same conformer space as the; SystematicRotorSearch but it greedily optimises the torsion angle at each; rotatable bond in turn, starting from the most central. Thus it scales; linearly with the number of rotatable bonds.; :obapi:`Random Rotor Search <RandomRotorSearch>`: Conformations are; generated by randomly choosing from the allowed torsion angles.; :obapi:`Weighted Rotor Search <WeightedRotorSearch>`: This method uses an; iterative procedure to find a; global minimum. As with the Random Rotor Search, it randomly choses from; the allowed torsion angles but the choice is reweighted based on the energy; of the generated conformer. Over time, the generated conformer for each; step should become increasingly better. For each of these methods, the lowest energy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many;",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:4005,Energy Efficiency,energy,energy,4005,"s according to Open Babel’s torsion library.; This approach is thorough and will; find the global minimum. However as; the number of conformations increases by multiples for each additional; rotational bond, this can take quite a while for molecules with even just; 7 rotatable bonds. This approach scales to the power of N, where N is the; number of rotatable bonds.; :obapi:`Fast Rotor Search <FastRotorSearch>`: This iterates through the; same conformer space as the; SystematicRotorSearch but it greedily optimises the torsion angle at each; rotatable bond in turn, starting from the most central. Thus it scales; linearly with the number of rotatable bonds.; :obapi:`Random Rotor Search <RandomRotorSearch>`: Conformations are; generated by randomly choosing from the allowed torsion angles.; :obapi:`Weighted Rotor Search <WeightedRotorSearch>`: This method uses an; iterative procedure to find a; global minimum. As with the Random Rotor Search, it randomly choses from; the allowed torsion angles but the choice is reweighted based on the energy; of the generated conformer. Over time, the generated conformer for each; step should become increasingly better. For each of these methods, the lowest energy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many; of these methods include an option to optimize the geometry of conformations; during the search. This greatly slows down the procedure but may produce more; accurate results.; The choice of which algorithm to use depends on the speed/accuracy tradeoff with; which you are happy, and also on the number of rotatable bonds in the molecule.; Are you looking for a reasonable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here ",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:4164,Energy Efficiency,energy,energy,4164,"d, this can take quite a while for molecules with even just; 7 rotatable bonds. This approach scales to the power of N, where N is the; number of rotatable bonds.; :obapi:`Fast Rotor Search <FastRotorSearch>`: This iterates through the; same conformer space as the; SystematicRotorSearch but it greedily optimises the torsion angle at each; rotatable bond in turn, starting from the most central. Thus it scales; linearly with the number of rotatable bonds.; :obapi:`Random Rotor Search <RandomRotorSearch>`: Conformations are; generated by randomly choosing from the allowed torsion angles.; :obapi:`Weighted Rotor Search <WeightedRotorSearch>`: This method uses an; iterative procedure to find a; global minimum. As with the Random Rotor Search, it randomly choses from; the allowed torsion angles but the choice is reweighted based on the energy; of the generated conformer. Over time, the generated conformer for each; step should become increasingly better. For each of these methods, the lowest energy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many; of these methods include an option to optimize the geometry of conformations; during the search. This greatly slows down the procedure but may produce more; accurate results.; The choice of which algorithm to use depends on the speed/accuracy tradeoff with; which you are happy, and also on the number of rotatable bonds in the molecule.; Are you looking for a reasonable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:5085,Energy Efficiency,Energy,Energy,5085,"hould become increasingly better. For each of these methods, the lowest energy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many; of these methods include an option to optimize the geometry of conformations; during the search. This greatly slows down the procedure but may produce more; accurate results.; The choice of which algorithm to use depends on the speed/accuracy tradeoff with; which you are happy, and also on the number of rotatable bonds in the molecule.; Are you looking for a reasonable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coo",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:5158,Energy Efficiency,Energy,Energy,5158,"nergy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many; of these methods include an option to optimize the geometry of conformations; during the search. This greatly slows down the procedure but may produce more; accurate results.; The choice of which algorithm to use depends on the speed/accuracy tradeoff with; which you are happy, and also on the number of rotatable bonds in the molecule.; Are you looking for a reasonable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcef",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:5934,Energy Efficiency,energy,energy,5934,"for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D Structure Generation. next; Generate multiple conformers. On this page; . OBBuilder; Conformer searching; Gen3D. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData S",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:6427,Energy Efficiency,efficient,efficient,6427,"rithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D Structure Generation. next; Generate multiple conformers. On this page; . OBBuilder; Conformer searching; Gen3D. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:4498,Integrability,depend,depends,4498,"m the most central. Thus it scales; linearly with the number of rotatable bonds.; :obapi:`Random Rotor Search <RandomRotorSearch>`: Conformations are; generated by randomly choosing from the allowed torsion angles.; :obapi:`Weighted Rotor Search <WeightedRotorSearch>`: This method uses an; iterative procedure to find a; global minimum. As with the Random Rotor Search, it randomly choses from; the allowed torsion angles but the choice is reweighted based on the energy; of the generated conformer. Over time, the generated conformer for each; step should become increasingly better. For each of these methods, the lowest energy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many; of these methods include an option to optimize the geometry of conformations; during the search. This greatly slows down the procedure but may produce more; accurate results.; The choice of which algorithm to use depends on the speed/accuracy tradeoff with; which you are happy, and also on the number of rotatable bonds in the molecule.; Are you looking for a reasonable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragm",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:799,Modifiability,plugin,plugins,799,"﻿. Generate a single conformer — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordi",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:1650,Performance,optimiz,optimization,1650,"informatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordinate generation features in Open Babel.; The functionality of OBBuilder is not directly available through obabel but it is used as the necessary first step of the Gen3D operation discussed below. Conformer searching#; Given a 3D structure, the goal of conformer searching is to find a low energy conformation. This may be useful as a “clean-up” procedure after an initial 3D structure generation. Note that conformer searching does not alter stereochemistry.; The Open Babel library provides access to several algorithms for conformer searching. All of these algorithms adopt the torsion-driving approach; that is, conformations are generated by setting torsion angles to ",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:4323,Performance,optimiz,optimize,4323,"bapi:`Fast Rotor Search <FastRotorSearch>`: This iterates through the; same conformer space as the; SystematicRotorSearch but it greedily optimises the torsion angle at each; rotatable bond in turn, starting from the most central. Thus it scales; linearly with the number of rotatable bonds.; :obapi:`Random Rotor Search <RandomRotorSearch>`: Conformations are; generated by randomly choosing from the allowed torsion angles.; :obapi:`Weighted Rotor Search <WeightedRotorSearch>`: This method uses an; iterative procedure to find a; global minimum. As with the Random Rotor Search, it randomly choses from; the allowed torsion angles but the choice is reweighted based on the energy; of the generated conformer. Over time, the generated conformer for each; step should become increasingly better. For each of these methods, the lowest energy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many; of these methods include an option to optimize the geometry of conformations; during the search. This greatly slows down the procedure but may produce more; accurate results.; The choice of which algorithm to use depends on the speed/accuracy tradeoff with; which you are happy, and also on the number of rotatable bonds in the molecule.; Are you looking for a reasonable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:5600,Performance,optimiz,optimization,5600,"nable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D St",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:5703,Performance,optimiz,optimizing,5703,"nable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D St",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:5814,Performance,optimiz,optimization,5814,"nable structure for 3D display? Or are you looking; for a structure close to the global minimum?; To use from obabel, see the help for the conformer operation (obabel -L conformer). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D St",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:6145,Performance,perform,perform,6145,"rithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D Structure Generation. next; Generate multiple conformers. On this page; . OBBuilder; Conformer searching; Gen3D. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:6170,Performance,optimiz,optimization,6170,"rithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D Structure Generation. next; Generate multiple conformers. On this page; . OBBuilder; Conformer searching; Gen3D. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:6214,Performance,optimiz,optimization,6214,"rithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D Structure Generation. next; Generate multiple conformers. On this page; . OBBuilder; Conformer searching; Gen3D. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:6266,Performance,optimiz,optimization,6266,"rithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D Structure Generation. next; Generate multiple conformers. On this page; . OBBuilder; Conformer searching; Gen3D. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:6316,Performance,optimiz,optimization,6316,"rithm conformer generation described below.; Here is an example of use from Python:; >>> ff = ob.OBForceField.FindForceField(""mmff94""); >>> ff.Setup(obmol); True; >>> print(ff.Energy()); 15.179054202; >>> ff.SystematicRotorSearch(100); >>> print(ff.Energy()); 10.8861155747. Gen3D#; To illustrate how some of the above methods might be used in practice, consider the gen3d operation. This operation (invoked using --gen3d at the commandline) generates 3D structures for 0D or 2D structures using the following series of steps, all of which have been described above:. Use the OBBuilder to create a 3D structure using rules and fragment templates; Do 250 steps of a steepest descent geometry optimization with the MMFF94; forcefield; Do 200 iterations of a Weighted Rotor conformational search (optimizing each; conformer with 25 steps of a steepest descent); Do 250 steps of a conjugate gradient geometry optimization. Taken together, all of these steps ensure that the generated structure is likely to be the global minimum energy conformer. However, for many applications where 100s if not 1000s of molecules need to be processed, gen3d is rather slow:. --fastest only generate coordinates, no force field or conformer search; --fast perform quick forcefield optimization; --medium (default) forcefield optimization + fast conformer search; --better more optimization + fast conformer search; --best more optimization + significant conformer search. Details on some of the trade-offs involved are outlined in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. If you use the 3D coordinate generation, please cite this paper. previous; 3D Structure Generation. next; Generate multiple conformers. On this page; . OBBuilder; Conformer searching; Gen3D. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:2493,Security,access,access,2493," want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordinate generation features in Open Babel.; The functionality of OBBuilder is not directly available through obabel but it is used as the necessary first step of the Gen3D operation discussed below. Conformer searching#; Given a 3D structure, the goal of conformer searching is to find a low energy conformation. This may be useful as a “clean-up” procedure after an initial 3D structure generation. Note that conformer searching does not alter stereochemistry.; The Open Babel library provides access to several algorithms for conformer searching. All of these algorithms adopt the torsion-driving approach; that is, conformations are generated by setting torsion angles to one of a number of allowed values. The allowed values are listed in the data file torlib.txt; for example, C-C bonds in alkanes have three allowed values: -60, 60 and 180. :obapi:`Systematic Rotor Search <SystematicRotorSearch>`: Systematically; iterate through all possible; conformers according to Open Babel’s torsion library.; This approach is thorough and will; find the global minimum. However as; the number of conformations increases by multiples for each additional; rotational bond, this can take quite a while for molecules with even just; 7 rotatable bonds. This approach scales to the power of N, where N is the; number of rotatable bonds.; :obapi:`Fast Rotor Search <FastRotorSearch>`: This iterates through the; same conformer space as the; SystematicRotorSearch but it greedily optimises the torsion angle at each;",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:156,Usability,Guid,Guide,156,"﻿. Generate a single conformer — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordi",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:213,Usability,Guid,Guide,213,"﻿. Generate a single conformer — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordi",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/3DStructureGen/SingleConformer.html:892,Usability,Guid,Guide,892,"﻿. Generate a single conformer — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Generate a single conformer; Generate multiple conformers. Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 3D Structure Generation; Generate a... Generate a single conformer#; There are several steps involved in generating a low-energy conformer from a 0D or 2D structure. OBBuilder#; The :obapi:`OBBuilder` class is the part of Open Babel that can take a; 2D or 0D structure and generate a 3D structure. The 3D structure is; made very quickly using a combination of rules (e.g. sp3 atoms should have four bonds arranged in a tetrahedron) and common fragments (e.g. cyclohexane is shaped like a chair).; The 3D structures that come straight out of OBBuilder may be useful for some purposes but most people will want to “clean them up”. This is because they may have clashes or have high energy structures due to some strain. The conformer search or geometry optimization methods described below are typically used after calling OBBuilder.; Full discussion of the methods for coordinate generation is available in ‘Fast, efficient fragment-based coordinate generation for Open Babel’ *J. Cheminf.* (2019) **11**, Art. 49.<https://doi.org/10.1186/s13321-019-0372-5>. Please cite this paper if you use the coordi",MatchSource.WIKI,docs/3DStructureGen/SingleConformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/3DStructureGen/SingleConformer.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:276,Deployability,Install,Install,276,"﻿. Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Handling of... Handling of aromaticity#; The purpose of this section is to give an overview of how Open Babel handles aromaticity. Given that atoms can be aromatic, bonds can be aromatic, and that molecules have a flag for aromaticity perceived, it’s important to understand how these all work together. How is aromaticity information stored?#; Like many other toolkits, Open Babel stores aromaticity information separate from bond order information. This means that there isn’t a special bond order to indicate aromatic bond. Instead, aromaticity is stored as a flag on an atom as well as a flag on a bond. You can access and set this information using the following API functions:. OBAtom::IsAromatic(), OBAtom::SetAromatic(), OBBond::UnsetAromatic(); OBBond::IsAromatic(), OBBond::SetAromatic(), OBBond::UnsetAromatic(). There is a catch though, or rather a key point to note. OBMols have a flag to indicate whether aromaticity has been perceived. This is set via the following API functions:. OBMol::SetAromaticPerceived(), OBMol::UnsetAromaticPerceived(). The value of this flag determines the behaviour of the OBAtom and OBBond IsAromatic() functions. If the ",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:809,Deployability,Release,Release,809,"﻿. Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Handling of... Handling of aromaticity#; The purpose of this section is to give an overview of how Open Babel handles aromaticity. Given that atoms can be aromatic, bonds can be aromatic, and that molecules have a flag for aromaticity perceived, it’s important to understand how these all work together. How is aromaticity information stored?#; Like many other toolkits, Open Babel stores aromaticity information separate from bond order information. This means that there isn’t a special bond order to indicate aromatic bond. Instead, aromaticity is stored as a flag on an atom as well as a flag on a bond. You can access and set this information using the following API functions:. OBAtom::IsAromatic(), OBAtom::SetAromatic(), OBBond::UnsetAromatic(); OBBond::IsAromatic(), OBBond::SetAromatic(), OBBond::UnsetAromatic(). There is a catch though, or rather a key point to note. OBMols have a flag to indicate whether aromaticity has been perceived. This is set via the following API functions:. OBMol::SetAromaticPerceived(), OBMol::UnsetAromaticPerceived(). The value of this flag determines the behaviour of the OBAtom and OBBond IsAromatic() functions. If the ",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:794,Energy Efficiency,Charge,Charge,794,"﻿. Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Handling of... Handling of aromaticity#; The purpose of this section is to give an overview of how Open Babel handles aromaticity. Given that atoms can be aromatic, bonds can be aromatic, and that molecules have a flag for aromaticity perceived, it’s important to understand how these all work together. How is aromaticity information stored?#; Like many other toolkits, Open Babel stores aromaticity information separate from bond order information. This means that there isn’t a special bond order to indicate aromatic bond. Instead, aromaticity is stored as a flag on an atom as well as a flag on a bond. You can access and set this information using the following API functions:. OBAtom::IsAromatic(), OBAtom::SetAromatic(), OBBond::UnsetAromatic(); OBBond::IsAromatic(), OBBond::SetAromatic(), OBBond::UnsetAromatic(). There is a catch though, or rather a key point to note. OBMols have a flag to indicate whether aromaticity has been perceived. This is set via the following API functions:. OBMol::SetAromaticPerceived(), OBMol::UnsetAromaticPerceived(). The value of this flag determines the behaviour of the OBAtom and OBBond IsAromatic() functions. If the ",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:5472,Energy Efficiency,charge,charge,5472,"to the trouble of reading the aromaticity and using it to kekulize, do we then effectively ignore it?; The reason is simply this: when writing an aromatic SMILES, we usually want to use our own aromaticity model and not that present in the input SMILES string. Otherwise, SMILES strings for the same molecule from different sources (that may use different aromaticity models) would not yield the same canonical SMILES string.; Of course, if the SMILES string came from Open Babel in the first place, we are doing unnecessary work when we keep reapplying the same aromaticity model. In this case, you can speed things up by using the a option, so that the aromaticity information present in the input is retained. The following examples show this in action:; $ obabel -:cc -osmi; C=C; $ obabel -:cc -osmi -aa; cc. Effect of modifying the structure#; Perhaps surprisingly, modifying the structure has no effect on the existing aromaticity flags; deleting an atom does not mark aromaticity as unperceived, nor indeed does any other change to the structure such as changing the atomic number of an atom or setting its charge; nor does the use of Begin/EndModify() affect the aromaticity flags. The only way to ensure that aromaticity is reperceived after modifying the structure is to explicitly mark it as unperceived.; The rationale for this is that an efficient toolkit should avoid unnecessary work. The toolkit does not know if a particular modification invalidates any aromaticity already perceived, or even if it did know, it cannot know whether the user actually wishes to invalidate it. It’s up to the user to tell the toolkit. This places more responsibility in the hands of the user, but also more power.; To illustrate, let’s consider what happens when the user reads benzene from the SMILES string c1ccccc1, and then modifies the structure by deleting an aromatic atom.; As this is an aromatic SMILES string, the SMILES reader will mark all atoms and bonds as aromatic. Next, the molecule its",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:5709,Energy Efficiency,efficient,efficient,5709,"romaticity models) would not yield the same canonical SMILES string.; Of course, if the SMILES string came from Open Babel in the first place, we are doing unnecessary work when we keep reapplying the same aromaticity model. In this case, you can speed things up by using the a option, so that the aromaticity information present in the input is retained. The following examples show this in action:; $ obabel -:cc -osmi; C=C; $ obabel -:cc -osmi -aa; cc. Effect of modifying the structure#; Perhaps surprisingly, modifying the structure has no effect on the existing aromaticity flags; deleting an atom does not mark aromaticity as unperceived, nor indeed does any other change to the structure such as changing the atomic number of an atom or setting its charge; nor does the use of Begin/EndModify() affect the aromaticity flags. The only way to ensure that aromaticity is reperceived after modifying the structure is to explicitly mark it as unperceived.; The rationale for this is that an efficient toolkit should avoid unnecessary work. The toolkit does not know if a particular modification invalidates any aromaticity already perceived, or even if it did know, it cannot know whether the user actually wishes to invalidate it. It’s up to the user to tell the toolkit. This places more responsibility in the hands of the user, but also more power.; To illustrate, let’s consider what happens when the user reads benzene from the SMILES string c1ccccc1, and then modifies the structure by deleting an aromatic atom.; As this is an aromatic SMILES string, the SMILES reader will mark all atoms and bonds as aromatic. Next, the molecule itself is marked as not having aromaticity perceived (see previous section). After reading, we can trigger aromaticity perception by calling IsAromatic() on an atom; now, in addition to the atoms and bonds being marked as aromatic, the molecule itself will be marked as having aromaticity perceived.; If at this point we delete a carbon and write out a SMILES",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:6063,Energy Efficiency,power,power,6063,"rmation present in the input is retained. The following examples show this in action:; $ obabel -:cc -osmi; C=C; $ obabel -:cc -osmi -aa; cc. Effect of modifying the structure#; Perhaps surprisingly, modifying the structure has no effect on the existing aromaticity flags; deleting an atom does not mark aromaticity as unperceived, nor indeed does any other change to the structure such as changing the atomic number of an atom or setting its charge; nor does the use of Begin/EndModify() affect the aromaticity flags. The only way to ensure that aromaticity is reperceived after modifying the structure is to explicitly mark it as unperceived.; The rationale for this is that an efficient toolkit should avoid unnecessary work. The toolkit does not know if a particular modification invalidates any aromaticity already perceived, or even if it did know, it cannot know whether the user actually wishes to invalidate it. It’s up to the user to tell the toolkit. This places more responsibility in the hands of the user, but also more power.; To illustrate, let’s consider what happens when the user reads benzene from the SMILES string c1ccccc1, and then modifies the structure by deleting an aromatic atom.; As this is an aromatic SMILES string, the SMILES reader will mark all atoms and bonds as aromatic. Next, the molecule itself is marked as not having aromaticity perceived (see previous section). After reading, we can trigger aromaticity perception by calling IsAromatic() on an atom; now, in addition to the atoms and bonds being marked as aromatic, the molecule itself will be marked as having aromaticity perceived.; If at this point we delete a carbon and write out a SMILES string, what will the result be? You may expect something like [CH]=CC=C[CH] (or C=CC=CC if we also adjust the hydrogen count on the neighbor atoms) but instead it will be [cH]ccc[cH] (or ccccc if hydrogens were adjusted).; This follows from the discussion above - structural modifications have no effect on aromat",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:736,Modifiability,plugin,plugins,736,"﻿. Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Handling of... Handling of aromaticity#; The purpose of this section is to give an overview of how Open Babel handles aromaticity. Given that atoms can be aromatic, bonds can be aromatic, and that molecules have a flag for aromaticity perceived, it’s important to understand how these all work together. How is aromaticity information stored?#; Like many other toolkits, Open Babel stores aromaticity information separate from bond order information. This means that there isn’t a special bond order to indicate aromatic bond. Instead, aromaticity is stored as a flag on an atom as well as a flag on a bond. You can access and set this information using the following API functions:. OBAtom::IsAromatic(), OBAtom::SetAromatic(), OBBond::UnsetAromatic(); OBBond::IsAromatic(), OBBond::SetAromatic(), OBBond::UnsetAromatic(). There is a catch though, or rather a key point to note. OBMols have a flag to indicate whether aromaticity has been perceived. This is set via the following API functions:. OBMol::SetAromaticPerceived(), OBMol::UnsetAromaticPerceived(). The value of this flag determines the behaviour of the OBAtom and OBBond IsAromatic() functions. If the ",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:5734,Safety,avoid,avoid,5734,"romaticity models) would not yield the same canonical SMILES string.; Of course, if the SMILES string came from Open Babel in the first place, we are doing unnecessary work when we keep reapplying the same aromaticity model. In this case, you can speed things up by using the a option, so that the aromaticity information present in the input is retained. The following examples show this in action:; $ obabel -:cc -osmi; C=C; $ obabel -:cc -osmi -aa; cc. Effect of modifying the structure#; Perhaps surprisingly, modifying the structure has no effect on the existing aromaticity flags; deleting an atom does not mark aromaticity as unperceived, nor indeed does any other change to the structure such as changing the atomic number of an atom or setting its charge; nor does the use of Begin/EndModify() affect the aromaticity flags. The only way to ensure that aromaticity is reperceived after modifying the structure is to explicitly mark it as unperceived.; The rationale for this is that an efficient toolkit should avoid unnecessary work. The toolkit does not know if a particular modification invalidates any aromaticity already perceived, or even if it did know, it cannot know whether the user actually wishes to invalidate it. It’s up to the user to tell the toolkit. This places more responsibility in the hands of the user, but also more power.; To illustrate, let’s consider what happens when the user reads benzene from the SMILES string c1ccccc1, and then modifies the structure by deleting an aromatic atom.; As this is an aromatic SMILES string, the SMILES reader will mark all atoms and bonds as aromatic. Next, the molecule itself is marked as not having aromaticity perceived (see previous section). After reading, we can trigger aromaticity perception by calling IsAromatic() on an atom; now, in addition to the atoms and bonds being marked as aromatic, the molecule itself will be marked as having aromaticity perceived.; If at this point we delete a carbon and write out a SMILES",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:1452,Security,access,access,1452,"a; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Handling of... Handling of aromaticity#; The purpose of this section is to give an overview of how Open Babel handles aromaticity. Given that atoms can be aromatic, bonds can be aromatic, and that molecules have a flag for aromaticity perceived, it’s important to understand how these all work together. How is aromaticity information stored?#; Like many other toolkits, Open Babel stores aromaticity information separate from bond order information. This means that there isn’t a special bond order to indicate aromatic bond. Instead, aromaticity is stored as a flag on an atom as well as a flag on a bond. You can access and set this information using the following API functions:. OBAtom::IsAromatic(), OBAtom::SetAromatic(), OBBond::UnsetAromatic(); OBBond::IsAromatic(), OBBond::SetAromatic(), OBBond::UnsetAromatic(). There is a catch though, or rather a key point to note. OBMols have a flag to indicate whether aromaticity has been perceived. This is set via the following API functions:. OBMol::SetAromaticPerceived(), OBMol::UnsetAromaticPerceived(). The value of this flag determines the behaviour of the OBAtom and OBBond IsAromatic() functions. If the flag is set, then IsAromatic() simply returns the corresponding value of the atom or bond flag.; If unset, then IsAromatic() triggers aromaticity perception (from scratch), and then returns the value of the flag. Perception of aromaticity#; It’s convenient to use the term “perception”, but what we mean is to apply an aromaticity model. Currently Open Babel only has a single aromaticity model, which is close to the Daylight aromaticity model. An aromaticity model describes how",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:152,Usability,Guid,Guide,152,"﻿. Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Handling of... Handling of aromaticity#; The purpose of this section is to give an overview of how Open Babel handles aromaticity. Given that atoms can be aromatic, bonds can be aromatic, and that molecules have a flag for aromaticity perceived, it’s important to understand how these all work together. How is aromaticity information stored?#; Like many other toolkits, Open Babel stores aromaticity information separate from bond order information. This means that there isn’t a special bond order to indicate aromatic bond. Instead, aromaticity is stored as a flag on an atom as well as a flag on a bond. You can access and set this information using the following API functions:. OBAtom::IsAromatic(), OBAtom::SetAromatic(), OBBond::UnsetAromatic(); OBBond::IsAromatic(), OBBond::SetAromatic(), OBBond::UnsetAromatic(). There is a catch though, or rather a key point to note. OBMols have a flag to indicate whether aromaticity has been perceived. This is set via the following API functions:. OBMol::SetAromaticPerceived(), OBMol::UnsetAromaticPerceived(). The value of this flag determines the behaviour of the OBAtom and OBBond IsAromatic() functions. If the ",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:209,Usability,Guid,Guide,209,"﻿. Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Handling of... Handling of aromaticity#; The purpose of this section is to give an overview of how Open Babel handles aromaticity. Given that atoms can be aromatic, bonds can be aromatic, and that molecules have a flag for aromaticity perceived, it’s important to understand how these all work together. How is aromaticity information stored?#; Like many other toolkits, Open Babel stores aromaticity information separate from bond order information. This means that there isn’t a special bond order to indicate aromatic bond. Instead, aromaticity is stored as a flag on an atom as well as a flag on a bond. You can access and set this information using the following API functions:. OBAtom::IsAromatic(), OBAtom::SetAromatic(), OBBond::UnsetAromatic(); OBBond::IsAromatic(), OBBond::SetAromatic(), OBBond::UnsetAromatic(). There is a catch though, or rather a key point to note. OBMols have a flag to indicate whether aromaticity has been perceived. This is set via the following API functions:. OBMol::SetAromaticPerceived(), OBMol::UnsetAromaticPerceived(). The value of this flag determines the behaviour of the OBAtom and OBBond IsAromatic() functions. If the ",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:829,Usability,Guid,Guide,829,"﻿. Handling of aromaticity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Handling of... Handling of aromaticity#; The purpose of this section is to give an overview of how Open Babel handles aromaticity. Given that atoms can be aromatic, bonds can be aromatic, and that molecules have a flag for aromaticity perceived, it’s important to understand how these all work together. How is aromaticity information stored?#; Like many other toolkits, Open Babel stores aromaticity information separate from bond order information. This means that there isn’t a special bond order to indicate aromatic bond. Instead, aromaticity is stored as a flag on an atom as well as a flag on a bond. You can access and set this information using the following API functions:. OBAtom::IsAromatic(), OBAtom::SetAromatic(), OBBond::UnsetAromatic(); OBBond::IsAromatic(), OBBond::SetAromatic(), OBBond::UnsetAromatic(). There is a catch though, or rather a key point to note. OBMols have a flag to indicate whether aromaticity has been perceived. This is set via the following API functions:. OBMol::SetAromaticPerceived(), OBMol::UnsetAromaticPerceived(). The value of this flag determines the behaviour of the OBAtom and OBBond IsAromatic() functions. If the ",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:2032,Usability,simpl,simply,2032,"ave a flag for aromaticity perceived, it’s important to understand how these all work together. How is aromaticity information stored?#; Like many other toolkits, Open Babel stores aromaticity information separate from bond order information. This means that there isn’t a special bond order to indicate aromatic bond. Instead, aromaticity is stored as a flag on an atom as well as a flag on a bond. You can access and set this information using the following API functions:. OBAtom::IsAromatic(), OBAtom::SetAromatic(), OBBond::UnsetAromatic(); OBBond::IsAromatic(), OBBond::SetAromatic(), OBBond::UnsetAromatic(). There is a catch though, or rather a key point to note. OBMols have a flag to indicate whether aromaticity has been perceived. This is set via the following API functions:. OBMol::SetAromaticPerceived(), OBMol::UnsetAromaticPerceived(). The value of this flag determines the behaviour of the OBAtom and OBBond IsAromatic() functions. If the flag is set, then IsAromatic() simply returns the corresponding value of the atom or bond flag.; If unset, then IsAromatic() triggers aromaticity perception (from scratch), and then returns the value of the flag. Perception of aromaticity#; It’s convenient to use the term “perception”, but what we mean is to apply an aromaticity model. Currently Open Babel only has a single aromaticity model, which is close to the Daylight aromaticity model. An aromaticity model describes how many pi electrons are contributed by each atom; if this sums to 4n+2 within a cycle, then all atoms and bonds in that cycle will be marked as aromatic.; Applying a model involves creating an instance of OBAromaticTyper(), and calling AssignAromaticFlags() passing an OBMol as a parameter. This wipes any existing flags, sets the atom and bond flags according to the model, and marks the aromaticity as perceived.; If you wish (and know what you are doing), you can apply your own aromaticity model by setting various atoms and bonds as aromatic and then marking t",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Aromaticity/Aromaticity.html:4475,Usability,simpl,simply,4475,"ading/writing and the handling of aromaticity.; Writing SMILES; Unless Kekulé SMILES are requested (via the k output option), the SMILES writer will always write an aromatic SMILES string. IsAromatic() will be called on atoms and bonds to determine whether to use lowercase letters. As described earlier, this will trigger aromaticity perception according to the default model if the molecules is not marked as having its aromaticity perceived.; Reading SMILES; The situation when reading SMILES is a bit more involved. If the SMILES string contains lowercase characters and aromatic bonds, this information is used to mark atoms and bonds as aromatic. The molecule is then kekulized to assign bond orders to aromatic bonds. Next, unless the a option is supplied, the molecule is marked as having its aromaticity unperceived.; That last step might seem strange. Why, after going to the trouble of reading the aromaticity and using it to kekulize, do we then effectively ignore it?; The reason is simply this: when writing an aromatic SMILES, we usually want to use our own aromaticity model and not that present in the input SMILES string. Otherwise, SMILES strings for the same molecule from different sources (that may use different aromaticity models) would not yield the same canonical SMILES string.; Of course, if the SMILES string came from Open Babel in the first place, we are doing unnecessary work when we keep reapplying the same aromaticity model. In this case, you can speed things up by using the a option, so that the aromaticity information present in the input is retained. The following examples show this in action:; $ obabel -:cc -osmi; C=C; $ obabel -:cc -osmi -aa; cc. Effect of modifying the structure#; Perhaps surprisingly, modifying the structure has no effect on the existing aromaticity flags; deleting an atom does not mark aromaticity as unperceived, nor indeed does any other change to the structure such as changing the atomic number of an atom or setting its charge;",MatchSource.WIKI,docs/Aromaticity/Aromaticity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Aromaticity/Aromaticity.html
http://openbabel.org//docs/Charges/charges.html:266,Deployability,Install,Install,266,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:799,Deployability,Release,Release,799,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:1338,Deployability,Release,Release,1338,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:3,Energy Efficiency,Charge,Charge,3,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:784,Energy Efficiency,Charge,Charge,784,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:826,Energy Efficiency,Charge,Charge,826,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:841,Energy Efficiency,Charge,Charge,841,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:891,Energy Efficiency,charge,charge,891,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:946,Energy Efficiency,charge,charges,946,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:989,Energy Efficiency,charge,charges,989,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:1015,Energy Efficiency,charge,charge,1015,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:1097,Energy Efficiency,charge,charges,1097,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:1124,Energy Efficiency,charge,charge,1124,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:1154,Energy Efficiency,charge,charges,1154,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:1209,Energy Efficiency,charge,charge,1209,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:1266,Energy Efficiency,charge,charges,1266,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:1385,Energy Efficiency,charge,charge,1385,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:1408,Energy Efficiency,charge,charge,1408,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:726,Modifiability,plugin,plugins,726,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:142,Usability,Guid,Guide,142,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:199,Usability,Guid,Guide,199,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Charges/charges.html:819,Usability,Guid,Guide,819,"﻿. Charge models — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Charge models. Charge models#; Insert text here. Cheminformatics charge models#; Assign Gasteiger-Marsili sigma partial charges (gasteiger); Assign MMFF94 partial charges (mmff94). Special charge models#; Assign Electronegativity Equilization Method (EEM) atomic partial charges (eem); Assign QEq (charge equilibration) partial charges (Rappe and Goddard, 1991) (qeq); Assign QTPIE (charge transfer, polarization and equilibration) partial charges (Chen and Martinez, 2007) (qtpie). previous; Descriptors. next; Release Notes. On this page; . Cheminformatics charge models; Special charge models. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Charges/charges.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Charges/charges.html
http://openbabel.org//docs/Cheminf101/basics.html:275,Deployability,Install,Install,275,"﻿. Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Cheminformat... Cheminformatics Basics#. What is Cheminformatics?#; Cheminformatics is a cross between Computer Science and; Chemistry – the process of storing and retrieving information about; chemical compounds.; Information Systems are concerned with storing, retrieving, and; searching information, and with storing relationships between; bits of data. For example:. Operation; Classical Information; System. Chemical Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solv",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/basics.html:946,Deployability,Release,Release,946,"﻿. Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Cheminformat... Cheminformatics Basics#. What is Cheminformatics?#; Cheminformatics is a cross between Computer Science and; Chemistry – the process of storing and retrieving information about; chemical compounds.; Information Systems are concerned with storing, retrieving, and; searching information, and with storing relationships between; bits of data. For example:. Operation; Classical Information; System. Chemical Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solv",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/basics.html:931,Energy Efficiency,Charge,Charge,931,"﻿. Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Cheminformat... Cheminformatics Basics#. What is Cheminformatics?#; Cheminformatics is a cross between Computer Science and; Chemistry – the process of storing and retrieving information about; chemical compounds.; Information Systems are concerned with storing, retrieving, and; searching information, and with storing relationships between; bits of data. For example:. Operation; Classical Information; System. Chemical Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solv",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/basics.html:873,Modifiability,plugin,plugins,873,"﻿. Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Cheminformat... Cheminformatics Basics#. What is Cheminformatics?#; Cheminformatics is a cross between Computer Science and; Chemistry – the process of storing and retrieving information about; chemical compounds.; Information Systems are concerned with storing, retrieving, and; searching information, and with storing relationships between; bits of data. For example:. Operation; Classical Information; System. Chemical Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solv",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/basics.html:1867,Testability,log,logP,1867,"ing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Cheminformat... Cheminformatics Basics#. What is Cheminformatics?#; Cheminformatics is a cross between Computer Science and; Chemistry – the process of storing and retrieving information about; chemical compounds.; Information Systems are concerned with storing, retrieving, and; searching information, and with storing relationships between; bits of data. For example:. Operation; Classical Information; System. Chemical Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solves:. Store a Molecule; Computer scientists usually use the valence model of chemistry to; represent compounds. The next section; Representing Molecules,; discusses this at length. Find exact molecule; If you ask, “Is Abraham Lincoln in the database?” it’s not hard to; find the answer. But, given a specific molecule, is it in the; database? What do we know about it? This may seem seem simple at; first glance, but it’s not, as we’ll see when we discuss tautomers,; stereochemistry, metals, and other “flaws” in the valence model of; chemistry. Substructure search; If you ask, “Is anyone named Lincoln in the database?” you usually; expect to find the former President and a number of others - this; is called a search rather than a lookup. For a chemical; informatics system, we have a substructure search: Find all; molecules containing a part",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/basics.html:1890,Testability,log,logP,1890,"ing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Cheminformat... Cheminformatics Basics#. What is Cheminformatics?#; Cheminformatics is a cross between Computer Science and; Chemistry – the process of storing and retrieving information about; chemical compounds.; Information Systems are concerned with storing, retrieving, and; searching information, and with storing relationships between; bits of data. For example:. Operation; Classical Information; System. Chemical Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solves:. Store a Molecule; Computer scientists usually use the valence model of chemistry to; represent compounds. The next section; Representing Molecules,; discusses this at length. Find exact molecule; If you ask, “Is Abraham Lincoln in the database?” it’s not hard to; find the answer. But, given a specific molecule, is it in the; database? What do we know about it? This may seem seem simple at; first glance, but it’s not, as we’ll see when we discuss tautomers,; stereochemistry, metals, and other “flaws” in the valence model of; chemistry. Substructure search; If you ask, “Is anyone named Lincoln in the database?” you usually; expect to find the former President and a number of others - this; is called a search rather than a lookup. For a chemical; informatics system, we have a substructure search: Find all; molecules containing a part",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/basics.html:151,Usability,Guid,Guide,151,"﻿. Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Cheminformat... Cheminformatics Basics#. What is Cheminformatics?#; Cheminformatics is a cross between Computer Science and; Chemistry – the process of storing and retrieving information about; chemical compounds.; Information Systems are concerned with storing, retrieving, and; searching information, and with storing relationships between; bits of data. For example:. Operation; Classical Information; System. Chemical Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solv",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/basics.html:208,Usability,Guid,Guide,208,"﻿. Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Cheminformat... Cheminformatics Basics#. What is Cheminformatics?#; Cheminformatics is a cross between Computer Science and; Chemistry – the process of storing and retrieving information about; chemical compounds.; Information Systems are concerned with storing, retrieving, and; searching information, and with storing relationships between; bits of data. For example:. Operation; Classical Information; System. Chemical Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solv",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/basics.html:966,Usability,Guid,Guide,966,"﻿. Cheminformatics Basics — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Cheminformat... Cheminformatics Basics#. What is Cheminformatics?#; Cheminformatics is a cross between Computer Science and; Chemistry – the process of storing and retrieving information about; chemical compounds.; Information Systems are concerned with storing, retrieving, and; searching information, and with storing relationships between; bits of data. For example:. Operation; Classical Information; System. Chemical Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solv",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/basics.html:2388,Usability,simpl,simple,2388,"Information System. Store; Name = ‘Jimmy Carter’; Stores text, numbers, dates, …. Stores chemical compounds and information about them. Retrieve; Find record #13282; Retrieves ‘Jimmy Carter’; Find CC(=O)C4CC3C2CC(C)C1=C(C)…; C(=O)CC(O)C1C2CCC3(C)C4; Retrieves: . Search; Find Presidents named; ‘Bush’; George Bush and George; W. Bush; Find molecules containing ; Retrieves: . Relationship; Year Carter was elected; Answer: Elected in 1976; What’s the logP(o/w) of ; Answer: logP(o/W) = 2.62. How is Cheminformatics Different?#; There are four key problems a cheminformatics system solves:. Store a Molecule; Computer scientists usually use the valence model of chemistry to; represent compounds. The next section; Representing Molecules,; discusses this at length. Find exact molecule; If you ask, “Is Abraham Lincoln in the database?” it’s not hard to; find the answer. But, given a specific molecule, is it in the; database? What do we know about it? This may seem seem simple at; first glance, but it’s not, as we’ll see when we discuss tautomers,; stereochemistry, metals, and other “flaws” in the valence model of; chemistry. Substructure search; If you ask, “Is anyone named Lincoln in the database?” you usually; expect to find the former President and a number of others - this; is called a search rather than a lookup. For a chemical; informatics system, we have a substructure search: Find all; molecules containing a partial molecule (the “substructure”) drawn; by the user. The substructure is usually a functional group,; “scaffold”, or core structure representing a class of molecules.; This too is a hard problem, much harder than most text searches,; for reasons that go to the very root of mathematics and the theory; of computability. Similarity search; Some databases can find similar-sounding or misspelled words, such as “Find Lincon” or “find Cincinati”, which respectively might find; Abraham Lincoln and Cincinnati. Many chemical information systems can find molecules similar",MatchSource.WIKI,docs/Cheminf101/basics.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/basics.html
http://openbabel.org//docs/Cheminf101/index.html:272,Deployability,Install,Install,272,"﻿. Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101. Cheminformatics 101#. An introduction to the computer science and chemistry of chemical information systems; Copyright © 2009 by Craig A. James, eMolecules, Inc.The original version of this introduction to cheminformatics can be found on the eMolecules website. It is included here with the permission of the author. Cheminformatics Basics; What is Cheminformatics?; How is Cheminformatics Different?. Representing Molecules; What is a Molecule?; Older systems: Connection Tables; Line Notations: InChI, SMILES, WLN and others; Canonicalization; Line Notation versus Connection Tables: A practical matter; Query Languages: SMARTS; IUPAC Names, Trade Names, Common Names. Substructure Searching with Indexes; What is Indexing?; Indexes for Chemicals; NP-Complete - A Little about Computability. Molecular Similarity; Chemical Registration Systems. previous; Updating to Open Babel 3.0 from 2.x. next; Cheminformatics Basics. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using ",MatchSource.WIKI,docs/Cheminf101/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/index.html
http://openbabel.org//docs/Cheminf101/index.html:943,Deployability,Release,Release,943,"﻿. Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101. Cheminformatics 101#. An introduction to the computer science and chemistry of chemical information systems; Copyright © 2009 by Craig A. James, eMolecules, Inc.The original version of this introduction to cheminformatics can be found on the eMolecules website. It is included here with the permission of the author. Cheminformatics Basics; What is Cheminformatics?; How is Cheminformatics Different?. Representing Molecules; What is a Molecule?; Older systems: Connection Tables; Line Notations: InChI, SMILES, WLN and others; Canonicalization; Line Notation versus Connection Tables: A practical matter; Query Languages: SMARTS; IUPAC Names, Trade Names, Common Names. Substructure Searching with Indexes; What is Indexing?; Indexes for Chemicals; NP-Complete - A Little about Computability. Molecular Similarity; Chemical Registration Systems. previous; Updating to Open Babel 3.0 from 2.x. next; Cheminformatics Basics. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using ",MatchSource.WIKI,docs/Cheminf101/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/index.html
http://openbabel.org//docs/Cheminf101/index.html:928,Energy Efficiency,Charge,Charge,928,"﻿. Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101. Cheminformatics 101#. An introduction to the computer science and chemistry of chemical information systems; Copyright © 2009 by Craig A. James, eMolecules, Inc.The original version of this introduction to cheminformatics can be found on the eMolecules website. It is included here with the permission of the author. Cheminformatics Basics; What is Cheminformatics?; How is Cheminformatics Different?. Representing Molecules; What is a Molecule?; Older systems: Connection Tables; Line Notations: InChI, SMILES, WLN and others; Canonicalization; Line Notation versus Connection Tables: A practical matter; Query Languages: SMARTS; IUPAC Names, Trade Names, Common Names. Substructure Searching with Indexes; What is Indexing?; Indexes for Chemicals; NP-Complete - A Little about Computability. Molecular Similarity; Chemical Registration Systems. previous; Updating to Open Babel 3.0 from 2.x. next; Cheminformatics Basics. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using ",MatchSource.WIKI,docs/Cheminf101/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/index.html
http://openbabel.org//docs/Cheminf101/index.html:870,Modifiability,plugin,plugins,870,"﻿. Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101. Cheminformatics 101#. An introduction to the computer science and chemistry of chemical information systems; Copyright © 2009 by Craig A. James, eMolecules, Inc.The original version of this introduction to cheminformatics can be found on the eMolecules website. It is included here with the permission of the author. Cheminformatics Basics; What is Cheminformatics?; How is Cheminformatics Different?. Representing Molecules; What is a Molecule?; Older systems: Connection Tables; Line Notations: InChI, SMILES, WLN and others; Canonicalization; Line Notation versus Connection Tables: A practical matter; Query Languages: SMARTS; IUPAC Names, Trade Names, Common Names. Substructure Searching with Indexes; What is Indexing?; Indexes for Chemicals; NP-Complete - A Little about Computability. Molecular Similarity; Chemical Registration Systems. previous; Updating to Open Babel 3.0 from 2.x. next; Cheminformatics Basics. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using ",MatchSource.WIKI,docs/Cheminf101/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/index.html
http://openbabel.org//docs/Cheminf101/index.html:148,Usability,Guid,Guide,148,"﻿. Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101. Cheminformatics 101#. An introduction to the computer science and chemistry of chemical information systems; Copyright © 2009 by Craig A. James, eMolecules, Inc.The original version of this introduction to cheminformatics can be found on the eMolecules website. It is included here with the permission of the author. Cheminformatics Basics; What is Cheminformatics?; How is Cheminformatics Different?. Representing Molecules; What is a Molecule?; Older systems: Connection Tables; Line Notations: InChI, SMILES, WLN and others; Canonicalization; Line Notation versus Connection Tables: A practical matter; Query Languages: SMARTS; IUPAC Names, Trade Names, Common Names. Substructure Searching with Indexes; What is Indexing?; Indexes for Chemicals; NP-Complete - A Little about Computability. Molecular Similarity; Chemical Registration Systems. previous; Updating to Open Babel 3.0 from 2.x. next; Cheminformatics Basics. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using ",MatchSource.WIKI,docs/Cheminf101/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/index.html
http://openbabel.org//docs/Cheminf101/index.html:205,Usability,Guid,Guide,205,"﻿. Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101. Cheminformatics 101#. An introduction to the computer science and chemistry of chemical information systems; Copyright © 2009 by Craig A. James, eMolecules, Inc.The original version of this introduction to cheminformatics can be found on the eMolecules website. It is included here with the permission of the author. Cheminformatics Basics; What is Cheminformatics?; How is Cheminformatics Different?. Representing Molecules; What is a Molecule?; Older systems: Connection Tables; Line Notations: InChI, SMILES, WLN and others; Canonicalization; Line Notation versus Connection Tables: A practical matter; Query Languages: SMARTS; IUPAC Names, Trade Names, Common Names. Substructure Searching with Indexes; What is Indexing?; Indexes for Chemicals; NP-Complete - A Little about Computability. Molecular Similarity; Chemical Registration Systems. previous; Updating to Open Babel 3.0 from 2.x. next; Cheminformatics Basics. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using ",MatchSource.WIKI,docs/Cheminf101/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/index.html
http://openbabel.org//docs/Cheminf101/index.html:963,Usability,Guid,Guide,963,"﻿. Cheminformatics 101 — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101. Cheminformatics 101#. An introduction to the computer science and chemistry of chemical information systems; Copyright © 2009 by Craig A. James, eMolecules, Inc.The original version of this introduction to cheminformatics can be found on the eMolecules website. It is included here with the permission of the author. Cheminformatics Basics; What is Cheminformatics?; How is Cheminformatics Different?. Representing Molecules; What is a Molecule?; Older systems: Connection Tables; Line Notations: InChI, SMILES, WLN and others; Canonicalization; Line Notation versus Connection Tables: A practical matter; Query Languages: SMARTS; IUPAC Names, Trade Names, Common Names. Substructure Searching with Indexes; What is Indexing?; Indexes for Chemicals; NP-Complete - A Little about Computability. Molecular Similarity; Chemical Registration Systems. previous; Updating to Open Babel 3.0 from 2.x. next; Cheminformatics Basics. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using ",MatchSource.WIKI,docs/Cheminf101/index.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/index.html
http://openbabel.org//docs/Cheminf101/registration.html:282,Deployability,Install,Install,282,"﻿. Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Chemical... Chemical Registration Systems#; Chemical Registration is the “big brother” of cheminformatics.; A cheminformatics system is primarily devoted to recording chemical; structure. Chemical Registration systems are additionally concerned; with:. Structural novelty - ensure that each compound is only; registered once; Structural normalization - ensure that structures with; alternative representations (such as nitro groups, ferrocenes, and; tautomers) are entered in a uniform way.; Structure drawing - ensure that compounds are drawn in a uniform; fashion, so that they can be quickly recognized “by eye”.; Maintaining relationships among related compounds. For example,; all salt forms of a compound should be recognized as being related; to one another, and compounds in different solvates are also; related.; Registering mixtures, formulations and alternative structures.; Registering compounds the structure of which is unknown.; Roles, responsibilities, security, and company workflow.",MatchSource.WIKI,docs/Cheminf101/registration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/registration.html
http://openbabel.org//docs/Cheminf101/registration.html:953,Deployability,Release,Release,953,"﻿. Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Chemical... Chemical Registration Systems#; Chemical Registration is the “big brother” of cheminformatics.; A cheminformatics system is primarily devoted to recording chemical; structure. Chemical Registration systems are additionally concerned; with:. Structural novelty - ensure that each compound is only; registered once; Structural normalization - ensure that structures with; alternative representations (such as nitro groups, ferrocenes, and; tautomers) are entered in a uniform way.; Structure drawing - ensure that compounds are drawn in a uniform; fashion, so that they can be quickly recognized “by eye”.; Maintaining relationships among related compounds. For example,; all salt forms of a compound should be recognized as being related; to one another, and compounds in different solvates are also; related.; Registering mixtures, formulations and alternative structures.; Registering compounds the structure of which is unknown.; Roles, responsibilities, security, and company workflow.",MatchSource.WIKI,docs/Cheminf101/registration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/registration.html
http://openbabel.org//docs/Cheminf101/registration.html:2003,Deployability,Update,Updates,2003,"#; Chemical Registration is the “big brother” of cheminformatics.; A cheminformatics system is primarily devoted to recording chemical; structure. Chemical Registration systems are additionally concerned; with:. Structural novelty - ensure that each compound is only; registered once; Structural normalization - ensure that structures with; alternative representations (such as nitro groups, ferrocenes, and; tautomers) are entered in a uniform way.; Structure drawing - ensure that compounds are drawn in a uniform; fashion, so that they can be quickly recognized “by eye”.; Maintaining relationships among related compounds. For example,; all salt forms of a compound should be recognized as being related; to one another, and compounds in different solvates are also; related.; Registering mixtures, formulations and alternative structures.; Registering compounds the structure of which is unknown.; Roles, responsibilities, security, and company workflow.; Updates, amendments and corrections, and controlling propagation; of changes (e.g. does changing a compound change a mixture; containing that compound?). The scope of Chemical Registration Systems is far beyond the goals; of this brief introduction to cheminformatics. However, to; illustrate just one of the points above, let’s consider structural; novelty. In real life, chemical structure can be very ambiguous.; Imagine you have five bottles of a particular compound that has a; stereo center:. The contents of the first bottle were carefully analyzed, and; found to be a single stereoisomer.; The contents of the second bottle were carefully analyzed and; found to contain a racemic mixture of the stereoisomers.; The stereoisomers of the third bottle are unknown. It may be; pure, or have one predominant form, or be a racemic mixture.; The fourth bottle was obtained by running part of the contents; of bottle #2 through a chromatographic separation. It is; isotopically pure, but you don’t know which stereoisomer.; The fifth bottl",MatchSource.WIKI,docs/Cheminf101/registration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/registration.html
http://openbabel.org//docs/Cheminf101/registration.html:938,Energy Efficiency,Charge,Charge,938,"﻿. Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Chemical... Chemical Registration Systems#; Chemical Registration is the “big brother” of cheminformatics.; A cheminformatics system is primarily devoted to recording chemical; structure. Chemical Registration systems are additionally concerned; with:. Structural novelty - ensure that each compound is only; registered once; Structural normalization - ensure that structures with; alternative representations (such as nitro groups, ferrocenes, and; tautomers) are entered in a uniform way.; Structure drawing - ensure that compounds are drawn in a uniform; fashion, so that they can be quickly recognized “by eye”.; Maintaining relationships among related compounds. For example,; all salt forms of a compound should be recognized as being related; to one another, and compounds in different solvates are also; related.; Registering mixtures, formulations and alternative structures.; Registering compounds the structure of which is unknown.; Roles, responsibilities, security, and company workflow.",MatchSource.WIKI,docs/Cheminf101/registration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/registration.html
http://openbabel.org//docs/Cheminf101/registration.html:880,Modifiability,plugin,plugins,880,"﻿. Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Chemical... Chemical Registration Systems#; Chemical Registration is the “big brother” of cheminformatics.; A cheminformatics system is primarily devoted to recording chemical; structure. Chemical Registration systems are additionally concerned; with:. Structural novelty - ensure that each compound is only; registered once; Structural normalization - ensure that structures with; alternative representations (such as nitro groups, ferrocenes, and; tautomers) are entered in a uniform way.; Structure drawing - ensure that compounds are drawn in a uniform; fashion, so that they can be quickly recognized “by eye”.; Maintaining relationships among related compounds. For example,; all salt forms of a compound should be recognized as being related; to one another, and compounds in different solvates are also; related.; Registering mixtures, formulations and alternative structures.; Registering compounds the structure of which is unknown.; Roles, responsibilities, security, and company workflow.",MatchSource.WIKI,docs/Cheminf101/registration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/registration.html
http://openbabel.org//docs/Cheminf101/registration.html:1970,Security,secur,security,1970," Guide; Cheminformatics 101; Chemical... Chemical Registration Systems#; Chemical Registration is the “big brother” of cheminformatics.; A cheminformatics system is primarily devoted to recording chemical; structure. Chemical Registration systems are additionally concerned; with:. Structural novelty - ensure that each compound is only; registered once; Structural normalization - ensure that structures with; alternative representations (such as nitro groups, ferrocenes, and; tautomers) are entered in a uniform way.; Structure drawing - ensure that compounds are drawn in a uniform; fashion, so that they can be quickly recognized “by eye”.; Maintaining relationships among related compounds. For example,; all salt forms of a compound should be recognized as being related; to one another, and compounds in different solvates are also; related.; Registering mixtures, formulations and alternative structures.; Registering compounds the structure of which is unknown.; Roles, responsibilities, security, and company workflow.; Updates, amendments and corrections, and controlling propagation; of changes (e.g. does changing a compound change a mixture; containing that compound?). The scope of Chemical Registration Systems is far beyond the goals; of this brief introduction to cheminformatics. However, to; illustrate just one of the points above, let’s consider structural; novelty. In real life, chemical structure can be very ambiguous.; Imagine you have five bottles of a particular compound that has a; stereo center:. The contents of the first bottle were carefully analyzed, and; found to be a single stereoisomer.; The contents of the second bottle were carefully analyzed and; found to contain a racemic mixture of the stereoisomers.; The stereoisomers of the third bottle are unknown. It may be; pure, or have one predominant form, or be a racemic mixture.; The fourth bottle was obtained by running part of the contents; of bottle #2 through a chromatographic separation. It is; isot",MatchSource.WIKI,docs/Cheminf101/registration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/registration.html
http://openbabel.org//docs/Cheminf101/registration.html:158,Usability,Guid,Guide,158,"﻿. Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Chemical... Chemical Registration Systems#; Chemical Registration is the “big brother” of cheminformatics.; A cheminformatics system is primarily devoted to recording chemical; structure. Chemical Registration systems are additionally concerned; with:. Structural novelty - ensure that each compound is only; registered once; Structural normalization - ensure that structures with; alternative representations (such as nitro groups, ferrocenes, and; tautomers) are entered in a uniform way.; Structure drawing - ensure that compounds are drawn in a uniform; fashion, so that they can be quickly recognized “by eye”.; Maintaining relationships among related compounds. For example,; all salt forms of a compound should be recognized as being related; to one another, and compounds in different solvates are also; related.; Registering mixtures, formulations and alternative structures.; Registering compounds the structure of which is unknown.; Roles, responsibilities, security, and company workflow.",MatchSource.WIKI,docs/Cheminf101/registration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/registration.html
http://openbabel.org//docs/Cheminf101/registration.html:215,Usability,Guid,Guide,215,"﻿. Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Chemical... Chemical Registration Systems#; Chemical Registration is the “big brother” of cheminformatics.; A cheminformatics system is primarily devoted to recording chemical; structure. Chemical Registration systems are additionally concerned; with:. Structural novelty - ensure that each compound is only; registered once; Structural normalization - ensure that structures with; alternative representations (such as nitro groups, ferrocenes, and; tautomers) are entered in a uniform way.; Structure drawing - ensure that compounds are drawn in a uniform; fashion, so that they can be quickly recognized “by eye”.; Maintaining relationships among related compounds. For example,; all salt forms of a compound should be recognized as being related; to one another, and compounds in different solvates are also; related.; Registering mixtures, formulations and alternative structures.; Registering compounds the structure of which is unknown.; Roles, responsibilities, security, and company workflow.",MatchSource.WIKI,docs/Cheminf101/registration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/registration.html
http://openbabel.org//docs/Cheminf101/registration.html:973,Usability,Guid,Guide,973,"﻿. Chemical Registration Systems — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Chemical... Chemical Registration Systems#; Chemical Registration is the “big brother” of cheminformatics.; A cheminformatics system is primarily devoted to recording chemical; structure. Chemical Registration systems are additionally concerned; with:. Structural novelty - ensure that each compound is only; registered once; Structural normalization - ensure that structures with; alternative representations (such as nitro groups, ferrocenes, and; tautomers) are entered in a uniform way.; Structure drawing - ensure that compounds are drawn in a uniform; fashion, so that they can be quickly recognized “by eye”.; Maintaining relationships among related compounds. For example,; all salt forms of a compound should be recognized as being related; to one another, and compounds in different solvates are also; related.; Registering mixtures, formulations and alternative structures.; Registering compounds the structure of which is unknown.; Roles, responsibilities, security, and company workflow.",MatchSource.WIKI,docs/Cheminf101/registration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/registration.html
http://openbabel.org//docs/Cheminf101/represent.html:8741,Availability,avail,available,8741," you know that the whole molecule is on one; line of a file, it’s easy to parse.; Line notations are also very nice for database applications.; Relational databases have datatypes that, roughly speaking, are; divided into numbers, text, and “everything else”, also known as; “BLOBs” (Binary Large OBjects). You can store line notations in the; “text” fields much more easily than connection tables.; Line notations also have pragmatic advantages. Modern Unix-like; systems (such as UNIX, Linux and Cygwin) have a number of very; powerful “filter” text-processing programs that can be “piped”; together (connected end-to-end) to perform important tasks. For; example, to count the number of molecules containing aliphatic; nitrogen in a SMILES file, I can simply:; grep N file.smi | wc. (grep looks for a particular expression, in this case N, and; prints any line that contains it, and wc (“word count”) counts the; number of words and lines.); This is just a simple example of the power available via “script”; programs using “filters” on Unix-like systems. Unix filters are; much less useful for connection-table formats, because each; molecule is spread over many lines. Query Languages: SMARTS#; In addition to a typographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial structures,; and find anything that contains them. For example:. Query; Database; Matches?. YES (matched portion highlighted in blue). NO (double bond indicated doesn’t match). eMolecules, Inc. eMolecules is a one-stop shop for suppliers and information for over 8 million chemical compounds. Under the hood is a chemical registration technology based on Open Babel. The simplest query language for chemistry is SMILES itself: Just; specify a structure, ",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:275,Deployability,Install,Install,275,"﻿. Representing Molecules — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Representing... Representing Molecules#. What is a Molecule?#; One of the greatest achievements in chemistry was the development; of the valence model of chemistry, where a molecule is; represented as atoms joined by semi-rigid bonds that can be; single, double, or triple. This simple mental model has little; resemblance to the underlying quantum-mechanical reality of; electrons, protons and neutrons, yet it has proved to be a; remarkably useful approximation of how atoms behave in close; proximity to one another, and has been the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulat",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:946,Deployability,Release,Release,946,"﻿. Representing Molecules — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Representing... Representing Molecules#. What is a Molecule?#; One of the greatest achievements in chemistry was the development; of the valence model of chemistry, where a molecule is; represented as atoms joined by semi-rigid bonds that can be; single, double, or triple. This simple mental model has little; resemblance to the underlying quantum-mechanical reality of; electrons, protons and neutrons, yet it has proved to be a; remarkably useful approximation of how atoms behave in close; proximity to one another, and has been the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulat",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:931,Energy Efficiency,Charge,Charge,931,"﻿. Representing Molecules — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Representing... Representing Molecules#. What is a Molecule?#; One of the greatest achievements in chemistry was the development; of the valence model of chemistry, where a molecule is; represented as atoms joined by semi-rigid bonds that can be; single, double, or triple. This simple mental model has little; resemblance to the underlying quantum-mechanical reality of; electrons, protons and neutrons, yet it has proved to be a; remarkably useful approximation of how atoms behave in close; proximity to one another, and has been the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulat",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:2505,Energy Efficiency,charge,charged,2505," the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulate graphs - mathematical; graph theory and computer science have been closely allied since; the invention of the digital computer. There are atoms and space. Everything else is opinion.; —Democritus. However, the valence model of chemistry has many shortcomings. The; most obvious is aromaticity, which quickly required adding the; concept of a non-integral “aromatic” distributed bond, to the; single/double/triple bonds of the simple valence model. And that; was just the start - tautomers, ferrocenes, charged molecules and a; host of other common molecules simply don’t fit the valence model; well.; This complicates life for the computer scientist. As we shall see,; they are the source of most of the complexity of modern; cheminformatics systems. Older systems: Connection Tables#; Most of the early (and some modern) representations of molecules; were in a connection table, literally, a table enumerating the; atoms, and a table enumerating the bonds and which atoms each bond; connected. Here is an example of connection-table (CTAB) portion of; an MDL “SD” file (the data portion is not shown here):; MOLCONV. 3 2 0 0 1 0 1 V2000; 5.9800 -0.0000 -0.0000 Br 0 0 0 0 0 0; 4.4000 -0.6600 0.8300 C 0 0 0 0 0 0; 3.5400 -1.3500 -0.1900 C 0 0 0 0 0 0; 1 2 1 0; 2 3 1 0. This simple example illustrates most of the key features. The; molecule has three atoms, two bonds, and is provided with; three-dimensional (x,y,z) coordinates. MDL provides; extensive documentation; for their various CTFile formats if you are interest",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:8282,Energy Efficiency,power,powerful,8282,"n theory one can create a canonical connection table,; too, but it’s not as useful since informatics systems usually have; trouble indexing BLOBs - large objects.). Line Notation versus Connection Tables: A practical matter#; Why are line notations preferred over connection-table formats? In; theory, either could express the same information. But there are; practical difference, mostly related to the complexity of “parsing”; a connection table. If you know that the whole molecule is on one; line of a file, it’s easy to parse.; Line notations are also very nice for database applications.; Relational databases have datatypes that, roughly speaking, are; divided into numbers, text, and “everything else”, also known as; “BLOBs” (Binary Large OBjects). You can store line notations in the; “text” fields much more easily than connection tables.; Line notations also have pragmatic advantages. Modern Unix-like; systems (such as UNIX, Linux and Cygwin) have a number of very; powerful “filter” text-processing programs that can be “piped”; together (connected end-to-end) to perform important tasks. For; example, to count the number of molecules containing aliphatic; nitrogen in a SMILES file, I can simply:; grep N file.smi | wc. (grep looks for a particular expression, in this case N, and; prints any line that contains it, and wc (“word count”) counts the; number of words and lines.); This is just a simple example of the power available via “script”; programs using “filters” on Unix-like systems. Unix filters are; much less useful for connection-table formats, because each; molecule is spread over many lines. Query Languages: SMARTS#; In addition to a typographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial str",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:8735,Energy Efficiency,power,power,8735," you know that the whole molecule is on one; line of a file, it’s easy to parse.; Line notations are also very nice for database applications.; Relational databases have datatypes that, roughly speaking, are; divided into numbers, text, and “everything else”, also known as; “BLOBs” (Binary Large OBjects). You can store line notations in the; “text” fields much more easily than connection tables.; Line notations also have pragmatic advantages. Modern Unix-like; systems (such as UNIX, Linux and Cygwin) have a number of very; powerful “filter” text-processing programs that can be “piped”; together (connected end-to-end) to perform important tasks. For; example, to count the number of molecules containing aliphatic; nitrogen in a SMILES file, I can simply:; grep N file.smi | wc. (grep looks for a particular expression, in this case N, and; prints any line that contains it, and wc (“word count”) counts the; number of words and lines.); This is just a simple example of the power available via “script”; programs using “filters” on Unix-like systems. Unix filters are; much less useful for connection-table formats, because each; molecule is spread over many lines. Query Languages: SMARTS#; In addition to a typographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial structures,; and find anything that contains them. For example:. Query; Database; Matches?. YES (matched portion highlighted in blue). NO (double bond indicated doesn’t match). eMolecules, Inc. eMolecules is a one-stop shop for suppliers and information for over 8 million chemical compounds. Under the hood is a chemical registration technology based on Open Babel. The simplest query language for chemistry is SMILES itself: Just; specify a structure, ",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:10000,Energy Efficiency,power,power,10000,"ypographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial structures,; and find anything that contains them. For example:. Query; Database; Matches?. YES (matched portion highlighted in blue). NO (double bond indicated doesn’t match). eMolecules, Inc. eMolecules is a one-stop shop for suppliers and information for over 8 million chemical compounds. Under the hood is a chemical registration technology based on Open Babel. The simplest query language for chemistry is SMILES itself: Just; specify a structure, such as Oc1ccccc1, and search. This is how; eMolecules’ basic searching works (see Sidebar). It’s simple and, because of the; high-performance indexes in eMolecules, is also very fast.; However, for general-purpose cheminformatics, one needs more power.; What if the substructure you’re looking for isn’t a valid molecule?; For example ClccBr (1,2- substitution on an aromatic ring) isn’t a; whole molecule, since the concept of aromaticity is only sensible; in the context of a whole ring system.; Or what if the thing we’re looking for isn’t a simple atom such as; Br, but rather a concept like “Halogen”? Or, “A terminal methyl”?; To address this, cheminformatics systems have special; query languages, such as SMARTS (SMiles ARbitrary Target; Specification). SMARTS is a close cousin to SMILES, but it has; expressions instead of simple atoms and bonds. For example, [C,N]; will find an atom that is either carbon or nitrogen. IUPAC Names, Trade Names, Common Names#; Chemistry also has three other important name systems:. IUPAC NamesIUPAC; (the International; Union of Pure and Applied Chemistry) established a; naming convention that is; widely used throughout chemistry. Any chemical can be named, and; all IUPA",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:873,Modifiability,plugin,plugins,873,"﻿. Representing Molecules — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Representing... Representing Molecules#. What is a Molecule?#; One of the greatest achievements in chemistry was the development; of the valence model of chemistry, where a molecule is; represented as atoms joined by semi-rigid bonds that can be; single, double, or triple. This simple mental model has little; resemblance to the underlying quantum-mechanical reality of; electrons, protons and neutrons, yet it has proved to be a; remarkably useful approximation of how atoms behave in close; proximity to one another, and has been the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulat",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:8381,Performance,perform,perform,8381,"n theory one can create a canonical connection table,; too, but it’s not as useful since informatics systems usually have; trouble indexing BLOBs - large objects.). Line Notation versus Connection Tables: A practical matter#; Why are line notations preferred over connection-table formats? In; theory, either could express the same information. But there are; practical difference, mostly related to the complexity of “parsing”; a connection table. If you know that the whole molecule is on one; line of a file, it’s easy to parse.; Line notations are also very nice for database applications.; Relational databases have datatypes that, roughly speaking, are; divided into numbers, text, and “everything else”, also known as; “BLOBs” (Binary Large OBjects). You can store line notations in the; “text” fields much more easily than connection tables.; Line notations also have pragmatic advantages. Modern Unix-like; systems (such as UNIX, Linux and Cygwin) have a number of very; powerful “filter” text-processing programs that can be “piped”; together (connected end-to-end) to perform important tasks. For; example, to count the number of molecules containing aliphatic; nitrogen in a SMILES file, I can simply:; grep N file.smi | wc. (grep looks for a particular expression, in this case N, and; prints any line that contains it, and wc (“word count”) counts the; number of words and lines.); This is just a simple example of the power available via “script”; programs using “filters” on Unix-like systems. Unix filters are; much less useful for connection-table formats, because each; molecule is spread over many lines. Query Languages: SMARTS#; In addition to a typographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial str",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:9884,Performance,perform,performance,9884,"molecule is spread over many lines. Query Languages: SMARTS#; In addition to a typographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial structures,; and find anything that contains them. For example:. Query; Database; Matches?. YES (matched portion highlighted in blue). NO (double bond indicated doesn’t match). eMolecules, Inc. eMolecules is a one-stop shop for suppliers and information for over 8 million chemical compounds. Under the hood is a chemical registration technology based on Open Babel. The simplest query language for chemistry is SMILES itself: Just; specify a structure, such as Oc1ccccc1, and search. This is how; eMolecules’ basic searching works (see Sidebar). It’s simple and, because of the; high-performance indexes in eMolecules, is also very fast.; However, for general-purpose cheminformatics, one needs more power.; What if the substructure you’re looking for isn’t a valid molecule?; For example ClccBr (1,2- substitution on an aromatic ring) isn’t a; whole molecule, since the concept of aromaticity is only sensible; in the context of a whole ring system.; Or what if the thing we’re looking for isn’t a simple atom such as; Br, but rather a concept like “Halogen”? Or, “A terminal methyl”?; To address this, cheminformatics systems have special; query languages, such as SMARTS (SMiles ARbitrary Target; Specification). SMARTS is a close cousin to SMILES, but it has; expressions instead of simple atoms and bonds. For example, [C,N]; will find an atom that is either carbon or nitrogen. IUPAC Names, Trade Names, Common Names#; Chemistry also has three other important name systems:. IUPAC NamesIUPAC; (the International; Union of Pure and Applied Chemistry) established a; naming convention th",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:5735,Security,access,accessible,5735," Wisswesser in the early 1950’s, was the; first comprehensive line notation, capable of representing; arbitrarily complex molecules correctly and compactly.; 1H = CH4 Methane; 2H = CH3-CH3 Ethane; 3H = CH3-CH2-CH3 Propane; QVR BG CG DG EG FG = C7HCl5O2 Pentachlorbenzoate. WLN was the first line notation to feature a canonical form, that; is, the rules for WLN meant there was only one “correct” WLN for; any particular molecule. Those versed in WLN were able to write; molecular structure in a line format, communicate molecular; structure to one another and to computer programs. Unfortunately,; WLN’s complexity prevented widespread adoption. The rules for; correct specification of WLN filled a small book, encoding those; rules into a computer proved difficult, and the rules for the; canonicalization were computationally; intractable. SMILES - Simplified Molecular Input Line Entry SystemThe best-known line notation today is SMILES. It was by Arthur and; David Weininger in response to a need for a simpler, more “human; accessible” notation than WLN. While SMILES is not trivial to learn; and write, most chemists can create correct SMILES with just a few; minutes training, and the entire SMILES language can be learned in; an hour or two. You can; read more details here.; Here are some examples:; C methane; CC ethane; C=C ethene; Oc1ccccc1 phenol. SMILES, like WLN, has a canonical form, but unlike WLN, Weininger; relied on the computer, rather than the chemist, to convert a; non-canonical SMILES to a canonical SMILES. This important; separation of duties was key to making SMILES easy to enter. (Read; more about canonicalization below.). InChIInChI is the latest and most modern of the line notations. It; resolves many of the chemical ambiguities not addressed by SMILES,; particularly with respect to stereo centers, tautomers and other of; the “valence model problems” mentioned; above.; You can read more about InChI at the; Official Web Site,; or on the; Unofficial InChI FAQ p",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:151,Usability,Guid,Guide,151,"﻿. Representing Molecules — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Representing... Representing Molecules#. What is a Molecule?#; One of the greatest achievements in chemistry was the development; of the valence model of chemistry, where a molecule is; represented as atoms joined by semi-rigid bonds that can be; single, double, or triple. This simple mental model has little; resemblance to the underlying quantum-mechanical reality of; electrons, protons and neutrons, yet it has proved to be a; remarkably useful approximation of how atoms behave in close; proximity to one another, and has been the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulat",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:208,Usability,Guid,Guide,208,"﻿. Representing Molecules — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Representing... Representing Molecules#. What is a Molecule?#; One of the greatest achievements in chemistry was the development; of the valence model of chemistry, where a molecule is; represented as atoms joined by semi-rigid bonds that can be; single, double, or triple. This simple mental model has little; resemblance to the underlying quantum-mechanical reality of; electrons, protons and neutrons, yet it has proved to be a; remarkably useful approximation of how atoms behave in close; proximity to one another, and has been the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulat",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:966,Usability,Guid,Guide,966,"﻿. Representing Molecules — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Representing... Representing Molecules#. What is a Molecule?#; One of the greatest achievements in chemistry was the development; of the valence model of chemistry, where a molecule is; represented as atoms joined by semi-rigid bonds that can be; single, double, or triple. This simple mental model has little; resemblance to the underlying quantum-mechanical reality of; electrons, protons and neutrons, yet it has proved to be a; remarkably useful approximation of how atoms behave in close; proximity to one another, and has been the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulat",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:1273,Usability,simpl,simple,1273,"arity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Representing... Representing Molecules#. What is a Molecule?#; One of the greatest achievements in chemistry was the development; of the valence model of chemistry, where a molecule is; represented as atoms joined by semi-rigid bonds that can be; single, double, or triple. This simple mental model has little; resemblance to the underlying quantum-mechanical reality of; electrons, protons and neutrons, yet it has proved to be a; remarkably useful approximation of how atoms behave in close; proximity to one another, and has been the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulate graphs - mathematical; graph theory and computer science have been closely allied since; the invention of the digital computer. There are atoms and space. Everything else is opinion.; —Democritus. However, the valence model of chemistry has many shortcomings. The; most obvious is aromaticity, which quickly required adding the; concept of a non-integral “aromatic” distributed bond, to the; single/double/triple bonds of the ",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:2429,Usability,simpl,simple,2429,"ality of; electrons, protons and neutrons, yet it has proved to be a; remarkably useful approximation of how atoms behave in close; proximity to one another, and has been the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulate graphs - mathematical; graph theory and computer science have been closely allied since; the invention of the digital computer. There are atoms and space. Everything else is opinion.; —Democritus. However, the valence model of chemistry has many shortcomings. The; most obvious is aromaticity, which quickly required adding the; concept of a non-integral “aromatic” distributed bond, to the; single/double/triple bonds of the simple valence model. And that; was just the start - tautomers, ferrocenes, charged molecules and a; host of other common molecules simply don’t fit the valence model; well.; This complicates life for the computer scientist. As we shall see,; they are the source of most of the complexity of modern; cheminformatics systems. Older systems: Connection Tables#; Most of the early (and some modern) representations of molecules; were in a connection table, literally, a table enumerating the; atoms, and a table enumerating the bonds and which atoms each bond; connected. Here is an example of connection-table (CTAB) portion of; an MDL “SD” file (the data portion is not shown here):; MOLCONV. 3 2 0 0 1 0 1 V2000; 5.9800 -0.0000 -0.0000 Br 0 0 0 0 0 0; 4.4000 -0.6600 0.8300 C 0 0 0 0 0 0; 3.5400 -1.3500 -0.1900 C 0 0 0 0 0 0; 1 2 1 0; 2 3 1 0. This simple example illustrates most of the key features. The; molecule has three ",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:2561,Usability,simpl,simply,2561," the foundation of chemical; instruction for well over a century.; The valence model is also the foundation of modern chemical; information systems. When a Computer Scientist approaches a; problem, the first task is to figure out a datamodel that; represents the problem to be solved as information. To the; Computer Scientist, the valence model naturally transforms into a; graph, where the nodes are atoms and the edges are bonds.; Computer Scientists know how to manipulate graphs - mathematical; graph theory and computer science have been closely allied since; the invention of the digital computer. There are atoms and space. Everything else is opinion.; —Democritus. However, the valence model of chemistry has many shortcomings. The; most obvious is aromaticity, which quickly required adding the; concept of a non-integral “aromatic” distributed bond, to the; single/double/triple bonds of the simple valence model. And that; was just the start - tautomers, ferrocenes, charged molecules and a; host of other common molecules simply don’t fit the valence model; well.; This complicates life for the computer scientist. As we shall see,; they are the source of most of the complexity of modern; cheminformatics systems. Older systems: Connection Tables#; Most of the early (and some modern) representations of molecules; were in a connection table, literally, a table enumerating the; atoms, and a table enumerating the bonds and which atoms each bond; connected. Here is an example of connection-table (CTAB) portion of; an MDL “SD” file (the data portion is not shown here):; MOLCONV. 3 2 0 0 1 0 1 V2000; 5.9800 -0.0000 -0.0000 Br 0 0 0 0 0 0; 4.4000 -0.6600 0.8300 C 0 0 0 0 0 0; 3.5400 -1.3500 -0.1900 C 0 0 0 0 0 0; 1 2 1 0; 2 3 1 0. This simple example illustrates most of the key features. The; molecule has three atoms, two bonds, and is provided with; three-dimensional (x,y,z) coordinates. MDL provides; extensive documentation; for their various CTFile formats if you are interest",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:3279,Usability,simpl,simple,3279," quickly required adding the; concept of a non-integral “aromatic” distributed bond, to the; single/double/triple bonds of the simple valence model. And that; was just the start - tautomers, ferrocenes, charged molecules and a; host of other common molecules simply don’t fit the valence model; well.; This complicates life for the computer scientist. As we shall see,; they are the source of most of the complexity of modern; cheminformatics systems. Older systems: Connection Tables#; Most of the early (and some modern) representations of molecules; were in a connection table, literally, a table enumerating the; atoms, and a table enumerating the bonds and which atoms each bond; connected. Here is an example of connection-table (CTAB) portion of; an MDL “SD” file (the data portion is not shown here):; MOLCONV. 3 2 0 0 1 0 1 V2000; 5.9800 -0.0000 -0.0000 Br 0 0 0 0 0 0; 4.4000 -0.6600 0.8300 C 0 0 0 0 0 0; 3.5400 -1.3500 -0.1900 C 0 0 0 0 0 0; 1 2 1 0; 2 3 1 0. This simple example illustrates most of the key features. The; molecule has three atoms, two bonds, and is provided with; three-dimensional (x,y,z) coordinates. MDL provides; extensive documentation; for their various CTFile formats if you are interested in the; details.; Connection tables can capture the valence model of chemistry fairly; well, but they suffer from three problems:; 1. They are very inefficient, taking on the order of a dozen or two of; bytes of data per atom and per bond. Newer line notations; (discussed below) represent a molecules with an average of 1.2 to; 1.5 bytes per atom, or 6-8 bytes per atom if coordinates are added.; 2. Many suffered from lack of specificity. For example, since; hydrogens are often not specified, there can be ambiguity as to the; electronic state of some molecules, because the connection-table; format does not explicitly state the valence assumptions.; 3. Most mix the concept of connectivity (what the atoms are and how; they are connected) with other data such as 2D an",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:5557,Usability,Simpl,Simplified,5557," a molecule as a single-line string of; characters. WLN - Wisswesser Line NotationWLN, invented by William J. Wisswesser in the early 1950’s, was the; first comprehensive line notation, capable of representing; arbitrarily complex molecules correctly and compactly.; 1H = CH4 Methane; 2H = CH3-CH3 Ethane; 3H = CH3-CH2-CH3 Propane; QVR BG CG DG EG FG = C7HCl5O2 Pentachlorbenzoate. WLN was the first line notation to feature a canonical form, that; is, the rules for WLN meant there was only one “correct” WLN for; any particular molecule. Those versed in WLN were able to write; molecular structure in a line format, communicate molecular; structure to one another and to computer programs. Unfortunately,; WLN’s complexity prevented widespread adoption. The rules for; correct specification of WLN filled a small book, encoding those; rules into a computer proved difficult, and the rules for the; canonicalization were computationally; intractable. SMILES - Simplified Molecular Input Line Entry SystemThe best-known line notation today is SMILES. It was by Arthur and; David Weininger in response to a need for a simpler, more “human; accessible” notation than WLN. While SMILES is not trivial to learn; and write, most chemists can create correct SMILES with just a few; minutes training, and the entire SMILES language can be learned in; an hour or two. You can; read more details here.; Here are some examples:; C methane; CC ethane; C=C ethene; Oc1ccccc1 phenol. SMILES, like WLN, has a canonical form, but unlike WLN, Weininger; relied on the computer, rather than the chemist, to convert a; non-canonical SMILES to a canonical SMILES. This important; separation of duties was key to making SMILES easy to enter. (Read; more about canonicalization below.). InChIInChI is the latest and most modern of the line notations. It; resolves many of the chemical ambiguities not addressed by SMILES,; particularly with respect to stereo centers, tautomers and other of; the “valence model problems” m",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:5713,Usability,simpl,simpler,5713," Wisswesser in the early 1950’s, was the; first comprehensive line notation, capable of representing; arbitrarily complex molecules correctly and compactly.; 1H = CH4 Methane; 2H = CH3-CH3 Ethane; 3H = CH3-CH2-CH3 Propane; QVR BG CG DG EG FG = C7HCl5O2 Pentachlorbenzoate. WLN was the first line notation to feature a canonical form, that; is, the rules for WLN meant there was only one “correct” WLN for; any particular molecule. Those versed in WLN were able to write; molecular structure in a line format, communicate molecular; structure to one another and to computer programs. Unfortunately,; WLN’s complexity prevented widespread adoption. The rules for; correct specification of WLN filled a small book, encoding those; rules into a computer proved difficult, and the rules for the; canonicalization were computationally; intractable. SMILES - Simplified Molecular Input Line Entry SystemThe best-known line notation today is SMILES. It was by Arthur and; David Weininger in response to a need for a simpler, more “human; accessible” notation than WLN. While SMILES is not trivial to learn; and write, most chemists can create correct SMILES with just a few; minutes training, and the entire SMILES language can be learned in; an hour or two. You can; read more details here.; Here are some examples:; C methane; CC ethane; C=C ethene; Oc1ccccc1 phenol. SMILES, like WLN, has a canonical form, but unlike WLN, Weininger; relied on the computer, rather than the chemist, to convert a; non-canonical SMILES to a canonical SMILES. This important; separation of duties was key to making SMILES easy to enter. (Read; more about canonicalization below.). InChIInChI is the latest and most modern of the line notations. It; resolves many of the chemical ambiguities not addressed by SMILES,; particularly with respect to stereo centers, tautomers and other of; the “valence model problems” mentioned; above.; You can read more about InChI at the; Official Web Site,; or on the; Unofficial InChI FAQ p",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:5797,Usability,learn,learn,5797,".; 1H = CH4 Methane; 2H = CH3-CH3 Ethane; 3H = CH3-CH2-CH3 Propane; QVR BG CG DG EG FG = C7HCl5O2 Pentachlorbenzoate. WLN was the first line notation to feature a canonical form, that; is, the rules for WLN meant there was only one “correct” WLN for; any particular molecule. Those versed in WLN were able to write; molecular structure in a line format, communicate molecular; structure to one another and to computer programs. Unfortunately,; WLN’s complexity prevented widespread adoption. The rules for; correct specification of WLN filled a small book, encoding those; rules into a computer proved difficult, and the rules for the; canonicalization were computationally; intractable. SMILES - Simplified Molecular Input Line Entry SystemThe best-known line notation today is SMILES. It was by Arthur and; David Weininger in response to a need for a simpler, more “human; accessible” notation than WLN. While SMILES is not trivial to learn; and write, most chemists can create correct SMILES with just a few; minutes training, and the entire SMILES language can be learned in; an hour or two. You can; read more details here.; Here are some examples:; C methane; CC ethane; C=C ethene; Oc1ccccc1 phenol. SMILES, like WLN, has a canonical form, but unlike WLN, Weininger; relied on the computer, rather than the chemist, to convert a; non-canonical SMILES to a canonical SMILES. This important; separation of duties was key to making SMILES easy to enter. (Read; more about canonicalization below.). InChIInChI is the latest and most modern of the line notations. It; resolves many of the chemical ambiguities not addressed by SMILES,; particularly with respect to stereo centers, tautomers and other of; the “valence model problems” mentioned; above.; You can read more about InChI at the; Official Web Site,; or on the; Unofficial InChI FAQ page. Canonicalization#; A critical feature of line notations is canonicalization - the; ability to choose one “blessed” representation from among the many",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:5928,Usability,learn,learned,5928,".; 1H = CH4 Methane; 2H = CH3-CH3 Ethane; 3H = CH3-CH2-CH3 Propane; QVR BG CG DG EG FG = C7HCl5O2 Pentachlorbenzoate. WLN was the first line notation to feature a canonical form, that; is, the rules for WLN meant there was only one “correct” WLN for; any particular molecule. Those versed in WLN were able to write; molecular structure in a line format, communicate molecular; structure to one another and to computer programs. Unfortunately,; WLN’s complexity prevented widespread adoption. The rules for; correct specification of WLN filled a small book, encoding those; rules into a computer proved difficult, and the rules for the; canonicalization were computationally; intractable. SMILES - Simplified Molecular Input Line Entry SystemThe best-known line notation today is SMILES. It was by Arthur and; David Weininger in response to a need for a simpler, more “human; accessible” notation than WLN. While SMILES is not trivial to learn; and write, most chemists can create correct SMILES with just a few; minutes training, and the entire SMILES language can be learned in; an hour or two. You can; read more details here.; Here are some examples:; C methane; CC ethane; C=C ethene; Oc1ccccc1 phenol. SMILES, like WLN, has a canonical form, but unlike WLN, Weininger; relied on the computer, rather than the chemist, to convert a; non-canonical SMILES to a canonical SMILES. This important; separation of duties was key to making SMILES easy to enter. (Read; more about canonicalization below.). InChIInChI is the latest and most modern of the line notations. It; resolves many of the chemical ambiguities not addressed by SMILES,; particularly with respect to stereo centers, tautomers and other of; the “valence model problems” mentioned; above.; You can read more about InChI at the; Official Web Site,; or on the; Unofficial InChI FAQ page. Canonicalization#; A critical feature of line notations is canonicalization - the; ability to choose one “blessed” representation from among the many",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:8508,Usability,simpl,simply,8508,"Line Notation versus Connection Tables: A practical matter#; Why are line notations preferred over connection-table formats? In; theory, either could express the same information. But there are; practical difference, mostly related to the complexity of “parsing”; a connection table. If you know that the whole molecule is on one; line of a file, it’s easy to parse.; Line notations are also very nice for database applications.; Relational databases have datatypes that, roughly speaking, are; divided into numbers, text, and “everything else”, also known as; “BLOBs” (Binary Large OBjects). You can store line notations in the; “text” fields much more easily than connection tables.; Line notations also have pragmatic advantages. Modern Unix-like; systems (such as UNIX, Linux and Cygwin) have a number of very; powerful “filter” text-processing programs that can be “piped”; together (connected end-to-end) to perform important tasks. For; example, to count the number of molecules containing aliphatic; nitrogen in a SMILES file, I can simply:; grep N file.smi | wc. (grep looks for a particular expression, in this case N, and; prints any line that contains it, and wc (“word count”) counts the; number of words and lines.); This is just a simple example of the power available via “script”; programs using “filters” on Unix-like systems. Unix filters are; much less useful for connection-table formats, because each; molecule is spread over many lines. Query Languages: SMARTS#; In addition to a typographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial structures,; and find anything that contains them. For example:. Query; Database; Matches?. YES (matched portion highlighted in blue). NO (double bond indicated doesn’t",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:8713,Usability,simpl,simple,8713," you know that the whole molecule is on one; line of a file, it’s easy to parse.; Line notations are also very nice for database applications.; Relational databases have datatypes that, roughly speaking, are; divided into numbers, text, and “everything else”, also known as; “BLOBs” (Binary Large OBjects). You can store line notations in the; “text” fields much more easily than connection tables.; Line notations also have pragmatic advantages. Modern Unix-like; systems (such as UNIX, Linux and Cygwin) have a number of very; powerful “filter” text-processing programs that can be “piped”; together (connected end-to-end) to perform important tasks. For; example, to count the number of molecules containing aliphatic; nitrogen in a SMILES file, I can simply:; grep N file.smi | wc. (grep looks for a particular expression, in this case N, and; prints any line that contains it, and wc (“word count”) counts the; number of words and lines.); This is just a simple example of the power available via “script”; programs using “filters” on Unix-like systems. Unix filters are; much less useful for connection-table formats, because each; molecule is spread over many lines. Query Languages: SMARTS#; In addition to a typographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial structures,; and find anything that contains them. For example:. Query; Database; Matches?. YES (matched portion highlighted in blue). NO (double bond indicated doesn’t match). eMolecules, Inc. eMolecules is a one-stop shop for suppliers and information for over 8 million chemical compounds. Under the hood is a chemical registration technology based on Open Babel. The simplest query language for chemistry is SMILES itself: Just; specify a structure, ",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:9670,Usability,simpl,simplest,9670,"ple of the power available via “script”; programs using “filters” on Unix-like systems. Unix filters are; much less useful for connection-table formats, because each; molecule is spread over many lines. Query Languages: SMARTS#; In addition to a typographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial structures,; and find anything that contains them. For example:. Query; Database; Matches?. YES (matched portion highlighted in blue). NO (double bond indicated doesn’t match). eMolecules, Inc. eMolecules is a one-stop shop for suppliers and information for over 8 million chemical compounds. Under the hood is a chemical registration technology based on Open Babel. The simplest query language for chemistry is SMILES itself: Just; specify a structure, such as Oc1ccccc1, and search. This is how; eMolecules’ basic searching works (see Sidebar). It’s simple and, because of the; high-performance indexes in eMolecules, is also very fast.; However, for general-purpose cheminformatics, one needs more power.; What if the substructure you’re looking for isn’t a valid molecule?; For example ClccBr (1,2- substitution on an aromatic ring) isn’t a; whole molecule, since the concept of aromaticity is only sensible; in the context of a whole ring system.; Or what if the thing we’re looking for isn’t a simple atom such as; Br, but rather a concept like “Halogen”? Or, “A terminal methyl”?; To address this, cheminformatics systems have special; query languages, such as SMARTS (SMiles ARbitrary Target; Specification). SMARTS is a close cousin to SMILES, but it has; expressions instead of simple atoms and bonds. For example, [C,N]; will find an atom that is either carbon or nitrogen. IUPAC Names, Trade Names, Common Names#;",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:9851,Usability,simpl,simple,9851,"molecule is spread over many lines. Query Languages: SMARTS#; In addition to a typographical way to represent molecules, we also; need a way to enter queries about molecules, such as, “Find all; molecules that contain a phenol.”; With text, we’re familiar with the concept of typing a partial; word, such as “ford” to find “Henry Ford” as well as “John; Hartford”. For chemistry, we can also specify partial structures,; and find anything that contains them. For example:. Query; Database; Matches?. YES (matched portion highlighted in blue). NO (double bond indicated doesn’t match). eMolecules, Inc. eMolecules is a one-stop shop for suppliers and information for over 8 million chemical compounds. Under the hood is a chemical registration technology based on Open Babel. The simplest query language for chemistry is SMILES itself: Just; specify a structure, such as Oc1ccccc1, and search. This is how; eMolecules’ basic searching works (see Sidebar). It’s simple and, because of the; high-performance indexes in eMolecules, is also very fast.; However, for general-purpose cheminformatics, one needs more power.; What if the substructure you’re looking for isn’t a valid molecule?; For example ClccBr (1,2- substitution on an aromatic ring) isn’t a; whole molecule, since the concept of aromaticity is only sensible; in the context of a whole ring system.; Or what if the thing we’re looking for isn’t a simple atom such as; Br, but rather a concept like “Halogen”? Or, “A terminal methyl”?; To address this, cheminformatics systems have special; query languages, such as SMARTS (SMiles ARbitrary Target; Specification). SMARTS is a close cousin to SMILES, but it has; expressions instead of simple atoms and bonds. For example, [C,N]; will find an atom that is either carbon or nitrogen. IUPAC Names, Trade Names, Common Names#; Chemistry also has three other important name systems:. IUPAC NamesIUPAC; (the International; Union of Pure and Applied Chemistry) established a; naming convention th",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:10299,Usability,simpl,simple,10299,"atches?. YES (matched portion highlighted in blue). NO (double bond indicated doesn’t match). eMolecules, Inc. eMolecules is a one-stop shop for suppliers and information for over 8 million chemical compounds. Under the hood is a chemical registration technology based on Open Babel. The simplest query language for chemistry is SMILES itself: Just; specify a structure, such as Oc1ccccc1, and search. This is how; eMolecules’ basic searching works (see Sidebar). It’s simple and, because of the; high-performance indexes in eMolecules, is also very fast.; However, for general-purpose cheminformatics, one needs more power.; What if the substructure you’re looking for isn’t a valid molecule?; For example ClccBr (1,2- substitution on an aromatic ring) isn’t a; whole molecule, since the concept of aromaticity is only sensible; in the context of a whole ring system.; Or what if the thing we’re looking for isn’t a simple atom such as; Br, but rather a concept like “Halogen”? Or, “A terminal methyl”?; To address this, cheminformatics systems have special; query languages, such as SMARTS (SMiles ARbitrary Target; Specification). SMARTS is a close cousin to SMILES, but it has; expressions instead of simple atoms and bonds. For example, [C,N]; will find an atom that is either carbon or nitrogen. IUPAC Names, Trade Names, Common Names#; Chemistry also has three other important name systems:. IUPAC NamesIUPAC; (the International; Union of Pure and Applied Chemistry) established a; naming convention that is; widely used throughout chemistry. Any chemical can be named, and; all IUPAC names are unambiguous. This textual representation is; aimed at humans, not computers: Chemists versed in IUPAC; nomenclature (which is widely taught) can read an IUPAC name and; visualize or draw the molecule. Trade NamesNames such as Tylenol™ and Valium™ are given to compounds; and formulations by manufacturers for marketing and sales purposes,; and for regulatory purposes. Common namesNames such as “asp",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/represent.html:10587,Usability,simpl,simple,10587,"8 million chemical compounds. Under the hood is a chemical registration technology based on Open Babel. The simplest query language for chemistry is SMILES itself: Just; specify a structure, such as Oc1ccccc1, and search. This is how; eMolecules’ basic searching works (see Sidebar). It’s simple and, because of the; high-performance indexes in eMolecules, is also very fast.; However, for general-purpose cheminformatics, one needs more power.; What if the substructure you’re looking for isn’t a valid molecule?; For example ClccBr (1,2- substitution on an aromatic ring) isn’t a; whole molecule, since the concept of aromaticity is only sensible; in the context of a whole ring system.; Or what if the thing we’re looking for isn’t a simple atom such as; Br, but rather a concept like “Halogen”? Or, “A terminal methyl”?; To address this, cheminformatics systems have special; query languages, such as SMARTS (SMiles ARbitrary Target; Specification). SMARTS is a close cousin to SMILES, but it has; expressions instead of simple atoms and bonds. For example, [C,N]; will find an atom that is either carbon or nitrogen. IUPAC Names, Trade Names, Common Names#; Chemistry also has three other important name systems:. IUPAC NamesIUPAC; (the International; Union of Pure and Applied Chemistry) established a; naming convention that is; widely used throughout chemistry. Any chemical can be named, and; all IUPAC names are unambiguous. This textual representation is; aimed at humans, not computers: Chemists versed in IUPAC; nomenclature (which is widely taught) can read an IUPAC name and; visualize or draw the molecule. Trade NamesNames such as Tylenol™ and Valium™ are given to compounds; and formulations by manufacturers for marketing and sales purposes,; and for regulatory purposes. Common namesNames such as “aspirin” or “alcohol” for; substances that are in widespread use. previous; Cheminformatics Basics. next; Substructure Searching with Indexes. On this page; . What is a Molecule?; Old",MatchSource.WIKI,docs/Cheminf101/represent.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/represent.html
http://openbabel.org//docs/Cheminf101/search.html:5299,Availability,down,down,5299,"structure matching.; Unfortunately, substructure matching falls into a category of; “hard” mathematical problems, which means false positives from the; index are a big problem.; Substructure matching (finding a certain functional group within a; molecule) is an example of what mathematicians call; graph isomorphism,; and is in a class of problems called; NP Complete.; Roughly speaking, this means the time it takes to do a substructure; search is non-polynomial, i.e. exponential in the number of atoms; and bonds. To see why this is a computational disaster, compare two; tasks, one that takes polynomial time,; k1*N2, versus one that takes exponential; time k2*2N. Our polynomial task is bad; enough: If we double N, it takes four times as long to solve. But; the exponential task is worse:; Every time we add an atom it doubles. So going from one atom to; two doubles the time, and going from 100 atoms to 101 atoms doubles; the time. Even if we can get k2 down to a millionth of; k1, we’re still in trouble - a million is just; 220 or twenty atoms away.; It has been mathematically proven that substructure searching is in; the set of NP Complete problems, so there’s no point wasting our; time searching for a polynomial algorithm. The good news is that; most molecules have “low connectivity”, meaning most atoms have; fewer than four bonds, unlike the weird and twisted graphs that; mathematicians consider. In practice, most substructure matching; can be done in polynomial time around N2 or; N3. But even with this improvement, substructure; matching is an “expensive” time-consuming task for a computer.; The key point is that indexing is particularly important for; cheminformatics systems. The typical modern computer can only; examine a few thousand molecules per second, so examining millions; of molecules one-by-one is out of the question. The indexing done; by a modern cheminformatics system is the key to its performance. previous; Representing Molecules. next; Molecular Simila",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/search.html:288,Deployability,Install,Install,288,"﻿. Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Substructure... Substructure Searching with Indexes#. What is Indexing?#; Indexing is pre-computing the answers to portions of expected; questions before they’re asked, so that when the question comes,; it can be answered quickly.; Take your favorite search engine (AOL, Yahoo!, Google, MSN, …); for example. Without indexing, they might wait until you ask for; “John Hartford Bluegrass”, then start searching the web, and in a; year or two find all the web pages about the deceased banjo/fiddle; player and steamboat captain. That would probably not impress you.; Instead, these search engines search the web before you ask your; question, and build an index of the words they find. When you; type in “Bluegrass John Hartford”, they already know all of the; pages that have “John”, all of the pages with “Hartford”, and all; of the pages with “Bluegrass”. Instead of searching, they examine; their index, and find pages that are on all three lists, and; quickly find your results. (NB: It’s ac",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/search.html:959,Deployability,Release,Release,959,"﻿. Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Substructure... Substructure Searching with Indexes#. What is Indexing?#; Indexing is pre-computing the answers to portions of expected; questions before they’re asked, so that when the question comes,; it can be answered quickly.; Take your favorite search engine (AOL, Yahoo!, Google, MSN, …); for example. Without indexing, they might wait until you ask for; “John Hartford Bluegrass”, then start searching the web, and in a; year or two find all the web pages about the deceased banjo/fiddle; player and steamboat captain. That would probably not impress you.; Instead, these search engines search the web before you ask your; question, and build an index of the words they find. When you; type in “Bluegrass John Hartford”, they already know all of the; pages that have “John”, all of the pages with “Hartford”, and all; of the pages with “Bluegrass”. Instead of searching, they examine; their index, and find pages that are on all three lists, and; quickly find your results. (NB: It’s ac",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/search.html:944,Energy Efficiency,Charge,Charge,944,"﻿. Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Substructure... Substructure Searching with Indexes#. What is Indexing?#; Indexing is pre-computing the answers to portions of expected; questions before they’re asked, so that when the question comes,; it can be answered quickly.; Take your favorite search engine (AOL, Yahoo!, Google, MSN, …); for example. Without indexing, they might wait until you ask for; “John Hartford Bluegrass”, then start searching the web, and in a; year or two find all the web pages about the deceased banjo/fiddle; player and steamboat captain. That would probably not impress you.; Instead, these search engines search the web before you ask your; question, and build an index of the words they find. When you; type in “Bluegrass John Hartford”, they already know all of the; pages that have “John”, all of the pages with “Hartford”, and all; of the pages with “Bluegrass”. Instead of searching, they examine; their index, and find pages that are on all three lists, and; quickly find your results. (NB: It’s ac",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/search.html:886,Modifiability,plugin,plugins,886,"﻿. Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Substructure... Substructure Searching with Indexes#. What is Indexing?#; Indexing is pre-computing the answers to portions of expected; questions before they’re asked, so that when the question comes,; it can be answered quickly.; Take your favorite search engine (AOL, Yahoo!, Google, MSN, …); for example. Without indexing, they might wait until you ask for; “John Hartford Bluegrass”, then start searching the web, and in a; year or two find all the web pages about the deceased banjo/fiddle; player and steamboat captain. That would probably not impress you.; Instead, these search engines search the web before you ask your; question, and build an index of the words they find. When you; type in “Bluegrass John Hartford”, they already know all of the; pages that have “John”, all of the pages with “Hartford”, and all; of the pages with “Bluegrass”. Instead of searching, they examine; their index, and find pages that are on all three lists, and; quickly find your results. (NB: It’s ac",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/search.html:4280,Performance,perform,performance,4280,"ontaining, “President John F. Kennedy; visited Hartford, Connecticut today…”. To confirm that the search; system has found something relevant, it must check the pages return; from the index to ensure that the specific phrase “John Hartford”; is present. However, notice that this is much faster than; searching every page, since the overwhelming majority of web pages; were instantly rejected because they have neither “John” nor; “Hartford” on them.; Similarly, a chemical fragment index serves to find only the most; likely molecules for our substructure match - anything that the; index didn’t find is definitely not a match. But we still have to; examine each of the molecules returned by the indexing system and; verify that the complete substructure for which we are searching is; present. NP-Complete - A Little about Computability#; Searching through a page of text for the words “John Hartford” is; pretty easy for a modern computer. Although false positives; returned by the index are a nuisance and impair performance, they; are not a catastrophe. Not so for substructure matching.; Unfortunately, substructure matching falls into a category of; “hard” mathematical problems, which means false positives from the; index are a big problem.; Substructure matching (finding a certain functional group within a; molecule) is an example of what mathematicians call; graph isomorphism,; and is in a class of problems called; NP Complete.; Roughly speaking, this means the time it takes to do a substructure; search is non-polynomial, i.e. exponential in the number of atoms; and bonds. To see why this is a computational disaster, compare two; tasks, one that takes polynomial time,; k1*N2, versus one that takes exponential; time k2*2N. Our polynomial task is bad; enough: If we double N, it takes four times as long to solve. But; the exponential task is worse:; Every time we add an atom it doubles. So going from one atom to; two doubles the time, and going from 100 atoms to 101 atoms doubl",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/search.html:6267,Performance,perform,performance,6267,") is an example of what mathematicians call; graph isomorphism,; and is in a class of problems called; NP Complete.; Roughly speaking, this means the time it takes to do a substructure; search is non-polynomial, i.e. exponential in the number of atoms; and bonds. To see why this is a computational disaster, compare two; tasks, one that takes polynomial time,; k1*N2, versus one that takes exponential; time k2*2N. Our polynomial task is bad; enough: If we double N, it takes four times as long to solve. But; the exponential task is worse:; Every time we add an atom it doubles. So going from one atom to; two doubles the time, and going from 100 atoms to 101 atoms doubles; the time. Even if we can get k2 down to a millionth of; k1, we’re still in trouble - a million is just; 220 or twenty atoms away.; It has been mathematically proven that substructure searching is in; the set of NP Complete problems, so there’s no point wasting our; time searching for a polynomial algorithm. The good news is that; most molecules have “low connectivity”, meaning most atoms have; fewer than four bonds, unlike the weird and twisted graphs that; mathematicians consider. In practice, most substructure matching; can be done in polynomial time around N2 or; N3. But even with this improvement, substructure; matching is an “expensive” time-consuming task for a computer.; The key point is that indexing is particularly important for; cheminformatics systems. The typical modern computer can only; examine a few thousand molecules per second, so examining millions; of molecules one-by-one is out of the question. The indexing done; by a modern cheminformatics system is the key to its performance. previous; Representing Molecules. next; Molecular Similarity. On this page; . What is Indexing?; Indexes for Chemicals; NP-Complete - A Little about Computability. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/search.html:164,Usability,Guid,Guide,164,"﻿. Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Substructure... Substructure Searching with Indexes#. What is Indexing?#; Indexing is pre-computing the answers to portions of expected; questions before they’re asked, so that when the question comes,; it can be answered quickly.; Take your favorite search engine (AOL, Yahoo!, Google, MSN, …); for example. Without indexing, they might wait until you ask for; “John Hartford Bluegrass”, then start searching the web, and in a; year or two find all the web pages about the deceased banjo/fiddle; player and steamboat captain. That would probably not impress you.; Instead, these search engines search the web before you ask your; question, and build an index of the words they find. When you; type in “Bluegrass John Hartford”, they already know all of the; pages that have “John”, all of the pages with “Hartford”, and all; of the pages with “Bluegrass”. Instead of searching, they examine; their index, and find pages that are on all three lists, and; quickly find your results. (NB: It’s ac",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/search.html:221,Usability,Guid,Guide,221,"﻿. Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Substructure... Substructure Searching with Indexes#. What is Indexing?#; Indexing is pre-computing the answers to portions of expected; questions before they’re asked, so that when the question comes,; it can be answered quickly.; Take your favorite search engine (AOL, Yahoo!, Google, MSN, …); for example. Without indexing, they might wait until you ask for; “John Hartford Bluegrass”, then start searching the web, and in a; year or two find all the web pages about the deceased banjo/fiddle; player and steamboat captain. That would probably not impress you.; Instead, these search engines search the web before you ask your; question, and build an index of the words they find. When you; type in “Bluegrass John Hartford”, they already know all of the; pages that have “John”, all of the pages with “Hartford”, and all; of the pages with “Bluegrass”. Instead of searching, they examine; their index, and find pages that are on all three lists, and; quickly find your results. (NB: It’s ac",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/search.html:979,Usability,Guid,Guide,979,"﻿. Substructure Searching with Indexes — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Substructure... Substructure Searching with Indexes#. What is Indexing?#; Indexing is pre-computing the answers to portions of expected; questions before they’re asked, so that when the question comes,; it can be answered quickly.; Take your favorite search engine (AOL, Yahoo!, Google, MSN, …); for example. Without indexing, they might wait until you ask for; “John Hartford Bluegrass”, then start searching the web, and in a; year or two find all the web pages about the deceased banjo/fiddle; player and steamboat captain. That would probably not impress you.; Instead, these search engines search the web before you ask your; question, and build an index of the words they find. When you; type in “Bluegrass John Hartford”, they already know all of the; pages that have “John”, all of the pages with “Hartford”, and all; of the pages with “Bluegrass”. Instead of searching, they examine; their index, and find pages that are on all three lists, and; quickly find your results. (NB: It’s ac",MatchSource.WIKI,docs/Cheminf101/search.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/search.html
http://openbabel.org//docs/Cheminf101/similarity.html:4083,Availability,avail,available,4083,"tion”) of a molecule to other molecules. The “electronic; surface” of the molecule is the important bit - the part that can; interact with other molecules. 3D searches compare the surfaces of; two molecules, and how polarized or polarizable each bit of the; surface is.; 3D similarity searches are uncommon, for two reasons: It’s; difficult and it’s slow. The difficulty comes from the complexity; of molecular interactions - a molecule is not a fixed shape, but; rather a dynamic object that changes according to its environment.; And the slowness comes from the difficulty: To get better results,; scientists employ more and more complex programs. Physical PropertiesThe above 2D and 3D similarity are based on the molecule’s; structure. Another technique compares the properties - either; computed or measured or both - and declares that molecules with; many properties in common are likely to have similar structure. It; is the idea of QSAR taken to the database. Clustering“Clustering” is the process of differentiating a set of things into; groups where each group has common features. Molecules can be; clustered using a variety of techniques, such as common 2D and/or; 3D features.; Note that clustering is not a similarity metric per se (the topic; of this section), but it may use various similarity metrics when; computing clusters. It is included here because it can be used as a; “cheap substitute”. That is, when someone wants to find compounds; similar to a known compound, you can show them the group (the; cluster) to which the compound belongs. It allows you to; pre-compute the clusters, spending lots of computational time up; front, and then give answers very quickly. Many cheminformatics databases have one or more similarity searches; available. previous; Substructure Searching with Indexes. next; Chemical Registration Systems. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:273,Deployability,Install,Install,273,"﻿. Molecular Similarity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Molecular Similarity. Molecular Similarity#; Substructure searching is a very powerful technique, but sometimes; it misses answers for seemingly trivial differences. We saw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; s",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:944,Deployability,Release,Release,944,"﻿. Molecular Similarity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Molecular Similarity. Molecular Similarity#; Substructure searching is a very powerful technique, but sometimes; it misses answers for seemingly trivial differences. We saw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; s",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:2082,Deployability,configurat,configurationOne,2082,"aw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; similarity metrics can be found in section 5.3 of the; Daylight Theory Manual. 3D configurationOne of the most important uses of similarity is in the discovery of; new drugs, and a molecule’s shape is critical to it’s medicinal; value (see QSAR).; 3D similarity searches compare the configuration (also called the; “conformation”) of a molecule to other molecules. The “electronic; surface” of the molecule is the important bit - the part that can; interact with other molecules. 3D searches compare the surfaces of; two molecules, and how polarized or polarizable each bit of the; surface is.; 3D similarity searches are uncommon, for two reasons: It’s; difficult and it’s slow. The difficulty comes from the complexity; of molecular interactions - a molecule is not a fixed shape, but; rather a dynamic object that changes according to its environment.; And the slowness comes from the difficulty: To get better results,; scientists employ more and more complex programs. Physical PropertiesThe above 2D and 3D similarity are based on the molecule’s; structure. Another technique compares the properties - either; computed or measured or both - and declares th",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:2283,Deployability,configurat,configuration,2283,"is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; similarity metrics can be found in section 5.3 of the; Daylight Theory Manual. 3D configurationOne of the most important uses of similarity is in the discovery of; new drugs, and a molecule’s shape is critical to it’s medicinal; value (see QSAR).; 3D similarity searches compare the configuration (also called the; “conformation”) of a molecule to other molecules. The “electronic; surface” of the molecule is the important bit - the part that can; interact with other molecules. 3D searches compare the surfaces of; two molecules, and how polarized or polarizable each bit of the; surface is.; 3D similarity searches are uncommon, for two reasons: It’s; difficult and it’s slow. The difficulty comes from the complexity; of molecular interactions - a molecule is not a fixed shape, but; rather a dynamic object that changes according to its environment.; And the slowness comes from the difficulty: To get better results,; scientists employ more and more complex programs. Physical PropertiesThe above 2D and 3D similarity are based on the molecule’s; structure. Another technique compares the properties - either; computed or measured or both - and declares that molecules with; many properties in common are likely to have similar structure. It; is the idea of QSAR taken to the database. Clustering“Cl",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:929,Energy Efficiency,Charge,Charge,929,"﻿. Molecular Similarity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Molecular Similarity. Molecular Similarity#; Substructure searching is a very powerful technique, but sometimes; it misses answers for seemingly trivial differences. We saw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; s",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:1070,Energy Efficiency,power,powerful,1070,"ent. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Molecular Similarity. Molecular Similarity#; Substructure searching is a very powerful technique, but sometimes; it misses answers for seemingly trivial differences. We saw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; similarity metrics can be found in section 5.3 of the; Daylight Theory Manual. 3D con",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:871,Modifiability,plugin,plugins,871,"﻿. Molecular Similarity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Molecular Similarity. Molecular Similarity#; Substructure searching is a very powerful technique, but sometimes; it misses answers for seemingly trivial differences. We saw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; s",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:2082,Modifiability,config,configurationOne,2082,"aw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; similarity metrics can be found in section 5.3 of the; Daylight Theory Manual. 3D configurationOne of the most important uses of similarity is in the discovery of; new drugs, and a molecule’s shape is critical to it’s medicinal; value (see QSAR).; 3D similarity searches compare the configuration (also called the; “conformation”) of a molecule to other molecules. The “electronic; surface” of the molecule is the important bit - the part that can; interact with other molecules. 3D searches compare the surfaces of; two molecules, and how polarized or polarizable each bit of the; surface is.; 3D similarity searches are uncommon, for two reasons: It’s; difficult and it’s slow. The difficulty comes from the complexity; of molecular interactions - a molecule is not a fixed shape, but; rather a dynamic object that changes according to its environment.; And the slowness comes from the difficulty: To get better results,; scientists employ more and more complex programs. Physical PropertiesThe above 2D and 3D similarity are based on the molecule’s; structure. Another technique compares the properties - either; computed or measured or both - and declares th",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:2283,Modifiability,config,configuration,2283,"is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; similarity metrics can be found in section 5.3 of the; Daylight Theory Manual. 3D configurationOne of the most important uses of similarity is in the discovery of; new drugs, and a molecule’s shape is critical to it’s medicinal; value (see QSAR).; 3D similarity searches compare the configuration (also called the; “conformation”) of a molecule to other molecules. The “electronic; surface” of the molecule is the important bit - the part that can; interact with other molecules. 3D searches compare the surfaces of; two molecules, and how polarized or polarizable each bit of the; surface is.; 3D similarity searches are uncommon, for two reasons: It’s; difficult and it’s slow. The difficulty comes from the complexity; of molecular interactions - a molecule is not a fixed shape, but; rather a dynamic object that changes according to its environment.; And the slowness comes from the difficulty: To get better results,; scientists employ more and more complex programs. Physical PropertiesThe above 2D and 3D similarity are based on the molecule’s; structure. Another technique compares the properties - either; computed or measured or both - and declares that molecules with; many properties in common are likely to have similar structure. It; is the idea of QSAR taken to the database. Clustering“Cl",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:149,Usability,Guid,Guide,149,"﻿. Molecular Similarity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Molecular Similarity. Molecular Similarity#; Substructure searching is a very powerful technique, but sometimes; it misses answers for seemingly trivial differences. We saw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; s",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:206,Usability,Guid,Guide,206,"﻿. Molecular Similarity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Molecular Similarity. Molecular Similarity#; Substructure searching is a very powerful technique, but sometimes; it misses answers for seemingly trivial differences. We saw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; s",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Cheminf101/similarity.html:964,Usability,Guid,Guide,964,"﻿. Molecular Similarity — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Cheminformatics Basics; Representing Molecules; Substructure Searching with Indexes; Molecular Similarity; Chemical Registration Systems. Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Cheminformatics 101; Molecular Similarity. Molecular Similarity#; Substructure searching is a very powerful technique, but sometimes; it misses answers for seemingly trivial differences. We saw this; earlier with the following:. Query; Target. We’re looking; for; steroids…; But we don’t find this one because of; the double bond. It is somewhat like searching for “221b Baker Street” and finding; nothing because the database contains “221B Baker Street” and the; system doesn’t consider “b” and “B” a match.; A good similarity search would find the target structure shown; above, because even though it is not a substructure match, it is; highly similar to our query.; There are many ways to measure similarity. 2D topologyThe best-known and most widely used similarity metrics compare the; two-dimensional topology, that is, they only use the molecule’s; atoms and bonds without considering its shape.; Tanimoto similarity is perhaps the best known as it is easy to; implement and fast to compute. An excellent summary of 2D; s",MatchSource.WIKI,docs/Cheminf101/similarity.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Cheminf101/similarity.html
http://openbabel.org//docs/Command-line_tools/babel.html:2681,Availability,avail,available,2681,"xample, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will guess the file type from the filename extension. For information on the file formats supported by Open Babel, please see Supported File Formats and Options. If text is provided using the -: notation, SMILES are assumed by default if an input format is not specified. -a <options>; Format-specific input options. Use -H <format-ID> to see options; allowed by a particular format, or see the appropriate section in; Supported File Formats and Options. --add <list>; Add properties (for SDF, CML, etc.) from descriptors in list. Use; -L descriptors to see available descriptors. --addfilename; Add the input filename to the title. --addinindex; Append input index to title (that is, the index before any filtering). --addoutindex; Append output index to title (that is, the index after any filtering). --addpolarh; Like -h, but only adds hydrogens to polar atoms. --addtotitle <text>; Append the text after each molecule title. --append <list>; Append properties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structu",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:3818,Availability,error,errors,3818,"at is, the index before any filtering). --addoutindex; Append output index to title (that is, the index after any filtering). --addpolarh; Like -h, but only adds hydrogens to polar atoms. --addtotitle <text>; Append the text after each molecule title. --append <list>; Append properties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates.",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:3918,Availability,error,errorlevel,3918,"ut only adds hydrogens to polar atoms. --addtotitle <text>; Append the text after each molecule title. --append <list>; Append properties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --hig",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:3954,Availability,error,errors,3954,"ut only adds hydrogens to polar atoms. --addtotitle <text>; Append the text after each molecule title. --append <list>; Append properties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --hig",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:3999,Availability,error,errors,3999,"perties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --highlight <substructure color>; Highlight substructures in 2D depictions. Valid; colors are black, gray, white, red, green, blue, yell",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:6440,Availability,avail,available,6440,"ing keywords. See; the computational chemistry formats (Computational chemistry formats),; for example GAMESS Input (gamin, inp) and Gaussian Input (com, gau, gjc, gjf). -l <#>; For multiple entry input, stop import with molecule # as the last; entry. --largest <#N descriptor>; Only convert the N molecules which have the largest values of the; specified descriptor. Preceding the descriptor by ~ inverts; this filter. -m; Produce multiple output files, to allow:. Splitting one input file - put each molecule into consecutively; numbered output files; Batch conversion - convert each of multiple input files into a; specified output format. --minimize <options>; Forcefield energy minimization. See Forcefield energy and minimization. -o <format-ID>; Specifies output format. See Supported File Formats and Options. -p <pH>; Add hydrogens appropriate for pH (use transforms in phmodel.txt). --partialcharge <charge-method>; Calculate partial charges by the specified method. List available methods; using obabel -L charges. --property <name value>; Add or replace a property (for example, in an SD file). -r; Remove all but the largest contiguous fragment (strip salts). --readconformer; Combine adjacent conformers in multi-molecule input into a single molecule.; If a molecule has the same structure as the preceding molecule, as; determined from its SMILES, it is not output but its coordinates are; added to the preceding molecule as an additional conformer. There can; be multiple groups of conformers, but the molecules in each group must; be adjacent. -s <SMARTS>; Convert only molecules matching the SMARTS pattern specified. -s <filename.xxx>; Convert only molecules with the molecule in the file as a substructure. --separate; Separate disconnected fragments into individual molecular records. --smallest <#N descriptor>; Only convert the N molecules which have the smallest values of the; specified descriptor. Preceding the descriptor by ~ inverts this; filter. --sort; Output molecules ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:17155,Availability,avail,available,17155,"like this:; obabel filterset.sdf -osmi --filter ""MW<130 ROTATABLE_BOND > 2"". It takes one parameter which probably needs to be enclosed in double quotes to avoid confusing the shell or operating system. (You don’t need the quotes with the Windows GUI.) The parameter contains one or more conditional tests. By default, these have all to be true for the molecule to be converted. As well as this implicit AND behaviour, you can write a full Boolean expression (see below). As you can see, there can be spaces or not in sensible places and the conditional tests could be separated by a comma or semicolon.; You can filter on two types of property:. An SDF property, as the identifier ROTATABLE_BOND could be. There is no need for it to be previously known to Open Babel.; A descriptor name (internally, an ID of an OBDescriptor object). This is a plug-in class so that new objects can easily be added. MW is the ID of a descriptor which calculates molecular weight. You can see a list of available descriptors using:; obabel -L descriptors. or from a menu item in the GUI. Faster filtering; Open Babel provides a number of utility file formats (see Supported File Formats and Options). Of these, using the copy format as the output format is particularly useful when filtering (see Copy raw text (copy)). This copies the content of the molecular file directly from input to output. If you are not converting the molecules between different formats, this procedure is much faster and avoids any possibility of information loss.; In addition, if you are converting SDF files and are filtering based on the title, you should consider using -aT (see MDL MOL format (mdl, mol, sd, sdf)). Rather than perceiving the chemistry of the entire molecule, this option will only read in the title. The descriptor names are case-insensitive. With the property names currently, you need to get the case right. Both types of identifier can contain letters, numbers and underscores, ‘_’. Properties can contain spaces, b",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:19811,Availability,error,error,19811,"perty does not have a conditional test, then it returns true only if it exists. So:; obabel filterset.sdf -osmi --filter ""ROTATABLE_BOND MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation of a descriptor involved a lot of computation, it would pay to include it late in the boolean expression so that there is a chance it is skipped for some molecules.; Descriptors must have a conditional test and it is an error if they don’t. The default test, as used by MW or logP, is a numerical one, but the parsing of the text, and what the test does is defined in each descriptor’s code (a virtual function in the OBDescriptor class). Three examples of this are described in the following sections. String descriptors#; obabel filterset.sdf -osmi --filter ""title='Ethanol'"". The descriptor title, when followed by a string (here enclosed by single quotes), does a case-sensitive string comparison. (‘ethanol’ wouldn’t match anything in the example file.) The comparison does not have to be just equality:; obabel filterset.sdf -osmi --filter ""title>='D'"". converts molecules with titles Dimethyl Ether and Ethanol in the example file.; It is not always necessary to use the single quotes when the meaning is unambiguous: the two examples above work without them. But a numerical, rather than a string, comparison is made if both operands can be converted to numbers. This can be useful:; obabel fil",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27465,Availability,avail,available,27465,"roup is expanded and the ‘real’ atoms given reasonable coordinates if the the molecule is 2D or 3D. Writing in alias form, rather than the ‘real’ structure, requires the use of the -xA option. SVGFormat will also display any aliases present in a molecule if the -xA option is set.; The alias names that are recognized are in the file superatoms.txt which can be edited.; Normal molecules can have certain common groups given alternative alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --ne",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28286,Availability,avail,available,28286,"al Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules or substructures#; The --align option aligns molecules to the first molecule provided.; It is typically used with the -s option to specify an alignment; based on a substructure:; obabel pattern.www dataset.xxx -O outset.yyy -s SMARTS --align. Here, only molecules matching the specified SMARTS pattern are converted; and are aligned by; having all their atom coordinates modified. The atoms that are; used in the alignment are those matched by SMARTS i",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:31119,Availability,avail,available,31119,"in a 2D display of a set of molecules.; 0D molecules, for example from SMILES, are given 2D coordinates before; alignment.; See documentation for the -s option for its other possible; parameters. For example, the matching atoms could be those; of a molecule in a specified file.; If the -s option is not used, all of the atoms in the first molecule; are used as pattern atoms. The order of the atoms must be the same; in all the molecules.; The output molecules have a property (represented internally as; OBPairData) called rmsd, which is a measure of the quality; of the fit. To attach it to the title of each molecule use; --append rmsd.; To output the two conformers closest to the first conformer in a dataset:; obabel dataset.xxx -O outset.yyy --align --smallest 2 rmsd. Specifying the speed of 3D coordinate generation#; When you use the --gen3d option, you can specify the speed and quality. The following shows typical usage:; obabel infile.smi -O out.sdf --gen3d fastest. The available options are as follows:. option; description. fastest; No cleanup. fast; Force field cleanup (100 cycles). med (default); Force field cleanup (100 cycles) + Fast rotor search (only one permutation). slow; Force field cleanup (250 cycles) + Fast rotor search (permute central rotors). slowest; Force field cleanup (500 cycles) + Slow rotor search. better; Same as slow. best; Same as slowest. dist, dg; Use distance geometry method (unstable). You can also specify the speed by an integer from 1 (slowest) to 5 (fastest). previous; Install Open Babel. next; The Open Babel GUI. On this page; . Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; String descriptors; SMARTS descriptor; InChI descriptor. Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Truncated InChI; Multiple files. Aliases for chemical groups; Forcefield energy and minimization; Alig",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:306,Deployability,Install,Install,306,"﻿. obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<te",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:839,Deployability,Release,Release,839,"﻿. obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<te",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28935,Deployability,update,update,28935,"efield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules or substructures#; The --align option aligns molecules to the first molecule provided.; It is typically used with the -s option to specify an alignment; based on a substructure:; obabel pattern.www dataset.xxx -O outset.yyy -s SMARTS --align. Here, only molecules matching the specified SMARTS pattern are converted; and are aligned by; having all their atom coordinates modified. The atoms that are; used in the alignment are those matched by SMARTS in the first; output molecule. The subsequent molecules are aligned so that; the coordinates of atoms equivalent to these are as nearly as; possible the same as those of the pattern atoms.; The atoms in the various molecules can be in any order.; Tha alignment ignores hydrogen atoms but includes symmetry.; Note that the standalone program obfit has similar functionality.; The first inp",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:31660,Deployability,Install,Install,31660,"uld be those; of a molecule in a specified file.; If the -s option is not used, all of the atoms in the first molecule; are used as pattern atoms. The order of the atoms must be the same; in all the molecules.; The output molecules have a property (represented internally as; OBPairData) called rmsd, which is a measure of the quality; of the fit. To attach it to the title of each molecule use; --append rmsd.; To output the two conformers closest to the first conformer in a dataset:; obabel dataset.xxx -O outset.yyy --align --smallest 2 rmsd. Specifying the speed of 3D coordinate generation#; When you use the --gen3d option, you can specify the speed and quality. The following shows typical usage:; obabel infile.smi -O out.sdf --gen3d fastest. The available options are as follows:. option; description. fastest; No cleanup. fast; Force field cleanup (100 cycles). med (default); Force field cleanup (100 cycles) + Fast rotor search (only one permutation). slow; Force field cleanup (250 cycles) + Fast rotor search (permute central rotors). slowest; Force field cleanup (500 cycles) + Slow rotor search. better; Same as slow. best; Same as slowest. dist, dg; Use distance geometry method (unstable). You can also specify the speed by an integer from 1 (slowest) to 5 (fastest). previous; Install Open Babel. next; The Open Babel GUI. On this page; . Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; String descriptors; SMARTS descriptor; InChI descriptor. Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Truncated InChI; Multiple files. Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:824,Energy Efficiency,Charge,Charge,824,"﻿. obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<te",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:1552,Energy Efficiency,charge,charges,1552,"Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will guess the file type from the filename extension. For information on the file formats supported by Open Babel, please see Supported File Formats and Options. If text is provided using the -: notation, SMILES are assumed by default if an input format is not specified. -a <options>; Format-specific input options. Use -H <format-ID> to see options; allowed by a particular format, or see the appropriate section in; Supported File Formats and Options. ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:3588,Energy Efficiency,energy,energy,3588,"ons. --add <list>; Add properties (for SDF, CML, etc.) from descriptors in list. Use; -L descriptors to see available descriptors. --addfilename; Add the input filename to the title. --addinindex; Append input index to title (that is, the index before any filtering). --addoutindex; Append output index to title (that is, the index after any filtering). --addpolarh; Like -h, but only adds hydrogens to polar atoms. --addtotitle <text>; Append the text after each molecule title. --append <list>; Append properties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original c",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:3828,Energy Efficiency,energy,energy,3828,"ndex; Append output index to title (that is, the index after any filtering). --addpolarh; Like -h, but only adds hydrogens to polar atoms. --addtotitle <text>; Append the text after each molecule title. --append <list>; Append properties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Spe",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:3857,Energy Efficiency,energy,energy,3857,"ndex; Append output index to title (that is, the index after any filtering). --addpolarh; Like -h, but only adds hydrogens to polar atoms. --addtotitle <text>; Append the text after each molecule title. --append <list>; Append properties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Spe",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:3891,Energy Efficiency,energy,energy,3891,"the index after any filtering). --addpolarh; Like -h, but only adds hydrogens to polar atoms. --addtotitle <text>; Append the text after each molecule title. --append <list>; Append properties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:5064,Energy Efficiency,green,green,5064,"tional messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --highlight <substructure color>; Highlight substructures in 2D depictions. Valid; colors are black, gray, white, red, green, blue, yellow,; cyan, purple, teal and olive. Additional colors may be; specified as hexadecimal RGB values preceded by #.; Multiple substructures and corresponding colors may be; specified. -i <format-ID>; Specifies input format. See Supported File Formats and Options. -j, --join; Join all input molecules into a single output molecule entry. -k; Translate computational chemistry modeling keywords. See; the computational chemistry formats (Computational chemistry formats),; for example GAMESS Input (gamin, inp) and Gaussian Input (com, gau, gjc, gjf). -l <#>; For multiple entry input, stop import with molecule # as the last; entry. --largest <#N descriptor>; Only convert the N molecules which have the largest values of the; specified descriptor. Preceding the descriptor by ~ inverts; this filter. -m; Produce multiple output files, to allow:. Splitting one input file - put each molecule into consecutively; numbered output files; Batch conversion - convert each of multiple input files ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:6134,Energy Efficiency,energy,energy,6134,"colors may be; specified as hexadecimal RGB values preceded by #.; Multiple substructures and corresponding colors may be; specified. -i <format-ID>; Specifies input format. See Supported File Formats and Options. -j, --join; Join all input molecules into a single output molecule entry. -k; Translate computational chemistry modeling keywords. See; the computational chemistry formats (Computational chemistry formats),; for example GAMESS Input (gamin, inp) and Gaussian Input (com, gau, gjc, gjf). -l <#>; For multiple entry input, stop import with molecule # as the last; entry. --largest <#N descriptor>; Only convert the N molecules which have the largest values of the; specified descriptor. Preceding the descriptor by ~ inverts; this filter. -m; Produce multiple output files, to allow:. Splitting one input file - put each molecule into consecutively; numbered output files; Batch conversion - convert each of multiple input files into a; specified output format. --minimize <options>; Forcefield energy minimization. See Forcefield energy and minimization. -o <format-ID>; Specifies output format. See Supported File Formats and Options. -p <pH>; Add hydrogens appropriate for pH (use transforms in phmodel.txt). --partialcharge <charge-method>; Calculate partial charges by the specified method. List available methods; using obabel -L charges. --property <name value>; Add or replace a property (for example, in an SD file). -r; Remove all but the largest contiguous fragment (strip salts). --readconformer; Combine adjacent conformers in multi-molecule input into a single molecule.; If a molecule has the same structure as the preceding molecule, as; determined from its SMILES, it is not output but its coordinates are; added to the preceding molecule as an additional conformer. There can; be multiple groups of conformers, but the molecules in each group must; be adjacent. -s <SMARTS>; Convert only molecules matching the SMARTS pattern specified. -s <filename.xxx>; Convert only m",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:6170,Energy Efficiency,energy,energy,6170,"ues preceded by #.; Multiple substructures and corresponding colors may be; specified. -i <format-ID>; Specifies input format. See Supported File Formats and Options. -j, --join; Join all input molecules into a single output molecule entry. -k; Translate computational chemistry modeling keywords. See; the computational chemistry formats (Computational chemistry formats),; for example GAMESS Input (gamin, inp) and Gaussian Input (com, gau, gjc, gjf). -l <#>; For multiple entry input, stop import with molecule # as the last; entry. --largest <#N descriptor>; Only convert the N molecules which have the largest values of the; specified descriptor. Preceding the descriptor by ~ inverts; this filter. -m; Produce multiple output files, to allow:. Splitting one input file - put each molecule into consecutively; numbered output files; Batch conversion - convert each of multiple input files into a; specified output format. --minimize <options>; Forcefield energy minimization. See Forcefield energy and minimization. -o <format-ID>; Specifies output format. See Supported File Formats and Options. -p <pH>; Add hydrogens appropriate for pH (use transforms in phmodel.txt). --partialcharge <charge-method>; Calculate partial charges by the specified method. List available methods; using obabel -L charges. --property <name value>; Add or replace a property (for example, in an SD file). -r; Remove all but the largest contiguous fragment (strip salts). --readconformer; Combine adjacent conformers in multi-molecule input into a single molecule.; If a molecule has the same structure as the preceding molecule, as; determined from its SMILES, it is not output but its coordinates are; added to the preceding molecule as an additional conformer. There can; be multiple groups of conformers, but the molecules in each group must; be adjacent. -s <SMARTS>; Convert only molecules matching the SMARTS pattern specified. -s <filename.xxx>; Convert only molecules with the molecule in the file as a sub",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:6368,Energy Efficiency,charge,charge-method,6368,"output molecule entry. -k; Translate computational chemistry modeling keywords. See; the computational chemistry formats (Computational chemistry formats),; for example GAMESS Input (gamin, inp) and Gaussian Input (com, gau, gjc, gjf). -l <#>; For multiple entry input, stop import with molecule # as the last; entry. --largest <#N descriptor>; Only convert the N molecules which have the largest values of the; specified descriptor. Preceding the descriptor by ~ inverts; this filter. -m; Produce multiple output files, to allow:. Splitting one input file - put each molecule into consecutively; numbered output files; Batch conversion - convert each of multiple input files into a; specified output format. --minimize <options>; Forcefield energy minimization. See Forcefield energy and minimization. -o <format-ID>; Specifies output format. See Supported File Formats and Options. -p <pH>; Add hydrogens appropriate for pH (use transforms in phmodel.txt). --partialcharge <charge-method>; Calculate partial charges by the specified method. List available methods; using obabel -L charges. --property <name value>; Add or replace a property (for example, in an SD file). -r; Remove all but the largest contiguous fragment (strip salts). --readconformer; Combine adjacent conformers in multi-molecule input into a single molecule.; If a molecule has the same structure as the preceding molecule, as; determined from its SMILES, it is not output but its coordinates are; added to the preceding molecule as an additional conformer. There can; be multiple groups of conformers, but the molecules in each group must; be adjacent. -s <SMARTS>; Convert only molecules matching the SMARTS pattern specified. -s <filename.xxx>; Convert only molecules with the molecule in the file as a substructure. --separate; Separate disconnected fragments into individual molecular records. --smallest <#N descriptor>; Only convert the N molecules which have the smallest values of the; specified descriptor. Preceding ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:6402,Energy Efficiency,charge,charges,6402,"output molecule entry. -k; Translate computational chemistry modeling keywords. See; the computational chemistry formats (Computational chemistry formats),; for example GAMESS Input (gamin, inp) and Gaussian Input (com, gau, gjc, gjf). -l <#>; For multiple entry input, stop import with molecule # as the last; entry. --largest <#N descriptor>; Only convert the N molecules which have the largest values of the; specified descriptor. Preceding the descriptor by ~ inverts; this filter. -m; Produce multiple output files, to allow:. Splitting one input file - put each molecule into consecutively; numbered output files; Batch conversion - convert each of multiple input files into a; specified output format. --minimize <options>; Forcefield energy minimization. See Forcefield energy and minimization. -o <format-ID>; Specifies output format. See Supported File Formats and Options. -p <pH>; Add hydrogens appropriate for pH (use transforms in phmodel.txt). --partialcharge <charge-method>; Calculate partial charges by the specified method. List available methods; using obabel -L charges. --property <name value>; Add or replace a property (for example, in an SD file). -r; Remove all but the largest contiguous fragment (strip salts). --readconformer; Combine adjacent conformers in multi-molecule input into a single molecule.; If a molecule has the same structure as the preceding molecule, as; determined from its SMILES, it is not output but its coordinates are; added to the preceding molecule as an additional conformer. There can; be multiple groups of conformers, but the molecules in each group must; be adjacent. -s <SMARTS>; Convert only molecules matching the SMARTS pattern specified. -s <filename.xxx>; Convert only molecules with the molecule in the file as a substructure. --separate; Separate disconnected fragments into individual molecular records. --smallest <#N descriptor>; Only convert the N molecules which have the smallest values of the; specified descriptor. Preceding ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:6475,Energy Efficiency,charge,charges,6475,"ing keywords. See; the computational chemistry formats (Computational chemistry formats),; for example GAMESS Input (gamin, inp) and Gaussian Input (com, gau, gjc, gjf). -l <#>; For multiple entry input, stop import with molecule # as the last; entry. --largest <#N descriptor>; Only convert the N molecules which have the largest values of the; specified descriptor. Preceding the descriptor by ~ inverts; this filter. -m; Produce multiple output files, to allow:. Splitting one input file - put each molecule into consecutively; numbered output files; Batch conversion - convert each of multiple input files into a; specified output format. --minimize <options>; Forcefield energy minimization. See Forcefield energy and minimization. -o <format-ID>; Specifies output format. See Supported File Formats and Options. -p <pH>; Add hydrogens appropriate for pH (use transforms in phmodel.txt). --partialcharge <charge-method>; Calculate partial charges by the specified method. List available methods; using obabel -L charges. --property <name value>; Add or replace a property (for example, in an SD file). -r; Remove all but the largest contiguous fragment (strip salts). --readconformer; Combine adjacent conformers in multi-molecule input into a single molecule.; If a molecule has the same structure as the preceding molecule, as; determined from its SMILES, it is not output but its coordinates are; added to the preceding molecule as an additional conformer. There can; be multiple groups of conformers, but the molecules in each group must; be adjacent. -s <SMARTS>; Convert only molecules matching the SMARTS pattern specified. -s <filename.xxx>; Convert only molecules with the molecule in the file as a substructure. --separate; Separate disconnected fragments into individual molecular records. --smallest <#N descriptor>; Only convert the N molecules which have the smallest values of the; specified descriptor. Preceding the descriptor by ~ inverts this; filter. --sort; Output molecules ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:14618,Energy Efficiency,energy,energy,14618,"iptor IDs or property names together in a single set of quotes.; If the name of the property in the SDF file (internally the Attribute in OBPairData) contains spaces, these spaces should be replaced by underscore characters, ‘_’. So the example above would also work for a property named CAT NO.; By default, the extra items are added to the title separated by spaces. But if the first character in the parameter is a punctuation character other than ‘_’, it is used as the separator instead. If the list starts with “t”, a tab character is used as a separator. Generating conformers for structures#; The command line option --conformer allows performing conformer; searches using a range of different algorithms and options:. --log - output a log of the energies (default = no log); --nconf # - number of conformers to generate. Forcefield-based methods for finding stable conformers:. --systematic - systematically (exhaustively) generate all conformers; --random - randomly generate conformers; --weighted - weighted rotor search for lowest energy conformer; --ff <name> - select a forcefield (default = MMFF94). Genetic algorithm based methods (default):. --children # - number of children to generate for each parent (default = 5); --mutability # - mutation frequency (default = 5); --converge # - number of identical generations before convergence is reached; --score # - scoring function [rmsd|energy] (default = rmsd). You can use them like this (to generate 50 conformers, scoring with; MMFF94 energies but default genetic algorithm options):; obabel EtOT5D.cml -O EtOT5D0.xyz --conformer --nconf 50 --score energy. or if you also wish to generate 3D coordinates, followed by conformer; searching try something like this:; obabel ligand.babel.smi -O ligand.babel.sdf --gen3d --conformer --nconf 20 --weighted. Filtering molecules from a multimolecule file#; Six of the options above can be used to filter molecules:. -s - convert molecules that match a SMARTS string; -v - convert molecules t",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:14975,Energy Efficiency,energy,energy,14975,"NO.; By default, the extra items are added to the title separated by spaces. But if the first character in the parameter is a punctuation character other than ‘_’, it is used as the separator instead. If the list starts with “t”, a tab character is used as a separator. Generating conformers for structures#; The command line option --conformer allows performing conformer; searches using a range of different algorithms and options:. --log - output a log of the energies (default = no log); --nconf # - number of conformers to generate. Forcefield-based methods for finding stable conformers:. --systematic - systematically (exhaustively) generate all conformers; --random - randomly generate conformers; --weighted - weighted rotor search for lowest energy conformer; --ff <name> - select a forcefield (default = MMFF94). Genetic algorithm based methods (default):. --children # - number of children to generate for each parent (default = 5); --mutability # - mutation frequency (default = 5); --converge # - number of identical generations before convergence is reached; --score # - scoring function [rmsd|energy] (default = rmsd). You can use them like this (to generate 50 conformers, scoring with; MMFF94 energies but default genetic algorithm options):; obabel EtOT5D.cml -O EtOT5D0.xyz --conformer --nconf 50 --score energy. or if you also wish to generate 3D coordinates, followed by conformer; searching try something like this:; obabel ligand.babel.smi -O ligand.babel.sdf --gen3d --conformer --nconf 20 --weighted. Filtering molecules from a multimolecule file#; Six of the options above can be used to filter molecules:. -s - convert molecules that match a SMARTS string; -v - convert molecules that don’t match a SMARTS string; -f and -l - convert molecules in a certain range; --unique - only convert unique molecules (that is, remove duplicates); --filter - convert molecules that meet specified chemical (and other) criteria. This section focuses on the --filter option, which is very",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:15191,Energy Efficiency,energy,energy,15191,"e command line option --conformer allows performing conformer; searches using a range of different algorithms and options:. --log - output a log of the energies (default = no log); --nconf # - number of conformers to generate. Forcefield-based methods for finding stable conformers:. --systematic - systematically (exhaustively) generate all conformers; --random - randomly generate conformers; --weighted - weighted rotor search for lowest energy conformer; --ff <name> - select a forcefield (default = MMFF94). Genetic algorithm based methods (default):. --children # - number of children to generate for each parent (default = 5); --mutability # - mutation frequency (default = 5); --converge # - number of identical generations before convergence is reached; --score # - scoring function [rmsd|energy] (default = rmsd). You can use them like this (to generate 50 conformers, scoring with; MMFF94 energies but default genetic algorithm options):; obabel EtOT5D.cml -O EtOT5D0.xyz --conformer --nconf 50 --score energy. or if you also wish to generate 3D coordinates, followed by conformer; searching try something like this:; obabel ligand.babel.smi -O ligand.babel.sdf --gen3d --conformer --nconf 20 --weighted. Filtering molecules from a multimolecule file#; Six of the options above can be used to filter molecules:. -s - convert molecules that match a SMARTS string; -v - convert molecules that don’t match a SMARTS string; -f and -l - convert molecules in a certain range; --unique - only convert unique molecules (that is, remove duplicates); --filter - convert molecules that meet specified chemical (and other) criteria. This section focuses on the --filter option, which is very versatile and can select a subset of molecules based either on properties imported with the molecule (as from a SDF file) or from calculations made by Open Babel on the molecule.; The aim has been to make the option flexible and intuitive to use; don’t be put off by the long description.; You use it like thi",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:25409,Energy Efficiency,charge,charge,25409,"ereochemical information),’title’ and truncated InChI (see below).; A message is output for each duplicate found:; Removed methyl benzene - a duplicate of toluene (#1). Clearly, this is more useful if each molecule has a title. The (#1) is the number of duplicates found so far.; If you wanted to identify duplicates but not output the unique molecules, you could use the null format:; obabel infile.xxx -onul --unique. Truncated InChI#; It is possible to relax the criterion by which molecules are regarded as “chemically identical” by using a truncated InChI specification as param. This takes advantage of the layered structure of InChI. So to remove duplicates, treating stereoisomers as the same molecule:; obabel infile.xxx outfile.yyy --unique /nostereo. Truncated InChI specifications start with / and are case-sensitive. param can be a concatenation of these e.g. /nochg/noiso:; /formula formula only; /connect formula and connectivity only; /nostereo ignore E/Z and sp3 stereochemistry; /nosp3 ignore sp3 stereochemistry; /noEZ ignore E/Z stereoochemistry; /nochg ignore charge and protonation; /noiso ignore isotopes. Multiple files#; The input molecules do not have to be in a single file. So to collect all the unique molecules from a set of MOL files:; obabel *.mol uniquemols.sdf --unique. If you want the unique molecules to remain in individual files:; obabel *.mol U.mol -m --unique. On the GUI use the form:; obabel *.mol U*.mol --unique. Either form is acceptable on the Windows command line.; The unique molecules will be in files with the original name prefixed by ‘U’. Duplicate molecules will be in similar files but with zero length, which you will have to delete yourself. Aliases for chemical groups#; There is a limited amount of support for representing common chemical groups by an alias, e.g. benzoic acid as Ph-COOH, with two alias groups. Internally in Open Babel, the molecule usually has a ‘real’ structure with the alias names present as only an alternative repres",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27319,Energy Efficiency,energy,energy,27319,"ead from or written to an ‘A’ line. The more modern RGroup representations are not yet recognized. Reading is transparent; the alias group is expanded and the ‘real’ atoms given reasonable coordinates if the the molecule is 2D or 3D. Writing in alias form, rather than the ‘real’ structure, requires the use of the -xA option. SVGFormat will also display any aliases present in a molecule if the -xA option is set.; The alias names that are recognized are in the file superatoms.txt which can be edited.; Normal molecules can have certain common groups given alternative alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27411,Energy Efficiency,energy,energy,27411,"ead from or written to an ‘A’ line. The more modern RGroup representations are not yet recognized. Reading is transparent; the alias group is expanded and the ‘real’ atoms given reasonable coordinates if the the molecule is 2D or 3D. Writing in alias form, rather than the ‘real’ structure, requires the use of the -xA option. SVGFormat will also display any aliases present in a molecule if the -xA option is set.; The alias names that are recognized are in the file superatoms.txt which can be edited.; Normal molecules can have certain common groups given alternative alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27440,Energy Efficiency,energy,energy,27440,"ead from or written to an ‘A’ line. The more modern RGroup representations are not yet recognized. Reading is transparent; the alias group is expanded and the ‘real’ atoms given reasonable coordinates if the the molecule is 2D or 3D. Writing in alias form, rather than the ‘real’ structure, requires the use of the -xA option. SVGFormat will also display any aliases present in a molecule if the -xA option is set.; The alias names that are recognized are in the file superatoms.txt which can be edited.; Normal molecules can have certain common groups given alternative alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27719,Energy Efficiency,energy,energy,27719,"isplay any aliases present in a molecule if the -xA option is set.; The alias names that are recognized are in the file superatoms.txt which can be edited.; Normal molecules can have certain common groups given alternative alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27756,Energy Efficiency,energy,energy,27756,"isplay any aliases present in a molecule if the -xA option is set.; The alias names that are recognized are in the file superatoms.txt which can be edited.; Normal molecules can have certain common groups given alternative alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27775,Energy Efficiency,energy,energy,27775,"zed are in the file superatoms.txt which can be edited.; Normal molecules can have certain common groups given alternative alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutof",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27814,Energy Efficiency,Energy,Energy,27814,"zed are in the file superatoms.txt which can be edited.; Normal molecules can have certain common groups given alternative alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutof",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27990,Energy Efficiency,energy,energy,27990,"ive alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-b",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28041,Energy Efficiency,energy,energy,28041,"erted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made ex",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28090,Energy Efficiency,energy,energy,28090," or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules o",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28107,Energy Efficiency,Energy,Energy,28107," or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules o",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:29000,Energy Efficiency,energy,energy,29000,"to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules or substructures#; The --align option aligns molecules to the first molecule provided.; It is typically used with the -s option to specify an alignment; based on a substructure:; obabel pattern.www dataset.xxx -O outset.yyy -s SMARTS --align. Here, only molecules matching the specified SMARTS pattern are converted; and are aligned by; having all their atom coordinates modified. The atoms that are; used in the alignment are those matched by SMARTS in the first; output molecule. The subsequent molecules are aligned so that; the coordinates of atoms equivalent to these are as nearly as; possible the same as those of the pattern atoms.; The atoms in the various molecules can be in any order.; Tha alignment ignores hydrogen atoms but includes symmetry.; Note that the standalone program obfit has similar functionality.; The first input molecule could also be part of the data set:; obabel dataset.xxx -O outset.yyy -s SMARTS ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:29058,Energy Efficiency,energy,energy,29058,"to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules or substructures#; The --align option aligns molecules to the first molecule provided.; It is typically used with the -s option to specify an alignment; based on a substructure:; obabel pattern.www dataset.xxx -O outset.yyy -s SMARTS --align. Here, only molecules matching the specified SMARTS pattern are converted; and are aligned by; having all their atom coordinates modified. The atoms that are; used in the alignment are those matched by SMARTS in the first; output molecule. The subsequent molecules are aligned so that; the coordinates of atoms equivalent to these are as nearly as; possible the same as those of the pattern atoms.; The atoms in the various molecules can be in any order.; Tha alignment ignores hydrogen atoms but includes symmetry.; Note that the standalone program obfit has similar functionality.; The first input molecule could also be part of the data set:; obabel dataset.xxx -O outset.yyy -s SMARTS ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:32105,Energy Efficiency,energy,energy,32105,"uld be those; of a molecule in a specified file.; If the -s option is not used, all of the atoms in the first molecule; are used as pattern atoms. The order of the atoms must be the same; in all the molecules.; The output molecules have a property (represented internally as; OBPairData) called rmsd, which is a measure of the quality; of the fit. To attach it to the title of each molecule use; --append rmsd.; To output the two conformers closest to the first conformer in a dataset:; obabel dataset.xxx -O outset.yyy --align --smallest 2 rmsd. Specifying the speed of 3D coordinate generation#; When you use the --gen3d option, you can specify the speed and quality. The following shows typical usage:; obabel infile.smi -O out.sdf --gen3d fastest. The available options are as follows:. option; description. fastest; No cleanup. fast; Force field cleanup (100 cycles). med (default); Force field cleanup (100 cycles) + Fast rotor search (only one permutation). slow; Force field cleanup (250 cycles) + Fast rotor search (permute central rotors). slowest; Force field cleanup (500 cycles) + Slow rotor search. better; Same as slow. best; Same as slowest. dist, dg; Use distance geometry method (unstable). You can also specify the speed by an integer from 1 (slowest) to 5 (fastest). previous; Install Open Babel. next; The Open Babel GUI. On this page; . Synopsis; Options; Examples; Format Options; Append property values to the title; Generating conformers for structures; Filtering molecules from a multimolecule file; String descriptors; SMARTS descriptor; InChI descriptor. Substructure and similarity searching; Sorting molecules; Remove duplicate molecules; Truncated InChI; Multiple files. Aliases for chemical groups; Forcefield energy and minimization; Aligning molecules or substructures; Specifying the speed of 3D coordinate generation. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:4074,Integrability,message,messages,4074,"perties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --highlight <substructure color>; Highlight substructures in 2D depictions. Valid; colors are black, gray, white, red, green, blue, yell",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:4112,Integrability,message,messages,4112,"perties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --highlight <substructure color>; Highlight substructures in 2D depictions. Valid; colors are black, gray, white, red, green, blue, yell",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:4163,Integrability,message,messages,4163,"perties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --highlight <substructure color>; Highlight substructures in 2D depictions. Valid; colors are black, gray, white, red, green, blue, yell",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:22119,Integrability,message,messages,22119,"s the first or last character of the string (anywhere else a * is a normal character). So --filter ""title='*ol'"" will match molecules with titles ‘methanol’, ‘ethanol’ etc. and --filter ""title='eth*' will match ‘ethanol’, ‘ethyl acetate’, ‘ethical solution’ etc. Use a * at both the first and last characters to test for the occurrence of a string, so --filter ""title='*ol*'"" will match ‘oleum’, ‘polonium’ and ‘ethanol’. SMARTS descriptor#; This descriptor will do a SMARTS test (substructure and more) on the molecules. The smarts ID can be abbreviated to s and the = is optional. More than one SMARTS test can be done:; obabel filterset.sdf -osmi --filter ""s='CN' s!='[N+]'"". This provides a more flexible alternative to the existing -s and -v options, since the SMARTS descriptor test can be combined with other tests. InChI descriptor#; obabel filterset.sdf -osmi --filter ""inchi='InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3'"". will convert only ethanol. It uses the default parameters for InChI comparison, so there may be some messages from the InChI code. There is quite a lot of flexibility on how the InChI is presented (you can miss out the non-essential bits):; obabel filterset.sdf -osmi --filter ""inchi='1/C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi='C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi=C2H6O/c1-2-3/h3H,2H2,1H3""; obabel filterset.sdf -osmi --filter ""InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3"". all have the same effect.; The comparison of the InChI string is done only as far as the parameter’s length. This means that we can take advantage of InChI’s layered structure:; obabel filterset.sdf -osmi --filter ""inchi=C2H6O"". will convert both Ethanol and Dimethyl Ether. Substructure and similarity searching#; For information on using obabel for substructure searching and similarity searching, see Molecular fingerprints and similarity searching. Sorting molecules#; The --sort option is used to output molecules ordered by the value of a desc",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:24398,Integrability,message,message,24398,"han “ClH” hydrogen chloride).; The order can be reversed by preceding the descriptor name with ~, e.g.:; obabel infile.xxx outfile.yyy --sort ~logP. As a shortcut, the value of the descriptor can be appended to the molecule name by adding a + to the descriptor, e.g.:; obabel aromatics.smi -osmi --sort ~MW+; c1ccccc1C=C styrene 104.149; c1ccccc1C toluene 92.1384; c1ccccc1 benzene 78.1118. Remove duplicate molecules#; The --unique option is used to remove, i.e. not output, any chemically identical molecules during conversion:; obabel infile.xxx outfile.yyy --unique [param]. The optional parameter param defines what is regarded as “chemically identical”. It can be the name of any descriptor, although not many are likely to be useful. If param is omitted, the InChI descriptor is used. Other useful descriptors are ‘cansmi’ and ‘cansmiNS’ (canonical SMILES, with and without stereochemical information),’title’ and truncated InChI (see below).; A message is output for each duplicate found:; Removed methyl benzene - a duplicate of toluene (#1). Clearly, this is more useful if each molecule has a title. The (#1) is the number of duplicates found so far.; If you wanted to identify duplicates but not output the unique molecules, you could use the null format:; obabel infile.xxx -onul --unique. Truncated InChI#; It is possible to relax the criterion by which molecules are regarded as “chemically identical” by using a truncated InChI specification as param. This takes advantage of the layered structure of InChI. So to remove duplicates, treating stereoisomers as the same molecule:; obabel infile.xxx outfile.yyy --unique /nostereo. Truncated InChI specifications start with / and are case-sensitive. param can be a concatenation of these e.g. /nochg/noiso:; /formula formula only; /connect formula and connectivity only; /nostereo ignore E/Z and sp3 stereochemistry; /nosp3 ignore sp3 stereochemistry; /noEZ ignore E/Z stereoochemistry; /nochg ignore charge and protonation; /noiso ignor",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:766,Modifiability,plugin,plugins,766,"﻿. obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<te",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:1538,Modifiability,plugin,plugin,1538,"Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will guess the file type from the filename extension. For information on the file formats supported by Open Babel, please see Supported File Formats and Options. If text is provided using the -: notation, SMILES are assumed by default if an input format is not specified. -a <options>; Format-specific input options. Use -H <format-ID> to see options; allowed by a particular format, or see the appropriate section in; Supported File Formats and Options. ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:1632,Modifiability,plugin,plugin,1632,"cs 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will guess the file type from the filename extension. For information on the file formats supported by Open Babel, please see Supported File Formats and Options. If text is provided using the -: notation, SMILES are assumed by default if an input format is not specified. -a <options>; Format-specific input options. Use -H <format-ID> to see options; allowed by a particular format, or see the appropriate section in; Supported File Formats and Options. --add <list>; Add properties (for SDF, CML, etc.) from descriptors in li",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:1651,Modifiability,plugin,plugins,1651,"cs 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will guess the file type from the filename extension. For information on the file formats supported by Open Babel, please see Supported File Formats and Options. If text is provided using the -: notation, SMILES are assumed by default if an input format is not specified. -a <options>; Format-specific input options. Use -H <format-ID> to see options; allowed by a particular format, or see the appropriate section in; Supported File Formats and Options. --add <list>; Add properties (for SDF, CML, etc.) from descriptors in li",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:1740,Modifiability,plugin,plugin-ID,1740,"gins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will guess the file type from the filename extension. For information on the file formats supported by Open Babel, please see Supported File Formats and Options. If text is provided using the -: notation, SMILES are assumed by default if an input format is not specified. -a <options>; Format-specific input options. Use -H <format-ID> to see options; allowed by a particular format, or see the appropriate section in; Supported File Formats and Options. --add <list>; Add properties (for SDF, CML, etc.) from descriptors in list. Use; -L descriptors to see available descriptors. --addfilename; Add the input filename to the title. --addinindex; ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:1776,Modifiability,plugin,plugin,1776,"gins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will guess the file type from the filename extension. For information on the file formats supported by Open Babel, please see Supported File Formats and Options. If text is provided using the -: notation, SMILES are assumed by default if an input format is not specified. -a <options>; Format-specific input options. Use -H <format-ID> to see options; allowed by a particular format, or see the appropriate section in; Supported File Formats and Options. --add <list>; Add properties (for SDF, CML, etc.) from descriptors in list. Use; -L descriptors to see available descriptors. --addfilename; Add the input filename to the title. --addinindex; ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:1791,Modifiability,plugin,plugin,1791,"gins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will guess the file type from the filename extension. For information on the file formats supported by Open Babel, please see Supported File Formats and Options. If text is provided using the -: notation, SMILES are assumed by default if an input format is not specified. -a <options>; Format-specific input options. Use -H <format-ID> to see options; allowed by a particular format, or see the appropriate section in; Supported File Formats and Options. --add <list>; Add properties (for SDF, CML, etc.) from descriptors in list. Use; -L descriptors to see available descriptors. --addfilename; Add the input filename to the title. --addinindex; ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:16084,Modifiability,flexible,flexible,16084,"etic algorithm options):; obabel EtOT5D.cml -O EtOT5D0.xyz --conformer --nconf 50 --score energy. or if you also wish to generate 3D coordinates, followed by conformer; searching try something like this:; obabel ligand.babel.smi -O ligand.babel.sdf --gen3d --conformer --nconf 20 --weighted. Filtering molecules from a multimolecule file#; Six of the options above can be used to filter molecules:. -s - convert molecules that match a SMARTS string; -v - convert molecules that don’t match a SMARTS string; -f and -l - convert molecules in a certain range; --unique - only convert unique molecules (that is, remove duplicates); --filter - convert molecules that meet specified chemical (and other) criteria. This section focuses on the --filter option, which is very versatile and can select a subset of molecules based either on properties imported with the molecule (as from a SDF file) or from calculations made by Open Babel on the molecule.; The aim has been to make the option flexible and intuitive to use; don’t be put off by the long description.; You use it like this:; obabel filterset.sdf -osmi --filter ""MW<130 ROTATABLE_BOND > 2"". It takes one parameter which probably needs to be enclosed in double quotes to avoid confusing the shell or operating system. (You don’t need the quotes with the Windows GUI.) The parameter contains one or more conditional tests. By default, these have all to be true for the molecule to be converted. As well as this implicit AND behaviour, you can write a full Boolean expression (see below). As you can see, there can be spaces or not in sensible places and the conditional tests could be separated by a comma or semicolon.; You can filter on two types of property:. An SDF property, as the identifier ROTATABLE_BOND could be. There is no need for it to be previously known to Open Babel.; A descriptor name (internally, an ID of an OBDescriptor object). This is a plug-in class so that new objects can easily be added. MW is the ID of a descriptor whi",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:17014,Modifiability,plug-in,plug-in,17014,"e molecule.; The aim has been to make the option flexible and intuitive to use; don’t be put off by the long description.; You use it like this:; obabel filterset.sdf -osmi --filter ""MW<130 ROTATABLE_BOND > 2"". It takes one parameter which probably needs to be enclosed in double quotes to avoid confusing the shell or operating system. (You don’t need the quotes with the Windows GUI.) The parameter contains one or more conditional tests. By default, these have all to be true for the molecule to be converted. As well as this implicit AND behaviour, you can write a full Boolean expression (see below). As you can see, there can be spaces or not in sensible places and the conditional tests could be separated by a comma or semicolon.; You can filter on two types of property:. An SDF property, as the identifier ROTATABLE_BOND could be. There is no need for it to be previously known to Open Babel.; A descriptor name (internally, an ID of an OBDescriptor object). This is a plug-in class so that new objects can easily be added. MW is the ID of a descriptor which calculates molecular weight. You can see a list of available descriptors using:; obabel -L descriptors. or from a menu item in the GUI. Faster filtering; Open Babel provides a number of utility file formats (see Supported File Formats and Options). Of these, using the copy format as the output format is particularly useful when filtering (see Copy raw text (copy)). This copies the content of the molecular file directly from input to output. If you are not converting the molecules between different formats, this procedure is much faster and avoids any possibility of information loss.; In addition, if you are converting SDF files and are filtering based on the title, you should consider using -aT (see MDL MOL format (mdl, mol, sd, sdf)). Rather than perceiving the chemistry of the entire molecule, this option will only read in the title. The descriptor names are case-insensitive. With the property names currently, you ne",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:21796,Modifiability,flexible,flexible,21796,"he molecules with titles 56 123 and 126, which is probably what you wanted.; obabel filterset.sdf -osmi --filter ""title<'129'"". converts only 123 and 126 because a string comparison is being made.; String comparisons can use * as a wildcard if used as the first or last character of the string (anywhere else a * is a normal character). So --filter ""title='*ol'"" will match molecules with titles ‘methanol’, ‘ethanol’ etc. and --filter ""title='eth*' will match ‘ethanol’, ‘ethyl acetate’, ‘ethical solution’ etc. Use a * at both the first and last characters to test for the occurrence of a string, so --filter ""title='*ol*'"" will match ‘oleum’, ‘polonium’ and ‘ethanol’. SMARTS descriptor#; This descriptor will do a SMARTS test (substructure and more) on the molecules. The smarts ID can be abbreviated to s and the = is optional. More than one SMARTS test can be done:; obabel filterset.sdf -osmi --filter ""s='CN' s!='[N+]'"". This provides a more flexible alternative to the existing -s and -v options, since the SMARTS descriptor test can be combined with other tests. InChI descriptor#; obabel filterset.sdf -osmi --filter ""inchi='InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3'"". will convert only ethanol. It uses the default parameters for InChI comparison, so there may be some messages from the InChI code. There is quite a lot of flexibility on how the InChI is presented (you can miss out the non-essential bits):; obabel filterset.sdf -osmi --filter ""inchi='1/C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi='C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi=C2H6O/c1-2-3/h3H,2H2,1H3""; obabel filterset.sdf -osmi --filter ""InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3"". all have the same effect.; The comparison of the InChI string is done only as far as the parameter’s length. This means that we can take advantage of InChI’s layered structure:; obabel filterset.sdf -osmi --filter ""inchi=C2H6O"". will convert both Ethanol and Dimethyl Ether. Substructure and similar",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:1610,Performance,load,loaders,1610,"Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will guess the file type from the filename extension. For information on the file formats supported by Open Babel, please see Supported File Formats and Options. If text is provided using the -: notation, SMILES are assumed by default if an input format is not specified. -a <options>; Format-specific input options. Use -H <format-ID> to see options; allowed by a particular format, or see the appropriate section in; Supported File Formats and Options. ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:14218,Performance,perform,performing,14218,"he SDF input file. The values of these are added to the title of the molecule. For input files with many molecules these additions are specific to each molecule. (Note that the related option --addtotitle simply adds the same text to every title.); The append option only takes one parameter, which means that it may be necessary to enclose all of the descriptor IDs or property names together in a single set of quotes.; If the name of the property in the SDF file (internally the Attribute in OBPairData) contains spaces, these spaces should be replaced by underscore characters, ‘_’. So the example above would also work for a property named CAT NO.; By default, the extra items are added to the title separated by spaces. But if the first character in the parameter is a punctuation character other than ‘_’, it is used as the separator instead. If the list starts with “t”, a tab character is used as a separator. Generating conformers for structures#; The command line option --conformer allows performing conformer; searches using a range of different algorithms and options:. --log - output a log of the energies (default = no log); --nconf # - number of conformers to generate. Forcefield-based methods for finding stable conformers:. --systematic - systematically (exhaustively) generate all conformers; --random - randomly generate conformers; --weighted - weighted rotor search for lowest energy conformer; --ff <name> - select a forcefield (default = MMFF94). Genetic algorithm based methods (default):. --children # - number of children to generate for each parent (default = 5); --mutability # - mutation frequency (default = 5); --converge # - number of identical generations before convergence is reached; --score # - scoring function [rmsd|energy] (default = rmsd). You can use them like this (to generate 50 conformers, scoring with; MMFF94 energies but default genetic algorithm options):; obabel EtOT5D.cml -O EtOT5D0.xyz --conformer --nconf 50 --score energy. or if you also wish",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28119,Performance,perform,perform,28119,"example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules or substructures#; The --align option aligns molecule",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:4831,Safety,predict,prediction,4831,"ors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --highlight <substructure color>; Highlight substructures in 2D depictions. Valid; colors are black, gray, white, red, green, blue, yellow,; cyan, purple, teal and olive. Additional colors may be; specified as hexadecimal RGB values preceded by #.; Multiple substructures and corresponding colors may be; specified. -i <format-ID>; Specifies input format. See Supported File Formats and Options. -j, --join; Join all input molecules into a single output molecule entry. -k; Translate computational chemistry modeling keywords. See; the computational chemistry formats (Computational chemistry formats),; for example GAMESS Input (gamin, inp) and Gaussian Input (com, gau, gjc, gjf). -l <#>; For multiple entry input, stop import with molecule # as the last; entry. --largest <#N descriptor>; Only convert the N molecules which have the largest values of the; specified descript",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:16325,Safety,avoid,avoid,16325,"abel ligand.babel.smi -O ligand.babel.sdf --gen3d --conformer --nconf 20 --weighted. Filtering molecules from a multimolecule file#; Six of the options above can be used to filter molecules:. -s - convert molecules that match a SMARTS string; -v - convert molecules that don’t match a SMARTS string; -f and -l - convert molecules in a certain range; --unique - only convert unique molecules (that is, remove duplicates); --filter - convert molecules that meet specified chemical (and other) criteria. This section focuses on the --filter option, which is very versatile and can select a subset of molecules based either on properties imported with the molecule (as from a SDF file) or from calculations made by Open Babel on the molecule.; The aim has been to make the option flexible and intuitive to use; don’t be put off by the long description.; You use it like this:; obabel filterset.sdf -osmi --filter ""MW<130 ROTATABLE_BOND > 2"". It takes one parameter which probably needs to be enclosed in double quotes to avoid confusing the shell or operating system. (You don’t need the quotes with the Windows GUI.) The parameter contains one or more conditional tests. By default, these have all to be true for the molecule to be converted. As well as this implicit AND behaviour, you can write a full Boolean expression (see below). As you can see, there can be spaces or not in sensible places and the conditional tests could be separated by a comma or semicolon.; You can filter on two types of property:. An SDF property, as the identifier ROTATABLE_BOND could be. There is no need for it to be previously known to Open Babel.; A descriptor name (internally, an ID of an OBDescriptor object). This is a plug-in class so that new objects can easily be added. MW is the ID of a descriptor which calculates molecular weight. You can see a list of available descriptors using:; obabel -L descriptors. or from a menu item in the GUI. Faster filtering; Open Babel provides a number of utility file forma",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:17650,Safety,avoid,avoids,17650,"ression (see below). As you can see, there can be spaces or not in sensible places and the conditional tests could be separated by a comma or semicolon.; You can filter on two types of property:. An SDF property, as the identifier ROTATABLE_BOND could be. There is no need for it to be previously known to Open Babel.; A descriptor name (internally, an ID of an OBDescriptor object). This is a plug-in class so that new objects can easily be added. MW is the ID of a descriptor which calculates molecular weight. You can see a list of available descriptors using:; obabel -L descriptors. or from a menu item in the GUI. Faster filtering; Open Babel provides a number of utility file formats (see Supported File Formats and Options). Of these, using the copy format as the output format is particularly useful when filtering (see Copy raw text (copy)). This copies the content of the molecular file directly from input to output. If you are not converting the molecules between different formats, this procedure is much faster and avoids any possibility of information loss.; In addition, if you are converting SDF files and are filtering based on the title, you should consider using -aT (see MDL MOL format (mdl, mol, sd, sdf)). Rather than perceiving the chemistry of the entire molecule, this option will only read in the title. The descriptor names are case-insensitive. With the property names currently, you need to get the case right. Both types of identifier can contain letters, numbers and underscores, ‘_’. Properties can contain spaces, but then when writing the name in the filter parameter, you need to replace them with underscores. So in the example above, the test would also be suitable for a property ‘ROTATABLE BOND’.; Open Babel uses a SDF-like property (internally this is stored in the class OBPairData) in preference to a descriptor if one exists in the molecule. So with the example file, which can be found here:; obabel filterset.sdf -osmi --filter ""logP>5"". converts only a",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:4101,Security,audit,audit,4101,"perties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --highlight <substructure color>; Highlight substructures in 2D depictions. Valid; colors are black, gray, white, red, green, blue, yell",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27831,Security,access,accessible,27831,"zed are in the file superatoms.txt which can be edited.; Normal molecules can have certain common groups given alternative alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutof",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:4107,Testability,log,log,4107,"perties or descriptor values appropriate for a molecule to its title. For more; information, see Append property values to the title. -b; Convert dative bonds (e.g. [N+]([O-])=O to N(=O)=O). -c; Center atomic coordinates at (0,0,0). -C; Combine molecules in first file with others having the same name. --canonical; Canonicalize the atom order. If generating canonical SMILES, do not use; this option. Instead use the Canonical SMILES format (can). --conformer <options>; Conformer searching to generate low-energy or diverse; conformers. For more information, see Generating conformers for structures. -d; Delete hydrogens (make all hydrogen implicit). --delete <list>; Delete properties in list. -e; Continue to convert molecules after errors. --energy <options>; Forcefield energy evaluation. See Forcefield energy and minimization. --errorlevel <N>; Filter the level of errors and warnings displayed:. 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f <#>; For multiple entry input, start import with molecule # as the first; entry. --fillUC <param>; For a crystal structure, add atoms to fill the entire unit cell based; on the unique positions, the unit cell and the spacegroup. The parameter; can either be strict (the default), which only keeps atoms inside the; unit cell, or keepconnect, which fills the unit cell but keeps the; original connectivity. --filter <criteria>; Filter based on molecular properties. See; Filtering molecules from a multimolecule file for examples and a list of; criteria. --gen2d; Generate 2D coordinates. --gen3d; Generate 3D coordinates. You can specify the speed of prediction. See Specifying the speed of 3D coordinate generation. -h; Add hydrogens (make all hydrogen explicit). --highlight <substructure color>; Highlight substructures in 2D depictions. Valid; colors are black, gray, white, red, green, blue, yell",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:11793,Testability,test,test,11793,"You can of course combine options, so to join molecules and add hydrogens type:; obabel mymols.sdf -O myjoined.sdf -h -j. Files compressed with gzip are read transparently, whether or not they have a .gz suffix:; obabel compressed.sdf.gz -O expanded.smi. On platforms other than Windows, the output file can be compressed with gzip, but note if you don’t specify the .gz suffix it will not be added automatically, which could cause problems when you try to open the file:; obabel mymols.sdf -O outputfile.sdf.gz -z. This next example reads the first 50 molecules in a compressed dataset and prints out the SMILES of those containing a pyridine ring, together with the index in the file, the ID (taken from an SDF property) as well as the output index:; obabel chembl_02.sdf.gz -osmi -l 50 -s c1ccccn1 --append chebi_id; --addinindex --addoutindex. For the test data (taken from ChEMBLdb), this gave:; N1(CCN(CC1)c1c(cc2c3c1OCC(n3cc(c2=O)C(=O)O)C)F)C 3 100146 1; c1(c(=O)c2c(n(c1)OC)c(c(N1CC(CC1)CNCC)c(c2)F)F)C(=O)O 6 100195 2; S(=O)(=O)(Nc1ncc(cc1)C)c1c2c(c(N(C)C)ccc2)ccc1 22 100589 3; c1([nH]c2c(c1)cccc2)C(=O)N1CCN(c2c(N(CC)CC)cccn2)CC1 46 101536 4. Format Options#; Individual file formats may have additional formatting options. These are listed in the documentation for the individual formats (see Supported File Formats and Options) or can be shown using the -H <format-Id> option, e.g. -H cml.; To use these additional options, input format options are preceded by -a, e.g. -as. Output format options, which are much more common, are preceded by -x, e.g. -xn. So to read the 2D coordinates (rather than the 3D) from a CML file and generate an SVG file displaying the molecule on a black background, the relevant options are used as follows:; obabel mymol.cml out.svg -a2 -xb. Append property values to the title#; The command line option --append adds extra information to the title of the molecule.; The information can be calculated from the structure of the molecule or can originate from",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:14303,Testability,log,log,14303," specific to each molecule. (Note that the related option --addtotitle simply adds the same text to every title.); The append option only takes one parameter, which means that it may be necessary to enclose all of the descriptor IDs or property names together in a single set of quotes.; If the name of the property in the SDF file (internally the Attribute in OBPairData) contains spaces, these spaces should be replaced by underscore characters, ‘_’. So the example above would also work for a property named CAT NO.; By default, the extra items are added to the title separated by spaces. But if the first character in the parameter is a punctuation character other than ‘_’, it is used as the separator instead. If the list starts with “t”, a tab character is used as a separator. Generating conformers for structures#; The command line option --conformer allows performing conformer; searches using a range of different algorithms and options:. --log - output a log of the energies (default = no log); --nconf # - number of conformers to generate. Forcefield-based methods for finding stable conformers:. --systematic - systematically (exhaustively) generate all conformers; --random - randomly generate conformers; --weighted - weighted rotor search for lowest energy conformer; --ff <name> - select a forcefield (default = MMFF94). Genetic algorithm based methods (default):. --children # - number of children to generate for each parent (default = 5); --mutability # - mutation frequency (default = 5); --converge # - number of identical generations before convergence is reached; --score # - scoring function [rmsd|energy] (default = rmsd). You can use them like this (to generate 50 conformers, scoring with; MMFF94 energies but default genetic algorithm options):; obabel EtOT5D.cml -O EtOT5D0.xyz --conformer --nconf 50 --score energy. or if you also wish to generate 3D coordinates, followed by conformer; searching try something like this:; obabel ligand.babel.smi -O ligand.babel.sdf --",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:14318,Testability,log,log,14318," specific to each molecule. (Note that the related option --addtotitle simply adds the same text to every title.); The append option only takes one parameter, which means that it may be necessary to enclose all of the descriptor IDs or property names together in a single set of quotes.; If the name of the property in the SDF file (internally the Attribute in OBPairData) contains spaces, these spaces should be replaced by underscore characters, ‘_’. So the example above would also work for a property named CAT NO.; By default, the extra items are added to the title separated by spaces. But if the first character in the parameter is a punctuation character other than ‘_’, it is used as the separator instead. If the list starts with “t”, a tab character is used as a separator. Generating conformers for structures#; The command line option --conformer allows performing conformer; searches using a range of different algorithms and options:. --log - output a log of the energies (default = no log); --nconf # - number of conformers to generate. Forcefield-based methods for finding stable conformers:. --systematic - systematically (exhaustively) generate all conformers; --random - randomly generate conformers; --weighted - weighted rotor search for lowest energy conformer; --ff <name> - select a forcefield (default = MMFF94). Genetic algorithm based methods (default):. --children # - number of children to generate for each parent (default = 5); --mutability # - mutation frequency (default = 5); --converge # - number of identical generations before convergence is reached; --score # - scoring function [rmsd|energy] (default = rmsd). You can use them like this (to generate 50 conformers, scoring with; MMFF94 energies but default genetic algorithm options):; obabel EtOT5D.cml -O EtOT5D0.xyz --conformer --nconf 50 --score energy. or if you also wish to generate 3D coordinates, followed by conformer; searching try something like this:; obabel ligand.babel.smi -O ligand.babel.sdf --",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:14352,Testability,log,log,14352," specific to each molecule. (Note that the related option --addtotitle simply adds the same text to every title.); The append option only takes one parameter, which means that it may be necessary to enclose all of the descriptor IDs or property names together in a single set of quotes.; If the name of the property in the SDF file (internally the Attribute in OBPairData) contains spaces, these spaces should be replaced by underscore characters, ‘_’. So the example above would also work for a property named CAT NO.; By default, the extra items are added to the title separated by spaces. But if the first character in the parameter is a punctuation character other than ‘_’, it is used as the separator instead. If the list starts with “t”, a tab character is used as a separator. Generating conformers for structures#; The command line option --conformer allows performing conformer; searches using a range of different algorithms and options:. --log - output a log of the energies (default = no log); --nconf # - number of conformers to generate. Forcefield-based methods for finding stable conformers:. --systematic - systematically (exhaustively) generate all conformers; --random - randomly generate conformers; --weighted - weighted rotor search for lowest energy conformer; --ff <name> - select a forcefield (default = MMFF94). Genetic algorithm based methods (default):. --children # - number of children to generate for each parent (default = 5); --mutability # - mutation frequency (default = 5); --converge # - number of identical generations before convergence is reached; --score # - scoring function [rmsd|energy] (default = rmsd). You can use them like this (to generate 50 conformers, scoring with; MMFF94 energies but default genetic algorithm options):; obabel EtOT5D.cml -O EtOT5D0.xyz --conformer --nconf 50 --score energy. or if you also wish to generate 3D coordinates, followed by conformer; searching try something like this:; obabel ligand.babel.smi -O ligand.babel.sdf --",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:16469,Testability,test,tests,16469," the options above can be used to filter molecules:. -s - convert molecules that match a SMARTS string; -v - convert molecules that don’t match a SMARTS string; -f and -l - convert molecules in a certain range; --unique - only convert unique molecules (that is, remove duplicates); --filter - convert molecules that meet specified chemical (and other) criteria. This section focuses on the --filter option, which is very versatile and can select a subset of molecules based either on properties imported with the molecule (as from a SDF file) or from calculations made by Open Babel on the molecule.; The aim has been to make the option flexible and intuitive to use; don’t be put off by the long description.; You use it like this:; obabel filterset.sdf -osmi --filter ""MW<130 ROTATABLE_BOND > 2"". It takes one parameter which probably needs to be enclosed in double quotes to avoid confusing the shell or operating system. (You don’t need the quotes with the Windows GUI.) The parameter contains one or more conditional tests. By default, these have all to be true for the molecule to be converted. As well as this implicit AND behaviour, you can write a full Boolean expression (see below). As you can see, there can be spaces or not in sensible places and the conditional tests could be separated by a comma or semicolon.; You can filter on two types of property:. An SDF property, as the identifier ROTATABLE_BOND could be. There is no need for it to be previously known to Open Babel.; A descriptor name (internally, an ID of an OBDescriptor object). This is a plug-in class so that new objects can easily be added. MW is the ID of a descriptor which calculates molecular weight. You can see a list of available descriptors using:; obabel -L descriptors. or from a menu item in the GUI. Faster filtering; Open Babel provides a number of utility file formats (see Supported File Formats and Options). Of these, using the copy format as the output format is particularly useful when filtering (see",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:16723,Testability,test,tests,16723,"s, remove duplicates); --filter - convert molecules that meet specified chemical (and other) criteria. This section focuses on the --filter option, which is very versatile and can select a subset of molecules based either on properties imported with the molecule (as from a SDF file) or from calculations made by Open Babel on the molecule.; The aim has been to make the option flexible and intuitive to use; don’t be put off by the long description.; You use it like this:; obabel filterset.sdf -osmi --filter ""MW<130 ROTATABLE_BOND > 2"". It takes one parameter which probably needs to be enclosed in double quotes to avoid confusing the shell or operating system. (You don’t need the quotes with the Windows GUI.) The parameter contains one or more conditional tests. By default, these have all to be true for the molecule to be converted. As well as this implicit AND behaviour, you can write a full Boolean expression (see below). As you can see, there can be spaces or not in sensible places and the conditional tests could be separated by a comma or semicolon.; You can filter on two types of property:. An SDF property, as the identifier ROTATABLE_BOND could be. There is no need for it to be previously known to Open Babel.; A descriptor name (internally, an ID of an OBDescriptor object). This is a plug-in class so that new objects can easily be added. MW is the ID of a descriptor which calculates molecular weight. You can see a list of available descriptors using:; obabel -L descriptors. or from a menu item in the GUI. Faster filtering; Open Babel provides a number of utility file formats (see Supported File Formats and Options). Of these, using the copy format as the output format is particularly useful when filtering (see Copy raw text (copy)). This copies the content of the molecular file directly from input to output. If you are not converting the molecules between different formats, this procedure is much faster and avoids any possibility of information loss.; In addition",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:18297,Testability,test,test,18297,"see Supported File Formats and Options). Of these, using the copy format as the output format is particularly useful when filtering (see Copy raw text (copy)). This copies the content of the molecular file directly from input to output. If you are not converting the molecules between different formats, this procedure is much faster and avoids any possibility of information loss.; In addition, if you are converting SDF files and are filtering based on the title, you should consider using -aT (see MDL MOL format (mdl, mol, sd, sdf)). Rather than perceiving the chemistry of the entire molecule, this option will only read in the title. The descriptor names are case-insensitive. With the property names currently, you need to get the case right. Both types of identifier can contain letters, numbers and underscores, ‘_’. Properties can contain spaces, but then when writing the name in the filter parameter, you need to replace them with underscores. So in the example above, the test would also be suitable for a property ‘ROTATABLE BOND’.; Open Babel uses a SDF-like property (internally this is stored in the class OBPairData) in preference to a descriptor if one exists in the molecule. So with the example file, which can be found here:; obabel filterset.sdf -osmi --filter ""logP>5"". converts only a molecule with a property logP=10.900, since the others do not have this property and logP, being also a descriptor, is calculated and is always much less than 5.; If a property does not have a conditional test, then it returns true only if it exists. So:; obabel filterset.sdf -osmi --filter ""ROTATABLE_BOND MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:18597,Testability,log,logP,18597,"tween different formats, this procedure is much faster and avoids any possibility of information loss.; In addition, if you are converting SDF files and are filtering based on the title, you should consider using -aT (see MDL MOL format (mdl, mol, sd, sdf)). Rather than perceiving the chemistry of the entire molecule, this option will only read in the title. The descriptor names are case-insensitive. With the property names currently, you need to get the case right. Both types of identifier can contain letters, numbers and underscores, ‘_’. Properties can contain spaces, but then when writing the name in the filter parameter, you need to replace them with underscores. So in the example above, the test would also be suitable for a property ‘ROTATABLE BOND’.; Open Babel uses a SDF-like property (internally this is stored in the class OBPairData) in preference to a descriptor if one exists in the molecule. So with the example file, which can be found here:; obabel filterset.sdf -osmi --filter ""logP>5"". converts only a molecule with a property logP=10.900, since the others do not have this property and logP, being also a descriptor, is calculated and is always much less than 5.; If a property does not have a conditional test, then it returns true only if it exists. So:; obabel filterset.sdf -osmi --filter ""ROTATABLE_BOND MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:18647,Testability,log,logP,18647," is much faster and avoids any possibility of information loss.; In addition, if you are converting SDF files and are filtering based on the title, you should consider using -aT (see MDL MOL format (mdl, mol, sd, sdf)). Rather than perceiving the chemistry of the entire molecule, this option will only read in the title. The descriptor names are case-insensitive. With the property names currently, you need to get the case right. Both types of identifier can contain letters, numbers and underscores, ‘_’. Properties can contain spaces, but then when writing the name in the filter parameter, you need to replace them with underscores. So in the example above, the test would also be suitable for a property ‘ROTATABLE BOND’.; Open Babel uses a SDF-like property (internally this is stored in the class OBPairData) in preference to a descriptor if one exists in the molecule. So with the example file, which can be found here:; obabel filterset.sdf -osmi --filter ""logP>5"". converts only a molecule with a property logP=10.900, since the others do not have this property and logP, being also a descriptor, is calculated and is always much less than 5.; If a property does not have a conditional test, then it returns true only if it exists. So:; obabel filterset.sdf -osmi --filter ""ROTATABLE_BOND MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation of a descriptor involved a lot of compu",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:18707,Testability,log,logP,18707,"converting SDF files and are filtering based on the title, you should consider using -aT (see MDL MOL format (mdl, mol, sd, sdf)). Rather than perceiving the chemistry of the entire molecule, this option will only read in the title. The descriptor names are case-insensitive. With the property names currently, you need to get the case right. Both types of identifier can contain letters, numbers and underscores, ‘_’. Properties can contain spaces, but then when writing the name in the filter parameter, you need to replace them with underscores. So in the example above, the test would also be suitable for a property ‘ROTATABLE BOND’.; Open Babel uses a SDF-like property (internally this is stored in the class OBPairData) in preference to a descriptor if one exists in the molecule. So with the example file, which can be found here:; obabel filterset.sdf -osmi --filter ""logP>5"". converts only a molecule with a property logP=10.900, since the others do not have this property and logP, being also a descriptor, is calculated and is always much less than 5.; If a property does not have a conditional test, then it returns true only if it exists. So:; obabel filterset.sdf -osmi --filter ""ROTATABLE_BOND MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation of a descriptor involved a lot of computation, it would pay to include it late in the boolean expression so that there is a chan",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:18827,Testability,test,test,18827," (mdl, mol, sd, sdf)). Rather than perceiving the chemistry of the entire molecule, this option will only read in the title. The descriptor names are case-insensitive. With the property names currently, you need to get the case right. Both types of identifier can contain letters, numbers and underscores, ‘_’. Properties can contain spaces, but then when writing the name in the filter parameter, you need to replace them with underscores. So in the example above, the test would also be suitable for a property ‘ROTATABLE BOND’.; Open Babel uses a SDF-like property (internally this is stored in the class OBPairData) in preference to a descriptor if one exists in the molecule. So with the example file, which can be found here:; obabel filterset.sdf -osmi --filter ""logP>5"". converts only a molecule with a property logP=10.900, since the others do not have this property and logP, being also a descriptor, is calculated and is always much less than 5.; If a property does not have a conditional test, then it returns true only if it exists. So:; obabel filterset.sdf -osmi --filter ""ROTATABLE_BOND MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation of a descriptor involved a lot of computation, it would pay to include it late in the boolean expression so that there is a chance it is skipped for some molecules.; Descriptors must have a conditional test and it is an error if they don",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:19381,Testability,test,test,19381,"nternally this is stored in the class OBPairData) in preference to a descriptor if one exists in the molecule. So with the example file, which can be found here:; obabel filterset.sdf -osmi --filter ""logP>5"". converts only a molecule with a property logP=10.900, since the others do not have this property and logP, being also a descriptor, is calculated and is always much less than 5.; If a property does not have a conditional test, then it returns true only if it exists. So:; obabel filterset.sdf -osmi --filter ""ROTATABLE_BOND MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation of a descriptor involved a lot of computation, it would pay to include it late in the boolean expression so that there is a chance it is skipped for some molecules.; Descriptors must have a conditional test and it is an error if they don’t. The default test, as used by MW or logP, is a numerical one, but the parsing of the text, and what the test does is defined in each descriptor’s code (a virtual function in the OBDescriptor class). Three examples of this are described in the following sections. String descriptors#; obabel filterset.sdf -osmi --filter ""title='Ethanol'"". The descriptor title, when followed by a string (here enclosed by single quotes), does a case-sensitive string comparison. (‘ethanol’ wouldn’t match anything in the example file.) The comparison does not have to be just equalit",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:19793,Testability,test,test,19793,"perty does not have a conditional test, then it returns true only if it exists. So:; obabel filterset.sdf -osmi --filter ""ROTATABLE_BOND MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation of a descriptor involved a lot of computation, it would pay to include it late in the boolean expression so that there is a chance it is skipped for some molecules.; Descriptors must have a conditional test and it is an error if they don’t. The default test, as used by MW or logP, is a numerical one, but the parsing of the text, and what the test does is defined in each descriptor’s code (a virtual function in the OBDescriptor class). Three examples of this are described in the following sections. String descriptors#; obabel filterset.sdf -osmi --filter ""title='Ethanol'"". The descriptor title, when followed by a string (here enclosed by single quotes), does a case-sensitive string comparison. (‘ethanol’ wouldn’t match anything in the example file.) The comparison does not have to be just equality:; obabel filterset.sdf -osmi --filter ""title>='D'"". converts molecules with titles Dimethyl Ether and Ethanol in the example file.; It is not always necessary to use the single quotes when the meaning is unambiguous: the two examples above work without them. But a numerical, rather than a string, comparison is made if both operands can be converted to numbers. This can be useful:; obabel fil",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:19844,Testability,test,test,19844,"MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation of a descriptor involved a lot of computation, it would pay to include it late in the boolean expression so that there is a chance it is skipped for some molecules.; Descriptors must have a conditional test and it is an error if they don’t. The default test, as used by MW or logP, is a numerical one, but the parsing of the text, and what the test does is defined in each descriptor’s code (a virtual function in the OBDescriptor class). Three examples of this are described in the following sections. String descriptors#; obabel filterset.sdf -osmi --filter ""title='Ethanol'"". The descriptor title, when followed by a string (here enclosed by single quotes), does a case-sensitive string comparison. (‘ethanol’ wouldn’t match anything in the example file.) The comparison does not have to be just equality:; obabel filterset.sdf -osmi --filter ""title>='D'"". converts molecules with titles Dimethyl Ether and Ethanol in the example file.; It is not always necessary to use the single quotes when the meaning is unambiguous: the two examples above work without them. But a numerical, rather than a string, comparison is made if both operands can be converted to numbers. This can be useful:; obabel filterset.sdf -osmi --filter ""title<129"". will convert the molecules with titles 56 123 and 126, which is probably what you wanted.; obabel ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:19867,Testability,log,logP,19867,"MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation of a descriptor involved a lot of computation, it would pay to include it late in the boolean expression so that there is a chance it is skipped for some molecules.; Descriptors must have a conditional test and it is an error if they don’t. The default test, as used by MW or logP, is a numerical one, but the parsing of the text, and what the test does is defined in each descriptor’s code (a virtual function in the OBDescriptor class). Three examples of this are described in the following sections. String descriptors#; obabel filterset.sdf -osmi --filter ""title='Ethanol'"". The descriptor title, when followed by a string (here enclosed by single quotes), does a case-sensitive string comparison. (‘ethanol’ wouldn’t match anything in the example file.) The comparison does not have to be just equality:; obabel filterset.sdf -osmi --filter ""title>='D'"". converts molecules with titles Dimethyl Ether and Ethanol in the example file.; It is not always necessary to use the single quotes when the meaning is unambiguous: the two examples above work without them. But a numerical, rather than a string, comparison is made if both operands can be converted to numbers. This can be useful:; obabel filterset.sdf -osmi --filter ""title<129"". will convert the molecules with titles 56 123 and 126, which is probably what you wanted.; obabel ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:19935,Testability,test,test,19935,"MW<130"". converts only those molecules with a ROTATABLE_BOND property and a molecular weight less than 130. If you wanted to also include all the molecules without ROTATABLE_BOND defined, use:; obabel filterset.sdf -osmi --filter ""!ROTATABLE_BOND || (ROTATABLE_BOND & MW<130)"". The ! means negate. AND can be & or &&, OR can be | or ||. The brackets are not strictly necessary here because & has precedent over | in the normal way. If the result of a test doesn’t matter, it is parsed but not evaluated. In the example, the expression in the brackets is not evaluated for molecules without a ROTATABLE_BOND property. This doesn’t matter here, but if evaluation of a descriptor involved a lot of computation, it would pay to include it late in the boolean expression so that there is a chance it is skipped for some molecules.; Descriptors must have a conditional test and it is an error if they don’t. The default test, as used by MW or logP, is a numerical one, but the parsing of the text, and what the test does is defined in each descriptor’s code (a virtual function in the OBDescriptor class). Three examples of this are described in the following sections. String descriptors#; obabel filterset.sdf -osmi --filter ""title='Ethanol'"". The descriptor title, when followed by a string (here enclosed by single quotes), does a case-sensitive string comparison. (‘ethanol’ wouldn’t match anything in the example file.) The comparison does not have to be just equality:; obabel filterset.sdf -osmi --filter ""title>='D'"". converts molecules with titles Dimethyl Ether and Ethanol in the example file.; It is not always necessary to use the single quotes when the meaning is unambiguous: the two examples above work without them. But a numerical, rather than a string, comparison is made if both operands can be converted to numbers. This can be useful:; obabel filterset.sdf -osmi --filter ""title<129"". will convert the molecules with titles 56 123 and 126, which is probably what you wanted.; obabel ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:21408,Testability,test,test,21408,"""title>='D'"". converts molecules with titles Dimethyl Ether and Ethanol in the example file.; It is not always necessary to use the single quotes when the meaning is unambiguous: the two examples above work without them. But a numerical, rather than a string, comparison is made if both operands can be converted to numbers. This can be useful:; obabel filterset.sdf -osmi --filter ""title<129"". will convert the molecules with titles 56 123 and 126, which is probably what you wanted.; obabel filterset.sdf -osmi --filter ""title<'129'"". converts only 123 and 126 because a string comparison is being made.; String comparisons can use * as a wildcard if used as the first or last character of the string (anywhere else a * is a normal character). So --filter ""title='*ol'"" will match molecules with titles ‘methanol’, ‘ethanol’ etc. and --filter ""title='eth*' will match ‘ethanol’, ‘ethyl acetate’, ‘ethical solution’ etc. Use a * at both the first and last characters to test for the occurrence of a string, so --filter ""title='*ol*'"" will match ‘oleum’, ‘polonium’ and ‘ethanol’. SMARTS descriptor#; This descriptor will do a SMARTS test (substructure and more) on the molecules. The smarts ID can be abbreviated to s and the = is optional. More than one SMARTS test can be done:; obabel filterset.sdf -osmi --filter ""s='CN' s!='[N+]'"". This provides a more flexible alternative to the existing -s and -v options, since the SMARTS descriptor test can be combined with other tests. InChI descriptor#; obabel filterset.sdf -osmi --filter ""inchi='InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3'"". will convert only ethanol. It uses the default parameters for InChI comparison, so there may be some messages from the InChI code. There is quite a lot of flexibility on how the InChI is presented (you can miss out the non-essential bits):; obabel filterset.sdf -osmi --filter ""inchi='1/C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi='C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filt",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:21571,Testability,test,test,21571,"e single quotes when the meaning is unambiguous: the two examples above work without them. But a numerical, rather than a string, comparison is made if both operands can be converted to numbers. This can be useful:; obabel filterset.sdf -osmi --filter ""title<129"". will convert the molecules with titles 56 123 and 126, which is probably what you wanted.; obabel filterset.sdf -osmi --filter ""title<'129'"". converts only 123 and 126 because a string comparison is being made.; String comparisons can use * as a wildcard if used as the first or last character of the string (anywhere else a * is a normal character). So --filter ""title='*ol'"" will match molecules with titles ‘methanol’, ‘ethanol’ etc. and --filter ""title='eth*' will match ‘ethanol’, ‘ethyl acetate’, ‘ethical solution’ etc. Use a * at both the first and last characters to test for the occurrence of a string, so --filter ""title='*ol*'"" will match ‘oleum’, ‘polonium’ and ‘ethanol’. SMARTS descriptor#; This descriptor will do a SMARTS test (substructure and more) on the molecules. The smarts ID can be abbreviated to s and the = is optional. More than one SMARTS test can be done:; obabel filterset.sdf -osmi --filter ""s='CN' s!='[N+]'"". This provides a more flexible alternative to the existing -s and -v options, since the SMARTS descriptor test can be combined with other tests. InChI descriptor#; obabel filterset.sdf -osmi --filter ""inchi='InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3'"". will convert only ethanol. It uses the default parameters for InChI comparison, so there may be some messages from the InChI code. There is quite a lot of flexibility on how the InChI is presented (you can miss out the non-essential bits):; obabel filterset.sdf -osmi --filter ""inchi='1/C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi='C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi=C2H6O/c1-2-3/h3H,2H2,1H3""; obabel filterset.sdf -osmi --filter ""InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3"". all have the same ef",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:21700,Testability,test,test,21700," is made if both operands can be converted to numbers. This can be useful:; obabel filterset.sdf -osmi --filter ""title<129"". will convert the molecules with titles 56 123 and 126, which is probably what you wanted.; obabel filterset.sdf -osmi --filter ""title<'129'"". converts only 123 and 126 because a string comparison is being made.; String comparisons can use * as a wildcard if used as the first or last character of the string (anywhere else a * is a normal character). So --filter ""title='*ol'"" will match molecules with titles ‘methanol’, ‘ethanol’ etc. and --filter ""title='eth*' will match ‘ethanol’, ‘ethyl acetate’, ‘ethical solution’ etc. Use a * at both the first and last characters to test for the occurrence of a string, so --filter ""title='*ol*'"" will match ‘oleum’, ‘polonium’ and ‘ethanol’. SMARTS descriptor#; This descriptor will do a SMARTS test (substructure and more) on the molecules. The smarts ID can be abbreviated to s and the = is optional. More than one SMARTS test can be done:; obabel filterset.sdf -osmi --filter ""s='CN' s!='[N+]'"". This provides a more flexible alternative to the existing -s and -v options, since the SMARTS descriptor test can be combined with other tests. InChI descriptor#; obabel filterset.sdf -osmi --filter ""inchi='InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3'"". will convert only ethanol. It uses the default parameters for InChI comparison, so there may be some messages from the InChI code. There is quite a lot of flexibility on how the InChI is presented (you can miss out the non-essential bits):; obabel filterset.sdf -osmi --filter ""inchi='1/C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi='C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi=C2H6O/c1-2-3/h3H,2H2,1H3""; obabel filterset.sdf -osmi --filter ""InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3"". all have the same effect.; The comparison of the InChI string is done only as far as the parameter’s length. This means that we can take advantage of InChI’s la",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:21880,Testability,test,test,21880,"he molecules with titles 56 123 and 126, which is probably what you wanted.; obabel filterset.sdf -osmi --filter ""title<'129'"". converts only 123 and 126 because a string comparison is being made.; String comparisons can use * as a wildcard if used as the first or last character of the string (anywhere else a * is a normal character). So --filter ""title='*ol'"" will match molecules with titles ‘methanol’, ‘ethanol’ etc. and --filter ""title='eth*' will match ‘ethanol’, ‘ethyl acetate’, ‘ethical solution’ etc. Use a * at both the first and last characters to test for the occurrence of a string, so --filter ""title='*ol*'"" will match ‘oleum’, ‘polonium’ and ‘ethanol’. SMARTS descriptor#; This descriptor will do a SMARTS test (substructure and more) on the molecules. The smarts ID can be abbreviated to s and the = is optional. More than one SMARTS test can be done:; obabel filterset.sdf -osmi --filter ""s='CN' s!='[N+]'"". This provides a more flexible alternative to the existing -s and -v options, since the SMARTS descriptor test can be combined with other tests. InChI descriptor#; obabel filterset.sdf -osmi --filter ""inchi='InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3'"". will convert only ethanol. It uses the default parameters for InChI comparison, so there may be some messages from the InChI code. There is quite a lot of flexibility on how the InChI is presented (you can miss out the non-essential bits):; obabel filterset.sdf -osmi --filter ""inchi='1/C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi='C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi=C2H6O/c1-2-3/h3H,2H2,1H3""; obabel filterset.sdf -osmi --filter ""InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3"". all have the same effect.; The comparison of the InChI string is done only as far as the parameter’s length. This means that we can take advantage of InChI’s layered structure:; obabel filterset.sdf -osmi --filter ""inchi=C2H6O"". will convert both Ethanol and Dimethyl Ether. Substructure and similar",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:21912,Testability,test,tests,21912,"he molecules with titles 56 123 and 126, which is probably what you wanted.; obabel filterset.sdf -osmi --filter ""title<'129'"". converts only 123 and 126 because a string comparison is being made.; String comparisons can use * as a wildcard if used as the first or last character of the string (anywhere else a * is a normal character). So --filter ""title='*ol'"" will match molecules with titles ‘methanol’, ‘ethanol’ etc. and --filter ""title='eth*' will match ‘ethanol’, ‘ethyl acetate’, ‘ethical solution’ etc. Use a * at both the first and last characters to test for the occurrence of a string, so --filter ""title='*ol*'"" will match ‘oleum’, ‘polonium’ and ‘ethanol’. SMARTS descriptor#; This descriptor will do a SMARTS test (substructure and more) on the molecules. The smarts ID can be abbreviated to s and the = is optional. More than one SMARTS test can be done:; obabel filterset.sdf -osmi --filter ""s='CN' s!='[N+]'"". This provides a more flexible alternative to the existing -s and -v options, since the SMARTS descriptor test can be combined with other tests. InChI descriptor#; obabel filterset.sdf -osmi --filter ""inchi='InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3'"". will convert only ethanol. It uses the default parameters for InChI comparison, so there may be some messages from the InChI code. There is quite a lot of flexibility on how the InChI is presented (you can miss out the non-essential bits):; obabel filterset.sdf -osmi --filter ""inchi='1/C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi='C2H6O/c1-2-3/h3H,2H2,1H3'""; obabel filterset.sdf -osmi --filter ""inchi=C2H6O/c1-2-3/h3H,2H2,1H3""; obabel filterset.sdf -osmi --filter ""InChI=1/C2H6O/c1-2-3/h3H,2H2,1H3"". all have the same effect.; The comparison of the InChI string is done only as far as the parameter’s length. This means that we can take advantage of InChI’s layered structure:; obabel filterset.sdf -osmi --filter ""inchi=C2H6O"". will convert both Ethanol and Dimethyl Ether. Substructure and similar",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:23588,Testability,log,logP,23588,"ison of the InChI string is done only as far as the parameter’s length. This means that we can take advantage of InChI’s layered structure:; obabel filterset.sdf -osmi --filter ""inchi=C2H6O"". will convert both Ethanol and Dimethyl Ether. Substructure and similarity searching#; For information on using obabel for substructure searching and similarity searching, see Molecular fingerprints and similarity searching. Sorting molecules#; The --sort option is used to output molecules ordered by the value of a descriptor:; obabel infile.xxx outfile.xxx --sort desc. If the descriptor desc provides a numerical value, the molecule with the smallest value is output first. For descriptors that provide a string output the order is alphabetical, but for the InChI descriptor a more chemically informed order is used (e.g. “CH4” is before than “C2H6”, “CH4” is less than “ClH” hydrogen chloride).; The order can be reversed by preceding the descriptor name with ~, e.g.:; obabel infile.xxx outfile.yyy --sort ~logP. As a shortcut, the value of the descriptor can be appended to the molecule name by adding a + to the descriptor, e.g.:; obabel aromatics.smi -osmi --sort ~MW+; c1ccccc1C=C styrene 104.149; c1ccccc1C toluene 92.1384; c1ccccc1 benzene 78.1118. Remove duplicate molecules#; The --unique option is used to remove, i.e. not output, any chemically identical molecules during conversion:; obabel infile.xxx outfile.yyy --unique [param]. The optional parameter param defines what is regarded as “chemically identical”. It can be the name of any descriptor, although not many are likely to be useful. If param is omitted, the InChI descriptor is used. Other useful descriptors are ‘cansmi’ and ‘cansmiNS’ (canonical SMILES, with and without stereochemical information),’title’ and truncated InChI (see below).; A message is output for each duplicate found:; Removed methyl benzene - a duplicate of toluene (#1). Clearly, this is more useful if each molecule has a title. The (#1) is the number of dup",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27969,Testability,log,log,27969,"ive alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-b",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:27979,Testability,log,log,27979,"ive alias representation using the --genalias option. The groups that are recognized and converted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-b",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28323,Testability,log,log,28323,"al Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules or substructures#; The --align option aligns molecules to the first molecule provided.; It is typically used with the -s option to specify an alignment; based on a substructure:; obabel pattern.www dataset.xxx -O outset.yyy -s SMARTS --align. Here, only molecules matching the specified SMARTS pattern are converted; and are aligned by; having all their atom coordinates modified. The atoms that are; used in the alignment are those matched by SMARTS i",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28336,Testability,log,log,28336,"al Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules or substructures#; The --align option aligns molecules to the first molecule provided.; It is typically used with the -s option to specify an alignment; based on a substructure:; obabel pattern.www dataset.xxx -O outset.yyy -s SMARTS --align. Here, only molecules matching the specified SMARTS pattern are converted; and are aligned by; having all their atom coordinates modified. The atoms that are; used in the alignment are those matched by SMARTS i",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28381,Testability,log,log,28381,"al Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules or substructures#; The --align option aligns molecules to the first molecule provided.; It is typically used with the -s option to specify an alignment; based on a substructure:; obabel pattern.www dataset.xxx -O outset.yyy -s SMARTS --align. Here, only molecules matching the specified SMARTS pattern are converted; and are aligned by; having all their atom coordinates modified. The atoms that are; used in the alignment are those matched by SMARTS i",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:182,Usability,Guid,Guide,182,"﻿. obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<te",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:239,Usability,Guid,Guide,239,"﻿. obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<te",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:859,Usability,Guid,Guide,859,"﻿. obabel - Convert, Filter and Manipulate Chemical Data — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<te",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:1139,Usability,simpl,simple,1139,"top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel -... obabel - Convert, Filter and Manipulate Chemical Data#; obabel is a command-line program for interconverting between many file formats used in molecular modeling and computational chemistry and related areas. It can also be used for filtering molecules and for simple manipulation of chemical data. Synopsis#. obabel [-H <help-options>]. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]. Options#; Information and help. obabel [-H <help-options>]. -H; Output usage information. -H <format-ID>; Output formatting information and options for; the format specified. -Hall; Output formatting information and options for all; formats. -L; List plugin types (charges, descriptors, fingerprints, forcefields, formats, loaders and ops). -L <plugin type>; List plugins of this type. For example, obabel -L formats gives the list of file formats. -L <plugin-ID>; Details of a particular plugin (of any plugin type). For example, obabel -L cml gives details on the CML file format. -V; Output version number. Conversion options. obabel [-i <input-ID>] infile [-o <output-ID>] [-O outfile] [OPTIONS]; obabel -:""<text>""  [-i <input-ID>] [-o <output-ID>] [-O outfile] [OPTIONS]. Note; If only input and output files are given, Open Babel will gue",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:13422,Usability,simpl,simply,13422,"-as. Output format options, which are much more common, are preceded by -x, e.g. -xn. So to read the 2D coordinates (rather than the 3D) from a CML file and generate an SVG file displaying the molecule on a black background, the relevant options are used as follows:; obabel mymol.cml out.svg -a2 -xb. Append property values to the title#; The command line option --append adds extra information to the title of the molecule.; The information can be calculated from the structure of the molecule or can originate from a property attached to the molecule (in the case of CML and SDF input files). It is used as follows:; obabel infile.sdf -osmi --append ""MW CAT_NO"". MW is the ID of a descriptor which calculates the molecular weight of the molecule, and CAT_NO is a property of the molecule from the SDF input file. The values of these are added to the title of the molecule. For input files with many molecules these additions are specific to each molecule. (Note that the related option --addtotitle simply adds the same text to every title.); The append option only takes one parameter, which means that it may be necessary to enclose all of the descriptor IDs or property names together in a single set of quotes.; If the name of the property in the SDF file (internally the Attribute in OBPairData) contains spaces, these spaces should be replaced by underscore characters, ‘_’. So the example above would also work for a property named CAT NO.; By default, the extra items are added to the title separated by spaces. But if the first character in the parameter is a punctuation character other than ‘_’, it is used as the separator instead. If the list starts with “t”, a tab character is used as a separator. Generating conformers for structures#; The command line option --conformer allows performing conformer; searches using a range of different algorithms and options:. --log - output a log of the energies (default = no log); --nconf # - number of conformers to generate. Forcefield-based ",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:16097,Usability,intuit,intuitive,16097,"etic algorithm options):; obabel EtOT5D.cml -O EtOT5D0.xyz --conformer --nconf 50 --score energy. or if you also wish to generate 3D coordinates, followed by conformer; searching try something like this:; obabel ligand.babel.smi -O ligand.babel.sdf --gen3d --conformer --nconf 20 --weighted. Filtering molecules from a multimolecule file#; Six of the options above can be used to filter molecules:. -s - convert molecules that match a SMARTS string; -v - convert molecules that don’t match a SMARTS string; -f and -l - convert molecules in a certain range; --unique - only convert unique molecules (that is, remove duplicates); --filter - convert molecules that meet specified chemical (and other) criteria. This section focuses on the --filter option, which is very versatile and can select a subset of molecules based either on properties imported with the molecule (as from a SDF file) or from calculations made by Open Babel on the molecule.; The aim has been to make the option flexible and intuitive to use; don’t be put off by the long description.; You use it like this:; obabel filterset.sdf -osmi --filter ""MW<130 ROTATABLE_BOND > 2"". It takes one parameter which probably needs to be enclosed in double quotes to avoid confusing the shell or operating system. (You don’t need the quotes with the Windows GUI.) The parameter contains one or more conditional tests. By default, these have all to be true for the molecule to be converted. As well as this implicit AND behaviour, you can write a full Boolean expression (see below). As you can see, there can be spaces or not in sensible places and the conditional tests could be separated by a comma or semicolon.; You can filter on two types of property:. An SDF property, as the identifier ROTATABLE_BOND could be. There is no need for it to be previously known to Open Babel.; A descriptor name (internally, an ID of an OBDescriptor object). This is a plug-in class so that new objects can easily be added. MW is the ID of a descriptor whi",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:24497,Usability,Clear,Clearly,24497,"ptor name with ~, e.g.:; obabel infile.xxx outfile.yyy --sort ~logP. As a shortcut, the value of the descriptor can be appended to the molecule name by adding a + to the descriptor, e.g.:; obabel aromatics.smi -osmi --sort ~MW+; c1ccccc1C=C styrene 104.149; c1ccccc1C toluene 92.1384; c1ccccc1 benzene 78.1118. Remove duplicate molecules#; The --unique option is used to remove, i.e. not output, any chemically identical molecules during conversion:; obabel infile.xxx outfile.yyy --unique [param]. The optional parameter param defines what is regarded as “chemically identical”. It can be the name of any descriptor, although not many are likely to be useful. If param is omitted, the InChI descriptor is used. Other useful descriptors are ‘cansmi’ and ‘cansmiNS’ (canonical SMILES, with and without stereochemical information),’title’ and truncated InChI (see below).; A message is output for each duplicate found:; Removed methyl benzene - a duplicate of toluene (#1). Clearly, this is more useful if each molecule has a title. The (#1) is the number of duplicates found so far.; If you wanted to identify duplicates but not output the unique molecules, you could use the null format:; obabel infile.xxx -onul --unique. Truncated InChI#; It is possible to relax the criterion by which molecules are regarded as “chemically identical” by using a truncated InChI specification as param. This takes advantage of the layered structure of InChI. So to remove duplicates, treating stereoisomers as the same molecule:; obabel infile.xxx outfile.yyy --unique /nostereo. Truncated InChI specifications start with / and are case-sensitive. param can be a concatenation of these e.g. /nochg/noiso:; /formula formula only; /connect formula and connectivity only; /nostereo ignore E/Z and sp3 stereochemistry; /nosp3 ignore sp3 stereochemistry; /noEZ ignore E/Z stereoochemistry; /nochg ignore charge and protonation; /noiso ignore isotopes. Multiple files#; The input molecules do not have to be in a single fi",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28014,Usability,simpl,simplest,28014,"erted are a subset of those that are read. Displaying or writing them still requires the -xA option. For example, if aspirin.smi contained O=C(O)c1ccccc1OC(=O)C, it could be displayed with the aliases COOH and OAc by:; obabel aspirin.smi -O out.svg --genalias -xA. Forcefield energy and minimization#; Open Babel supports a number of forcefields which can be used for energy evaluation as well as energy minimization. The available forcefields as listed as follows:; C:\>obabel -L forcefields; GAFF General Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made ex",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/babel.html:28560,Usability,Simpl,Simple,28560,"al Amber Force Field (GAFF).; Ghemical Ghemical force field.; MMFF94 MMFF94 force field.; MMFF94s MMFF94s force field.; UFF Universal Force Field. To evaluate a molecule’s energy using a forcefield, use the --energy option. The energy is put in an OBPairData object “Energy” which is accessible via an SDF or CML property or --append (to title). Use --ff <forcefield_id> to select a forcefield (default is Ghemical) and --log for a log of the energy calculation. The simplest way to output the energy is as follows:; obabel infile.xxx -otxt --energy --append ""Energy"". To perform forcefield minimization, the --minimize option is used. The following shows typical usage:; obabel infile.xxx -O outfile.yyy --minimize --steps 1500 --sd. The available options are as follows:; --log output a log of the minimization process (default= no log); --crit <converge> set convergence criteria (default=1e-6); --sd use steepest descent algorithm (default = conjugate gradient); --newton use Newton2Num linesearch (default = Simple); --ff <forcefield-id> select a forcefield (default = Ghemical); --steps <number> specify the maximum number of steps (default = 2500); --cut use cut-off (default = don't use cut-off); --rvdw <cutoff> specify the VDW cut-off distance (default = 6.0); --rele <cutoff> specify the Electrostatic cut-off distance (default = 10.0); --freq <steps> specify the frequency to update the non-bonded pairs (default = 10). Note that for both --energy and --minimize, hydrogens are made explicit before energy evaluation. Aligning molecules or substructures#; The --align option aligns molecules to the first molecule provided.; It is typically used with the -s option to specify an alignment; based on a substructure:; obabel pattern.www dataset.xxx -O outset.yyy -s SMARTS --align. Here, only molecules matching the specified SMARTS pattern are converted; and are aligned by; having all their atom coordinates modified. The atoms that are; used in the alignment are those matched by SMARTS i",MatchSource.WIKI,docs/Command-line_tools/babel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/babel.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:14998,Availability,error,errors,14998,"r type at the command prompt to concatenate the three files out1.sdf, out2.sdf, out3.sdf.; These operations are slow because the chemistry of each molecule is fully converted. As illustrated below, the filtering alone could have been done more quickly using the uncompressed file and the -aP option, which restricts the reading of the SDF file to the title and properties only, and then copying the molecule’s SDF text verbatim with -o copy. But adding the additional property is not then possible:; obabel benzodiazepine.sdf -o copy -O out1.sdf -aP --filter; ""PUBCHEM_CACTVS_HBOND_DONOR<=5 & PUBCHEM_CACTVS_HBOND_ACCEPTOR<=10 &; PUBCHEM_MOLECULAR_WEIGHT<=500 & PUBCHEM_XLOGP3<=5"". Unattempted tasks#; A number of the Chemical Toolkit Rosetta tasks cannot be attempted as the obabel tool does not (currently!) have the necessary functionality. These include the following:. Detect and report SMILES and SDF parsing errors; Ring counts in a SMILES file; Unique SMARTS matches against a SMILES string; Find the graph diameter; Break rotatable bonds and report the fragments; Change stereochemistry of certain atoms in SMILES file. To handle these tasks, you need to use the Open Babel library directly. This is the subject of the next section. previous; Spectrophores™. next; 2D Depiction. On this page; . Heavy atom counts from an SD file; Convert a SMILES string to canonical SMILES; Report how many SD file records are within a certain molecular weight range; Convert SMILES file to SD file; Report the similarity between two structures; Find the 10 nearest neighbors in a data set; Depict a compound as an image; Highlight a substructure in the depiction; Align the depiction using a fixed substructure; Perform a substructure search on an SDF file and report the number of false positives; Calculate TPSA; Working with SD tag data; Unattempted tasks. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:288,Deployability,Install,Install,288,"﻿. obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel vs... obabel vs Chemistry Toolkit Rosetta#; The Chemistry Toolkit Rosetta is the brainchild of Andrew Dalke. It is a website that illustrates how to program various chemical toolkits to do a set of tasks. To make it easily understandable, these tasks are probably on the simpler side of those in the real world. The Rosetta already contains several examples of using the Open Babel Python bindings to carry out tasks.; Here we focus on the use of the command line application obabel to accomplish the tasks listed in the Rosetta. Inevitably we will struggle with more complicated tasks; however this section is intended to show how far you can go simply using obabel, and to illustrate some of its less common features. Some of the tasks cannot be done exactly as specified, but they are are usually close enough to useful.; Note that except for the examples involving piping, the GUI could also be used. Also the copy output format at present works only for files with Unix line endings. Heavy atom counts from an SD file#. For each record from the benzodiazepine file, print the total number of heavy atoms in each record (that is, exclude hydr",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:821,Deployability,Release,Release,821,"﻿. obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel vs... obabel vs Chemistry Toolkit Rosetta#; The Chemistry Toolkit Rosetta is the brainchild of Andrew Dalke. It is a website that illustrates how to program various chemical toolkits to do a set of tasks. To make it easily understandable, these tasks are probably on the simpler side of those in the real world. The Rosetta already contains several examples of using the Open Babel Python bindings to carry out tasks.; Here we focus on the use of the command line application obabel to accomplish the tasks listed in the Rosetta. Inevitably we will struggle with more complicated tasks; however this section is intended to show how far you can go simply using obabel, and to illustrate some of its less common features. Some of the tasks cannot be done exactly as specified, but they are are usually close enough to useful.; Note that except for the examples involving piping, the GUI could also be used. Also the copy output format at present works only for files with Unix line endings. Heavy atom counts from an SD file#. For each record from the benzodiazepine file, print the total number of heavy atoms in each record (that is, exclude hydr",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:806,Energy Efficiency,Charge,Charge,806,"﻿. obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel vs... obabel vs Chemistry Toolkit Rosetta#; The Chemistry Toolkit Rosetta is the brainchild of Andrew Dalke. It is a website that illustrates how to program various chemical toolkits to do a set of tasks. To make it easily understandable, these tasks are probably on the simpler side of those in the real world. The Rosetta already contains several examples of using the Open Babel Python bindings to carry out tasks.; Here we focus on the use of the command line application obabel to accomplish the tasks listed in the Rosetta. Inevitably we will struggle with more complicated tasks; however this section is intended to show how far you can go simply using obabel, and to illustrate some of its less common features. Some of the tasks cannot be done exactly as specified, but they are are usually close enough to useful.; Note that except for the examples involving piping, the GUI could also be used. Also the copy output format at present works only for files with Unix line endings. Heavy atom counts from an SD file#. For each record from the benzodiazepine file, print the total number of heavy atoms in each record (that is, exclude hydr",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:8890,Energy Efficiency,green,green,8890,"benzodiazepine.sdf -ocopy --filter ""title=3016"" -aT |; obabel -isdf -O out.svg -s ""c1ccc2c(c1)C(=NCCN2)c3ccccc3 red"" -xu -d. Align the depiction using a fixed substructure#. Use the first 16 structures of the benzodiazepine SD file to make a 4x4 grid of depictions as a single image. The first structure is in the upper-left corner, the second is to its right, and so on. Each depiction should include the title field of the corresponding record, which in this case is the PubChem identifier.; Use “[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12” as the common SMARTS substructure. This is the fused ring of the benzodiazepine system but without bond type or atom aromaticity information. Use the first molecule as the reference depiction. All other depictions must have the depiction of their common substructure aligned to the reference. Since Open Babel 2.3.1 this can be done in one line:; obabel benzodiazepine.sdf.gz -O out.png -l16 --align -d -xu -xw 400 -xh 400; -s""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12 green"". The depiction has some cosmetic tweaks: the substructure is highlighted in green; -d removes hydrogen; -xu removes the element specific coloring.; Open Babel also supports outputting SVG, which is resolution independent as a vector format.:; obabel benzodiazepine.sdf.gz -O out.svg -l16 --align -d -xu; -s""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12 green"". In earlier versions the obfit program can be used. First extract the first molecule for the reference and the first 16 to be displayed:; obabel benzodiazepine.sdf.gz -O firstbenzo.sdf -l1; obabel benzodiazepine.sdf.gz -O sixteenbenzo.sdf -l16. Then use the program obfit, which is distributed with Open Babel:; obfit ""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12""; firstbenzo.sdf sixteenbenzo.sdf > 16out.sdf. Display the 16 molecules (with implicit hydrogens) as SVG (earlier versions of Open Babel do not support PNG):; obabel 16out.sdf -O out.png -d",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:8973,Energy Efficiency,green,green,8973,"n the depiction using a fixed substructure#. Use the first 16 structures of the benzodiazepine SD file to make a 4x4 grid of depictions as a single image. The first structure is in the upper-left corner, the second is to its right, and so on. Each depiction should include the title field of the corresponding record, which in this case is the PubChem identifier.; Use “[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12” as the common SMARTS substructure. This is the fused ring of the benzodiazepine system but without bond type or atom aromaticity information. Use the first molecule as the reference depiction. All other depictions must have the depiction of their common substructure aligned to the reference. Since Open Babel 2.3.1 this can be done in one line:; obabel benzodiazepine.sdf.gz -O out.png -l16 --align -d -xu -xw 400 -xh 400; -s""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12 green"". The depiction has some cosmetic tweaks: the substructure is highlighted in green; -d removes hydrogen; -xu removes the element specific coloring.; Open Babel also supports outputting SVG, which is resolution independent as a vector format.:; obabel benzodiazepine.sdf.gz -O out.svg -l16 --align -d -xu; -s""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12 green"". In earlier versions the obfit program can be used. First extract the first molecule for the reference and the first 16 to be displayed:; obabel benzodiazepine.sdf.gz -O firstbenzo.sdf -l1; obabel benzodiazepine.sdf.gz -O sixteenbenzo.sdf -l16. Then use the program obfit, which is distributed with Open Babel:; obfit ""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12""; firstbenzo.sdf sixteenbenzo.sdf > 16out.sdf. Display the 16 molecules (with implicit hydrogens) as SVG (earlier versions of Open Babel do not support PNG):; obabel 16out.sdf -O out.png -d -xw 400 -xh 400. Perform a substructure search on an SDF file and report the number of false positives#. The sample database wil",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:9265,Energy Efficiency,green,green,9265,"ion should include the title field of the corresponding record, which in this case is the PubChem identifier.; Use “[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12” as the common SMARTS substructure. This is the fused ring of the benzodiazepine system but without bond type or atom aromaticity information. Use the first molecule as the reference depiction. All other depictions must have the depiction of their common substructure aligned to the reference. Since Open Babel 2.3.1 this can be done in one line:; obabel benzodiazepine.sdf.gz -O out.png -l16 --align -d -xu -xw 400 -xh 400; -s""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12 green"". The depiction has some cosmetic tweaks: the substructure is highlighted in green; -d removes hydrogen; -xu removes the element specific coloring.; Open Babel also supports outputting SVG, which is resolution independent as a vector format.:; obabel benzodiazepine.sdf.gz -O out.svg -l16 --align -d -xu; -s""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12 green"". In earlier versions the obfit program can be used. First extract the first molecule for the reference and the first 16 to be displayed:; obabel benzodiazepine.sdf.gz -O firstbenzo.sdf -l1; obabel benzodiazepine.sdf.gz -O sixteenbenzo.sdf -l16. Then use the program obfit, which is distributed with Open Babel:; obfit ""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12""; firstbenzo.sdf sixteenbenzo.sdf > 16out.sdf. Display the 16 molecules (with implicit hydrogens) as SVG (earlier versions of Open Babel do not support PNG):; obabel 16out.sdf -O out.png -d -xw 400 -xh 400. Perform a substructure search on an SDF file and report the number of false positives#. The sample database will be gzip’ed SD file of the benzodiazepine data set. The query structure will be defined as “C1C=C(NC=O)C=CC=1”. The default FP2 fingerprint is sensitive to whether a bond is aromatic or not. So this Kekule structure needs to be converted to its aromatic",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:748,Modifiability,plugin,plugins,748,"﻿. obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel vs... obabel vs Chemistry Toolkit Rosetta#; The Chemistry Toolkit Rosetta is the brainchild of Andrew Dalke. It is a website that illustrates how to program various chemical toolkits to do a set of tasks. To make it easily understandable, these tasks are probably on the simpler side of those in the real world. The Rosetta already contains several examples of using the Open Babel Python bindings to carry out tasks.; Here we focus on the use of the command line application obabel to accomplish the tasks listed in the Rosetta. Inevitably we will struggle with more complicated tasks; however this section is intended to show how far you can go simply using obabel, and to illustrate some of its less common features. Some of the tasks cannot be done exactly as specified, but they are are usually close enough to useful.; Note that except for the examples involving piping, the GUI could also be used. Also the copy output format at present works only for files with Unix line endings. Heavy atom counts from an SD file#. For each record from the benzodiazepine file, print the total number of heavy atoms in each record (that is, exclude hydr",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:12230,Modifiability,plugin,plugindefines,12230,"SA of “CN2C(=O)N(C)C(=O)C1=C2N=CN1C”. The answer should be 61.82, which agrees exactly with Ertl’s online TPSA tool but not with PubChem’s value of 58.4. Open Babel’s command line cannot parse tables with custom formats. But the TPSA descriptor, defined by a table in the file psa.txt, is already present and can be used as follows:; obabel -:CN2C(=O)N(C)C(=O)C1=C2N=CN1C -osmi --append TPSA. giving:; Cn1c(=O)n(C)c(=O)c2c1ncn2C 61.82; 1 molecule converted. The table in tpsa.tab and Open Babel’s psa.txt have the same content but different formats. The first few rows of tpsa.tab are:; psa SMARTS description; 23.79 [N0;H0;D1;v3] N#; 23.85 [N+0;H1;D1;v3] [NH]=; 26.02 [N+0;H2;D1;v3] [NH2]-. and the equivalent lines from Open Babel’s psa.txt:; [N]#* 23.79; [NH]=* 23.85; [NH2]-* 26.02. It is possible to add new descriptors without having to recompile. If another property, myProp, could be calculated using a table in myprop.txt with the same format as psa.txt, then a descriptor could set up by adding the following item to plugindefines.txt:; OBGroupContrib; myProp # name of descriptor; myprop.txt # data file; Coolness index # brief description. The following would then output molecules in increasing order of myProp with the value added to the title:; obabel infile.smi -osmi --sort myProp+. Working with SD tag data#. The input file is SD file from the benzodiazepine data set. Every record contains the tags PUBCHEM_CACTVS_HBOND_DONOR, PUBCHEM_CACTVS_HBOND_ACCEPTOR and PUBCHEM_MOLECULAR_WEIGHT, and most of the records contain the tag PUBCHEM_XLOGP3.; The program must create a new SD file which is the same as the input file but with a new tag data field named “RULE5”. This must be “1” if the record passes Lipinski’s rule, “0” if it does not, and “no logP” if the PUBCHEM_XLOGP3 field is missing. This exercise is a bit of a stretch for the Open Babel command-line. However, the individual lines may be instructional, since they are more like the sort of task that would normally be att",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:9859,Performance,Perform,Perform,9859,"depiction has some cosmetic tweaks: the substructure is highlighted in green; -d removes hydrogen; -xu removes the element specific coloring.; Open Babel also supports outputting SVG, which is resolution independent as a vector format.:; obabel benzodiazepine.sdf.gz -O out.svg -l16 --align -d -xu; -s""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12 green"". In earlier versions the obfit program can be used. First extract the first molecule for the reference and the first 16 to be displayed:; obabel benzodiazepine.sdf.gz -O firstbenzo.sdf -l1; obabel benzodiazepine.sdf.gz -O sixteenbenzo.sdf -l16. Then use the program obfit, which is distributed with Open Babel:; obfit ""[#7]~1~[#6]~[#6]~[#7]~[#6]~[#6]~2~[#6]~[#6]~[#6]~[#6]~[#6]12""; firstbenzo.sdf sixteenbenzo.sdf > 16out.sdf. Display the 16 molecules (with implicit hydrogens) as SVG (earlier versions of Open Babel do not support PNG):; obabel 16out.sdf -O out.png -d -xw 400 -xh 400. Perform a substructure search on an SDF file and report the number of false positives#. The sample database will be gzip’ed SD file of the benzodiazepine data set. The query structure will be defined as “C1C=C(NC=O)C=CC=1”. The default FP2 fingerprint is sensitive to whether a bond is aromatic or not. So this Kekule structure needs to be converted to its aromatic form. As this happens automatically on conversion, the easiest way is to store the SMILES string in a file, and use this file to specify the search pattern.; Prepare an index (of the unzipped data file):; obabel benzodiazepine.sdf -ofs. Do the substructure search. A very large number of molecules match the query, so the maximum number of hits has to be increased with the -al 9000 option. By virtue of the ~ it is the false positives that are output (to nowhere) but their number is reported:; obabel benzodiazepine.fs -onul -s ~substruct.smi -al 9000; 8531 candidates from fingerprint search phase; 12 molecules converted. Calculate TPSA#. The goal of this task is get an id",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:15789,Performance,Perform,Perform,15789,"r type at the command prompt to concatenate the three files out1.sdf, out2.sdf, out3.sdf.; These operations are slow because the chemistry of each molecule is fully converted. As illustrated below, the filtering alone could have been done more quickly using the uncompressed file and the -aP option, which restricts the reading of the SDF file to the title and properties only, and then copying the molecule’s SDF text verbatim with -o copy. But adding the additional property is not then possible:; obabel benzodiazepine.sdf -o copy -O out1.sdf -aP --filter; ""PUBCHEM_CACTVS_HBOND_DONOR<=5 & PUBCHEM_CACTVS_HBOND_ACCEPTOR<=10 &; PUBCHEM_MOLECULAR_WEIGHT<=500 & PUBCHEM_XLOGP3<=5"". Unattempted tasks#; A number of the Chemical Toolkit Rosetta tasks cannot be attempted as the obabel tool does not (currently!) have the necessary functionality. These include the following:. Detect and report SMILES and SDF parsing errors; Ring counts in a SMILES file; Unique SMARTS matches against a SMILES string; Find the graph diameter; Break rotatable bonds and report the fragments; Change stereochemistry of certain atoms in SMILES file. To handle these tasks, you need to use the Open Babel library directly. This is the subject of the next section. previous; Spectrophores™. next; 2D Depiction. On this page; . Heavy atom counts from an SD file; Convert a SMILES string to canonical SMILES; Report how many SD file records are within a certain molecular weight range; Convert SMILES file to SD file; Report the similarity between two structures; Find the 10 nearest neighbors in a data set; Depict a compound as an image; Highlight a substructure in the depiction; Align the depiction using a fixed substructure; Perform a substructure search on an SDF file and report the number of false positives; Calculate TPSA; Working with SD tag data; Unattempted tasks. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:14957,Safety,Detect,Detect,14957,"r type at the command prompt to concatenate the three files out1.sdf, out2.sdf, out3.sdf.; These operations are slow because the chemistry of each molecule is fully converted. As illustrated below, the filtering alone could have been done more quickly using the uncompressed file and the -aP option, which restricts the reading of the SDF file to the title and properties only, and then copying the molecule’s SDF text verbatim with -o copy. But adding the additional property is not then possible:; obabel benzodiazepine.sdf -o copy -O out1.sdf -aP --filter; ""PUBCHEM_CACTVS_HBOND_DONOR<=5 & PUBCHEM_CACTVS_HBOND_ACCEPTOR<=10 &; PUBCHEM_MOLECULAR_WEIGHT<=500 & PUBCHEM_XLOGP3<=5"". Unattempted tasks#; A number of the Chemical Toolkit Rosetta tasks cannot be attempted as the obabel tool does not (currently!) have the necessary functionality. These include the following:. Detect and report SMILES and SDF parsing errors; Ring counts in a SMILES file; Unique SMARTS matches against a SMILES string; Find the graph diameter; Break rotatable bonds and report the fragments; Change stereochemistry of certain atoms in SMILES file. To handle these tasks, you need to use the Open Babel library directly. This is the subject of the next section. previous; Spectrophores™. next; 2D Depiction. On this page; . Heavy atom counts from an SD file; Convert a SMILES string to canonical SMILES; Report how many SD file records are within a certain molecular weight range; Convert SMILES file to SD file; Report the similarity between two structures; Find the 10 nearest neighbors in a data set; Depict a compound as an image; Highlight a substructure in the depiction; Align the depiction using a fixed substructure; Perform a substructure search on an SDF file and report the number of false positives; Calculate TPSA; Working with SD tag data; Unattempted tasks. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:12968,Testability,log,logP,12968,"[N]#* 23.79; [NH]=* 23.85; [NH2]-* 26.02. It is possible to add new descriptors without having to recompile. If another property, myProp, could be calculated using a table in myprop.txt with the same format as psa.txt, then a descriptor could set up by adding the following item to plugindefines.txt:; OBGroupContrib; myProp # name of descriptor; myprop.txt # data file; Coolness index # brief description. The following would then output molecules in increasing order of myProp with the value added to the title:; obabel infile.smi -osmi --sort myProp+. Working with SD tag data#. The input file is SD file from the benzodiazepine data set. Every record contains the tags PUBCHEM_CACTVS_HBOND_DONOR, PUBCHEM_CACTVS_HBOND_ACCEPTOR and PUBCHEM_MOLECULAR_WEIGHT, and most of the records contain the tag PUBCHEM_XLOGP3.; The program must create a new SD file which is the same as the input file but with a new tag data field named “RULE5”. This must be “1” if the record passes Lipinski’s rule, “0” if it does not, and “no logP” if the PUBCHEM_XLOGP3 field is missing. This exercise is a bit of a stretch for the Open Babel command-line. However, the individual lines may be instructional, since they are more like the sort of task that would normally be attempted.; obabel benzodiazepine.sdf.gz -O out1.sdf --filter ""PUBCHEM_CACTVS_HBOND_DONOR<=5 &; PUBCHEM_CACTVS_HBOND_ACCEPTOR<=10 & PUBCHEM_MOLECULAR_WEIGHT<=500 &; PUBCHEM_XLOGP3<=5""; --property ""RULE5"" ""1"". obabel benzodiazepine.sdf.gz -O out2.sdf --filter ""!PUBCHEM_XLOGP3""; --property ""RULE5"" ""no logP"". obabel benzodiazepine.sdf.gz -O out3.sdf --filter ""!PUBCHEM_XLOGP3 &; !(PUBCHEM_CACTVS_HBOND_DONOR<=5 & PUBCHEM_CACTVS_HBOND_ACCEPTOR<=10 &; PUBCHEM_MOLECULAR_WEIGHT<=500 & PUBCHEM_XLOGP3<=5)""; --property ""RULE5"" ""0"". The first command converts only molecules passing Lipinski’s rule, putting them in out1.sdf, and adding an additional property, RULE5, with a value of 1.; The second command converts only molecules that do not have a proper",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:13501,Testability,log,logP,13501,".smi -osmi --sort myProp+. Working with SD tag data#. The input file is SD file from the benzodiazepine data set. Every record contains the tags PUBCHEM_CACTVS_HBOND_DONOR, PUBCHEM_CACTVS_HBOND_ACCEPTOR and PUBCHEM_MOLECULAR_WEIGHT, and most of the records contain the tag PUBCHEM_XLOGP3.; The program must create a new SD file which is the same as the input file but with a new tag data field named “RULE5”. This must be “1” if the record passes Lipinski’s rule, “0” if it does not, and “no logP” if the PUBCHEM_XLOGP3 field is missing. This exercise is a bit of a stretch for the Open Babel command-line. However, the individual lines may be instructional, since they are more like the sort of task that would normally be attempted.; obabel benzodiazepine.sdf.gz -O out1.sdf --filter ""PUBCHEM_CACTVS_HBOND_DONOR<=5 &; PUBCHEM_CACTVS_HBOND_ACCEPTOR<=10 & PUBCHEM_MOLECULAR_WEIGHT<=500 &; PUBCHEM_XLOGP3<=5""; --property ""RULE5"" ""1"". obabel benzodiazepine.sdf.gz -O out2.sdf --filter ""!PUBCHEM_XLOGP3""; --property ""RULE5"" ""no logP"". obabel benzodiazepine.sdf.gz -O out3.sdf --filter ""!PUBCHEM_XLOGP3 &; !(PUBCHEM_CACTVS_HBOND_DONOR<=5 & PUBCHEM_CACTVS_HBOND_ACCEPTOR<=10 &; PUBCHEM_MOLECULAR_WEIGHT<=500 & PUBCHEM_XLOGP3<=5)""; --property ""RULE5"" ""0"". The first command converts only molecules passing Lipinski’s rule, putting them in out1.sdf, and adding an additional property, RULE5, with a value of 1.; The second command converts only molecules that do not have a property PUBCHEM_XLOGP3.; The third command converts only molecules that do have a PUBCHEM_XLOGP3 and which fail Lipinski’s rule.; Use cat or type at the command prompt to concatenate the three files out1.sdf, out2.sdf, out3.sdf.; These operations are slow because the chemistry of each molecule is fully converted. As illustrated below, the filtering alone could have been done more quickly using the uncompressed file and the -aP option, which restricts the reading of the SDF file to the title and properties only, and then copying",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:164,Usability,Guid,Guide,164,"﻿. obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel vs... obabel vs Chemistry Toolkit Rosetta#; The Chemistry Toolkit Rosetta is the brainchild of Andrew Dalke. It is a website that illustrates how to program various chemical toolkits to do a set of tasks. To make it easily understandable, these tasks are probably on the simpler side of those in the real world. The Rosetta already contains several examples of using the Open Babel Python bindings to carry out tasks.; Here we focus on the use of the command line application obabel to accomplish the tasks listed in the Rosetta. Inevitably we will struggle with more complicated tasks; however this section is intended to show how far you can go simply using obabel, and to illustrate some of its less common features. Some of the tasks cannot be done exactly as specified, but they are are usually close enough to useful.; Note that except for the examples involving piping, the GUI could also be used. Also the copy output format at present works only for files with Unix line endings. Heavy atom counts from an SD file#. For each record from the benzodiazepine file, print the total number of heavy atoms in each record (that is, exclude hydr",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:221,Usability,Guid,Guide,221,"﻿. obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel vs... obabel vs Chemistry Toolkit Rosetta#; The Chemistry Toolkit Rosetta is the brainchild of Andrew Dalke. It is a website that illustrates how to program various chemical toolkits to do a set of tasks. To make it easily understandable, these tasks are probably on the simpler side of those in the real world. The Rosetta already contains several examples of using the Open Babel Python bindings to carry out tasks.; Here we focus on the use of the command line application obabel to accomplish the tasks listed in the Rosetta. Inevitably we will struggle with more complicated tasks; however this section is intended to show how far you can go simply using obabel, and to illustrate some of its less common features. Some of the tasks cannot be done exactly as specified, but they are are usually close enough to useful.; Note that except for the examples involving piping, the GUI could also be used. Also the copy output format at present works only for files with Unix line endings. Heavy atom counts from an SD file#. For each record from the benzodiazepine file, print the total number of heavy atoms in each record (that is, exclude hydr",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:841,Usability,Guid,Guide,841,"﻿. obabel vs Chemistry Toolkit Rosetta — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel vs... obabel vs Chemistry Toolkit Rosetta#; The Chemistry Toolkit Rosetta is the brainchild of Andrew Dalke. It is a website that illustrates how to program various chemical toolkits to do a set of tasks. To make it easily understandable, these tasks are probably on the simpler side of those in the real world. The Rosetta already contains several examples of using the Open Babel Python bindings to carry out tasks.; Here we focus on the use of the command line application obabel to accomplish the tasks listed in the Rosetta. Inevitably we will struggle with more complicated tasks; however this section is intended to show how far you can go simply using obabel, and to illustrate some of its less common features. Some of the tasks cannot be done exactly as specified, but they are are usually close enough to useful.; Note that except for the examples involving piping, the GUI could also be used. Also the copy output format at present works only for files with Unix line endings. Heavy atom counts from an SD file#. For each record from the benzodiazepine file, print the total number of heavy atoms in each record (that is, exclude hydr",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:1126,Usability,simpl,simpler,1126," top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel vs... obabel vs Chemistry Toolkit Rosetta#; The Chemistry Toolkit Rosetta is the brainchild of Andrew Dalke. It is a website that illustrates how to program various chemical toolkits to do a set of tasks. To make it easily understandable, these tasks are probably on the simpler side of those in the real world. The Rosetta already contains several examples of using the Open Babel Python bindings to carry out tasks.; Here we focus on the use of the command line application obabel to accomplish the tasks listed in the Rosetta. Inevitably we will struggle with more complicated tasks; however this section is intended to show how far you can go simply using obabel, and to illustrate some of its less common features. Some of the tasks cannot be done exactly as specified, but they are are usually close enough to useful.; Note that except for the examples involving piping, the GUI could also be used. Also the copy output format at present works only for files with Unix line endings. Heavy atom counts from an SD file#. For each record from the benzodiazepine file, print the total number of heavy atoms in each record (that is, exclude hydrogens). The output is one output line per record, containing the count as an integer. If at all possible, show h",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Command-line_tools/Rosetta.html:1502,Usability,simpl,simply,1502,"Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; obabel vs... obabel vs Chemistry Toolkit Rosetta#; The Chemistry Toolkit Rosetta is the brainchild of Andrew Dalke. It is a website that illustrates how to program various chemical toolkits to do a set of tasks. To make it easily understandable, these tasks are probably on the simpler side of those in the real world. The Rosetta already contains several examples of using the Open Babel Python bindings to carry out tasks.; Here we focus on the use of the command line application obabel to accomplish the tasks listed in the Rosetta. Inevitably we will struggle with more complicated tasks; however this section is intended to show how far you can go simply using obabel, and to illustrate some of its less common features. Some of the tasks cannot be done exactly as specified, but they are are usually close enough to useful.; Note that except for the examples involving piping, the GUI could also be used. Also the copy output format at present works only for files with Unix line endings. Heavy atom counts from an SD file#. For each record from the benzodiazepine file, print the total number of heavy atoms in each record (that is, exclude hydrogens). The output is one output line per record, containing the count as an integer. If at all possible, show how to read directly from the gzip’ed input SD file. obabel benzodiazepine.sdf.gz -otxt --title """" --append atoms -d -l5. The txt format outputs only the title but we set that to nothing and then append the result. The atoms descriptor counts the number of atoms after the -d option has removed the hydrogens. The -l5 limits the output to the first 5 molecules, in ca",MatchSource.WIKI,docs/Command-line_tools/Rosetta.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Command-line_tools/Rosetta.html
http://openbabel.org//docs/Contributing/Contributing.html:1120,Availability,Error,Error,1120,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:1451,Availability,Mainten,Maintenance,1451,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:279,Deployability,Install,Install,279,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:901,Deployability,Release,Release,901,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:886,Energy Efficiency,Charge,Charge,886,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:828,Modifiability,plugin,plugins,828,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:793,Testability,test,test,793,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:1265,Testability,test,test,1265,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:1279,Testability,test,tests,1279,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:1286,Testability,Test,Test,1286,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:1302,Testability,Test,Test,1302,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:1340,Testability,Test,Test,1340,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:155,Usability,Guid,Guide,155,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:212,Usability,Guid,Guide,212,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/Contributing.html:921,Usability,Guid,Guide,921,"﻿. Contributing to Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing... Contributing to Open Babel#. Overview; Developing Open Babel; Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. Documentation; Adding New Code; Modifying Old Code; User documentation and tutorials. Adding a new test; Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. Software Archaeology; Documentation and Code Readability; Code Maintenance. previous; Radicals and SMILES extensions. next; Overview. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Contributing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Contributing.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:1432,Availability,down,download,1432,"s Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to fin",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:3312,Availability,down,down,3312,"l mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc. and has all the chemical structure description and manipulation. This bit is the heart of the application and its API can be used as a chemical toolbox. It has no input/output capabilities.; The Formats, which read and write to files of different types. These classes are derived from a common base class, OBFormat, which is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class constructor registers the presence of the class with OBConversion. This means the formats are plugins - new formats can be added without changing any framework code.; Common Formats include OBMoleculeFormats and XMLBaseFormat from which most other formats (like Format A and Format B in the diagram) are derived. Independent formats like F",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:4379,Availability,avail,available,4379,"emical core, which contains OBMol etc. and has all the chemical structure description and manipulation. This bit is the heart of the application and its API can be used as a chemical toolbox. It has no input/output capabilities.; The Formats, which read and write to files of different types. These classes are derived from a common base class, OBFormat, which is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class constructor registers the presence of the class with OBConversion. This means the formats are plugins - new formats can be added without changing any framework code.; Common Formats include OBMoleculeFormats and XMLBaseFormat from which most other formats (like Format A and Format B in the diagram) are derived. Independent formats like Format C are also possible.; The Conversion control, which also keeps track of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and dis",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:5325,Availability,Error,Error,5325,"of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:5394,Availability,error,errors,5394,"of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:5968,Availability,mainten,maintenance,5968,"or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly thes",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7092,Availability,Error,Error,7092,"mes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., mol",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7199,Availability,recover,recover,7199,"mes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., mol",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7212,Availability,error,error,7212,"mes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., mol",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7263,Availability,error,error,7263," then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecul",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7377,Availability,error,errors,7377," then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecul",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7434,Availability,Error,Errors,7434," needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, w",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7681,Availability,error,error,7681,"helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandle",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7932,Availability,error,error,7932,"o OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:8077,Availability,error,errors,8077,"ge any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at o",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:8529,Availability,error,errors,8529," motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at once. Ideally, this should all happen without triggering unintended perception routines. Therefore, the BeginModify() call marks the beginning of such code, and EndModify() triggers any needed updates of lazy evaluation methods.; For example:; mol.BeginModify();; double x,y,z;; OBAtom *atom;; vector<string> vs;. for (i = 1; i <= natoms; i ++); {; if (!ifs.getline(buffer,BUFF_SIZE)); return(false);; tokenize(vs,buffer);; if (vs.size() != 4",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:8595,Availability,error,error,8595," error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at once. Ideally, this should all happen without triggering unintended perception routines. Therefore, the BeginModify() call marks the beginning of such code, and EndModify() triggers any needed updates of lazy evaluation methods.; For example:; mol.BeginModify();; double x,y,z;; OBAtom *atom;; vector<string> vs;. for (i = 1; i <= natoms; i ++); {; if (!ifs.getline(buffer,BUFF_SIZE)); return(false);; tokenize(vs,buffer);; if (vs.size() != 4); return(false);. atom = mol.NewAtom();; x = atof((char*)vs[1].c_str());; y = atof((char*)vs[2].c_str());; z = atof((char*)vs[3].c_str());. atom->SetVector(x,y,z); //se",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:10260,Availability,Error,Error,10260,"ilter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at once. Ideally, this should all happen without triggering unintended perception routines. Therefore, the BeginModify() call marks the beginning of such code, and EndModify() triggers any needed updates of lazy evaluation methods.; For example:; mol.BeginModify();; double x,y,z;; OBAtom *atom;; vector<string> vs;. for (i = 1; i <= natoms; i ++); {; if (!ifs.getline(buffer,BUFF_SIZE)); return(false);; tokenize(vs,buffer);; if (vs.size() != 4); return(false);. atom = mol.NewAtom();; x = atof((char*)vs[1].c_str());; y = atof((char*)vs[2].c_str());; z = atof((char*)vs[3].c_str());. atom->SetVector(x,y,z); //set coordinates; atom->SetAtomicNum(atoi(vs[0].c_str())); // set atomic number; }; mol.ConnectTheDots();; mol.PerceiveBondOrders();; mol.EndModify();. This code reads in a list of atoms with XYZ coordinates and the atomic number in the first column (vs[0]). Since hundreds or thousands of atoms could be added to a molecule, followed by creating bonds, the code is enclosed in a BeginModify()/EndModify() pair. previous; Overview. next; Documentation. On this page; . Developer Resources; Working with the Development Code; Keeping up to date with Git. Modular design of code base; Error Handling and Warnings; Lazy Evaluation. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:274,Deployability,Install,Install,274,"﻿. Developing Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:896,Deployability,Release,Release,896,"﻿. Developing Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:1445,Deployability,update,update,1445,"s Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to fin",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:2086,Deployability,update,update,2086," code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for eac",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:2498,Deployability,update,update,2498,"#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc.",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:9262,Deployability,update,updates,9262," is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at once. Ideally, this should all happen without triggering unintended perception routines. Therefore, the BeginModify() call marks the beginning of such code, and EndModify() triggers any needed updates of lazy evaluation methods.; For example:; mol.BeginModify();; double x,y,z;; OBAtom *atom;; vector<string> vs;. for (i = 1; i <= natoms; i ++); {; if (!ifs.getline(buffer,BUFF_SIZE)); return(false);; tokenize(vs,buffer);; if (vs.size() != 4); return(false);. atom = mol.NewAtom();; x = atof((char*)vs[1].c_str());; y = atof((char*)vs[2].c_str());; z = atof((char*)vs[3].c_str());. atom->SetVector(x,y,z); //set coordinates; atom->SetAtomicNum(atoi(vs[0].c_str())); // set atomic number; }; mol.ConnectTheDots();; mol.PerceiveBondOrders();; mol.EndModify();. This code reads in a list of atoms with XYZ coordinates and the atomic number in the first column (vs[0]). Since hundreds or thousands of atoms could be added to a molecule, followed by creating bonds, the code is enclosed in a BeginModify()/EndModify() pair. previous; Overview. next; Documentation. On this page; . Developer Resources; Working with the Development Code; Keeping up to date with G",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:881,Energy Efficiency,Charge,Charge,881,"﻿. Developing Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7797,Energy Efficiency,monitor,monitor,7797,"mework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginMo",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:2951,Integrability,interface,interfaces,2951,"g CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc. and has all the chemical structure description and manipulation. This bit is the heart of the application and its API can be used as a chemical toolbox. It has no input/output capabilities.; The Formats, which read and write to files of different types. These classes are derived from a common base class, OBFormat, which is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:2997,Integrability,depend,dependency,2997,"g CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc. and has all the chemical structure description and manipulation. This bit is the heart of the application and its API can be used as a chemical toolbox. It has no input/output capabilities.; The Formats, which read and write to files of different types. These classes are derived from a common base class, OBFormat, which is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:3821,Integrability,rout,routines,3821,"e use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc. and has all the chemical structure description and manipulation. This bit is the heart of the application and its API can be used as a chemical toolbox. It has no input/output capabilities.; The Formats, which read and write to files of different types. These classes are derived from a common base class, OBFormat, which is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class constructor registers the presence of the class with OBConversion. This means the formats are plugins - new formats can be added without changing any framework code.; Common Formats include OBMoleculeFormats and XMLBaseFormat from which most other formats (like Format A and Format B in the diagram) are derived. Independent formats like Format C are also possible.; The Conversion control, which also keeps track of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:4614,Integrability,interface,interface,4614,"hich read and write to files of different types. These classes are derived from a common base class, OBFormat, which is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class constructor registers the presence of the class with OBConversion. This means the formats are plugins - new formats can be added without changing any framework code.; Common Formats include OBMoleculeFormats and XMLBaseFormat from which most other formats (like Format A and Format B in the diagram) are derived. Independent formats like Format C are also possible.; The Conversion control, which also keeps track of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built i",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:4685,Integrability,Interface,Interface,4685," is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class constructor registers the presence of the class with OBConversion. This means the formats are plugins - new formats can be added without changing any framework code.; Common Formats include OBMoleculeFormats and XMLBaseFormat from which most other formats (like Format A and Format B in the diagram) are derived. Independent formats like Format C are also possible.; The Conversion control, which also keeps track of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:4840,Integrability,depend,depends,4840,"mat file contains a global object of the format class. When the format is loaded the class constructor registers the presence of the class with OBConversion. This means the formats are plugins - new formats can be added without changing any framework code.; Common Formats include OBMoleculeFormats and XMLBaseFormat from which most other formats (like Format A and Format B in the diagram) are derived. Independent formats like Format C are also possible.; The Conversion control, which also keeps track of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:5530,Integrability,depend,dependencies,5530,"rts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol fil",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:5926,Integrability,depend,dependencies,5926,"or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly thes",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:6233,Integrability,interface,interface,6233," Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7230,Integrability,Depend,Depending,7230," then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecul",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7272,Integrability,message,message,7272," then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecul",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7358,Integrability,message,messages,7358," then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecul",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7605,Integrability,message,messages,7605,"tly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:8207,Integrability,message,messages,8207," gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at once. Ideally, this should all happen without triggering unintended perception routines. Therefore, the BeginModify() ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:8272,Integrability,message,messages,8272,"ay or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at once. Ideally, this should all happen without triggering unintended perception routines. Therefore, the BeginModify() call marks the beginning of such code, and EndModify() triggers any needed updates of lazy eval",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:8394,Integrability,message,messages,8394," of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at once. Ideally, this should all happen without triggering unintended perception routines. Therefore, the BeginModify() call marks the beginning of such code, and EndModify() triggers any needed updates of lazy evaluation methods.; For example:; mol.BeginModify();; double x,y,z;; OBAtom *atom;; vector<string> vs;. for (i = 1; i <= natoms; ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:9148,Integrability,rout,routines,9148,"arning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at once. Ideally, this should all happen without triggering unintended perception routines. Therefore, the BeginModify() call marks the beginning of such code, and EndModify() triggers any needed updates of lazy evaluation methods.; For example:; mol.BeginModify();; double x,y,z;; OBAtom *atom;; vector<string> vs;. for (i = 1; i <= natoms; i ++); {; if (!ifs.getline(buffer,BUFF_SIZE)); return(false);; tokenize(vs,buffer);; if (vs.size() != 4); return(false);. atom = mol.NewAtom();; x = atof((char*)vs[1].c_str());; y = atof((char*)vs[2].c_str());; z = atof((char*)vs[3].c_str());. atom->SetVector(x,y,z); //set coordinates; atom->SetAtomicNum(atoi(vs[0].c_str())); // set atomic number; }; mol.ConnectTheDots();; mol.PerceiveBondOrders();; mol.EndModify();. This code reads in a list of atoms with XYZ coordinates and the atomic number in the first column (vs[0]). Since hundreds or thousands of atoms could be added to a molecule, followed by creating bonds, the code is enclosed in a BeginModify()/EndModify() pair. previous; Overview. next; D",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:823,Modifiability,plugin,plugins,823,"﻿. Developing Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:1927,Modifiability,Config,Configure,1927,"ng... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interface",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:4052,Modifiability,plugin,plugins,4052,"one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc. and has all the chemical structure description and manipulation. This bit is the heart of the application and its API can be used as a chemical toolbox. It has no input/output capabilities.; The Formats, which read and write to files of different types. These classes are derived from a common base class, OBFormat, which is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class constructor registers the presence of the class with OBConversion. This means the formats are plugins - new formats can be added without changing any framework code.; Common Formats include OBMoleculeFormats and XMLBaseFormat from which most other formats (like Format A and Format B in the diagram) are derived. Independent formats like Format C are also possible.; The Conversion control, which also keeps track of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and f",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:5219,Modifiability,plugin,plugins,5219," are derived. Independent formats like Format C are also possible.; The Conversion control, which also keeps track of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know a",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:6636,Modifiability,config,configured,6636,"the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other mess",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:6748,Modifiability,polymorphi,polymorphic,6748,"tarts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7021,Modifiability,extend,extended,7021,"t a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in t",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7496,Modifiability,flexible,flexible,7496," needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, w",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:3941,Performance,load,loaded,3941," as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc. and has all the chemical structure description and manipulation. This bit is the heart of the application and its API can be used as a chemical toolbox. It has no input/output capabilities.; The Formats, which read and write to files of different types. These classes are derived from a common base class, OBFormat, which is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class constructor registers the presence of the class with OBConversion. This means the formats are plugins - new formats can be added without changing any framework code.; Common Formats include OBMoleculeFormats and XMLBaseFormat from which most other formats (like Format A and Format B in the diagram) are derived. Independent formats like Format C are also possible.; The Conversion control, which also keeps track of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; T",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7199,Safety,recover,recover,7199,"mes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a pseudo format OBAPIInterface.; Sometimes one format needs to use code from another format, for example, rxnformat needs to read mol files with code from mdlformat. The calling format should not use the code directly but should do it through a OBConversion object configured with the appropriate helper format.; The objects passed between the modules in the diagram above are polymorphic :obapi:`OBBase` pointers. This means that the conversion framework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., mol",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:2460,Security,checksum,checksum,2460,"#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc.",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:7809,Security,audit,audit,7809,"mework can be used by any object derived from OBBase (which essentially means anything - chemical or not). Most commonly these refer to OBMol objects, less commonly to OBReaction objects, but could be extended to anything else without needing to change any existing code. Error Handling and Warnings#; The general philosophy of the Open Babel project is to attempt to gracefully recover from error conditions. Depending on the severity of the error, a message may or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginMo",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:8281,Security,audit,auditing,8281,"ay or may not be sent to the user – users can filter out developer debugging messages and minor errors, but should be notified of significant problems.; Errors and warnings in Open Babel are handled internally by a flexible system motivated by a few factors:. End users often do not wish to be deluged by debugging or other messages during operation.; Other developers may wish to redirect or filter error/warning output (e.g., in a GUI).; The operation of Open Babel should be open to developers and users alike to monitor an “audit trail” of operations on files and molecules, and debug the program and library itself when the need arises. Multiple error/warning levels exist and should be used by code. These are defined in the :obapi:`obMessageLevel` enum as follows:. obError – for critical errors (e.g., cannot read a file); obWarning – for non-critical problems (e.g., molecule appears empty); obInfo – for informative messages (e.g., file is a non-standard format); obAuditMsg – for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.); obDebug – for messages only useful for debugging purposes. The default filter level is set to obWarning, which means that users are told of critical errors, but not non-standard formatting of input files.; A global error handler :obapi:`obErrorLog` (an instance of :obapi:`OBMessageHandler`) is defined and should be used as shown in the API documentation for the :obapi:`OBMessageHandler` class. Lazy Evaluation#; The :obapi:`OBMol::BeginModify() <OpenBabel::OBMol::BeginModify>` and :obapi:`OBMol::EndModify() <OpenBabel::OBMol::EndModify>` calls are part of Open Babel’s lazy evaluation mechanism.; In some cases, code may desire to make a large number of changes to an OBMol object at once. Ideally, this should all happen without triggering unintended perception routines. Therefore, the BeginModify() call marks the beginning of such code, and EndModify() triggers any needed updates of lazy eval",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:788,Testability,test,test,788,"﻿. Developing Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:2444,Testability,log,log,2444,"#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc.",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:2547,Testability,log,log,2547,"rol repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc. and has all the chemical structure description and manipulation. This bit is the heart of the application and its API can be used as a chemical toolbox. It has no in",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:5378,Testability,log,log,5378,"of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly call code only in other modules connected to it by forward arrows. So some discipline is needed when adding new code, and sometimes non-obvious work-arounds are necessary. For instance, since the user interface doesn’t know about the Chemical Core, if it were necessary to set any parameters in it, then this would have to be done through a ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:150,Usability,Guid,Guide,150,"﻿. Developing Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:207,Usability,Guid,Guide,207,"﻿. Developing Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:916,Usability,Guid,Guide,916,"﻿. Developing Open Babel — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:1151,Usability,guid,guidelines,1151," API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Developing... Developing Open Babel#; Due to its open nature of its development, Open Babel contains code contributed by a wide variety of developers (see Thanks). This section describes some general guidelines and “best practices” for code developers. Developer Resources#; For new and existing developers here are some useful resources:. GitHub project page; Development version API documentation; Development version Sphinx documentation. Working with the Development Code#; To download and update the latest version of the Open Babel source code, you need Git. Git is the name of the project used to maintain the Open Babel version control repository. There are many clients for Git, including command-line and GUI applications. Keeping up to date with Git#. Check out the latest development version:; git clone https://github.com/openbabel/openbabel.git openbabel-dev. This creates a directory called openbabel-dev, which contains the latest source code from Open Babel. Configure and compile this using CMake (see Compiling Open Babel).; After some time passes, and you want the latest bug fixes or new features, you may want to update your source code. To do this, go into the openbabel-dev directory ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:3148,Usability,simpl,simple,3148,"te your source code. To do this, go into the openbabel-dev directory you created above, and type:; git pull -u. Do step (2) again.; If, after updating, the compilation fails please report it to the Open Babel mailing list. In the meanwhile, if you want to go back to a particular revision (that is, if you don’t want to use the latest one), just use git log to find the checksum of the current revision, and update to an earlier revision using this:. $ git log; …; commit 1c2916cc5e6ed31a23291524b08291c904506c3f; Author: Noel O’Boyle <baoilleach@gmail.com>; Date: Mon Apr 30 07:33:17 2018 +0100; $ git checkout 1c2916cc5. Modular design of code base#; Since version 2.0, Open Babel has had a modular structure. Particularly for the use of Open Babel as a chemical file format converter, it aims to:. separate the chemistry, the conversion process and the user interfaces, reducing, as far as possible, the dependency of one on another.; put all the code for each chemical format in one place (usually a single cpp file) and make the addition of new formats simple.; allow the format conversion of not just molecules, but also any other chemical objects, such as reactions. The structure of the Open Babel codebase broken down into modules#. The separate parts of the OpenBabel program are:. The Chemical core, which contains OBMol etc. and has all the chemical structure description and manipulation. This bit is the heart of the application and its API can be used as a chemical toolbox. It has no input/output capabilities.; The Formats, which read and write to files of different types. These classes are derived from a common base class, OBFormat, which is in the Conversion Control module. They also make use of the chemical routines in the Chemical Core module. Each format file contains a global object of the format class. When the format is loaded the class constructor registers the presence of the class with OBConversion. This means the formats are plugins - new formats can be added with",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/DevBestPractices.html:5010,Usability,usab,usable,5010,"eans the formats are plugins - new formats can be added without changing any framework code.; Common Formats include OBMoleculeFormats and XMLBaseFormat from which most other formats (like Format A and Format B in the diagram) are derived. Independent formats like Format C are also possible.; The Conversion control, which also keeps track of the available formats, the conversion options and the input and output streams. It can be compiled without reference to any other parts of the program. In particular, it knows nothing of the Chemical core: mol.h is not included.; The User interface, which may be a command line (in main.cpp), a Graphical User Interface(GUI), especially suited to Windows users and novices, or may be part of another program which uses OpenBabel’s input and output facilities. This depends only on the Conversion control module (obconversion.h is included), but not on the Chemical core or on any of the Formats.; The Fingerprint API, as well as being usable in external programs, is employed by the fastsearch and fingerprint formats.; The Fingerprints, which are bit arrays which describe an object and which facilitate fast searching. They are also built as plugins, registering themselves with their base class OBFingerprint which is in the Fingerprint API.; The Error handling can be used throughout the program to log and display errors and warnings (see below). It is possible to build each box in the diagram as a separate DLL or shared library and the restricted dependencies can help to limit the amount of recompilation. For the formats or the fingerprints built in this way it may be possible to use only those whose DLL or so files are present when the program starts. Several formats or fingerprints may be present in a single dynamic library.; Alternatively, and most commonly, the same source code can be built into a single executable. The restricted dependencies still provide easier program maintenance.; This segregation means that a module can directly ",MatchSource.WIKI,docs/Contributing/DevBestPractices.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/DevBestPractices.html
http://openbabel.org//docs/Contributing/Documentation.html:3303,Availability,error,errors,3303,"he documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side effects.”; Take :obapi:`OBAtom::SetAtomicNum() <OpenBabel::OBAtom::SetAtomicNum>` - should be “obvious”, right? Wrong. Does it affect the charge?; The spin multiplicity?; The implicit valence?; The hybridization?; What happens if I do SetHybridization(3) and then SetAtomicNum(1)?; Does the molecule have to be in the modify state?; If the molecule is not in the modify state, is it put into the modify state by SetAtomicNum()?; Does SetAtomicNum() cause a recomputation of aromaticity?. User documentation and tutorials#; There’s no point spending time adding new features to Open Babel unless you describe how to use them and give examples. The best place to do this is in the user documentation…which you’re reading right now.; This documentation is automatically generated from text files in a simple markup language (reStructuredText) using the Sphinx documentation system. This allows us to generate web pages, PDF files, and even ePub eBooks all from the same source (which is currently maintained at BitBucket).; If you notice any errors or feel like adding a section, please let us know at openbabel-devel. previous; Developing Open Babel. next; Adding a new test. On this page; . Adding New Code; Modifying Old Code; User documentation and tutorials. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:266,Deployability,Install,Install,266,"﻿. Documentation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a ne",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:888,Deployability,Release,Release,888,"﻿. Documentation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a ne",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:873,Energy Efficiency,Charge,Charge,873,"﻿. Documentation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a ne",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:2402,Energy Efficiency,charge,charge,2402,"e this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side effects.”; Take :obapi:`OBAtom::SetAtomicNum() <OpenBabel::OBAtom::SetAtomicNum>` - should be “obvious”, right? Wrong. Does it affect the charge?; The spin multiplicity?; The implicit valence?; The hybridization?; What happens if I do SetHybridization(3) and then SetAtomicNum(1)?; Does the molecule have to be in the modify state?; If the molecule is not in the modify state, is it put into the modify state by SetAtomicNum()?; Does SetAtomicNum() cause a recomputation of aromaticity?. User documentation and tutorials#; There’s no point spending time adding new features to Open Babel unless you describe how to use them and give examples. The best place to do this is in the user documentation…which you’re reading right now.; This documentation is automatically generated from text files in a simple markup language (reStructuredText) using the Sphinx documentation system. This allows us to generate web pages, PDF files, and even ePub eBooks all from the same source (which is currently maintained at BitBucket).; If you notice any errors or feel like adding a section, please let us know at openbabel-devel. previous; Developing Open Babel. next; Adding a new test. On this page; . Adding New Code; Modifying Old Code; User documentation and tutorials. ; ; ; Edit on GitHub; ; ; . ; © Copyright ",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:1201,Integrability,interface,interfaces,1201,"; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side ",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:815,Modifiability,plugin,plugins,815,"﻿. Documentation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a ne",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:780,Testability,test,test,780,"﻿. Documentation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a ne",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:1979,Testability,test,tests,1979,"Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side effects.”; Take :obapi:`OBAtom::SetAtomicNum() <OpenBabel::OBAtom::SetAtomicNum>` - should be “obvious”, right? Wrong. Does it affect the charge?; The spin multiplicity?; The implicit valence?; The hybridization?; What happens if I do SetHybridization(3) and then SetAtomicNum(1)?; Does the molecule have to be in the modify state?; If the molecule is not in the modify state, is it put into the modify state by SetAtomicNum()?; Does SetAtomicNum() cause a recomputation of aromaticity?. User documentation and tutorials#; There’s no point spending time adding new features to Open Babel unless you describe how to use them and give examples. The best place to do this is in the user documentation…which you’re ",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:2003,Testability,test,test,2003,"Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side effects.”; Take :obapi:`OBAtom::SetAtomicNum() <OpenBabel::OBAtom::SetAtomicNum>` - should be “obvious”, right? Wrong. Does it affect the charge?; The spin multiplicity?; The implicit valence?; The hybridization?; What happens if I do SetHybridization(3) and then SetAtomicNum(1)?; Does the molecule have to be in the modify state?; If the molecule is not in the modify state, is it put into the modify state by SetAtomicNum()?; Does SetAtomicNum() cause a recomputation of aromaticity?. User documentation and tutorials#; There’s no point spending time adding new features to Open Babel unless you describe how to use them and give examples. The best place to do this is in the user documentation…which you’re ",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:3432,Testability,test,test,3432,"he documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side effects.”; Take :obapi:`OBAtom::SetAtomicNum() <OpenBabel::OBAtom::SetAtomicNum>` - should be “obvious”, right? Wrong. Does it affect the charge?; The spin multiplicity?; The implicit valence?; The hybridization?; What happens if I do SetHybridization(3) and then SetAtomicNum(1)?; Does the molecule have to be in the modify state?; If the molecule is not in the modify state, is it put into the modify state by SetAtomicNum()?; Does SetAtomicNum() cause a recomputation of aromaticity?. User documentation and tutorials#; There’s no point spending time adding new features to Open Babel unless you describe how to use them and give examples. The best place to do this is in the user documentation…which you’re reading right now.; This documentation is automatically generated from text files in a simple markup language (reStructuredText) using the Sphinx documentation system. This allows us to generate web pages, PDF files, and even ePub eBooks all from the same source (which is currently maintained at BitBucket).; If you notice any errors or feel like adding a section, please let us know at openbabel-devel. previous; Developing Open Babel. next; Adding a new test. On this page; . Adding New Code; Modifying Old Code; User documentation and tutorials. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:142,Usability,Guid,Guide,142,"﻿. Documentation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a ne",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:199,Usability,Guid,Guide,199,"﻿. Documentation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a ne",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:908,Usability,Guid,Guide,908,"﻿. Documentation — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a ne",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:1174,Usability,clear,clear,1174,"; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side ",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:1357,Usability,clear,clear,1357,"; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side ",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:1502,Usability,clear,clearly,1502,"ure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side effects.”; Take :obapi:`OBAtom::SetAtomicNum() <OpenBabel::OBAtom::SetAtomicNum>` - should be “obvious”, right? Wrong. Does it affect the charge?; The spin multiplicity?; The implicit valence?; The hybridization?; What happens if I do",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:1781,Usability,clear,clearly,1781,"dding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Documentation. Documentation#; Documenting Open Babel is an important and ongoing task. As an open source project, code must be documented, both for other developers to use the API and for others to follow your code. This includes clear documentation on the interfaces of particular classes and methods (that is, the API documentation) but also tutorials and examples of using the Open Babel library to accomplish clear tasks.; Beyond the documentation described above, as an open-source project involving many, many contributors, the internal code should be clearly commented and easy to read (in English, preferably, since this is the common language of developers on the project). Adding New Code#; The golden rule is write the documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side effects.”; Take :obapi:`OBAtom::SetAtomicNum() <OpenBabel::OBAtom::SetAtomicNum>` - should be “obvious”, right? Wrong. Does it affect the charge?; The spin multiplicity?; The implicit valence?; The hybridization?; What happens if I do SetHybridization(3) and then SetAtomicNum(1)?; Does the molecule have to be in the modify state?; If the molecule is not in the modify state, is it put into the modify state by SetAtomicNum()?; Does SetAtomicNum() cause a recomputation of aromaticity?. User documentatio",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Documentation.html:3062,Usability,simpl,simple,3062,"he documentation, then code to the specs.; You should never, ever start writing code unless you’ve specified, clearly and exactly, what your code will do. This makes life easier for you (i.e., you know exactly what the code should do), and for others reading your code.; This mantra also facilitates writing tests (see Adding a new test). Modifying Old Code#; When modifying old code, please take a little time to improve the documentation of the function.; Even an “obvious” function must be documented, if for no other reason than to say, “This function does what you think, and has no side effects.”; Take :obapi:`OBAtom::SetAtomicNum() <OpenBabel::OBAtom::SetAtomicNum>` - should be “obvious”, right? Wrong. Does it affect the charge?; The spin multiplicity?; The implicit valence?; The hybridization?; What happens if I do SetHybridization(3) and then SetAtomicNum(1)?; Does the molecule have to be in the modify state?; If the molecule is not in the modify state, is it put into the modify state by SetAtomicNum()?; Does SetAtomicNum() cause a recomputation of aromaticity?. User documentation and tutorials#; There’s no point spending time adding new features to Open Babel unless you describe how to use them and give examples. The best place to do this is in the user documentation…which you’re reading right now.; This documentation is automatically generated from text files in a simple markup language (reStructuredText) using the Sphinx documentation system. This allows us to generate web pages, PDF files, and even ePub eBooks all from the same source (which is currently maintained at BitBucket).; If you notice any errors or feel like adding a section, please let us know at openbabel-devel. previous; Developing Open Babel. next; Adding a new test. On this page; . Adding New Code; Modifying Old Code; User documentation and tutorials. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Documentation.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Documentation.html
http://openbabel.org//docs/Contributing/Overview.html:261,Deployability,Install,Install,261,"﻿. Overview — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/Overview.html:883,Deployability,Release,Release,883,"﻿. Overview — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/Overview.html:868,Energy Efficiency,Charge,Charge,868,"﻿. Overview — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/Overview.html:810,Modifiability,plugin,plugins,810,"﻿. Overview — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/Overview.html:2527,Performance,Perform,Perform,2527,"dels; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of time, and some with small, single changes. All types of assistance has been valuable to the growth of the project over the years.; New developers are always very welcome to OpenBabel so if you’re interested, just send an email to the developer list (join here) about what you would like to work on, or else we can come up with some ideas for areas where you could contribute. Here are some possibilities:. Implement the latest algorithms described in the literature; Add a new file format (see How to add a new file format); Perform ‘software archaeology’ (see Software Archaeology); Fix some bugs; Add a requested feature; Implement a feature from our roadmap. previous; Contributing to Open Babel. next; Developing Open Babel. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/Overview.html:775,Testability,test,test,775,"﻿. Overview — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/Overview.html:1077,Testability,test,testers,1077,"-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of time, and some with small, single cha",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/Overview.html:137,Usability,Guid,Guide,137,"﻿. Overview — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/Overview.html:194,Usability,Guid,Guide,194,"﻿. Overview — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/Overview.html:903,Usability,Guid,Guide,903,"﻿. Overview — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Overview. Overview#; Open Babel is developed using open, community-oriented development made possible by an active community – developers, testers, writers, implementers and most of all users. No matter which ‘er’ you happen to be, or how much time you can provide, you can make valuable contributions.; Not sure where to start? This section aims to give you some ideas.; Provide input; You can help us by:. helping to answer questions on our mailing list; suggesting new features or file formats; reporting bugs. Spread the word; If you find Open Babel useful, there’s a chance that others will also. You can help us by:. promoting and citing Open Babel in talks and publications; writing blog posts about Open Babel; helping with documentation and our website; building your own software on Open Babel. To get started, just send an email to our mailing list.; Code a storm; As an open source project, Open Babel has a very open development process. This means that many contributors have helped with the project with a variety of help – some for long periods of",MatchSource.WIKI,docs/Contributing/Overview.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Overview.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:2880,Availability,Mainten,Maintenance,2880,"e not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, but the format of your code is important. As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be greatly appreciated. previous; Adding a new test. next; Adding plugins. On this page; . Documentation and Code Readability; Code Mai",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:3271,Availability,error,error,3271," As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be greatly appreciated. previous; Adding a new test. next; Adding plugins. On this page; . Documentation and Code Readability; Code Maintenance. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:3881,Availability,Mainten,Maintenance,3881," As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be greatly appreciated. previous; Adding a new test. next; Adding plugins. On this page; . Documentation and Code Readability; Code Maintenance. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:273,Deployability,Install,Install,273,"﻿. Software Archaeology — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, bu",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:895,Deployability,Release,Release,895,"﻿. Software Archaeology — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, bu",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:3691,Deployability,Patch,Patches,3691," As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be greatly appreciated. previous; Adding a new test. next; Adding plugins. On this page; . Documentation and Code Readability; Code Maintenance. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:880,Energy Efficiency,Charge,Charge,880,"﻿. Software Archaeology — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, bu",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:822,Modifiability,plugin,plugins,822,"﻿. Software Archaeology — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, bu",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:2960,Modifiability,portab,portability,2960," like a minor point, but the format of your code is important. As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be greatly appreciated. previous; Adding a new test. next; Adding plugins. On this page; . Documentation and Code Readability; Code Maintenance. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created usin",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:3815,Modifiability,plugin,plugins,3815," As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be greatly appreciated. previous; Adding a new test. next; Adding plugins. On this page; . Documentation and Code Readability; Code Maintenance. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:2805,Security,access,accesses,2805,"n be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, but the format of your code is important. As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be grea",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:3065,Security,access,accesses,3065," As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be greatly appreciated. previous; Adding a new test. next; Adding plugins. On this page; . Documentation and Code Readability; Code Maintenance. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:3645,Security,access,access,3645," As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be greatly appreciated. previous; Adding a new test. next; Adding plugins. On this page; . Documentation and Code Readability; Code Maintenance. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:787,Testability,test,test,787,"﻿. Software Archaeology — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, bu",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:1181,Testability,test,tested,1181,". Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, but the format of your code is important. As open source software, your code is read by many, many people.; Different contributions have often had different indentation sty",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:3796,Testability,test,test,3796," As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be greatly appreciated. previous; Adding a new test. next; Adding plugins. On this page; . Documentation and Code Readability; Code Maintenance. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:149,Usability,Guid,Guide,149,"﻿. Software Archaeology — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, bu",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:206,Usability,Guid,Guide,206,"﻿. Software Archaeology — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, bu",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:915,Usability,Guid,Guide,915,"﻿. Software Archaeology — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, bu",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:1497,Usability,clear,clear,1497,"ar Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, but the format of your code is important. As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:1569,Usability,clear,clear,1569,"s 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Software Archaeology. Software Archaeology#; In any large software project, some parts of the code are revised and kept up-to-date more than others.; Conversely, some parts of the code begin to fall behind – the code may be poorly tested, poorly documented, and not always up to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, but the format of your code is important. As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:2176,Usability,Simpl,Simply,2176,"p to best practices.; With that in mind, the following sections describe the important task of software archeology – diving in to older parts of code and bringing them up to date. Whenever editing a file, please keep these in mind. Documentation and Code Readability#. Add clear documentation for every public function (see Documentation).; Add clear comments on the internal operation of functions so that anyone can read through the code quickly. If you’re not sure what a function does, e-mail the openbabel-devel list and it can be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, but the format of your code is important. As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, ST",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/SoftwareArchaeology.html:2658,Usability,simpl,simply,2658,"n be worked out. Mark functions which should be publicly visible and functions which are only useful internally. Many methods are not particularly useful except inside the library itself.; Improve code indentation. It seems like a minor point, but the format of your code is important. As open source software, your code is read by many, many people.; Different contributions have often had different indentation styles. Simply making the code indentation consistent across an entire file makes the code easier to read.; The current accepted scheme for Open Babel is a default indent of two spaces, and use of spaces instead of tabs.; For tips on changing your editor to use this indentation style, please e-mail the openbabel-devel list. Delete code which is commented out. The SVN version control system maintains history, so if we need it later, we can go back and get that code. Dead code like this simply makes it harder to read the important code!; Marking areas of code which use :obapi:`OBAtom::GetIdx() <OpenBabel::OBAtom::GetIdx>` or other accesses to atom indexes, which may break when atom indexing changes. Code Maintenance#. Minimize #if/#endif conditional compilation. Some is required for portability, but these should be minimized where possible. If there seems to be some magic #define which accesses parts of the file, it’s probably dead code. As above, dead code makes it harder to maintain and read everything else.; Removing calls to cout, cerr, STDOUT, perror etc. These should use the global error reporting code.; Minimize warnings from compilers (e.g., GCC flags -Wextra -Wall). Sometimes these are innocuous, but it’s usually better to fix the problems before they become bugs.; Use static code analysis tools to find potential bugs in the code and remove them.; Insure proper use of atom and bond iterators, e.g., FOR_ATOMS_OF_MOL rather than atom or bond index access, which will break if indexing changes. Patches and contributions towards any of these tasks will be grea",MatchSource.WIKI,docs/Contributing/SoftwareArchaeology.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/SoftwareArchaeology.html
http://openbabel.org//docs/Contributing/Testing.html:6343,Availability,error,error,6343," = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans i",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:7292,Availability,error,error,7292,"output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as conve",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:7733,Availability,error,error,7733," took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10975,Availability,ERROR,ERROR,10975,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:270,Deployability,Install,Install,270,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:892,Deployability,Release,Release,892,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:877,Energy Efficiency,Charge,Charge,877,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:7046,Energy Efficiency,efficient,efficient,7046,"n with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executa",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2356,Integrability,depend,dependent,2356,"the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInCh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2378,Integrability,depend,dependencies,2378,"the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInCh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:819,Modifiability,plugin,plugins,819,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1092,Modifiability,refactor,refactoring,1092,"openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2117,Modifiability,config,configure,2117,"nd that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8877,Modifiability,variab,variable,8877,"he full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:11107,Modifiability,variab,variable,11107,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:11061,Safety,avoid,avoid,11061,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:16,Testability,test,test,16,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:784,Testability,test,test,784,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:960,Testability,test,test,960,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:979,Testability,test,test,979,"openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:986,Testability,Test,Tests,986,"openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1171,Testability,test,tests,1171,". User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test targ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1345,Testability,test,tests,1345,"ta; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. S",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1423,Testability,test,tests,1423,"el vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the co",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1467,Testability,test,test,1467,"el vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the co",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1498,Testability,Test,Tests,1498,"ary; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1524,Testability,test,test,1524,"ary; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1545,Testability,Test,Tests,1545,"ary; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1599,Testability,test,test,1599,"ary; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1620,Testability,Test,Tests,1620,"ary; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1686,Testability,test,testing,1686,"ary; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1709,Testability,test,test,1709,"l; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be s",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1807,Testability,test,test,1807,"l; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be s",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1844,Testability,test,test,1844,"el; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1869,Testability,test,test,1869,"el; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1919,Testability,test,tests,1919,"el; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:1965,Testability,test,testcase,1965,"el; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2005,Testability,test,test,2005,"el; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2083,Testability,test,tests,2083,"nd that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2143,Testability,test,tests,2143,"nd that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2188,Testability,test,test,2188,"hat bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2219,Testability,test,tests,2219,"hat bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2230,Testability,test,tests,2230,"others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in tes",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2346,Testability,test,tests,2346,"the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInCh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2458,Testability,test,tests,2458,"the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInCh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2502,Testability,test,tests,2502," the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2532,Testability,test,test,2532," the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2571,Testability,test,tests,2571," the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2612,Testability,test,test,2612,"tten in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported a",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2722,Testability,test,test,2722,"’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the e",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2740,Testability,test,tests,2740,"’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the e",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2836,Testability,test,test,2836,"’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the e",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2891,Testability,test,tests,2891," in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt(",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:2954,Testability,test,test,2954,"to run a testcase in a debugger, I write a short test of type (1) so that I can step through and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3052,Testability,test,test,3052,"ugh and see what’s happening. Running tests#; To begin with, we need to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). No",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3121,Testability,test,test,3121,"eed to configure CMake to enable tests: -DENABLE_TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3151,Testability,test,testing,3151,"TESTS=ON. This adds the make test target and builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConv",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3196,Testability,test,test,3196,"nd builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3201,Testability,test,testbindings,3201,"nd builds the C++ tests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3217,Testability,Test,TestSuite,3217,"ests. For tests of type 3 (above), you will also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadS",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3227,Testability,test,testAsterisk,3227,"ill also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3259,Testability,test,testAsterisk,3259,"ill also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3272,Testability,test,test,3272,"ill also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3280,Testability,test,testbindings,3280,"ill also need to enable the Python bindings: -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON. Some tests are dependent on optional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3368,Testability,test,test,3368,"tional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3373,Testability,test,testbabel,3373,"tional dependencies; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3386,Testability,test,testOBabel,3386,"; if you don’t build with support for these, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUI",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3397,Testability,test,testSMItoInChI,3397,"ese, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or e",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3431,Testability,test,testSMItoInChI,3431,"ese, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or e",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3446,Testability,test,test,3446,"ese, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or e",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3454,Testability,test,testbabel,3454,"ese, then the corresponding tests will not be run.; To actually run the tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or e",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3512,Testability,test,test,3512,"e tests, you can run the entire test suite in one go or run individual tests. To run the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is us",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3543,Testability,test,test,3543," the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3565,Testability,test,test,3565," the entire suite, use make test or ctest (note that you can use the -j option to speed up ctest). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3639,Testability,Test,Test,3639,"t). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3685,Testability,test,tests,3685,"t). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3699,Testability,test,test,3699,"t). The ctest command also allows a single test or a list of tests to be specified, and in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3803,Testability,test,test,3803," in combination with -VV (verbose) may be useful to run an individual test. However, I find it more useful to run individual tests directly. Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3914,Testability,test,test,3914,"Here is an example of how to run an individual test for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT sta",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:3972,Testability,test,testsuite,3972,"st for each of the three types discussed earlier:. test_runner regressionstest 1; This will run test number 1 in regressionstest.cpp. Nothing will happen…unless the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expres",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:4069,Testability,test,test,4069," the test fails. (test_runner is a testing harness generated by CMake.). python test\testbindings.py TestSuite.testAsterisk; This will run the testAsterisk test in testbindings.py. This will write out a single dot, and some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this f",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:4323,Testability,assert,assert,4323," some summary information. python test\testbabel.py testOBabel.testSMItoInChI; This will run the testSMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::Rea",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:4439,Testability,test,test,4439,"SMItoInChI test in testbabel.py. The next few sections describe adding a new test of types 1 to 3. The same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well a",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:4560,Testability,test,tests,4560,"e same test will be added, a test to ensure that the molecular weight of ethanol is reported as 46.07. Test using C++#; The easiest place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename whi",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:4679,Testability,test,test,4679,"st place to add new tests is into test/regressionstest.cpp. Look at the switch statement at the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the comma",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:4742,Testability,test,test,4742,"t the end of the file and pick a number for the test. Let’s say 260. Add the following:; case 260:; test_Ethanol_MolWt();; break;. Now add the value of 260 to test/CMakeLists.txt so that it will be run as part of the testsuite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to d",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:4996,Testability,test,test,4996,"uite.:; set (regressions_parts 1 221 222 223 224 225 226 227 260). Now let’s add the actual test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5063,Testability,test,test,5063,"al test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5091,Testability,test,testfile,5091,"al test somewhere near the top of the file:; void test_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5131,Testability,test,testcase,5131,"_Ethanol_MolWt(); {; OBMol mol;; OBConversion conv;; OB_REQUIRE(conv.SetInFormat(""smi""));; conv.ReadString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the wo",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5178,Testability,test,test,5178,"dString(&mol, ""CCO"");; double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. The various assert methods are listed in obtest.h and are as follows:. OB_REQUIRE(exp) - This must evaluate to true or else the test will be marked as failing and will terminate. This is useful for conditions that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindE",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5572,Testability,test,testfile,5572," that must be true or else the remaining tests cannot be run (e.g. was the necessary OBFormat found?).; OB_ASSERT(exp) - This must evaluate to true or else the test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help wr",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5615,Testability,Test,Test,5615,"he test will be marked as failing. In contrast to OB_REQUIRE, the test does not terminate in this case, but continues to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the sce",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5793,Testability,test,test,5793,"s to run. This feature can be useful because it lets you know (based on the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argu",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5858,Testability,test,test,5858,"n the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the addi",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5863,Testability,test,testbabel,5863,"n the output) how many and which OB_ASSERT statements failed.; OB_COMPARE(expA, expB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the addi",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5905,Testability,test,tests,5905,"pB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the exec",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5957,Testability,test,testOBabel,5957,"pB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the exec",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:5988,Testability,test,test,5988,"pB) - Expressions A and B must be equal or else the test fails (but does not terminate). It is often useful to write a test that uses a checked-in testfile. Let’s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the exec",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:6124,Testability,test,test,6124,"s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following examp",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:6137,Testability,test,testMolWtEthanol,6137,"s do this for our example testcase. If you place a file ethanol.smi into test/files, then the following will read it using a convenience function provided by obtest.h.:; void test_Ethanol_MolWt(); {; OBMolPtr mol = OBTestUtil::ReadFile(""ethanol.smi""); double molwt = mol.GetMolWt();; OB_ASSERT(molwt - 46.07 < 0.01);; }. As well as ReadFile (which is convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following examp",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:6441,Testability,assert,assertEqual,6441," convenient for single molecules), the OBTestUtil struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). T",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:6530,Testability,test,tests,6530,"l struct provides GetFilename which will return the full path to the testfile, if you wish to open it yourself. Test using a command-line executable#; At the command-line we can calculate the molecular weight of ethanol as shown below. We are going to do something similar using the Python test framework:; > obabel -:CCO --append MW -otxt; 46.0684. Open test/testbabel.py in an editor. I have grouped tests related to the obabel executable into a class testOBabel, so let’s add a new test there. Somewhere in that class (for example, at the end), add a function such as the following (note: it must begin with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getT",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:7115,Testability,test,testMolWtEthanol,7115,"n with the word “test”):; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; output, error = run_exec('obabel -:%s --append mw -otxt' % smi); my_molwt = round(float(output), 2); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executa",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:7412,Testability,assert,assertEqual,7412,"); self.assertEqual(my_molwt, molwt). We provide a few convenience functions to help write these tests. The most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testb",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:7464,Testability,test,testfile,7464,"he most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:7483,Testability,test,test,7483,"he most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:7547,Testability,test,testMolWtEthanol,7547,"he most important of these is run_exec(command) which runs the commandline executable returns a tuple of stdout and stderr. Behind the scenes, it adds the full path to the named executable. In the example above, run_exec(stdin, command) took a single argument; the next example will show its use with two arguments - the additional argument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:7851,Testability,assert,assertEqual,7851,"gument is a string which is treated as stdin, and piped through the executable.; In the previous example, each SMILES string was passed in one-at-a-time. However, it is more efficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt).",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8064,Testability,test,testfile,8064,"ficient to do them all in one go as in the following example:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); smifile = """"""CCO; [H]; [2H]; """"""; answers = [46.07, 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8187,Testability,assert,assertConverted,8187,", 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8219,Testability,assert,assert,8219,", 1.01, 2.01]; output, error = run_exec(smifile, 'obabel -ismi --append mw -otxt'); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8352,Testability,Test,Test,8352,"t(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8409,Testability,test,tests,8409,"t(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8423,Testability,test,test,8423,"t(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8428,Testability,test,testbindings,8428,"t(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). To use a testfile placed in test/files, the getTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8478,Testability,test,tests,8478,"tTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILE",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8518,Testability,test,test,8518,"tTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILE",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8543,Testability,Test,TestSuite,8543,"tTestFile() member function is provided:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; self.canFindExecutable(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILE",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8617,Testability,test,testMolWtEthanol,8617,"able(""obabel""); answers = [46.07, 1.01, 2.01]; smifile = self.getTestFile(""ethanol.smi""); output, error = run_exec('obabel %s --append mw -otxt' % smifile); for ans, my_ans in zip(answers, output.split(""\n"")):; self.assertEqual(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than us",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8843,Testability,assert,assertEqual,8843,"Equal(ans, round(float(my_ans), 2)). The full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8905,Testability,test,testbindings,8905,"he full list of provided convenience functions is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8954,Testability,test,testfiles,8954," is:. run_exec(command), run_exec(stdin, command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, i",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:8988,Testability,test,test,8988,"command) - see above; BaseTest.getTestFile(filename) - returns the full path to a testfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9049,Testability,test,testMolWtEthanol,9049,"tfile; BaseTest.canFindExecutable(executable) - checks whether the executable exists in the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt.",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9150,Testability,test,testfile,9150," the expected location; BaseTest.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a re",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9181,Testability,test,test,9181,"est.assertConverted(stderr, N) - An assert statement that takes the stderr from run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix,",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9249,Testability,test,testfile,9249," run_exec and will check whether the number of molecules reported as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9308,Testability,assert,assertEqual,9308,"orted as converted matches N. Test the API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9342,Testability,test,tests,9342," API using Python#; The easiest place to add new tests is into test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just pe",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9436,Testability,test,test,9436,"to test/testbindings.py. Classes are used to organise the tests, but for a single ‘miscellaneous’ test a good place is the TestSuite class. Somewhere in that class add the following function:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules wi",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9591,Testability,assert,assert,9591,"):; """"""Check the molecular weight of ethanol""""""; answers = [; (""CCO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potent",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9689,Testability,assert,assertRaises,9689,"CO"", 46.07),; (""[H]"", 1.01),; (""[2H]"", 2.01),; ]; for smi, molwt in answers:; my_molwt = round(pybel.readstring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9768,Testability,test,tests,9768,"tring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actua",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9859,Testability,test,testbindings,9859,"tring(""smi"", smi).molwt, 2); self.assertEqual(my_molwt, molwt). The variable here is defined in testbindings.py and may be used find the path to testfiles. For example, given the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actua",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:9970,Testability,test,test,9970,"iven the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10047,Testability,test,test,10047,"iven the test/ethanol.smi, the following may be used to read it:; def testMolWtEthanol(self):; """"""Check the molecular weight of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10132,Testability,test,test,10132,"t of ethanol""""""; answers = [46.07, 1.01, 2.01]; testfile = os.path.join(here, ""test"", ""ethanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write t",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10164,Testability,test,test,10164,"thanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentati",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10188,Testability,test,test,10188,"thanol.smi""); for mol, answer in zip(pybel.readfile(""smi"", testfile), answers):; my_molwt = round(mol.molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentati",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10258,Testability,test,test,10258,"molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-lin",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10286,Testability,test,test,10286,"molwt, 2); self.assertEqual(my_molwt, molwt). The tests use the standard unittest framework. One thing to note, which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-lin",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10345,Testability,Test,Test,10345,", which is not obvious, is how to test for exceptions. A typical case is checking that a dodgy SMILES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10486,Testability,test,tests,10486,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10554,Testability,test,tests,10554,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10683,Testability,test,test,10683,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10699,Testability,Test,Test,10699,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10744,Testability,test,test,10744,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10763,Testability,test,test,10763,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10849,Testability,assert,asserts,10849,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10892,Testability,test,tests,10892,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10931,Testability,test,test,10931,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:10988,Testability,Test,Test,10988,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:11026,Testability,assert,assert,11026,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:11246,Testability,test,tests,11246,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:11253,Testability,Test,Test,11253,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:11269,Testability,Test,Test,11269,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:11307,Testability,Test,Test,11307,"ES is rejected on reading; in this instance, Pybel.readstring() will raise an IOError. To assert that this is the case, rather than use try/except, the following syntax is required:; self.assertRaises(IOError, pybel.readstring, ""smi"", ""~*&*($""). If you have multiple tests to add on a single ‘topic’, you will probably want to add your own class either into testbindings.py or a new Python file. Note that if you create a new Python file, it should start with the word test and you will need to add the rest of the name to the pybindtest list in test/CMakeLists.txt. Some final comments#; Some thoughts on the topic of the perfect test:. When adding a regression test for a bug fix, the test should fail without the fix, but pass afterwards.; When adding a test for a new feature, the test should provide complete coverage for all code paths.; Test not just perfect input, but all sorts of dodgy input like molecules with no atoms, empty strings, and so forth.; Don’t be afraid to add tests for things which you already (think you) know will pass; such tests may surprise you, and even if they don’t they will prevent regressions. Potential problems/gotchas:. Why isn’t your Python test being run? Test functions name must begin with the word test.; If your new test passes first time, check that it is actually running correctly, by changing your asserts so that they should fail.; The C++ tests will be marked as failing if the test writes any of the following to stdout: ERROR, FAIL, Test failed. This is actually how the assert methods work.; It’s best to avoid writing to disk, and instead write to a variable or stdout and capture it (as in the examples above). previous; Documentation. next; Software Archaeology. On this page; . Running tests; Test using C++; Test using a command-line executable; Test the API using Python; Some final comments. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:146,Usability,Guid,Guide,146,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:203,Usability,Guid,Guide,203,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Contributing/Testing.html:912,Usability,Guid,Guide,912,"﻿. Adding a new test — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Overview; Developing Open Babel; Documentation; Adding a new test; Software Archaeology. Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Contributing to Open Babel; Adding a new test. Adding a new test#; Tests allow us to maintain code quality, ensure that code is working, prevent regressions, and facilitate refactoring. Personally, I find that there is no better motivation for writing tests than knowing that that bug I fixed will stay fixed, and that feature I implemented will not be broken by others. As an open source developer, I never have enough time; tests ensure that what time I have is not wasted.; We can divide the existing tests into three classes, based on how they test the Open Babel codebase:. Tests written in C++ that test the public API; Tests written in Python that use the SWIG bindings to test the public API; Tests written in Python that use the command-line executables for testing. Which type of test should you write? It doesn’t really matter - it’s more important that you write some type of test. Personally, I can more quickly test more if I write the test in Python, so generally I write and check-in tests of type (2) above; when I need to run a testcase in a debugger, I write a sh",MatchSource.WIKI,docs/Contributing/Testing.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Contributing/Testing.html
http://openbabel.org//docs/Depiction/depiction.html:265,Deployability,Install,Install,265,"﻿. 2D Depiction — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 2D Depiction. 2D Depiction#; As the old Chinese proverb has it, a molecular depiction is worth a; thousand words. This chapter covers everything relevant to using Open; Babel to generate or read/write a 2D depiction, expected by most; chemists for print or website purposes.; When we talk about a depiction in cheminformatics, there are really two different concepts covered by this term:. Graphical display of a molecule’s structure as a 2D image (such as the PNG and SVG formats). Here is an example:; obabel -:C(=O)Cl -O acidchloride.png. Storage of the 2D coordinates (and associated stereo symbols) associated with Concept 1 (using formats such as Mol and Mol2). Here is the connection table from the corresponding Mol file for the above depiction:; 3 2 0 0 0 0 0 0 0 0999 V2000; 0.8660 -0.5000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; 1.7321 -0.0000 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0; 0.0000 0.0000 0.0000 Cl 0 0 0 0 0 0 0 0 0 0 0 0; 1 2 2 0 0 0 0; 1 3 1 0 0 0 0. Note; The focus in this chapter is on 2D depiction and not 3D. It is of course possible to generate and store 3D coordinates in many of the file formats supported by Open Babel, but the only support for depiction i",MatchSource.WIKI,docs/Depiction/depiction.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Depiction/depiction.html
http://openbabel.org//docs/Depiction/depiction.html:798,Deployability,Release,Release,798,"﻿. 2D Depiction — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 2D Depiction. 2D Depiction#; As the old Chinese proverb has it, a molecular depiction is worth a; thousand words. This chapter covers everything relevant to using Open; Babel to generate or read/write a 2D depiction, expected by most; chemists for print or website purposes.; When we talk about a depiction in cheminformatics, there are really two different concepts covered by this term:. Graphical display of a molecule’s structure as a 2D image (such as the PNG and SVG formats). Here is an example:; obabel -:C(=O)Cl -O acidchloride.png. Storage of the 2D coordinates (and associated stereo symbols) associated with Concept 1 (using formats such as Mol and Mol2). Here is the connection table from the corresponding Mol file for the above depiction:; 3 2 0 0 0 0 0 0 0 0999 V2000; 0.8660 -0.5000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; 1.7321 -0.0000 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0; 0.0000 0.0000 0.0000 Cl 0 0 0 0 0 0 0 0 0 0 0 0; 1 2 2 0 0 0 0; 1 3 1 0 0 0 0. Note; The focus in this chapter is on 2D depiction and not 3D. It is of course possible to generate and store 3D coordinates in many of the file formats supported by Open Babel, but the only support for depiction i",MatchSource.WIKI,docs/Depiction/depiction.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Depiction/depiction.html
http://openbabel.org//docs/Depiction/depiction.html:783,Energy Efficiency,Charge,Charge,783,"﻿. 2D Depiction — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 2D Depiction. 2D Depiction#; As the old Chinese proverb has it, a molecular depiction is worth a; thousand words. This chapter covers everything relevant to using Open; Babel to generate or read/write a 2D depiction, expected by most; chemists for print or website purposes.; When we talk about a depiction in cheminformatics, there are really two different concepts covered by this term:. Graphical display of a molecule’s structure as a 2D image (such as the PNG and SVG formats). Here is an example:; obabel -:C(=O)Cl -O acidchloride.png. Storage of the 2D coordinates (and associated stereo symbols) associated with Concept 1 (using formats such as Mol and Mol2). Here is the connection table from the corresponding Mol file for the above depiction:; 3 2 0 0 0 0 0 0 0 0999 V2000; 0.8660 -0.5000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; 1.7321 -0.0000 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0; 0.0000 0.0000 0.0000 Cl 0 0 0 0 0 0 0 0 0 0 0 0; 1 2 2 0 0 0 0; 1 3 1 0 0 0 0. Note; The focus in this chapter is on 2D depiction and not 3D. It is of course possible to generate and store 3D coordinates in many of the file formats supported by Open Babel, but the only support for depiction i",MatchSource.WIKI,docs/Depiction/depiction.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Depiction/depiction.html
http://openbabel.org//docs/Depiction/depiction.html:725,Modifiability,plugin,plugins,725,"﻿. 2D Depiction — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 2D Depiction. 2D Depiction#; As the old Chinese proverb has it, a molecular depiction is worth a; thousand words. This chapter covers everything relevant to using Open; Babel to generate or read/write a 2D depiction, expected by most; chemists for print or website purposes.; When we talk about a depiction in cheminformatics, there are really two different concepts covered by this term:. Graphical display of a molecule’s structure as a 2D image (such as the PNG and SVG formats). Here is an example:; obabel -:C(=O)Cl -O acidchloride.png. Storage of the 2D coordinates (and associated stereo symbols) associated with Concept 1 (using formats such as Mol and Mol2). Here is the connection table from the corresponding Mol file for the above depiction:; 3 2 0 0 0 0 0 0 0 0999 V2000; 0.8660 -0.5000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; 1.7321 -0.0000 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0; 0.0000 0.0000 0.0000 Cl 0 0 0 0 0 0 0 0 0 0 0 0; 1 2 2 0 0 0 0; 1 3 1 0 0 0 0. Note; The focus in this chapter is on 2D depiction and not 3D. It is of course possible to generate and store 3D coordinates in many of the file formats supported by Open Babel, but the only support for depiction i",MatchSource.WIKI,docs/Depiction/depiction.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Depiction/depiction.html
http://openbabel.org//docs/Depiction/depiction.html:2771,Testability,log,logged,2771,"ponding Mol file for the above depiction:; 3 2 0 0 0 0 0 0 0 0999 V2000; 0.8660 -0.5000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; 1.7321 -0.0000 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0; 0.0000 0.0000 0.0000 Cl 0 0 0 0 0 0 0 0 0 0 0 0; 1 2 2 0 0 0 0; 1 3 1 0 0 0 0. Note; The focus in this chapter is on 2D depiction and not 3D. It is of course possible to generate and store 3D coordinates in many of the file formats supported by Open Babel, but the only support for depiction is the Povray format, used to create ray-traced ball-and-stick diagrams of molecules.; Other Open Source chemistry projects such as Avogadro, PyMOL, and Jmol cover this area very well. Molecular graphics#; As of Open Babel 2.3.2, there are three output formats for displaying a 2D image:. PNG format: This is a bitmap format used to create images of a certain; pixel width. These images can be inserted into Word documents or displayed; on web pages.; SVG format: This is a vector format, which can be scaled to generate images; of any size without loss of quality. In particular, Open Babel’s SVG images; can be interactively zoomed and panned using a modern web browser.; ASCII format: This is a depiction of a molecule using ASCII text. This can; be useful if you are logged into a remote server, or are working at the; command-line, and just need a basic check of the identity of a molecule. All of these formats support multimolecule files. The PNG and SVG formats; arrange the molecules into rows and columns (you can specify the number of rows or columns if you wish), while the ASCII format just uses a single column. The remainder of this chapter will concentrate on the PNG and SVG formats; for more information on the ASCII format, see the format description [ref]. previous; obabel vs Chemistry Toolkit Rosetta. next; 3D Structure Generation. On this page; . Molecular graphics. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Depiction/depiction.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Depiction/depiction.html
http://openbabel.org//docs/Depiction/depiction.html:141,Usability,Guid,Guide,141,"﻿. 2D Depiction — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 2D Depiction. 2D Depiction#; As the old Chinese proverb has it, a molecular depiction is worth a; thousand words. This chapter covers everything relevant to using Open; Babel to generate or read/write a 2D depiction, expected by most; chemists for print or website purposes.; When we talk about a depiction in cheminformatics, there are really two different concepts covered by this term:. Graphical display of a molecule’s structure as a 2D image (such as the PNG and SVG formats). Here is an example:; obabel -:C(=O)Cl -O acidchloride.png. Storage of the 2D coordinates (and associated stereo symbols) associated with Concept 1 (using formats such as Mol and Mol2). Here is the connection table from the corresponding Mol file for the above depiction:; 3 2 0 0 0 0 0 0 0 0999 V2000; 0.8660 -0.5000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; 1.7321 -0.0000 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0; 0.0000 0.0000 0.0000 Cl 0 0 0 0 0 0 0 0 0 0 0 0; 1 2 2 0 0 0 0; 1 3 1 0 0 0 0. Note; The focus in this chapter is on 2D depiction and not 3D. It is of course possible to generate and store 3D coordinates in many of the file formats supported by Open Babel, but the only support for depiction i",MatchSource.WIKI,docs/Depiction/depiction.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Depiction/depiction.html
http://openbabel.org//docs/Depiction/depiction.html:198,Usability,Guid,Guide,198,"﻿. 2D Depiction — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 2D Depiction. 2D Depiction#; As the old Chinese proverb has it, a molecular depiction is worth a; thousand words. This chapter covers everything relevant to using Open; Babel to generate or read/write a 2D depiction, expected by most; chemists for print or website purposes.; When we talk about a depiction in cheminformatics, there are really two different concepts covered by this term:. Graphical display of a molecule’s structure as a 2D image (such as the PNG and SVG formats). Here is an example:; obabel -:C(=O)Cl -O acidchloride.png. Storage of the 2D coordinates (and associated stereo symbols) associated with Concept 1 (using formats such as Mol and Mol2). Here is the connection table from the corresponding Mol file for the above depiction:; 3 2 0 0 0 0 0 0 0 0999 V2000; 0.8660 -0.5000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; 1.7321 -0.0000 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0; 0.0000 0.0000 0.0000 Cl 0 0 0 0 0 0 0 0 0 0 0 0; 1 2 2 0 0 0 0; 1 3 1 0 0 0 0. Note; The focus in this chapter is on 2D depiction and not 3D. It is of course possible to generate and store 3D coordinates in many of the file formats supported by Open Babel, but the only support for depiction i",MatchSource.WIKI,docs/Depiction/depiction.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Depiction/depiction.html
http://openbabel.org//docs/Depiction/depiction.html:818,Usability,Guid,Guide,818,"﻿. 2D Depiction — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; 2D Depiction. 2D Depiction#; As the old Chinese proverb has it, a molecular depiction is worth a; thousand words. This chapter covers everything relevant to using Open; Babel to generate or read/write a 2D depiction, expected by most; chemists for print or website purposes.; When we talk about a depiction in cheminformatics, there are really two different concepts covered by this term:. Graphical display of a molecule’s structure as a 2D image (such as the PNG and SVG formats). Here is an example:; obabel -:C(=O)Cl -O acidchloride.png. Storage of the 2D coordinates (and associated stereo symbols) associated with Concept 1 (using formats such as Mol and Mol2). Here is the connection table from the corresponding Mol file for the above depiction:; 3 2 0 0 0 0 0 0 0 0999 V2000; 0.8660 -0.5000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; 1.7321 -0.0000 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0; 0.0000 0.0000 0.0000 Cl 0 0 0 0 0 0 0 0 0 0 0 0; 1 2 2 0 0 0 0; 1 3 1 0 0 0 0. Note; The focus in this chapter is on 2D depiction and not 3D. It is of course possible to generate and store 3D coordinates in many of the file formats supported by Open Babel, but the only support for depiction i",MatchSource.WIKI,docs/Depiction/depiction.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Depiction/depiction.html
http://openbabel.org//docs/Descriptors/descriptors.html:264,Deployability,Install,Install,264,"﻿. Descriptors — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Descriptors. Descriptors#. Numerical descriptors#; Number of atoms (atoms); Add or remove hydrogens to count total or heavy atoms; SMARTS: *; Number of bonds (bonds); Add or remove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: ",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:797,Deployability,Release,Release,797,"﻿. Descriptors — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Descriptors. Descriptors#. Numerical descriptors#; Number of atoms (atoms); Add or remove hydrogens to count total or heavy atoms; SMARTS: *; Number of bonds (bonds); Add or remove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: ",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:782,Energy Efficiency,Charge,Charge,782,"﻿. Descriptors — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Descriptors. Descriptors#. Numerical descriptors#; Number of atoms (atoms); Add or remove hydrogens to count total or heavy atoms; SMARTS: *; Number of bonds (bonds); Add or remove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: ",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:2753,Energy Efficiency,Charge,Charge,2753,"ove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: *:*; Number of single bonds (sbonds); SMARTS: *-*; Number of double bonds (dbonds); SMARTS: *=*; topological polar surface area (TPSA); Datafile: psa.txt; Rotatable bonds filter (rotors); Melting point (MP); This is a melting point descriptor developed; by Andy Lang. For details see:; http://onschallenge.wikispaces.com/MeltingPointModel011; Datafile: mpC.txt. Textual descriptors#; Canonical SMILES (cansmi); Canonical SMILES without isotopes or stereo (cansmiNS); IUPAC InChI identifier (InChI); InChIKey (InChIKey); Chemical formula (formula); For comparing a molecule’s title (title). Descriptors for filtering#; Lipinski Rule of Five (L5); HBD<5 HBA1<10 MW<500 logP<5; SMARTS filter (smarts); SMARTS filter (s). previous; XED format (xed). next; Charge models. On this page; . Numerical descriptors; Textual descriptors; Descriptors for filtering. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:724,Modifiability,plugin,plugins,724,"﻿. Descriptors — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Descriptors. Descriptors#. Numerical descriptors#; Number of atoms (atoms); Add or remove hydrogens to count total or heavy atoms; SMARTS: *; Number of bonds (bonds); Add or remove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: ",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:1812,Testability,log,logP,1812,"ILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Descriptors. Descriptors#. Numerical descriptors#; Number of atoms (atoms); Add or remove hydrogens to count total or heavy atoms; SMARTS: *; Number of bonds (bonds); Add or remove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: *:*; Number of single bonds (sbonds); SMARTS: *-*; Number of double bonds (dbonds); SMARTS: *=*; topological polar surface area (TPSA); Datafile: psa.txt; Rotatable bonds filter (rotors); Melting point (MP); This is a melting point descriptor developed; by Andy Lang. For details see:; http://onschallenge.wikispaces.com/MeltingPointModel011; Datafile: mpC.txt. Textual descriptors#; Canonical SMILES (cansmi); Canonical SMILES without isotopes or stereo (cansmiNS); IUPAC InChI identifier (InChI); InChIKey (InChIKey); Chemical formula (formula); For comparing a molecule’s title (title). Descriptors for filtering#; Lipinski Rule of Five (L5); HBD<5 HBA1<10 MW<500 logP<",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:1829,Testability,log,logp,1829,"ILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Descriptors. Descriptors#. Numerical descriptors#; Number of atoms (atoms); Add or remove hydrogens to count total or heavy atoms; SMARTS: *; Number of bonds (bonds); Add or remove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: *:*; Number of single bonds (sbonds); SMARTS: *-*; Number of double bonds (dbonds); SMARTS: *=*; topological polar surface area (TPSA); Datafile: psa.txt; Rotatable bonds filter (rotors); Melting point (MP); This is a melting point descriptor developed; by Andy Lang. For details see:; http://onschallenge.wikispaces.com/MeltingPointModel011; Datafile: mpC.txt. Textual descriptors#; Canonical SMILES (cansmi); Canonical SMILES without isotopes or stereo (cansmiNS); IUPAC InChI identifier (InChI); InChIKey (InChIKey); Chemical formula (formula); For comparing a molecule’s title (title). Descriptors for filtering#; Lipinski Rule of Five (L5); HBD<5 HBA1<10 MW<500 logP<",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:2668,Testability,log,logP,2668,"ove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: *:*; Number of single bonds (sbonds); SMARTS: *-*; Number of double bonds (dbonds); SMARTS: *=*; topological polar surface area (TPSA); Datafile: psa.txt; Rotatable bonds filter (rotors); Melting point (MP); This is a melting point descriptor developed; by Andy Lang. For details see:; http://onschallenge.wikispaces.com/MeltingPointModel011; Datafile: mpC.txt. Textual descriptors#; Canonical SMILES (cansmi); Canonical SMILES without isotopes or stereo (cansmiNS); IUPAC InChI identifier (InChI); InChIKey (InChIKey); Chemical formula (formula); For comparing a molecule’s title (title). Descriptors for filtering#; Lipinski Rule of Five (L5); HBD<5 HBA1<10 MW<500 logP<5; SMARTS filter (smarts); SMARTS filter (s). previous; XED format (xed). next; Charge models. On this page; . Numerical descriptors; Textual descriptors; Descriptors for filtering. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:140,Usability,Guid,Guide,140,"﻿. Descriptors — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Descriptors. Descriptors#. Numerical descriptors#; Number of atoms (atoms); Add or remove hydrogens to count total or heavy atoms; SMARTS: *; Number of bonds (bonds); Add or remove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: ",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:197,Usability,Guid,Guide,197,"﻿. Descriptors — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Descriptors. Descriptors#. Numerical descriptors#; Number of atoms (atoms); Add or remove hydrogens to count total or heavy atoms; SMARTS: *; Number of bonds (bonds); Add or remove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: ",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Descriptors/descriptors.html:817,Usability,Guid,Guide,817,"﻿. Descriptors — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Descriptors. Descriptors#. Numerical descriptors#; Number of atoms (atoms); Add or remove hydrogens to count total or heavy atoms; SMARTS: *; Number of bonds (bonds); Add or remove hydrogens to count total or bonds between heavy atoms; SMARTS: *~*; Number of Hydrogen Bond Donors (JoelLib) (HBD); SMARTS: [!#6;!H0]; Number of Hydrogen Bond Acceptors 1 (JoelLib) (HBA1); Identification of Biological Activity Profiles Using Substructural; Analysis and Genetic Algorithms – Gillet, Willett and Bradshaw,; U. of Sheffield and Glaxo Wellcome.; Presented at Random & Rational: Drug Discovery via Rational Design; and Combinitorial Chemistry, Strategic Research Institute, Princeton; NJ, Sept. 1995; SMARTS: [$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]; Number of Hydrogen Bond Acceptors 2 (JoelLib) (HBA2); SMARTS: [$([$([#8,#16]);!$(*=N~O);!$(*~N=O);X1,X2]),$([#7;v3;!$([nH]);!$(*(-a)-a)])]; Number of Fluorine Atoms (nF); SMARTS: F; octanol/water partition coefficient (logP); Datafile: logp.txt; Molecular Weight filter (MW); Number of triple bonds (tbonds); SMARTS: *#*; molar refractivity (MR); Datafile: mr.txt; Number of aromatic bonds (abonds); SMARTS: ",MatchSource.WIKI,docs/Descriptors/descriptors.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Descriptors/descriptors.html
http://openbabel.org//docs/Features/Radicals.html:7884,Availability,robust,robust,7884,"iting radicals, and in many cases is easier to read since the; emphasis is on the radical centre rather than the number of; hydrogens which is less chemically significant.; In addition, this extension interprets multiple lower case c; without ring closure as a conjugated carbon chain, so that cccc is; input as 1,3-butadiene. Lycopene (the red in tomatoes) is; Cc(C)cCCc(C)cccc(C)cccc(C)ccccc(C)cccc(C)cccc(C)CCcc(C)C (without; the stereochemical specifications). This conjugated chain form is; not used on output - except in the standard SMILES aromatic form,; c1ccccc1 benzene.; It is interesting to note that the lower case extension actually improves; the chemical representation in a few cases. The allyl radical C3H5; would be conventionally [CH2]=[CH][CH2] (in its explict H form),; but could be represented as ccc with the extended syntax. The; latter more accurately represents the symmetry of the molecule; caused by delocalisation.; This extension is not as robust or as carefully considered as standard; SMILES and should be used with restraint. A structure that uses c; as a radical centre close to aromatic carbons can be confusing to; read, and Open Babel’s SMILES parser can also be confused. For example, it; recognizes c1ccccc1c as the benzyl radical, but it doesn’t like; c1cc(c)ccc1. Radical centres should not be involved in ring; closure: for cyclohexyl radical C1cCCCC1 is ok, but c1CCCCC1 is not. Other Supported Extensions#; Open Babel supports quadruple bonds $, e.g. [Rh-](Cl)(Cl)(Cl)(Cl)$[Rh-](Cl)(Cl)(Cl)Cl; and aromatic [te], e.g. Cc1[te]ccc1. In addition, ring closures; up to 5 digits %(N) are supported, e.g. C%(100)CC%(100). previous; Handling of aromaticity. next; Contributing to Open Babel. On this page; . The need for radicals and implicit hydrogen to coexist; How Open Babel does it; In radicals either the hydrogen or the spin multiplicity can be implicit; SMILES extensions for radicals; Other Supported Extensions. ; ; ; Edit on GitHub; ; ; . ; © Copyright ",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:283,Deployability,Install,Install,283,"﻿. Radicals and SMILES extensions — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Radicals... Radicals and SMILES extensions#. The need for radicals and implicit hydrogen to coexist#; Hydrogen deficient molecules, radicals, carbenes, etc., are not; well catered for by chemical software aimed at pharmaceuticals. But; radicals are important reaction intermediates in living systems as; well as many other fields, such as polymers, paints, oils,; combustion and atmospheric chemistry. The examples given here are; small molecules, relevant to the last two applications.; Chemistry software to handle radicals is complicated by the common; use of implicit hydrogen when describing molecules. How is the; program to know when you type “O” whether you mean an oxygen atom; or water? This ambiguity leads some to say that hydrogens should; always be explicit in any chemical description. But this is not the; way that most chemists work. A straight paraffinic chain from which; a hydrogen had been abstracted might commonly be represented by; something like: ; This uses implicit hydrogens and an explicit radical centre. But; sometimes the hydrogens are explicit and the radical centre; implicit, as when CH3is used to represent the methyl radi",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:816,Deployability,Release,Release,816,"﻿. Radicals and SMILES extensions — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Radicals... Radicals and SMILES extensions#. The need for radicals and implicit hydrogen to coexist#; Hydrogen deficient molecules, radicals, carbenes, etc., are not; well catered for by chemical software aimed at pharmaceuticals. But; radicals are important reaction intermediates in living systems as; well as many other fields, such as polymers, paints, oils,; combustion and atmospheric chemistry. The examples given here are; small molecules, relevant to the last two applications.; Chemistry software to handle radicals is complicated by the common; use of implicit hydrogen when describing molecules. How is the; program to know when you type “O” whether you mean an oxygen atom; or water? This ambiguity leads some to say that hydrogens should; always be explicit in any chemical description. But this is not the; way that most chemists work. A straight paraffinic chain from which; a hydrogen had been abstracted might commonly be represented by; something like: ; This uses implicit hydrogens and an explicit radical centre. But; sometimes the hydrogens are explicit and the radical centre; implicit, as when CH3is used to represent the methyl radi",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:2967,Deployability,configurat,configurations,2967,"esent the methyl radical. How Open Babel does it#; Open Babel accepts molecules with explicit or implicit hydrogens and; can convert between the two. It will also handle radicals (and; other hydrogen-deficient species) with implicit hydrogen by using; internally a property of an atom, _spinmultiplicity, modelled on; the RAD property in MDL MOL files and also used in CML. This can be; regarded in the present context as a measure of the hydrogen; deficiency of an atom. Its value is:. 0 for normal atoms,; 2 for radical (missing one hydrogen) and; 1 or 3 for carbenes and nitrenes (missing two hydrogens). It happens that for some doubly deficient species, like carbene; CH2 and oxygen atoms, the singlet and triplet species are fairly close; in energy and both may be significant in certain applications such; as combustion, atmospheric or preparative organic chemistry, so it; is convenient that they can be described separately. There are of; course an infinity of other electronic configurations of molecules; but Open Babel has no special descriptors for them. However, even; more hydrogen-deficient atoms are indicated by the highest possible; value of spinmultiplicity (C atom has spin multiplicity of 5).; (This extends MDL’s RAD property which has a maximum value of 3.); If the spin multiplicity of an atom is not input explicitly, it is; set (in :obapi:`OBMol::AssignSpinMultiplicity() <OpenBabel::OBMol::AssignSpinMultiplicity>`) when the input format is; MOL, SMI, CML or Therm. This routine is called after all the atoms; and bonds of the molecule are known. It detects hydrogen deficiency; in an atom and assigns spin multiplicity appropriately. But because; hydrogen may be implicit it only does this for atoms which have at; least one explicit hydrogen or on atoms which have had; :obapi:`ForceNoH() <OpenBabel::OBAtom::ForceNoH>` called for them - which is effectively zero explicit; hydrogens. The latter is used, for instance, when SMILES inputs [O]; to ensure that it is seen a",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:801,Energy Efficiency,Charge,Charge,801,"﻿. Radicals and SMILES extensions — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Radicals... Radicals and SMILES extensions#. The need for radicals and implicit hydrogen to coexist#; Hydrogen deficient molecules, radicals, carbenes, etc., are not; well catered for by chemical software aimed at pharmaceuticals. But; radicals are important reaction intermediates in living systems as; well as many other fields, such as polymers, paints, oils,; combustion and atmospheric chemistry. The examples given here are; small molecules, relevant to the last two applications.; Chemistry software to handle radicals is complicated by the common; use of implicit hydrogen when describing molecules. How is the; program to know when you type “O” whether you mean an oxygen atom; or water? This ambiguity leads some to say that hydrogens should; always be explicit in any chemical description. But this is not the; way that most chemists work. A straight paraffinic chain from which; a hydrogen had been abstracted might commonly be represented by; something like: ; This uses implicit hydrogens and an explicit radical centre. But; sometimes the hydrogens are explicit and the radical centre; implicit, as when CH3is used to represent the methyl radi",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:2728,Energy Efficiency,energy,energy,2728,"een abstracted might commonly be represented by; something like: ; This uses implicit hydrogens and an explicit radical centre. But; sometimes the hydrogens are explicit and the radical centre; implicit, as when CH3is used to represent the methyl radical. How Open Babel does it#; Open Babel accepts molecules with explicit or implicit hydrogens and; can convert between the two. It will also handle radicals (and; other hydrogen-deficient species) with implicit hydrogen by using; internally a property of an atom, _spinmultiplicity, modelled on; the RAD property in MDL MOL files and also used in CML. This can be; regarded in the present context as a measure of the hydrogen; deficiency of an atom. Its value is:. 0 for normal atoms,; 2 for radical (missing one hydrogen) and; 1 or 3 for carbenes and nitrenes (missing two hydrogens). It happens that for some doubly deficient species, like carbene; CH2 and oxygen atoms, the singlet and triplet species are fairly close; in energy and both may be significant in certain applications such; as combustion, atmospheric or preparative organic chemistry, so it; is convenient that they can be described separately. There are of; course an infinity of other electronic configurations of molecules; but Open Babel has no special descriptors for them. However, even; more hydrogen-deficient atoms are indicated by the highest possible; value of spinmultiplicity (C atom has spin multiplicity of 5).; (This extends MDL’s RAD property which has a maximum value of 3.); If the spin multiplicity of an atom is not input explicitly, it is; set (in :obapi:`OBMol::AssignSpinMultiplicity() <OpenBabel::OBMol::AssignSpinMultiplicity>`) when the input format is; MOL, SMI, CML or Therm. This routine is called after all the atoms; and bonds of the molecule are known. It detects hydrogen deficiency; in an atom and assigns spin multiplicity appropriately. But because; hydrogen may be implicit it only does this for atoms which have at; least one explicit hydroge",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:3479,Integrability,rout,routine,3479,"e hydrogen) and; 1 or 3 for carbenes and nitrenes (missing two hydrogens). It happens that for some doubly deficient species, like carbene; CH2 and oxygen atoms, the singlet and triplet species are fairly close; in energy and both may be significant in certain applications such; as combustion, atmospheric or preparative organic chemistry, so it; is convenient that they can be described separately. There are of; course an infinity of other electronic configurations of molecules; but Open Babel has no special descriptors for them. However, even; more hydrogen-deficient atoms are indicated by the highest possible; value of spinmultiplicity (C atom has spin multiplicity of 5).; (This extends MDL’s RAD property which has a maximum value of 3.); If the spin multiplicity of an atom is not input explicitly, it is; set (in :obapi:`OBMol::AssignSpinMultiplicity() <OpenBabel::OBMol::AssignSpinMultiplicity>`) when the input format is; MOL, SMI, CML or Therm. This routine is called after all the atoms; and bonds of the molecule are known. It detects hydrogen deficiency; in an atom and assigns spin multiplicity appropriately. But because; hydrogen may be implicit it only does this for atoms which have at; least one explicit hydrogen or on atoms which have had; :obapi:`ForceNoH() <OpenBabel::OBAtom::ForceNoH>` called for them - which is effectively zero explicit; hydrogens. The latter is used, for instance, when SMILES inputs [O]; to ensure that it is seen as an oxygen atom (spin multiplicity=3); rather than water. Otherwise, atoms with no explicit hydrogen are; assumed to have a spin multiplicity of 0, i.e with full complement; of implicit hydrogens.; In deciding which atoms should be have spin multiplicity assigned,; hydrogen atoms which have an isotope specification (D,T or even 1H); do not count. So SMILES N[2H] is NH2D (spin multiplicity; left at 0, so with a full content of implicit hydrogens), whereas; N[H] is NH (spin multiplicity=3). A deuterated radical like NHD is; repre",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:743,Modifiability,plugin,plugins,743,"﻿. Radicals and SMILES extensions — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Radicals... Radicals and SMILES extensions#. The need for radicals and implicit hydrogen to coexist#; Hydrogen deficient molecules, radicals, carbenes, etc., are not; well catered for by chemical software aimed at pharmaceuticals. But; radicals are important reaction intermediates in living systems as; well as many other fields, such as polymers, paints, oils,; combustion and atmospheric chemistry. The examples given here are; small molecules, relevant to the last two applications.; Chemistry software to handle radicals is complicated by the common; use of implicit hydrogen when describing molecules. How is the; program to know when you type “O” whether you mean an oxygen atom; or water? This ambiguity leads some to say that hydrogens should; always be explicit in any chemical description. But this is not the; way that most chemists work. A straight paraffinic chain from which; a hydrogen had been abstracted might commonly be represented by; something like: ; This uses implicit hydrogens and an explicit radical centre. But; sometimes the hydrogens are explicit and the radical centre; implicit, as when CH3is used to represent the methyl radi",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:2967,Modifiability,config,configurations,2967,"esent the methyl radical. How Open Babel does it#; Open Babel accepts molecules with explicit or implicit hydrogens and; can convert between the two. It will also handle radicals (and; other hydrogen-deficient species) with implicit hydrogen by using; internally a property of an atom, _spinmultiplicity, modelled on; the RAD property in MDL MOL files and also used in CML. This can be; regarded in the present context as a measure of the hydrogen; deficiency of an atom. Its value is:. 0 for normal atoms,; 2 for radical (missing one hydrogen) and; 1 or 3 for carbenes and nitrenes (missing two hydrogens). It happens that for some doubly deficient species, like carbene; CH2 and oxygen atoms, the singlet and triplet species are fairly close; in energy and both may be significant in certain applications such; as combustion, atmospheric or preparative organic chemistry, so it; is convenient that they can be described separately. There are of; course an infinity of other electronic configurations of molecules; but Open Babel has no special descriptors for them. However, even; more hydrogen-deficient atoms are indicated by the highest possible; value of spinmultiplicity (C atom has spin multiplicity of 5).; (This extends MDL’s RAD property which has a maximum value of 3.); If the spin multiplicity of an atom is not input explicitly, it is; set (in :obapi:`OBMol::AssignSpinMultiplicity() <OpenBabel::OBMol::AssignSpinMultiplicity>`) when the input format is; MOL, SMI, CML or Therm. This routine is called after all the atoms; and bonds of the molecule are known. It detects hydrogen deficiency; in an atom and assigns spin multiplicity appropriately. But because; hydrogen may be implicit it only does this for atoms which have at; least one explicit hydrogen or on atoms which have had; :obapi:`ForceNoH() <OpenBabel::OBAtom::ForceNoH>` called for them - which is effectively zero explicit; hydrogens. The latter is used, for instance, when SMILES inputs [O]; to ensure that it is seen a",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:3202,Modifiability,extend,extends,3202,"ing; internally a property of an atom, _spinmultiplicity, modelled on; the RAD property in MDL MOL files and also used in CML. This can be; regarded in the present context as a measure of the hydrogen; deficiency of an atom. Its value is:. 0 for normal atoms,; 2 for radical (missing one hydrogen) and; 1 or 3 for carbenes and nitrenes (missing two hydrogens). It happens that for some doubly deficient species, like carbene; CH2 and oxygen atoms, the singlet and triplet species are fairly close; in energy and both may be significant in certain applications such; as combustion, atmospheric or preparative organic chemistry, so it; is convenient that they can be described separately. There are of; course an infinity of other electronic configurations of molecules; but Open Babel has no special descriptors for them. However, even; more hydrogen-deficient atoms are indicated by the highest possible; value of spinmultiplicity (C atom has spin multiplicity of 5).; (This extends MDL’s RAD property which has a maximum value of 3.); If the spin multiplicity of an atom is not input explicitly, it is; set (in :obapi:`OBMol::AssignSpinMultiplicity() <OpenBabel::OBMol::AssignSpinMultiplicity>`) when the input format is; MOL, SMI, CML or Therm. This routine is called after all the atoms; and bonds of the molecule are known. It detects hydrogen deficiency; in an atom and assigns spin multiplicity appropriately. But because; hydrogen may be implicit it only does this for atoms which have at; least one explicit hydrogen or on atoms which have had; :obapi:`ForceNoH() <OpenBabel::OBAtom::ForceNoH>` called for them - which is effectively zero explicit; hydrogens. The latter is used, for instance, when SMILES inputs [O]; to ensure that it is seen as an oxygen atom (spin multiplicity=3); rather than water. Otherwise, atoms with no explicit hydrogen are; assumed to have a spin multiplicity of 0, i.e with full complement; of implicit hydrogens.; In deciding which atoms should be have spin mult",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:7746,Modifiability,extend,extended,7746,"istry Control and; maybe elsewhere.) So the ethyl radical is Cc and the methoxy radical; is Co. This form is input transparently and can be output by using; the -xr option “radicals lower case”. It is a useful shorthand in; writing radicals, and in many cases is easier to read since the; emphasis is on the radical centre rather than the number of; hydrogens which is less chemically significant.; In addition, this extension interprets multiple lower case c; without ring closure as a conjugated carbon chain, so that cccc is; input as 1,3-butadiene. Lycopene (the red in tomatoes) is; Cc(C)cCCc(C)cccc(C)cccc(C)ccccc(C)cccc(C)cccc(C)CCcc(C)C (without; the stereochemical specifications). This conjugated chain form is; not used on output - except in the standard SMILES aromatic form,; c1ccccc1 benzene.; It is interesting to note that the lower case extension actually improves; the chemical representation in a few cases. The allyl radical C3H5; would be conventionally [CH2]=[CH][CH2] (in its explict H form),; but could be represented as ccc with the extended syntax. The; latter more accurately represents the symmetry of the molecule; caused by delocalisation.; This extension is not as robust or as carefully considered as standard; SMILES and should be used with restraint. A structure that uses c; as a radical centre close to aromatic carbons can be confusing to; read, and Open Babel’s SMILES parser can also be confused. For example, it; recognizes c1ccccc1c as the benzyl radical, but it doesn’t like; c1cc(c)ccc1. Radical centres should not be involved in ring; closure: for cyclohexyl radical C1cCCCC1 is ok, but c1CCCCC1 is not. Other Supported Extensions#; Open Babel supports quadruple bonds $, e.g. [Rh-](Cl)(Cl)(Cl)(Cl)$[Rh-](Cl)(Cl)(Cl)Cl; and aromatic [te], e.g. Cc1[te]ccc1. In addition, ring closures; up to 5 digits %(N) are supported, e.g. C%(100)CC%(100). previous; Handling of aromaticity. next; Contributing to Open Babel. On this page; . The need for radicals and imp",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:3558,Safety,detect,detects,3558," that for some doubly deficient species, like carbene; CH2 and oxygen atoms, the singlet and triplet species are fairly close; in energy and both may be significant in certain applications such; as combustion, atmospheric or preparative organic chemistry, so it; is convenient that they can be described separately. There are of; course an infinity of other electronic configurations of molecules; but Open Babel has no special descriptors for them. However, even; more hydrogen-deficient atoms are indicated by the highest possible; value of spinmultiplicity (C atom has spin multiplicity of 5).; (This extends MDL’s RAD property which has a maximum value of 3.); If the spin multiplicity of an atom is not input explicitly, it is; set (in :obapi:`OBMol::AssignSpinMultiplicity() <OpenBabel::OBMol::AssignSpinMultiplicity>`) when the input format is; MOL, SMI, CML or Therm. This routine is called after all the atoms; and bonds of the molecule are known. It detects hydrogen deficiency; in an atom and assigns spin multiplicity appropriately. But because; hydrogen may be implicit it only does this for atoms which have at; least one explicit hydrogen or on atoms which have had; :obapi:`ForceNoH() <OpenBabel::OBAtom::ForceNoH>` called for them - which is effectively zero explicit; hydrogens. The latter is used, for instance, when SMILES inputs [O]; to ensure that it is seen as an oxygen atom (spin multiplicity=3); rather than water. Otherwise, atoms with no explicit hydrogen are; assumed to have a spin multiplicity of 0, i.e with full complement; of implicit hydrogens.; In deciding which atoms should be have spin multiplicity assigned,; hydrogen atoms which have an isotope specification (D,T or even 1H); do not count. So SMILES N[2H] is NH2D (spin multiplicity; left at 0, so with a full content of implicit hydrogens), whereas; N[H] is NH (spin multiplicity=3). A deuterated radical like NHD is; represented by [NH][2H]. In radicals either the hydrogen or the spin multiplicity can be ",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:159,Usability,Guid,Guide,159,"﻿. Radicals and SMILES extensions — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Radicals... Radicals and SMILES extensions#. The need for radicals and implicit hydrogen to coexist#; Hydrogen deficient molecules, radicals, carbenes, etc., are not; well catered for by chemical software aimed at pharmaceuticals. But; radicals are important reaction intermediates in living systems as; well as many other fields, such as polymers, paints, oils,; combustion and atmospheric chemistry. The examples given here are; small molecules, relevant to the last two applications.; Chemistry software to handle radicals is complicated by the common; use of implicit hydrogen when describing molecules. How is the; program to know when you type “O” whether you mean an oxygen atom; or water? This ambiguity leads some to say that hydrogens should; always be explicit in any chemical description. But this is not the; way that most chemists work. A straight paraffinic chain from which; a hydrogen had been abstracted might commonly be represented by; something like: ; This uses implicit hydrogens and an explicit radical centre. But; sometimes the hydrogens are explicit and the radical centre; implicit, as when CH3is used to represent the methyl radi",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:216,Usability,Guid,Guide,216,"﻿. Radicals and SMILES extensions — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Radicals... Radicals and SMILES extensions#. The need for radicals and implicit hydrogen to coexist#; Hydrogen deficient molecules, radicals, carbenes, etc., are not; well catered for by chemical software aimed at pharmaceuticals. But; radicals are important reaction intermediates in living systems as; well as many other fields, such as polymers, paints, oils,; combustion and atmospheric chemistry. The examples given here are; small molecules, relevant to the last two applications.; Chemistry software to handle radicals is complicated by the common; use of implicit hydrogen when describing molecules. How is the; program to know when you type “O” whether you mean an oxygen atom; or water? This ambiguity leads some to say that hydrogens should; always be explicit in any chemical description. But this is not the; way that most chemists work. A straight paraffinic chain from which; a hydrogen had been abstracted might commonly be represented by; something like: ; This uses implicit hydrogens and an explicit radical centre. But; sometimes the hydrogens are explicit and the radical centre; implicit, as when CH3is used to represent the methyl radi",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/Features/Radicals.html:836,Usability,Guid,Guide,836,"﻿. Radicals and SMILES extensions — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Descriptors; Charge models; Release Notes. User Guide; Radicals... Radicals and SMILES extensions#. The need for radicals and implicit hydrogen to coexist#; Hydrogen deficient molecules, radicals, carbenes, etc., are not; well catered for by chemical software aimed at pharmaceuticals. But; radicals are important reaction intermediates in living systems as; well as many other fields, such as polymers, paints, oils,; combustion and atmospheric chemistry. The examples given here are; small molecules, relevant to the last two applications.; Chemistry software to handle radicals is complicated by the common; use of implicit hydrogen when describing molecules. How is the; program to know when you type “O” whether you mean an oxygen atom; or water? This ambiguity leads some to say that hydrogens should; always be explicit in any chemical description. But this is not the; way that most chemists work. A straight paraffinic chain from which; a hydrogen had been abstracted might commonly be represented by; something like: ; This uses implicit hydrogens and an explicit radical centre. But; sometimes the hydrogens are explicit and the radical centre; implicit, as when CH3is used to represent the methyl radi",MatchSource.WIKI,docs/Features/Radicals.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/Features/Radicals.html
http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html:271,Deployability,Install,Install,271,"﻿. 2D drawing formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 2D drawing formats. 2D drawing formats#. ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Read Options. Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). previous; SVG 2D depiction (svg). next; ChemDraw CDXML format (cdxml). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/2D_drawing_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html
http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html:1388,Deployability,Release,Release,1388,"﻿. 2D drawing formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 2D drawing formats. 2D drawing formats#. ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Read Options. Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). previous; SVG 2D depiction (svg). next; ChemDraw CDXML format (cdxml). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/2D_drawing_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html
http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html:1373,Energy Efficiency,Charge,Charge,1373,"﻿. 2D drawing formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 2D drawing formats. 2D drawing formats#. ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Read Options. Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). previous; SVG 2D depiction (svg). next; ChemDraw CDXML format (cdxml). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/2D_drawing_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html
http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html:731,Modifiability,plugin,plugins,731,"﻿. 2D drawing formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 2D drawing formats. 2D drawing formats#. ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Read Options. Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). previous; SVG 2D depiction (svg). next; ChemDraw CDXML format (cdxml). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/2D_drawing_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html
http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html:147,Usability,Guid,Guide,147,"﻿. 2D drawing formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 2D drawing formats. 2D drawing formats#. ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Read Options. Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). previous; SVG 2D depiction (svg). next; ChemDraw CDXML format (cdxml). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/2D_drawing_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html
http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html:204,Usability,Guid,Guide,204,"﻿. 2D drawing formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 2D drawing formats. 2D drawing formats#. ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Read Options. Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). previous; SVG 2D depiction (svg). next; ChemDraw CDXML format (cdxml). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/2D_drawing_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html
http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html:1408,Usability,Guid,Guide,1408,"﻿. 2D drawing formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 2D drawing formats. 2D drawing formats#. ChemDraw CDXML format (cdxml); ChemDraw Connection Table format (ct); ChemDraw binary format (cdx); Read Options. Chemical Resource Kit diagram(2D) (crk2d); Chemtool format (cht). previous; SVG 2D depiction (svg). next; ChemDraw CDXML format (cdxml). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/2D_drawing_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/2D_drawing_Formats.html
http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html:270,Deployability,Install,Install,270,"﻿. 3D viewer formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); PCModel Format (pcm); UniChem XYZ format (unixyz); ViewMol format (vmol); XCrySDen Structure Format (axsf, xsf); YASARA.org YOB format (yob). Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 3D viewer formats. 3D viewer formats#. Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); Read Options. PCModel Format (pcm); UniChem XYZ format (unixyz); Read Options. ViewMol",MatchSource.WIKI,docs/FileFormats/3D_viewer_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html
http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html:1588,Deployability,Release,Release,1588,"ate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); PCModel Format (pcm); UniChem XYZ format (unixyz); ViewMol format (vmol); XCrySDen Structure Format (axsf, xsf); YASARA.org YOB format (yob). Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 3D viewer formats. 3D viewer formats#. Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); Read Options. PCModel Format (pcm); UniChem XYZ format (unixyz); Read Options. ViewMol format (vmol); Read Options. XCrySDen Structure Format (axsf, xsf); Read Options. YASARA.org YOB format (yob). previous; Chemtool format (cht). next; Ball and Stick format (bs). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/3D_viewer_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html
http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html:1573,Energy Efficiency,Charge,Charge,1573,"ate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); PCModel Format (pcm); UniChem XYZ format (unixyz); ViewMol format (vmol); XCrySDen Structure Format (axsf, xsf); YASARA.org YOB format (yob). Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 3D viewer formats. 3D viewer formats#. Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); Read Options. PCModel Format (pcm); UniChem XYZ format (unixyz); Read Options. ViewMol format (vmol); Read Options. XCrySDen Structure Format (axsf, xsf); Read Options. YASARA.org YOB format (yob). previous; Chemtool format (cht). next; Ball and Stick format (bs). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/3D_viewer_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html
http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html:730,Modifiability,plugin,plugins,730,"﻿. 3D viewer formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); PCModel Format (pcm); UniChem XYZ format (unixyz); ViewMol format (vmol); XCrySDen Structure Format (axsf, xsf); YASARA.org YOB format (yob). Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 3D viewer formats. 3D viewer formats#. Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); Read Options. PCModel Format (pcm); UniChem XYZ format (unixyz); Read Options. ViewMol",MatchSource.WIKI,docs/FileFormats/3D_viewer_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html
http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html:146,Usability,Guid,Guide,146,"﻿. 3D viewer formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); PCModel Format (pcm); UniChem XYZ format (unixyz); ViewMol format (vmol); XCrySDen Structure Format (axsf, xsf); YASARA.org YOB format (yob). Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 3D viewer formats. 3D viewer formats#. Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); Read Options. PCModel Format (pcm); UniChem XYZ format (unixyz); Read Options. ViewMol",MatchSource.WIKI,docs/FileFormats/3D_viewer_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html
http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html:203,Usability,Guid,Guide,203,"﻿. 3D viewer formats — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); PCModel Format (pcm); UniChem XYZ format (unixyz); ViewMol format (vmol); XCrySDen Structure Format (axsf, xsf); YASARA.org YOB format (yob). Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 3D viewer formats. 3D viewer formats#. Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); Read Options. PCModel Format (pcm); UniChem XYZ format (unixyz); Read Options. ViewMol",MatchSource.WIKI,docs/FileFormats/3D_viewer_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html
http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html:1608,Usability,Guid,Guide,1608,"ate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); PCModel Format (pcm); UniChem XYZ format (unixyz); ViewMol format (vmol); XCrySDen Structure Format (axsf, xsf); YASARA.org YOB format (yob). Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide; Supported File Formats and Options; 3D viewer formats. 3D viewer formats#. Ball and Stick format (bs); Chem3D Cartesian 1 format (c3d1); Chem3D Cartesian 2 format (c3d2); Chemical Resource Kit 3D format (crk3d); Ghemical format (gpr); Maestro format (mae, maegz); Molden format (mold, molden, molf); Read Options. PCModel Format (pcm); UniChem XYZ format (unixyz); Read Options. ViewMol format (vmol); Read Options. XCrySDen Structure Format (axsf, xsf); Read Options. YASARA.org YOB format (yob). previous; Chemtool format (cht). next; Ball and Stick format (bs). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/3D_viewer_Formats.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/3D_viewer_Formats.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:1805,Availability,checkpoint,checkpoint,1805,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:282,Deployability,Install,Install,282," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPA",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:2858,Deployability,Release,Release,2858,"ut format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ABINIT... ABINIT Output Format (abinit)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Computational chemistry formats. next; ACES input format (acesin). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:2843,Energy Efficiency,Charge,Charge,2843,"ut format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ABINIT... ABINIT Output Format (abinit)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Computational chemistry formats. next; ACES input format (acesin). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:742,Modifiability,plugin,plugins,742," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPA",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:1414,Modifiability,Extend,Extended,1414,"erprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); ",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:1119,Performance,CAChe,CAChe,1119," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPA",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:1148,Performance,cache,cache,1148," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPA",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:158,Usability,Guid,Guide,158,"﻿. ABINIT Output Format (abinit) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPA",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:215,Usability,Guid,Guide,215,"﻿. ABINIT Output Format (abinit) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPA",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:2064,Usability,simpl,simplified,2064,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html:2878,Usability,Guid,Guide,2878,"ut format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ABINIT... ABINIT Output Format (abinit)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Computational chemistry formats. next; ACES input format (acesin). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ABINIT_Output_Format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ABINIT_Output_Format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html:305,Deployability,Install,Install,305,"﻿. Accelrys/MSI Biosym/Insight II CAR format (arc, car) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Biosym/Insight II CAR format (arc, car)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Other cheminformatics formats. next; Accelrys/MSI Cerius II MSI format (msi). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html:1483,Deployability,Release,Release,1483,"﻿. Accelrys/MSI Biosym/Insight II CAR format (arc, car) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Biosym/Insight II CAR format (arc, car)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Other cheminformatics formats. next; Accelrys/MSI Cerius II MSI format (msi). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html:1468,Energy Efficiency,Charge,Charge,1468,"﻿. Accelrys/MSI Biosym/Insight II CAR format (arc, car) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Biosym/Insight II CAR format (arc, car)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Other cheminformatics formats. next; Accelrys/MSI Cerius II MSI format (msi). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html:765,Modifiability,plugin,plugins,765,"﻿. Accelrys/MSI Biosym/Insight II CAR format (arc, car) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Biosym/Insight II CAR format (arc, car)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Other cheminformatics formats. next; Accelrys/MSI Cerius II MSI format (msi). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html:181,Usability,Guid,Guide,181,"﻿. Accelrys/MSI Biosym/Insight II CAR format (arc, car) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Biosym/Insight II CAR format (arc, car)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Other cheminformatics formats. next; Accelrys/MSI Cerius II MSI format (msi). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html:238,Usability,Guid,Guide,238,"﻿. Accelrys/MSI Biosym/Insight II CAR format (arc, car) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Biosym/Insight II CAR format (arc, car)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Other cheminformatics formats. next; Accelrys/MSI Cerius II MSI format (msi). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html:1503,Usability,Guid,Guide,1503,"﻿. Accelrys/MSI Biosym/Insight II CAR format (arc, car) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Biosym/Insight II CAR format (arc, car)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Other cheminformatics formats. next; Accelrys/MSI Cerius II MSI format (msi). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Biosym_or_Insight_II_CAR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html:292,Deployability,Install,Install,292,"﻿. Accelrys/MSI Cerius II MSI format (msi) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Cerius II MSI format (msi)#. Note; This is a read-only format. previous; Accelrys/MSI Biosym/Insight II CAR format (arc, car). next; Accelrys/MSI Quanta CSR format (csr). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html:1470,Deployability,Release,Release,1470,"﻿. Accelrys/MSI Cerius II MSI format (msi) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Cerius II MSI format (msi)#. Note; This is a read-only format. previous; Accelrys/MSI Biosym/Insight II CAR format (arc, car). next; Accelrys/MSI Quanta CSR format (csr). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html:1455,Energy Efficiency,Charge,Charge,1455,"﻿. Accelrys/MSI Cerius II MSI format (msi) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Cerius II MSI format (msi)#. Note; This is a read-only format. previous; Accelrys/MSI Biosym/Insight II CAR format (arc, car). next; Accelrys/MSI Quanta CSR format (csr). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html:752,Modifiability,plugin,plugins,752,"﻿. Accelrys/MSI Cerius II MSI format (msi) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Cerius II MSI format (msi)#. Note; This is a read-only format. previous; Accelrys/MSI Biosym/Insight II CAR format (arc, car). next; Accelrys/MSI Quanta CSR format (csr). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html:168,Usability,Guid,Guide,168,"﻿. Accelrys/MSI Cerius II MSI format (msi) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Cerius II MSI format (msi)#. Note; This is a read-only format. previous; Accelrys/MSI Biosym/Insight II CAR format (arc, car). next; Accelrys/MSI Quanta CSR format (csr). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html:225,Usability,Guid,Guide,225,"﻿. Accelrys/MSI Cerius II MSI format (msi) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Cerius II MSI format (msi)#. Note; This is a read-only format. previous; Accelrys/MSI Biosym/Insight II CAR format (arc, car). next; Accelrys/MSI Quanta CSR format (csr). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html:1490,Usability,Guid,Guide,1490,"﻿. Accelrys/MSI Cerius II MSI format (msi) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Cerius II MSI format (msi)#. Note; This is a read-only format. previous; Accelrys/MSI Biosym/Insight II CAR format (arc, car). next; Accelrys/MSI Quanta CSR format (csr). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Cerius_II_MSI_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html:289,Deployability,Install,Install,289,"﻿. Accelrys/MSI Quanta CSR format (csr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Quanta CSR format (csr)#. Note; This is a write-only format. previous; Accelrys/MSI Cerius II MSI format (msi). next; MCDL format (mcdl). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html:1467,Deployability,Release,Release,1467,"﻿. Accelrys/MSI Quanta CSR format (csr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Quanta CSR format (csr)#. Note; This is a write-only format. previous; Accelrys/MSI Cerius II MSI format (msi). next; MCDL format (mcdl). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html:1452,Energy Efficiency,Charge,Charge,1452,"﻿. Accelrys/MSI Quanta CSR format (csr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Quanta CSR format (csr)#. Note; This is a write-only format. previous; Accelrys/MSI Cerius II MSI format (msi). next; MCDL format (mcdl). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html:749,Modifiability,plugin,plugins,749,"﻿. Accelrys/MSI Quanta CSR format (csr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Quanta CSR format (csr)#. Note; This is a write-only format. previous; Accelrys/MSI Cerius II MSI format (msi). next; MCDL format (mcdl). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html:165,Usability,Guid,Guide,165,"﻿. Accelrys/MSI Quanta CSR format (csr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Quanta CSR format (csr)#. Note; This is a write-only format. previous; Accelrys/MSI Cerius II MSI format (msi). next; MCDL format (mcdl). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html:222,Usability,Guid,Guide,222,"﻿. Accelrys/MSI Quanta CSR format (csr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Quanta CSR format (csr)#. Note; This is a write-only format. previous; Accelrys/MSI Cerius II MSI format (msi). next; MCDL format (mcdl). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html
http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html:1487,Usability,Guid,Guide,1487,"﻿. Accelrys/MSI Quanta CSR format (csr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Accelrys/MSI Biosym/Insight II CAR format (arc, car); Accelrys/MSI Cerius II MSI format (msi); Accelrys/MSI Quanta CSR format (csr); MCDL format (mcdl); MSI BGF format (bgf); PubChem format (pc); Wiswesser Line Notation (wln). Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Other cheminformatics formats; Accelrys/MSI... Accelrys/MSI Quanta CSR format (csr)#. Note; This is a write-only format. previous; Accelrys/MSI Cerius II MSI format (msi). next; MCDL format (mcdl). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Accelrys_or_MSI_Quanta_CSR_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:1802,Availability,checkpoint,checkpoint,1802,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:279,Deployability,Install,Install,279," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:2855,Deployability,Release,Release,2855,"mat (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ACES input... ACES input format (acesin)#; ACES is a set of programs that performs ab initio quantum chemistry calculations. Note; This is a write-only format. previous; ABINIT Output Format (abinit). next; ACES output format (acesout). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:2840,Energy Efficiency,Charge,Charge,2840,"mat (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ACES input... ACES input format (acesin)#; ACES is a set of programs that performs ab initio quantum chemistry calculations. Note; This is a write-only format. previous; ABINIT Output Format (abinit). next; ACES output format (acesout). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:739,Modifiability,plugin,plugins,739," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:1411,Modifiability,Extend,Extended,1411,"erprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); ",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:1116,Performance,CAChe,CAChe,1116," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:1145,Performance,cache,cache,1145," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:2989,Performance,perform,performs,2989,"mat (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ACES input... ACES input format (acesin)#; ACES is a set of programs that performs ab initio quantum chemistry calculations. Note; This is a write-only format. previous; ABINIT Output Format (abinit). next; ACES output format (acesout). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:155,Usability,Guid,Guide,155,"﻿. ACES input format (acesin) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:212,Usability,Guid,Guide,212,"﻿. ACES input format (acesin) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:2061,Usability,simpl,simplified,2061,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_input_format.html:2875,Usability,Guid,Guide,2875,"mat (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ACES input... ACES input format (acesin)#; ACES is a set of programs that performs ab initio quantum chemistry calculations. Note; This is a write-only format. previous; ABINIT Output Format (abinit). next; ACES output format (acesout). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACES_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_input_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:1804,Availability,checkpoint,checkpoint,1804,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:281,Deployability,Install,Install,281," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:2857,Deployability,Release,Release,2857,"ol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ACES output... ACES output format (acesout)#; ACES is a set of programs that performs ab initio quantum chemistry calculations. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ACES input format (acesin). next; ADF Band output format (adfband). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:2842,Energy Efficiency,Charge,Charge,2842,"ol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ACES output... ACES output format (acesout)#; ACES is a set of programs that performs ab initio quantum chemistry calculations. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ACES input format (acesin). next; ADF Band output format (adfband). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:741,Modifiability,plugin,plugins,741," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:1413,Modifiability,Extend,Extended,1413,"erprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); ",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:1118,Performance,CAChe,CAChe,1118," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:1147,Performance,cache,cache,1147," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:2994,Performance,perform,performs,2994,"ol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ACES output... ACES output format (acesout)#; ACES is a set of programs that performs ab initio quantum chemistry calculations. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ACES input format (acesin). next; ADF Band output format (adfband). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:157,Usability,Guid,Guide,157,"﻿. ACES output format (acesout) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:214,Usability,Guid,Guide,214,"﻿. ACES output format (acesout) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:2063,Usability,simpl,simplified,2063,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACES_output_format.html:2877,Usability,Guid,Guide,2877,"ol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ACES output... ACES output format (acesout)#; ACES is a set of programs that performs ab initio quantum chemistry calculations. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ACES input format (acesin). next; ADF Band output format (adfband). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACES_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACES_output_format.html
http://openbabel.org//docs/FileFormats/ACR_format.html:269,Deployability,Install,Install,269,"﻿. ACR format (acr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; ACR format (acr); CSD CSSR format (cssr); Crystallographic Information File (cif); Free Form Fractional format (fract); Macromolecular Crystallographic Info (mcif, mmcif); POS cartesian coordinates format (pos); ShelX format (ins, res). Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Crystallography formats; ACR format (acr). ACR format (acr)#; CaRIne ASCII Crystal format (ACR). Note; This is a read-only format. Read Options#. -s; Consider single bonds only. previous; Crystallography formats. next; CSD CSSR format (cssr). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACR_format.html
http://openbabel.org//docs/FileFormats/ACR_format.html:1457,Deployability,Release,Release,1457,"﻿. ACR format (acr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; ACR format (acr); CSD CSSR format (cssr); Crystallographic Information File (cif); Free Form Fractional format (fract); Macromolecular Crystallographic Info (mcif, mmcif); POS cartesian coordinates format (pos); ShelX format (ins, res). Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Crystallography formats; ACR format (acr). ACR format (acr)#; CaRIne ASCII Crystal format (ACR). Note; This is a read-only format. Read Options#. -s; Consider single bonds only. previous; Crystallography formats. next; CSD CSSR format (cssr). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACR_format.html
http://openbabel.org//docs/FileFormats/ACR_format.html:1442,Energy Efficiency,Charge,Charge,1442,"﻿. ACR format (acr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; ACR format (acr); CSD CSSR format (cssr); Crystallographic Information File (cif); Free Form Fractional format (fract); Macromolecular Crystallographic Info (mcif, mmcif); POS cartesian coordinates format (pos); ShelX format (ins, res). Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Crystallography formats; ACR format (acr). ACR format (acr)#; CaRIne ASCII Crystal format (ACR). Note; This is a read-only format. Read Options#. -s; Consider single bonds only. previous; Crystallography formats. next; CSD CSSR format (cssr). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACR_format.html
http://openbabel.org//docs/FileFormats/ACR_format.html:729,Modifiability,plugin,plugins,729,"﻿. ACR format (acr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; ACR format (acr); CSD CSSR format (cssr); Crystallographic Information File (cif); Free Form Fractional format (fract); Macromolecular Crystallographic Info (mcif, mmcif); POS cartesian coordinates format (pos); ShelX format (ins, res). Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Crystallography formats; ACR format (acr). ACR format (acr)#; CaRIne ASCII Crystal format (ACR). Note; This is a read-only format. Read Options#. -s; Consider single bonds only. previous; Crystallography formats. next; CSD CSSR format (cssr). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACR_format.html
http://openbabel.org//docs/FileFormats/ACR_format.html:145,Usability,Guid,Guide,145,"﻿. ACR format (acr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; ACR format (acr); CSD CSSR format (cssr); Crystallographic Information File (cif); Free Form Fractional format (fract); Macromolecular Crystallographic Info (mcif, mmcif); POS cartesian coordinates format (pos); ShelX format (ins, res). Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Crystallography formats; ACR format (acr). ACR format (acr)#; CaRIne ASCII Crystal format (ACR). Note; This is a read-only format. Read Options#. -s; Consider single bonds only. previous; Crystallography formats. next; CSD CSSR format (cssr). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACR_format.html
http://openbabel.org//docs/FileFormats/ACR_format.html:202,Usability,Guid,Guide,202,"﻿. ACR format (acr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; ACR format (acr); CSD CSSR format (cssr); Crystallographic Information File (cif); Free Form Fractional format (fract); Macromolecular Crystallographic Info (mcif, mmcif); POS cartesian coordinates format (pos); ShelX format (ins, res). Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Crystallography formats; ACR format (acr). ACR format (acr)#; CaRIne ASCII Crystal format (ACR). Note; This is a read-only format. Read Options#. -s; Consider single bonds only. previous; Crystallography formats. next; CSD CSSR format (cssr). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACR_format.html
http://openbabel.org//docs/FileFormats/ACR_format.html:1477,Usability,Guid,Guide,1477,"﻿. ACR format (acr) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; ACR format (acr); CSD CSSR format (cssr); Crystallographic Information File (cif); Free Form Fractional format (fract); Macromolecular Crystallographic Info (mcif, mmcif); POS cartesian coordinates format (pos); ShelX format (ins, res). Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Crystallography formats; ACR format (acr). ACR format (acr)#; CaRIne ASCII Crystal format (ACR). Note; This is a read-only format. Read Options#. -s; Consider single bonds only. previous; Crystallography formats. next; CSD CSSR format (cssr). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ACR_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ACR_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:1808,Availability,checkpoint,checkpoint,1808,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:285,Deployability,Install,Install,285," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:2861,Deployability,Release,Release,2861,"al format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF Band... ADF Band output format (adfband)#. Note; This is a read-only format. previous; ACES output format (acesout). next; ADF DFTB output format (adfdftb). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:2846,Energy Efficiency,Charge,Charge,2846,"al format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF Band... ADF Band output format (adfband)#. Note; This is a read-only format. previous; ACES output format (acesout). next; ADF DFTB output format (adfdftb). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:745,Modifiability,plugin,plugins,745," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:1417,Modifiability,Extend,Extended,1417,"erprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); ",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:1122,Performance,CAChe,CAChe,1122," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:1151,Performance,cache,cache,1151," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:161,Usability,Guid,Guide,161,"﻿. ADF Band output format (adfband) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:218,Usability,Guid,Guide,218,"﻿. ADF Band output format (adfband) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:2067,Usability,simpl,simplified,2067,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html:2881,Usability,Guid,Guide,2881,"al format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF Band... ADF Band output format (adfband)#. Note; This is a read-only format. previous; ACES output format (acesout). next; ADF DFTB output format (adfdftb). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_Band_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_Band_output_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:1808,Availability,checkpoint,checkpoint,1808,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:285,Deployability,Install,Install,285," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:2861,Deployability,Release,Release,2861," format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF... ADF cartesian input format (adf)#. Note; This is a write-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ADF DFTB output format (adfdftb). next; ADF output format (adfout). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:2846,Energy Efficiency,Charge,Charge,2846," format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF... ADF cartesian input format (adf)#. Note; This is a write-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ADF DFTB output format (adfdftb). next; ADF output format (adfout). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:745,Modifiability,plugin,plugins,745," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:1417,Modifiability,Extend,Extended,1417,"erprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); ",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:1122,Performance,CAChe,CAChe,1122," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:1151,Performance,cache,cache,1151," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:161,Usability,Guid,Guide,161,"﻿. ADF cartesian input format (adf) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:218,Usability,Guid,Guide,218,"﻿. ADF cartesian input format (adf) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:2067,Usability,simpl,simplified,2067,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html:2881,Usability,Guid,Guide,2881," format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF... ADF cartesian input format (adf)#. Note; This is a write-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ADF DFTB output format (adfdftb). next; ADF output format (adfout). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_cartesian_input_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_cartesian_input_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:1808,Availability,checkpoint,checkpoint,1808,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:285,Deployability,Install,Install,285," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:2861,Deployability,Release,Release,2861,"ormat (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF DFTB... ADF DFTB output format (adfdftb)#. Note; This is a read-only format. previous; ADF Band output format (adfband). next; ADF cartesian input format (adf). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:2846,Energy Efficiency,Charge,Charge,2846,"ormat (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF DFTB... ADF DFTB output format (adfdftb)#. Note; This is a read-only format. previous; ADF Band output format (adfband). next; ADF cartesian input format (adf). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:745,Modifiability,plugin,plugins,745," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:1417,Modifiability,Extend,Extended,1417,"erprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); ",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:1122,Performance,CAChe,CAChe,1122," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:1151,Performance,cache,cache,1151," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:161,Usability,Guid,Guide,161,"﻿. ADF DFTB output format (adfdftb) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:218,Usability,Guid,Guide,218,"﻿. ADF DFTB output format (adfdftb) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); M",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:2067,Usability,simpl,simplified,2067,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html:2881,Usability,Guid,Guide,2881,"ormat (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF DFTB... ADF DFTB output format (adfdftb)#. Note; This is a read-only format. previous; ADF Band output format (adfband). next; ADF cartesian input format (adf). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_DFTB_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_DFTB_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:1802,Availability,checkpoint,checkpoint,1802,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:279,Deployability,Install,Install,279," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:2855,Deployability,Release,Release,2855,"dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF output... ADF output format (adfout)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ADF cartesian input format (adf). next; CAChe MolStruct format (cac, cache). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:2840,Energy Efficiency,Charge,Charge,2840,"dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF output... ADF output format (adfout)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ADF cartesian input format (adf). next; CAChe MolStruct format (cac, cache). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:739,Modifiability,plugin,plugins,739," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:1411,Modifiability,Extend,Extended,1411,"erprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); ",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:1116,Performance,CAChe,CAChe,1116," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:1145,Performance,cache,cache,1145," Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:3117,Performance,CAChe,CAChe,3117,"dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF output... ADF output format (adfout)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ADF cartesian input format (adf). next; CAChe MolStruct format (cac, cache). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:3146,Performance,cache,cache,3146,"dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF output... ADF output format (adfout)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ADF cartesian input format (adf). next; CAChe MolStruct format (cac, cache). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:155,Usability,Guid,Guide,155,"﻿. ADF output format (adfout) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:212,Usability,Guid,Guide,212,"﻿. ADF output format (adfout) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC O",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:2061,Usability,simpl,simplified,2061,"tion; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; ABINIT Output Format (abinit); ACES input format (acesin); ACES output format (acesout); ADF Band output format (adfband); ADF DFTB output format (adfdftb); ADF cartesian input format (adf); ADF output format (adfout); CAChe MolStruct format (cac, cache); CASTEP format (castep); Cacao Cartesian format (caccrt); Cacao Internal format (cacint); Crystal 09 output format (c09out); Culgi object file format (cof); DALTON input format (dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin).",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_output_format.html:2875,Usability,Guid,Guide,2875,"dalmol); DALTON output format (dallog); DMol3 coordinates format (dmol, outmol); Extended XYZ cartesian coordinates format (exyz); FHIaims XYZ format (fhiaims); Fenske-Hall Z-Matrix format (fh); GAMESS Input (gamin, inp); GAMESS Output (gam, gamess, gamout); GAMESS-UK Input (gukin); GAMESS-UK Output (gukout); GULP format (got); Gaussian Input (com, gau, gjc, gjf); Gaussian Output (g03, g09, g16, g92, g94, g98, gal); Gaussian Z-Matrix Input (gzmat); Gaussian formatted checkpoint file format (fch, fchk, fck); HyperChem HIN format (hin); Jaguar input format (jin); Jaguar output format (jout); MOPAC Cartesian format (mop, mopcrt, mpc); MOPAC Internal (mopin); MOPAC Output format (moo, mopout); MPQC output format (mpqc); MPQC simplified input format (mpqcin); Molpro input format (mp); Molpro output format (mpo); NWChem input format (nw); NWChem output format (nwo); ORCA input format (orcainp); ORCA output format (orca); PWscf format (pwscf); Parallel Quantum Solutions format (pqs); Q-Chem input format (qcin); Q-Chem output format (qcout); TurboMole Coordinate format (tmol); Turbomole AOFORCE output format (aoforce); VASP format (CONTCAR, POSCAR, VASP); ZINDO input format (zin). Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Computational chemistry formats; ADF output... ADF output format (adfout)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; ADF cartesian input format (adf). next; CAChe MolStruct format (cac, cache). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_output_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_output_format.html
http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html:276,Deployability,Install,Install,276,"﻿. ADF TAPE41 format (t41) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; ADF TAPE41 format (t41); Gaussian cube format (cub, cube); OpenDX cube format for APBS (dx); Point cloud on VDW surface (pointcloud); STL 3D-printing format (stl). JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Volume data formats; ADF TAPE41... ADF TAPE41 format (t41)#; Currently the ADF Tape41 support reads grids from; TAPE41 text files. To generate an ASCII version from; the default binary, use the dmpkf program. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Volume data formats. next; Gaussian cube format (cub, cube). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_TAPE41_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html
http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html:1391,Deployability,Release,Release,1391,"﻿. ADF TAPE41 format (t41) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; ADF TAPE41 format (t41); Gaussian cube format (cub, cube); OpenDX cube format for APBS (dx); Point cloud on VDW surface (pointcloud); STL 3D-printing format (stl). JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Volume data formats; ADF TAPE41... ADF TAPE41 format (t41)#; Currently the ADF Tape41 support reads grids from; TAPE41 text files. To generate an ASCII version from; the default binary, use the dmpkf program. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Volume data formats. next; Gaussian cube format (cub, cube). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_TAPE41_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html
http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html:1376,Energy Efficiency,Charge,Charge,1376,"﻿. ADF TAPE41 format (t41) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; ADF TAPE41 format (t41); Gaussian cube format (cub, cube); OpenDX cube format for APBS (dx); Point cloud on VDW surface (pointcloud); STL 3D-printing format (stl). JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Volume data formats; ADF TAPE41... ADF TAPE41 format (t41)#; Currently the ADF Tape41 support reads grids from; TAPE41 text files. To generate an ASCII version from; the default binary, use the dmpkf program. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Volume data formats. next; Gaussian cube format (cub, cube). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_TAPE41_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html
http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html:736,Modifiability,plugin,plugins,736,"﻿. ADF TAPE41 format (t41) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; ADF TAPE41 format (t41); Gaussian cube format (cub, cube); OpenDX cube format for APBS (dx); Point cloud on VDW surface (pointcloud); STL 3D-printing format (stl). JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Volume data formats; ADF TAPE41... ADF TAPE41 format (t41)#; Currently the ADF Tape41 support reads grids from; TAPE41 text files. To generate an ASCII version from; the default binary, use the dmpkf program. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Volume data formats. next; Gaussian cube format (cub, cube). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_TAPE41_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html
http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html:152,Usability,Guid,Guide,152,"﻿. ADF TAPE41 format (t41) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; ADF TAPE41 format (t41); Gaussian cube format (cub, cube); OpenDX cube format for APBS (dx); Point cloud on VDW surface (pointcloud); STL 3D-printing format (stl). JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Volume data formats; ADF TAPE41... ADF TAPE41 format (t41)#; Currently the ADF Tape41 support reads grids from; TAPE41 text files. To generate an ASCII version from; the default binary, use the dmpkf program. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Volume data formats. next; Gaussian cube format (cub, cube). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_TAPE41_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html
http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html:209,Usability,Guid,Guide,209,"﻿. ADF TAPE41 format (t41) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; ADF TAPE41 format (t41); Gaussian cube format (cub, cube); OpenDX cube format for APBS (dx); Point cloud on VDW surface (pointcloud); STL 3D-printing format (stl). JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Volume data formats; ADF TAPE41... ADF TAPE41 format (t41)#; Currently the ADF Tape41 support reads grids from; TAPE41 text files. To generate an ASCII version from; the default binary, use the dmpkf program. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Volume data formats. next; Gaussian cube format (cub, cube). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_TAPE41_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html
http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html:1411,Usability,Guid,Guide,1411,"﻿. ADF TAPE41 format (t41) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; ADF TAPE41 format (t41); Gaussian cube format (cub, cube); OpenDX cube format for APBS (dx); Point cloud on VDW surface (pointcloud); STL 3D-printing format (stl). JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Volume data formats; ADF TAPE41... ADF TAPE41 format (t41)#; Currently the ADF Tape41 support reads grids from; TAPE41 text files. To generate an ASCII version from; the default binary, use the dmpkf program. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Volume data formats. next; Gaussian cube format (cub, cube). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/ADF_TAPE41_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/ADF_TAPE41_format.html
http://openbabel.org//docs/FileFormats/Alchemy_format.html:273,Deployability,Install,Install,273,"﻿. Alchemy format (alc) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats; Alchemy format (alc); CCC format (ccc); Feature format (feat); SMILES FIX format (fix); XED format (xed). Descriptors; Charge models; Release Notes. User Guide. Obscure formats; Alchemy format (alc). Alchemy format (alc)#. previous; Obscure formats. next; CCC format (ccc). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Alchemy_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Alchemy_format.html
http://openbabel.org//docs/FileFormats/Alchemy_format.html:1330,Deployability,Release,Release,1330,"﻿. Alchemy format (alc) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats; Alchemy format (alc); CCC format (ccc); Feature format (feat); SMILES FIX format (fix); XED format (xed). Descriptors; Charge models; Release Notes. User Guide. Obscure formats; Alchemy format (alc). Alchemy format (alc)#. previous; Obscure formats. next; CCC format (ccc). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Alchemy_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Alchemy_format.html
http://openbabel.org//docs/FileFormats/Alchemy_format.html:1315,Energy Efficiency,Charge,Charge,1315,"﻿. Alchemy format (alc) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats; Alchemy format (alc); CCC format (ccc); Feature format (feat); SMILES FIX format (fix); XED format (xed). Descriptors; Charge models; Release Notes. User Guide. Obscure formats; Alchemy format (alc). Alchemy format (alc)#. previous; Obscure formats. next; CCC format (ccc). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Alchemy_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Alchemy_format.html
http://openbabel.org//docs/FileFormats/Alchemy_format.html:733,Modifiability,plugin,plugins,733,"﻿. Alchemy format (alc) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats; Alchemy format (alc); CCC format (ccc); Feature format (feat); SMILES FIX format (fix); XED format (xed). Descriptors; Charge models; Release Notes. User Guide. Obscure formats; Alchemy format (alc). Alchemy format (alc)#. previous; Obscure formats. next; CCC format (ccc). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Alchemy_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Alchemy_format.html
http://openbabel.org//docs/FileFormats/Alchemy_format.html:149,Usability,Guid,Guide,149,"﻿. Alchemy format (alc) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats; Alchemy format (alc); CCC format (ccc); Feature format (feat); SMILES FIX format (fix); XED format (xed). Descriptors; Charge models; Release Notes. User Guide. Obscure formats; Alchemy format (alc). Alchemy format (alc)#. previous; Obscure formats. next; CCC format (ccc). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Alchemy_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Alchemy_format.html
http://openbabel.org//docs/FileFormats/Alchemy_format.html:206,Usability,Guid,Guide,206,"﻿. Alchemy format (alc) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats; Alchemy format (alc); CCC format (ccc); Feature format (feat); SMILES FIX format (fix); XED format (xed). Descriptors; Charge models; Release Notes. User Guide. Obscure formats; Alchemy format (alc). Alchemy format (alc)#. previous; Obscure formats. next; CCC format (ccc). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Alchemy_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Alchemy_format.html
http://openbabel.org//docs/FileFormats/Alchemy_format.html:1350,Usability,Guid,Guide,1350,"﻿. Alchemy format (alc) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats; Alchemy format (alc); CCC format (ccc); Feature format (feat); SMILES FIX format (fix); XED format (xed). Descriptors; Charge models; Release Notes. User Guide. Obscure formats; Alchemy format (alc). Alchemy format (alc)#. previous; Obscure formats. next; CCC format (ccc). ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Alchemy_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Alchemy_format.html
http://openbabel.org//docs/FileFormats/Amber_Prep_format.html:277,Deployability,Install,Install,277,"﻿. Amber Prep format (prep) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Amber Prep format (prep); AutoDock PDBQT format (pdbqt); DL-POLY CONFIG (CONFIG); DL-POLY HISTORY (HISTORY); Dock 3.5 Box format (box); GRO format (gro); GROMOS96 format (gr96); LPMD format (lpmd); MDFF format (CONTFF, MDFF, POSFF); MacroModel format (mmd, mmod); SIESTA format (siesta); The LAMMPS data format (lmpdat); Tinker XYZ format (txyz); XTC format (xtc). Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Molecular dynamics and docking formats; Amber Prep... Amber Prep format (prep)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Molecular dynamics and docking formats. next; AutoDock PDBQT format (pdbqt). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Cr",MatchSource.WIKI,docs/FileFormats/Amber_Prep_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Amber_Prep_format.html
http://openbabel.org//docs/FileFormats/Amber_Prep_format.html:1593,Deployability,Release,Release,1593,"kip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Amber Prep format (prep); AutoDock PDBQT format (pdbqt); DL-POLY CONFIG (CONFIG); DL-POLY HISTORY (HISTORY); Dock 3.5 Box format (box); GRO format (gro); GROMOS96 format (gr96); LPMD format (lpmd); MDFF format (CONTFF, MDFF, POSFF); MacroModel format (mmd, mmod); SIESTA format (siesta); The LAMMPS data format (lmpdat); Tinker XYZ format (txyz); XTC format (xtc). Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Molecular dynamics and docking formats; Amber Prep... Amber Prep format (prep)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Molecular dynamics and docking formats. next; AutoDock PDBQT format (pdbqt). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Amber_Prep_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Amber_Prep_format.html
http://openbabel.org//docs/FileFormats/Amber_Prep_format.html:1578,Energy Efficiency,Charge,Charge,1578,"kip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Amber Prep format (prep); AutoDock PDBQT format (pdbqt); DL-POLY CONFIG (CONFIG); DL-POLY HISTORY (HISTORY); Dock 3.5 Box format (box); GRO format (gro); GROMOS96 format (gr96); LPMD format (lpmd); MDFF format (CONTFF, MDFF, POSFF); MacroModel format (mmd, mmod); SIESTA format (siesta); The LAMMPS data format (lmpdat); Tinker XYZ format (txyz); XTC format (xtc). Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Molecular dynamics and docking formats; Amber Prep... Amber Prep format (prep)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Molecular dynamics and docking formats. next; AutoDock PDBQT format (pdbqt). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Created using Sphinx 7.2.6.; . Built with the PyData Sphinx Theme 0.14.4. ",MatchSource.WIKI,docs/FileFormats/Amber_Prep_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Amber_Prep_format.html
http://openbabel.org//docs/FileFormats/Amber_Prep_format.html:737,Modifiability,plugin,plugins,737,"﻿. Amber Prep format (prep) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Amber Prep format (prep); AutoDock PDBQT format (pdbqt); DL-POLY CONFIG (CONFIG); DL-POLY HISTORY (HISTORY); Dock 3.5 Box format (box); GRO format (gro); GROMOS96 format (gr96); LPMD format (lpmd); MDFF format (CONTFF, MDFF, POSFF); MacroModel format (mmd, mmod); SIESTA format (siesta); The LAMMPS data format (lmpdat); Tinker XYZ format (txyz); XTC format (xtc). Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Molecular dynamics and docking formats; Amber Prep... Amber Prep format (prep)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Molecular dynamics and docking formats. next; AutoDock PDBQT format (pdbqt). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Cr",MatchSource.WIKI,docs/FileFormats/Amber_Prep_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Amber_Prep_format.html
http://openbabel.org//docs/FileFormats/Amber_Prep_format.html:1165,Modifiability,CONFIG,CONFIG,1165,"﻿. Amber Prep format (prep) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Amber Prep format (prep); AutoDock PDBQT format (pdbqt); DL-POLY CONFIG (CONFIG); DL-POLY HISTORY (HISTORY); Dock 3.5 Box format (box); GRO format (gro); GROMOS96 format (gr96); LPMD format (lpmd); MDFF format (CONTFF, MDFF, POSFF); MacroModel format (mmd, mmod); SIESTA format (siesta); The LAMMPS data format (lmpdat); Tinker XYZ format (txyz); XTC format (xtc). Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Molecular dynamics and docking formats; Amber Prep... Amber Prep format (prep)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Molecular dynamics and docking formats. next; AutoDock PDBQT format (pdbqt). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Cr",MatchSource.WIKI,docs/FileFormats/Amber_Prep_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Amber_Prep_format.html
http://openbabel.org//docs/FileFormats/Amber_Prep_format.html:1173,Modifiability,CONFIG,CONFIG,1173,"﻿. Amber Prep format (prep) — Open Babel openbabel-3-1-1 documentation. Skip to main content. Back to top; . Ctrl+K. Open Babel. Site Navigation; . User Guide; . API; . GitHub. Twitter. Site Navigation; . User Guide; . API; . GitHub. Twitter. Section Navigation. Introduction; Install Open Babel; obabel - Convert, Filter and Manipulate Chemical Data; The Open Babel GUI; Tutorial on using the GUI; Molecular fingerprints and similarity searching; obabel vs Chemistry Toolkit Rosetta; 2D Depiction; 3D Structure Generation; Molecular Mechanics and Force Fields; Write software using the Open Babel library; Cheminformatics 101; Stereochemistry; Handling of aromaticity; Radicals and SMILES extensions; Contributing to Open Babel; Adding plugins; Supported File Formats and Options; Common cheminformatics formats; Utility formats; Other cheminformatics formats; Computational chemistry formats; Molecular fingerprint formats; Crystallography formats; Reaction formats; Image formats; 2D drawing formats; 3D viewer formats; Kinetics and Thermodynamics formats; Molecular dynamics and docking formats; Amber Prep format (prep); AutoDock PDBQT format (pdbqt); DL-POLY CONFIG (CONFIG); DL-POLY HISTORY (HISTORY); Dock 3.5 Box format (box); GRO format (gro); GROMOS96 format (gr96); LPMD format (lpmd); MDFF format (CONTFF, MDFF, POSFF); MacroModel format (mmd, mmod); SIESTA format (siesta); The LAMMPS data format (lmpdat); Tinker XYZ format (txyz); XTC format (xtc). Volume data formats; JSON formats; Miscellaneous formats; Biological data formats; Obscure formats. Descriptors; Charge models; Release Notes. User Guide. Molecular dynamics and docking formats; Amber Prep... Amber Prep format (prep)#. Note; This is a read-only format. Read Options#. -s; Output single bonds only. -b; Disable bonding entirely. previous; Molecular dynamics and docking formats. next; AutoDock PDBQT format (pdbqt). On this page; . Read Options. ; ; ; Edit on GitHub; ; ; . ; © Copyright ©2023 The Open Babel Team.; . Cr",MatchSource.WIKI,docs/FileFormats/Amber_Prep_format.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,http://openbabel.org//docs/FileFormats/Amber_Prep_format.html
