id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/README.md:34,Deployability,release,release,34,"Open Babel; ----------. [![GitHub release](https://img.shields.io/github/release/openbabel/openbabel.svg?maxAge=86400)](https://github.com/openbabel/openbabel/releases); [![Download Open Babel](https://img.shields.io/sourceforge/dt/openbabel.svg?maxAge=86400)](https://github.com/openbabel/openbabel/releases); [![Travis CI](https://img.shields.io/travis/openbabel/openbabel.svg)](https://travis-ci.org/openbabel/openbabel); [![Google Scholar Citations](https://openbabel.org/citations.svg?maxAge=86400)](https://scholar.google.com/scholar?oi=bibs&hl=en&cites=13319995025871922899&as_sdt=5). Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. * Ready-to-use programs, and complete programmer's toolkit; * Read, write and convert over 90 chemical file formats; * Filter and search molecular files using SMARTS and other methods; * Generate 2D and 3D coordinates for SMILES, InChI and other formats; * Supports molecular modeling, cheminformatics, bioinformatics,; organic chemistry, inorganic chemistry, solid-state materials,; nuclear chemistry... Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. For more information, check the [Open Babel website](http://openbabel.org/).; ",MatchSource.DOCS,README.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/README.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/README.md:73,Deployability,release,release,73,"Open Babel; ----------. [![GitHub release](https://img.shields.io/github/release/openbabel/openbabel.svg?maxAge=86400)](https://github.com/openbabel/openbabel/releases); [![Download Open Babel](https://img.shields.io/sourceforge/dt/openbabel.svg?maxAge=86400)](https://github.com/openbabel/openbabel/releases); [![Travis CI](https://img.shields.io/travis/openbabel/openbabel.svg)](https://travis-ci.org/openbabel/openbabel); [![Google Scholar Citations](https://openbabel.org/citations.svg?maxAge=86400)](https://scholar.google.com/scholar?oi=bibs&hl=en&cites=13319995025871922899&as_sdt=5). Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. * Ready-to-use programs, and complete programmer's toolkit; * Read, write and convert over 90 chemical file formats; * Filter and search molecular files using SMARTS and other methods; * Generate 2D and 3D coordinates for SMILES, InChI and other formats; * Supports molecular modeling, cheminformatics, bioinformatics,; organic chemistry, inorganic chemistry, solid-state materials,; nuclear chemistry... Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. For more information, check the [Open Babel website](http://openbabel.org/).; ",MatchSource.DOCS,README.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/README.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/README.md:159,Deployability,release,releases,159,"Open Babel; ----------. [![GitHub release](https://img.shields.io/github/release/openbabel/openbabel.svg?maxAge=86400)](https://github.com/openbabel/openbabel/releases); [![Download Open Babel](https://img.shields.io/sourceforge/dt/openbabel.svg?maxAge=86400)](https://github.com/openbabel/openbabel/releases); [![Travis CI](https://img.shields.io/travis/openbabel/openbabel.svg)](https://travis-ci.org/openbabel/openbabel); [![Google Scholar Citations](https://openbabel.org/citations.svg?maxAge=86400)](https://scholar.google.com/scholar?oi=bibs&hl=en&cites=13319995025871922899&as_sdt=5). Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. * Ready-to-use programs, and complete programmer's toolkit; * Read, write and convert over 90 chemical file formats; * Filter and search molecular files using SMARTS and other methods; * Generate 2D and 3D coordinates for SMILES, InChI and other formats; * Supports molecular modeling, cheminformatics, bioinformatics,; organic chemistry, inorganic chemistry, solid-state materials,; nuclear chemistry... Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. For more information, check the [Open Babel website](http://openbabel.org/).; ",MatchSource.DOCS,README.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/README.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/README.md:300,Deployability,release,releases,300,"Open Babel; ----------. [![GitHub release](https://img.shields.io/github/release/openbabel/openbabel.svg?maxAge=86400)](https://github.com/openbabel/openbabel/releases); [![Download Open Babel](https://img.shields.io/sourceforge/dt/openbabel.svg?maxAge=86400)](https://github.com/openbabel/openbabel/releases); [![Travis CI](https://img.shields.io/travis/openbabel/openbabel.svg)](https://travis-ci.org/openbabel/openbabel); [![Google Scholar Citations](https://openbabel.org/citations.svg?maxAge=86400)](https://scholar.google.com/scholar?oi=bibs&hl=en&cites=13319995025871922899&as_sdt=5). Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. * Ready-to-use programs, and complete programmer's toolkit; * Read, write and convert over 90 chemical file formats; * Filter and search molecular files using SMARTS and other methods; * Generate 2D and 3D coordinates for SMILES, InChI and other formats; * Supports molecular modeling, cheminformatics, bioinformatics,; organic chemistry, inorganic chemistry, solid-state materials,; nuclear chemistry... Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. For more information, check the [Open Babel website](http://openbabel.org/).; ",MatchSource.DOCS,README.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/README.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md:2644,Availability,avail,available,2644,"ity members. ## Our Responsibilities. Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected; to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, ; code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or ; to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate,; threatening, offensive, or harmful. ## Scope. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing; Open Babel or its community. Examples of representing a project or community include using an official project; e-mail address, posting via an official social media account, or acting as an appointed representative at an online; or offline event. Representation of a project may be further defined and clarified by project maintainers. ## Enforcement. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team; at openbabel-devel@lists.sourceforge.net. The project team will review and investigate all complaints, and will; respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain; confidentiality with regard to the reporter of an incident. ; Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary; or permanent repercussions as determined by other members of the project's leadership. ## Attribution. This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]. [homepage]: http://contributor-covenant.org; [version]: http://contributor-covenant.org/version/1/4/; ",MatchSource.DOCS,.github/CODE_OF_CONDUCT.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md:2580,Energy Efficiency,adapt,adapted,2580,"ity members. ## Our Responsibilities. Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected; to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, ; code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or ; to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate,; threatening, offensive, or harmful. ## Scope. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing; Open Babel or its community. Examples of representing a project or community include using an official project; e-mail address, posting via an official social media account, or acting as an appointed representative at an online; or offline event. Representation of a project may be further defined and clarified by project maintainers. ## Enforcement. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team; at openbabel-devel@lists.sourceforge.net. The project team will review and investigate all complaints, and will; respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain; confidentiality with regard to the reporter of an incident. ; Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary; or permanent repercussions as determined by other members of the project's leadership. ## Attribution. This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]. [homepage]: http://contributor-covenant.org; [version]: http://contributor-covenant.org/version/1/4/; ",MatchSource.DOCS,.github/CODE_OF_CONDUCT.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md:2580,Modifiability,adapt,adapted,2580,"ity members. ## Our Responsibilities. Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected; to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, ; code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or ; to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate,; threatening, offensive, or harmful. ## Scope. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing; Open Babel or its community. Examples of representing a project or community include using an official project; e-mail address, posting via an official social media account, or acting as an appointed representative at an online; or offline event. Representation of a project may be further defined and clarified by project maintainers. ## Enforcement. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team; at openbabel-devel@lists.sourceforge.net. The project team will review and investigate all complaints, and will; respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain; confidentiality with regard to the reporter of an incident. ; Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary; or permanent repercussions as determined by other members of the project's leadership. ## Attribution. This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]. [homepage]: http://contributor-covenant.org; [version]: http://contributor-covenant.org/version/1/4/; ",MatchSource.DOCS,.github/CODE_OF_CONDUCT.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md:1365,Security,threat,threatening,1365," harassment-free experience for everyone, regardless of age, body size, disability, ; nationality, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, ; or sexual identity and orientation. ## Our Standards. Examples of behavior that contributes to creating a positive environment include:. * Using welcoming and inclusive language; * Being respectful of differing viewpoints and experiences; * Gracefully accepting constructive criticism; * Focusing on what is best for the community; * Showing empathy towards other community members. ## Our Responsibilities. Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected; to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, ; code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or ; to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate,; threatening, offensive, or harmful. ## Scope. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing; Open Babel or its community. Examples of representing a project or community include using an official project; e-mail address, posting via an official social media account, or acting as an appointed representative at an online; or offline event. Representation of a project may be further defined and clarified by project maintainers. ## Enforcement. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team; at openbabel-devel@lists.sourceforge.net. The project team will review and investigate all complaints, and will; respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain; confidentiality w",MatchSource.DOCS,.github/CODE_OF_CONDUCT.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md:2213,Security,confidential,confidentiality,2213,"ity members. ## Our Responsibilities. Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected; to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, ; code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or ; to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate,; threatening, offensive, or harmful. ## Scope. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing; Open Babel or its community. Examples of representing a project or community include using an official project; e-mail address, posting via an official social media account, or acting as an appointed representative at an online; or offline event. Representation of a project may be further defined and clarified by project maintainers. ## Enforcement. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team; at openbabel-devel@lists.sourceforge.net. The project team will review and investigate all complaints, and will; respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain; confidentiality with regard to the reporter of an incident. ; Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary; or permanent repercussions as determined by other members of the project's leadership. ## Attribution. This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]. [homepage]: http://contributor-covenant.org; [version]: http://contributor-covenant.org/version/1/4/; ",MatchSource.DOCS,.github/CODE_OF_CONDUCT.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/CODE_OF_CONDUCT.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/ISSUE_TEMPLATE.md:1215,Testability,test,test,1215,"<!--; Before submitting please search open and closed issues at; https://github.com/openbabel/openbabel. Open Issues: https://github.com/openbabel/openbabel/issues?q=is%3Aopen+is%3Aissue; Closed Issues: https://github.com/openbabel/openbabel/issues?q=is%3Aissue+is%3Aclosed. The GitHub issue tracker is for bug reports and feature requests.; If you have a question about using Open Babel, please post to openbabel-discuss@lists.sourceforge.net. Feel free to use the following as a template and remove or add fields as you see fit. You can convert `[ ]` into `[x]` to check boxes.; -->. - [ ] I believe this to be a bug with Open Babel; - [ ] This is a feature request. ## Environment Information; Open Babel version:; Operating system and version:. ## Expected Behavior; <!-- Describe the intended output or what you expected to see. -->. ## Actual Behavior; <!--- If describing a bug, tell us what happens instead of the expected behavior -->; <!--- If suggesting a change/improvement, explain the difference from current behavior -->. ## Steps to Reproduce; <!--; If the problem occurs with a particular file, please either upload and attach the file or include a link here - this greatly improves our ability to test your problem.; Please include screenshots or text output if they help illustrate a behavior.; -->; ",MatchSource.DOCS,.github/ISSUE_TEMPLATE.md,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/.github/ISSUE_TEMPLATE.md
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:464,Deployability,install,installation,464,"Open Babel Python Bindings; ==========================. This is a Python interface to the Open Babel chemistry library. For the ; main Open Babel project, see http://openbabel.org. Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. For ; installation instructions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python modu",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:1162,Deployability,install,installation,1162,"speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. For ; installation instructions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python module is part of the `Open Babel project`_. Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Publi",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:1479,Deployability,install,install,1479,"ions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python module is part of the `Open Babel project`_. Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. .. _`Open Babel website`: http://openbabel.org; .. _`openbabel`: http://openbabel",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:1532,Deployability,release,release,1532,"he; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python module is part of the `Open Babel project`_. Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. .. _`Open Babel website`: http://openbabel.org; .. _`openbabel`: http://openbabel.org/docs/dev/UseTheLibrary/PythonDoc.html;",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:1544,Deployability,install,install,1544,"he; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python module is part of the `Open Babel project`_. Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. .. _`Open Babel website`: http://openbabel.org; .. _`openbabel`: http://openbabel.org/docs/dev/UseTheLibrary/PythonDoc.html;",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:1646,Deployability,install,install,1646,"The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python module is part of the `Open Babel project`_. Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. .. _`Open Babel website`: http://openbabel.org; .. _`openbabel`: http://openbabel.org/docs/dev/UseTheLibrary/PythonDoc.html; .. _`pybel`: http://openbabel.org/docs/dev/UseTheLibrary/Python_Pybel.html; .. _`Python pages on the Open Babel website`: http://openbabel.org/w",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:1802,Deployability,install,install,1802,"es access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python module is part of the `Open Babel project`_. Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. .. _`Open Babel website`: http://openbabel.org; .. _`openbabel`: http://openbabel.org/docs/dev/UseTheLibrary/PythonDoc.html; .. _`pybel`: http://openbabel.org/docs/dev/UseTheLibrary/Python_Pybel.html; .. _`Python pages on the Open Babel website`: http://openbabel.org/wiki/Python; .. _`pip`: http://www.pip-installer.org; .. _`Open Babel project`: http://openbabel.org; ",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:2712,Deployability,install,installer,2712,"es access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python module is part of the `Open Babel project`_. Open Babel is distributed under the GNU General Public License (GPL).; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation version 2 of the License. Full details; can be found in the file ""COPYING"" which should be included in your; distribution. .. _`Open Babel website`: http://openbabel.org; .. _`openbabel`: http://openbabel.org/docs/dev/UseTheLibrary/PythonDoc.html; .. _`pybel`: http://openbabel.org/docs/dev/UseTheLibrary/Python_Pybel.html; .. _`Python pages on the Open Babel website`: http://openbabel.org/wiki/Python; .. _`pip`: http://www.pip-installer.org; .. _`Open Babel project`: http://openbabel.org; ",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:73,Integrability,interface,interface,73,"Open Babel Python Bindings; ==========================. This is a Python interface to the Open Babel chemistry library. For the ; main Open Babel project, see http://openbabel.org. Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. For ; installation instructions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python modu",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:700,Integrability,wrap,wrapper,700,"Open Babel Python Bindings; ==========================. This is a Python interface to the Open Babel chemistry library. For the ; main Open Babel project, see http://openbabel.org. Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. For ; installation instructions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python modu",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:819,Integrability,interface,interfaces,819,"Open Babel Python Bindings; ==========================. This is a Python interface to the Open Babel chemistry library. For the ; main Open Babel project, see http://openbabel.org. Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. For ; installation instructions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python modu",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:996,Integrability,wrap,wrapper,996,"l Python Bindings; ==========================. This is a Python interface to the Open Babel chemistry library. For the ; main Open Babel project, see http://openbabel.org. Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. For ; installation instructions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python module is par",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:617,Security,access,access,617,"Open Babel Python Bindings; ==========================. This is a Python interface to the Open Babel chemistry library. For the ; main Open Babel project, see http://openbabel.org. Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. For ; installation instructions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python modu",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:778,Security,access,access,778,"Open Babel Python Bindings; ==========================. This is a Python interface to the Open Babel chemistry library. For the ; main Open Babel project, see http://openbabel.org. Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. For ; installation instructions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python modu",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst:1115,Security,access,access,1115,"emistry library. For the ; main Open Babel project, see http://openbabel.org. Open Babel is a chemical toolbox designed to speak the many languages; of chemical data. It's an open, collaborative project allowing anyone; to search, convert, analyze, or store data from molecular modeling,; chemistry, solid-state materials, biochemistry, or related areas. For ; installation instructions, tutorials and examples, please visit the; `Open Babel website`_. This package provides two Python modules that can be used to access the; functionality of the Open Babel toolkit:. - The `openbabel`_ module: A wrapper that is automatically generated using ; the SWIG package and provides access to almost all of the Open Babel ; interfaces via Python, including the base classes OBMol, OBAtom, OBBond, ; and OBResidue, as well as the conversion framework OBConversion. - The `pybel`_ module: A lightweight wrapper around the classes and methods ; in the openbabel module. Pybel provides more convenient and Pythonic ways; to access the Open Babel toolkit.; ; For detailed installation instructions, API documentation and further information ; on the Python bindings, see the `Python pages on the Open Babel website`_. Dependencies; ------------. - Python 2.4 or a more recent version.; - Open Babel 3 or a more recent version. Installation; ------------. **Option 1**: Use `pip`_. ::. pip install openbabel. **Option 2**: Download the latest release and install yourself. ::. tar -xzvf openbabel-3-1-0.tar.gz; cd openbabel-openbabel-3-1-0; python setup.py install; ; **Option 3**: While building Open Babel itself. ::. cd openbabel; mkdir ob-build; cd ob-build; cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON ..; make install. Copyright and Licence; ---------------------. - Copyright (C) 2005-2007 Geoffrey R. Hutchison babel@geoffhutchison.net; - Some portions Copyright (C) 2006-2010 Noel O'Boyle. This Python module is part of the `Open Babel project`_. Open Babel is distributed under the GNU General Public Licens",MatchSource.DOCS,scripts/python/README.rst,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/README.rst
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:10833,Availability,avail,available,10833,"LITY ${HAVE_GCC_VISIBILITY} CACHE BOOL ""GCC support for hidden visibility""); set(_GCC_COMPILED_WITH_BAD_ALLOCATOR FALSE); if(GCC_IS_NEWER_THAN_4_1); exec_program(${CMAKE_C_COMPILER} ARGS -v OUTPUT_VARIABLE _gcc_alloc_info); string(REGEX MATCH ""(--enable-libstdcxx-allocator=mt)"" _GCC_COMPILED_WITH_BAD_ALLOCATOR ""${_gcc_alloc_info}""); endif(); if(HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_2 AND ENABLE_SYMBOL_VISIBILITY; AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR); # We have all the parts necessary - use visibility support; add_definitions(-DHAVE_GCC_VISIBILITY); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden""); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); endif(); endif(). # To avoid warnings when linking the plugins and exes; if(MINGW); set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_MODULE_LINKER_FLAGS}""); set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_EXE_LINKER_FLAGS}""); endif(). message(STATUS ""Checking available shared pointer...""); include(CheckCXXSourceCompiles); check_cxx_source_compiles(""#include <memory>; int main(){ std::shared_ptr<int> p; return 0; }""; HAVE_STD_SHARED_PTR); check_cxx_source_compiles(""#include <memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR); check_cxx_source_compiles(""#include <tr1/memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); if(HAVE_STD_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""tr1/memory""); set(SHARED_POINTER true); ad",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:15016,Availability,avail,available,15016,"nabling the SSE2 instruction set""); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse2""); endif(CMAKE_SIZEOF_VOID_P EQUAL 8 OR WITH_SSE2); endif(${CMAKE_CXX_COMPILER_ID} MATCHES Intel AND UNIX). #Find if OpenMP support is enabled. option(ENABLE_OPENMP; ""Enable support for OpenMP compilation of forcefield code""; OFF); if(ENABLE_OPENMP); find_package(OpenMP); if(OPENMP_FOUND); set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}""); endif(); endif(). # Some rpath handling for Linux and Mac; if(UNIX AND BUILD_SHARED); if(APPLE); set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}); else(); set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}""); set(CMAKE_SKIP_BUILD_RPATH FALSE); set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(). # Three build types are available: Release, Debug, RelWithDebInfo.; # We default to Release.; if(NOT CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE Release); endif(). #define various build types; if(CMAKE_COMPILER_IS_GNUCXX); set (CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG""); set (CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g""); set (CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG -g3 -fno-inline""); endif(). file(GLOB_RECURSE headers include/openbabel/*.h); configure_file(${openbabel_SOURCE_DIR}/src/config.h.cmake; ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h); install(FILES ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h; DESTINATION ${OB_INCLUDE_DIRS}/openbabel); if(NOT MSVC); configure_file(${openbabel_SOURCE_DIR}/openbabel-3.pc.cmake; ${openbabel_BINARY_DIR}/openbabel-3.pc @ONLY); install(FILES ${openbabel_BINARY_DIR}/openbabel-3.pc; DESTINATION ${LIB_INSTALL_DIR}/pkgconfig); endif(). include_directories(${openbabel_BINARY_DIR}/include; ",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:17081,Availability,down,download,17081,"bel_SOURCE_DIR}/include; ). #cjh; find_package(Eigen3); if(EIGEN3_FOUND); add_definitions(-DHAVE_EIGEN -DHAVE_EIGEN3); include_directories(${EIGEN3_INCLUDE_DIR}); else(); find_package(Eigen2) # find and setup Eigen2; if(EIGEN2_FOUND); add_definitions (-DHAVE_EIGEN); include_directories(${EIGEN2_INCLUDE_DIR}); endif(); endif(); #cjh. find_package(Boost COMPONENTS filesystem iostreams unit_test_framework); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); option(WITH_MAEPARSER ""Build Maestro support"" ON); if(BUILD_SHARED); option(WITH_COORDGEN ""Build Coordgen support"" ON); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(). if(WITH_MAEPARSER). find_package(maeparser MODULE QUIET). if (maeparser_FOUND). message(STATUS ""Maestro formats will be supported. Using MaeParser libraries at ${maeparser_LIBRARIES}.""). else(). set(MAEPARSER_VERSION ""v1.2.3"" CACHE STRING ""Maeparser fallback version to download""). set(MAEPARSER_DIR ""${openbabel_SOURCE_DIR}/external/maeparser-${MAEPARSER_VERSION}""). option(MAEPARSER_BUILD_SHARED_LIBS ""Build maeparser as a shared library"" ${BUILD_SHARED}). # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.; set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL ""Disable Maeparser tests""). if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt""). message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DI",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:19025,Availability,down,download,19025,"SER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories(${maeparser_INCLUDE_DIRS}); set(libs ${libs} ${maeparser_LIBRARIES}). else(); message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). if(WITH_COORDGEN). find_package(coordgen MODULE QUIET). if (coordgen_FOUND). message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.""). else(). set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests""); set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example""). if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH). if(COORDGEN_UNPACK_DIR); file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen""); message(STATUS ""Downlo",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:20768,Availability,avail,available,20768,"enlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH). if(COORDGEN_UNPACK_DIR); file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen""); message(STATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.""); endif(). endif(). add_subdirectory(""${COORDGEN_DIR}/coordgen""). set(coordgen_INCLUDE_DIRS ""${COORDGEN_DIR}""); set(coordgen_LIBRARIES coordgen). message(STATUS ""Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}""). endif(). include_directories(${coordgen_INCLUDE_DIRS}); set(libs ${libs} ${coordgen_LIBRARIES}). else(); message(STATUS ""Coordinate generation with Coordgen will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). option(WITH_JSON ""Build JSON support"" ON); option(OPENBABEL_USE_SYSTEM_RAPIDJSON ""Use the system rapidjson if available."" ON); if(WITH_JSON); set(RAPIDJSON_VERSION_MIN 1.1.0); # First try find system rapidjson; if(OPENBABEL_USE_SYSTEM_RAPIDJSON); find_package(RapidJSON ${RAPIDJSON_VERSION_MIN}); endif(); # Otherwise download rapidjson to openbabel source directory; if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON_VERSION_MIN}); set(RAPIDJSON_VERSION 1.1.0); if(NOT EXISTS ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}""); file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""; ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz"" STATUS status); execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf; ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external); message(STATUS ""Downloaded RapidJSON to ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.""); endif(); set(RAPIDJSON_FOUND ",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:20976,Availability,down,download,20976,"ATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.""); endif(). endif(). add_subdirectory(""${COORDGEN_DIR}/coordgen""). set(coordgen_INCLUDE_DIRS ""${COORDGEN_DIR}""); set(coordgen_LIBRARIES coordgen). message(STATUS ""Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}""). endif(). include_directories(${coordgen_INCLUDE_DIRS}); set(libs ${libs} ${coordgen_LIBRARIES}). else(); message(STATUS ""Coordinate generation with Coordgen will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). option(WITH_JSON ""Build JSON support"" ON); option(OPENBABEL_USE_SYSTEM_RAPIDJSON ""Use the system rapidjson if available."" ON); if(WITH_JSON); set(RAPIDJSON_VERSION_MIN 1.1.0); # First try find system rapidjson; if(OPENBABEL_USE_SYSTEM_RAPIDJSON); find_package(RapidJSON ${RAPIDJSON_VERSION_MIN}); endif(); # Otherwise download rapidjson to openbabel source directory; if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON_VERSION_MIN}); set(RAPIDJSON_VERSION 1.1.0); if(NOT EXISTS ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}""); file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""; ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz"" STATUS status); execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf; ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external); message(STATUS ""Downloaded RapidJSON to ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.""); endif(); set(RAPIDJSON_FOUND TRUE); set(RAPIDJSON_INCLUDE_DIRS ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}/include); endif(); if(RAPIDJSON_FOUND); message(STATUS ""JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}""); add_defini",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:22726,Availability,avail,available,22726,"APIDJSON_VERSION}/include); endif(); if(RAPIDJSON_FOUND); message(STATUS ""JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}""); add_definitions(-DHAVE_RADPIJSON); include_directories(${RAPIDJSON_INCLUDE_DIRS}); endif(); endif(). find_package(Cairo); if(CAIRO_FOUND); message(STATUS ""Cairo found. PNG output will be supported.""); else(CAIRO_FOUND); message(STATUS ""Could NOT find Cairo. PNG output will NOT be supported.""); endif(CAIRO_FOUND). # Should we enable optimizations for the native CPU architecture?; # (this will speed up JSON handling, similarity calculations and maybe those involving Eigen); option(OPTIMIZE_NATIVE ""Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines."" OFF); if(OPTIMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif(); if(HAVE_SSE4_2); add_definitions(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BUILD_GUI ""Build the GUI"" ON); endif(). if(BUILD_GUI); message(STATUS ""Attempting to build the GUI""); if(wxWidgets_FOUND); message(STATUS "" wxWidgets found => GUI will be built""); add_subdirectory(src/GUI); else(); message(STATUS "" wxWidgets not found => GUI will not be built""); endif(); else(); message(STATUS ""GUI will not be built""); endif(). # Do we want to build the tests?; option(ENABLE_TESTS ",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:480,Deployability,release,release,480,"# Please ensure that any changes remain compliant with 3.1.; if(NOT EMBED_OPENBABEL); cmake_minimum_required(VERSION 3.1); endif(). project(openbabel); set(CMAKE_MODULE_PATH ${openbabel_SOURCE_DIR}/cmake/modules). set (CMAKE_CXX_STANDARD 11). if(COMMAND cmake_policy); cmake_policy(SET CMP0003 NEW); if(POLICY CMP0042); cmake_policy(SET CMP0042 OLD); endif(); endif(). include (CheckCXXCompilerFlag). #include (MacroEnsureVersion). # Version numbering - should be bumped for each release; # Note that for ""beta"" releases, we should start at x.90.0 -- we've; # had too many 1.100.1 releases. :-); set(BABEL_MAJ_VER 3); set(BABEL_MIN_VER 1); set(BABEL_PATCH_VER 0). # This should be phased out in preference for just using the target name; set(BABEL_LIBRARY openbabel). # This would be better handled with external projects...; if(EMBED_OPENBABEL); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}"" PARENT_SCOPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:512,Deployability,release,releases,512,"# Please ensure that any changes remain compliant with 3.1.; if(NOT EMBED_OPENBABEL); cmake_minimum_required(VERSION 3.1); endif(). project(openbabel); set(CMAKE_MODULE_PATH ${openbabel_SOURCE_DIR}/cmake/modules). set (CMAKE_CXX_STANDARD 11). if(COMMAND cmake_policy); cmake_policy(SET CMP0003 NEW); if(POLICY CMP0042); cmake_policy(SET CMP0042 OLD); endif(); endif(). include (CheckCXXCompilerFlag). #include (MacroEnsureVersion). # Version numbering - should be bumped for each release; # Note that for ""beta"" releases, we should start at x.90.0 -- we've; # had too many 1.100.1 releases. :-); set(BABEL_MAJ_VER 3); set(BABEL_MIN_VER 1); set(BABEL_PATCH_VER 0). # This should be phased out in preference for just using the target name; set(BABEL_LIBRARY openbabel). # This would be better handled with external projects...; if(EMBED_OPENBABEL); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}"" PARENT_SCOPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:581,Deployability,release,releases,581,"# Please ensure that any changes remain compliant with 3.1.; if(NOT EMBED_OPENBABEL); cmake_minimum_required(VERSION 3.1); endif(). project(openbabel); set(CMAKE_MODULE_PATH ${openbabel_SOURCE_DIR}/cmake/modules). set (CMAKE_CXX_STANDARD 11). if(COMMAND cmake_policy); cmake_policy(SET CMP0003 NEW); if(POLICY CMP0042); cmake_policy(SET CMP0042 OLD); endif(); endif(). include (CheckCXXCompilerFlag). #include (MacroEnsureVersion). # Version numbering - should be bumped for each release; # Note that for ""beta"" releases, we should start at x.90.0 -- we've; # had too many 1.100.1 releases. :-); set(BABEL_MAJ_VER 3); set(BABEL_MIN_VER 1); set(BABEL_PATCH_VER 0). # This should be phased out in preference for just using the target name; set(BABEL_LIBRARY openbabel). # This would be better handled with external projects...; if(EMBED_OPENBABEL); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}"" PARENT_SCOPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:15630,Deployability,install,install,15630,"if(UNIX AND BUILD_SHARED); if(APPLE); set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}); else(); set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}""); set(CMAKE_SKIP_BUILD_RPATH FALSE); set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(). # Three build types are available: Release, Debug, RelWithDebInfo.; # We default to Release.; if(NOT CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE Release); endif(). #define various build types; if(CMAKE_COMPILER_IS_GNUCXX); set (CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG""); set (CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g""); set (CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG -g3 -fno-inline""); endif(). file(GLOB_RECURSE headers include/openbabel/*.h); configure_file(${openbabel_SOURCE_DIR}/src/config.h.cmake; ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h); install(FILES ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h; DESTINATION ${OB_INCLUDE_DIRS}/openbabel); if(NOT MSVC); configure_file(${openbabel_SOURCE_DIR}/openbabel-3.pc.cmake; ${openbabel_BINARY_DIR}/openbabel-3.pc @ONLY); install(FILES ${openbabel_BINARY_DIR}/openbabel-3.pc; DESTINATION ${LIB_INSTALL_DIR}/pkgconfig); endif(). include_directories(${openbabel_BINARY_DIR}/include; ${openbabel_SOURCE_DIR}/data; ${openbabel_SOURCE_DIR}/include; ). #cjh; find_package(Eigen3); if(EIGEN3_FOUND); add_definitions(-DHAVE_EIGEN -DHAVE_EIGEN3); include_directories(${EIGEN3_INCLUDE_DIR}); else(); find_package(Eigen2) # find and setup Eigen2; if(EIGEN2_FOUND); add_definitions (-DHAVE_EIGEN); include_directories(${EIGEN2_INCLUDE_DIR}); endif(); endif(); #cjh. find_package(Boost COMPONENTS filesystem iostreams unit_test_framework); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); option(WITH_MAEPARSER ""Build Maestro support"" ON); if(BUILD_SHARED); option(WITH_COORDGEN ""Build Coordgen sup",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:15866,Deployability,install,install,15866," set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(). # Three build types are available: Release, Debug, RelWithDebInfo.; # We default to Release.; if(NOT CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE Release); endif(). #define various build types; if(CMAKE_COMPILER_IS_GNUCXX); set (CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG""); set (CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g""); set (CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG -g3 -fno-inline""); endif(). file(GLOB_RECURSE headers include/openbabel/*.h); configure_file(${openbabel_SOURCE_DIR}/src/config.h.cmake; ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h); install(FILES ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h; DESTINATION ${OB_INCLUDE_DIRS}/openbabel); if(NOT MSVC); configure_file(${openbabel_SOURCE_DIR}/openbabel-3.pc.cmake; ${openbabel_BINARY_DIR}/openbabel-3.pc @ONLY); install(FILES ${openbabel_BINARY_DIR}/openbabel-3.pc; DESTINATION ${LIB_INSTALL_DIR}/pkgconfig); endif(). include_directories(${openbabel_BINARY_DIR}/include; ${openbabel_SOURCE_DIR}/data; ${openbabel_SOURCE_DIR}/include; ). #cjh; find_package(Eigen3); if(EIGEN3_FOUND); add_definitions(-DHAVE_EIGEN -DHAVE_EIGEN3); include_directories(${EIGEN3_INCLUDE_DIR}); else(); find_package(Eigen2) # find and setup Eigen2; if(EIGEN2_FOUND); add_definitions (-DHAVE_EIGEN); include_directories(${EIGEN2_INCLUDE_DIR}); endif(); endif(); #cjh. find_package(Boost COMPONENTS filesystem iostreams unit_test_framework); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); option(WITH_MAEPARSER ""Build Maestro support"" ON); if(BUILD_SHARED); option(WITH_COORDGEN ""Build Coordgen support"" ON); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(). if(WITH_MAEPARSER). find_package(maeparser MODULE QUIET). if (maeparser_FOU",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:18689,Deployability,install,install,18689,"AEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories(${maeparser_INCLUDE_DIRS}); set(libs ${libs} ${maeparser_LIBRARIES}). else(); message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). if(WITH_COORDGEN). find_package(coordgen MODULE QUIET). if (coordgen_FOUND). message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.""). else(). set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests""); set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example""). if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:20605,Deployability,install,install,20605,"enlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH). if(COORDGEN_UNPACK_DIR); file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen""); message(STATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.""); endif(). endif(). add_subdirectory(""${COORDGEN_DIR}/coordgen""). set(coordgen_INCLUDE_DIRS ""${COORDGEN_DIR}""); set(coordgen_LIBRARIES coordgen). message(STATUS ""Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}""). endif(). include_directories(${coordgen_INCLUDE_DIRS}); set(libs ${libs} ${coordgen_LIBRARIES}). else(); message(STATUS ""Coordinate generation with Coordgen will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). option(WITH_JSON ""Build JSON support"" ON); option(OPENBABEL_USE_SYSTEM_RAPIDJSON ""Use the system rapidjson if available."" ON); if(WITH_JSON); set(RAPIDJSON_VERSION_MIN 1.1.0); # First try find system rapidjson; if(OPENBABEL_USE_SYSTEM_RAPIDJSON); find_package(RapidJSON ${RAPIDJSON_VERSION_MIN}); endif(); # Otherwise download rapidjson to openbabel source directory; if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON_VERSION_MIN}); set(RAPIDJSON_VERSION 1.1.0); if(NOT EXISTS ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}""); file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""; ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz"" STATUS status); execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf; ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external); message(STATUS ""Downloaded RapidJSON to ",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:25863,Deployability,install,installed,25863," option(CSHARP_BINDINGS ""Build Csharp bindings"" OFF). if(ALL_BINDINGS); set(PYTHON_BINDINGS ON); set(RUBY_BINDINGS ON); set(PHP_BINDINGS ON); set(PERL_BINDINGS ON); set(JAVA_BINDINGS ON); set(CSHARP_BINDINGS ON); set(R_BINDINGS ON); endif(). add_subdirectory(scripts). # A minimal build with just two formats (SMI, SDF) useful for developers; option(MINIMAL_BUILD ""Disable full build"" OFF). # Create the Config and ConfigVersion files in the build directory, useful to; # build against an uninstalled OpenBabel build. Simply set OpenBabel3_DIR to; # point at the build directory and call find_package(OpenBabel3); set(OpenBabel3_INCLUDE_DIRS; ""${openbabel_SOURCE_DIR}/include""; ""${openbabel_BINARY_DIR}/include""); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3Config.cmake"" @ONLY); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3ConfigVersion.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake"" @ONLY). # Now to configure the installed config file.; set(OB_CONFIG_DIR ""${LIB_INSTALL_DIR}/cmake/openbabel3""); set(OpenBabel3_INCLUDE_DIRS ""\${OpenBabel3_INSTALL_PREFIX}/${OB_INCLUDE_DIRS}""); set(OpenBabel3_LIBRARIES ""$<TARGET_FILE:openbabel>""). set(OB_EXPORTS_FILE; ""\${OpenBabel3_INSTALL_PREFIX}/${OB_CONFIG_DIR}/OpenBabel3_EXPORTS.cmake""); set(REL_REF); if(NOT WIN32); set(REL_REF ""/../../..""); endif(); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake"" @ONLY). install(EXPORT openbabel-targets; DESTINATION ""${OB_CONFIG_DIR}""; FILE OpenBabel3_EXPORTS.cmake; COMPONENT Development); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development; RENAME OpenBabel3Config.cmake); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development). # from https://cmake.org/Wiki/RecipeAddUninstallTarget; ########### Add uninstall targe",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:26373,Deployability,install,install,26373,"r developers; option(MINIMAL_BUILD ""Disable full build"" OFF). # Create the Config and ConfigVersion files in the build directory, useful to; # build against an uninstalled OpenBabel build. Simply set OpenBabel3_DIR to; # point at the build directory and call find_package(OpenBabel3); set(OpenBabel3_INCLUDE_DIRS; ""${openbabel_SOURCE_DIR}/include""; ""${openbabel_BINARY_DIR}/include""); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3Config.cmake"" @ONLY); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3ConfigVersion.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake"" @ONLY). # Now to configure the installed config file.; set(OB_CONFIG_DIR ""${LIB_INSTALL_DIR}/cmake/openbabel3""); set(OpenBabel3_INCLUDE_DIRS ""\${OpenBabel3_INSTALL_PREFIX}/${OB_INCLUDE_DIRS}""); set(OpenBabel3_LIBRARIES ""$<TARGET_FILE:openbabel>""). set(OB_EXPORTS_FILE; ""\${OpenBabel3_INSTALL_PREFIX}/${OB_CONFIG_DIR}/OpenBabel3_EXPORTS.cmake""); set(REL_REF); if(NOT WIN32); set(REL_REF ""/../../..""); endif(); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake"" @ONLY). install(EXPORT openbabel-targets; DESTINATION ""${OB_CONFIG_DIR}""; FILE OpenBabel3_EXPORTS.cmake; COMPONENT Development); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development; RENAME OpenBabel3Config.cmake); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development). # from https://cmake.org/Wiki/RecipeAddUninstallTarget; ########### Add uninstall target ###############; if (NOT DEFINED EMBED_OPENBABEL); CONFIGURE_FILE(; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""; ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake""; IMMEDIATE @ONLY); ADD_CUSTOM_TARGET(uninstall; ""${CMAKE_COMMAND}"" -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake""); endif(); ",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:26494,Deployability,install,install,26494,"r developers; option(MINIMAL_BUILD ""Disable full build"" OFF). # Create the Config and ConfigVersion files in the build directory, useful to; # build against an uninstalled OpenBabel build. Simply set OpenBabel3_DIR to; # point at the build directory and call find_package(OpenBabel3); set(OpenBabel3_INCLUDE_DIRS; ""${openbabel_SOURCE_DIR}/include""; ""${openbabel_BINARY_DIR}/include""); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3Config.cmake"" @ONLY); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3ConfigVersion.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake"" @ONLY). # Now to configure the installed config file.; set(OB_CONFIG_DIR ""${LIB_INSTALL_DIR}/cmake/openbabel3""); set(OpenBabel3_INCLUDE_DIRS ""\${OpenBabel3_INSTALL_PREFIX}/${OB_INCLUDE_DIRS}""); set(OpenBabel3_LIBRARIES ""$<TARGET_FILE:openbabel>""). set(OB_EXPORTS_FILE; ""\${OpenBabel3_INSTALL_PREFIX}/${OB_CONFIG_DIR}/OpenBabel3_EXPORTS.cmake""); set(REL_REF); if(NOT WIN32); set(REL_REF ""/../../..""); endif(); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake"" @ONLY). install(EXPORT openbabel-targets; DESTINATION ""${OB_CONFIG_DIR}""; FILE OpenBabel3_EXPORTS.cmake; COMPONENT Development); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development; RENAME OpenBabel3Config.cmake); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development). # from https://cmake.org/Wiki/RecipeAddUninstallTarget; ########### Add uninstall target ###############; if (NOT DEFINED EMBED_OPENBABEL); CONFIGURE_FILE(; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""; ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake""; IMMEDIATE @ONLY); ADD_CUSTOM_TARGET(uninstall; ""${CMAKE_COMMAND}"" -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake""); endif(); ",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:26650,Deployability,install,install,26650,"r developers; option(MINIMAL_BUILD ""Disable full build"" OFF). # Create the Config and ConfigVersion files in the build directory, useful to; # build against an uninstalled OpenBabel build. Simply set OpenBabel3_DIR to; # point at the build directory and call find_package(OpenBabel3); set(OpenBabel3_INCLUDE_DIRS; ""${openbabel_SOURCE_DIR}/include""; ""${openbabel_BINARY_DIR}/include""); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3Config.cmake"" @ONLY); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3ConfigVersion.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake"" @ONLY). # Now to configure the installed config file.; set(OB_CONFIG_DIR ""${LIB_INSTALL_DIR}/cmake/openbabel3""); set(OpenBabel3_INCLUDE_DIRS ""\${OpenBabel3_INSTALL_PREFIX}/${OB_INCLUDE_DIRS}""); set(OpenBabel3_LIBRARIES ""$<TARGET_FILE:openbabel>""). set(OB_EXPORTS_FILE; ""\${OpenBabel3_INSTALL_PREFIX}/${OB_CONFIG_DIR}/OpenBabel3_EXPORTS.cmake""); set(REL_REF); if(NOT WIN32); set(REL_REF ""/../../..""); endif(); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake"" @ONLY). install(EXPORT openbabel-targets; DESTINATION ""${OB_CONFIG_DIR}""; FILE OpenBabel3_EXPORTS.cmake; COMPONENT Development); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development; RENAME OpenBabel3Config.cmake); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development). # from https://cmake.org/Wiki/RecipeAddUninstallTarget; ########### Add uninstall target ###############; if (NOT DEFINED EMBED_OPENBABEL); CONFIGURE_FILE(; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in""; ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake""; IMMEDIATE @ONLY); ADD_CUSTOM_TARGET(uninstall; ""${CMAKE_COMMAND}"" -P ""${CMAKE_CURRENT_BINARY_DIR}/cmake/cmake_uninstall.cmake""); endif(); ",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:3455,Integrability,wrap,wrap,3455,"bel_BINARY_DIR}/OpenBabel3_EXPORTS.cmake""); # Ensure a fresh file is made each time CMake is run; file(REMOVE ""${OB_EXPORTS_FILE}""). # Place binaries and libraries in the root of the build directory; if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Binary build output directory""); endif(); if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY); if(UNIX); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; CACHE STRING ""Library build output directory""); else() # This is preferable on WIndows for example - bin = lib directory.; set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Library build output directory""); endif(); endif(). mark_as_advanced(CMAKE_LIBRARY_OUTPUT_DIRECTORY; CMAKE_RUNTIME_OUTPUT_DIRECTORY). #GLIBC_2.4; option(GLIBC_24_COMPATIBLE ""Build project compatible with GLIBC 2.4"" OFF); if(GLIBC_24_COMPATIBLE AND UNIX); set(WRAP_MEMCPY_SRC memcpy.c); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wl,--wrap=memcpy""); endif(). option(BUILD_SHARED ""enable shared build support"" ON); option(BUILD_MIXED ""enable linux relocatable binaries support"" OFF); option(WITH_STATIC_INCHI ""enable static inchi and related plugins"" OFF); option(WITH_STATIC_LIBXML ""enable static libxml and xml file format plugins"" OFF); # Static building; if(BUILD_SHARED); set(BUILD_TYPE SHARED); set(PLUGIN_TYPE MODULE); add_definitions(-DUSING_DYNAMIC_LIBS); set(CMAKE_POSITION_INDEPENDENT_CODE ON); else(); set(BUILD_TYPE STATIC); set(PLUGIN_TYPE STATIC). if(WITH_STATIC_INCHI); add_definitions(-DHAVE_STATIC_INCHI); endif(); if(WITH_STATIC_LIBXML); add_definitions(-DHAVE_STATIC_LIBXML); endif(). if(MSVC); # set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_C_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_C_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:4877,Integrability,message,message,4877,"nitions(-DUSING_DYNAMIC_LIBS); set(CMAKE_POSITION_INDEPENDENT_CODE ON); else(); set(BUILD_TYPE STATIC); set(PLUGIN_TYPE STATIC). if(WITH_STATIC_INCHI); add_definitions(-DHAVE_STATIC_INCHI); endif(); if(WITH_STATIC_LIBXML); add_definitions(-DHAVE_STATIC_LIBXML); endif(). if(MSVC); # set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_C_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_C_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # note: static libraries are specified when running cmake; else(); set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(); endif(). # Should we attempt to use the system inchi library?; option(WITH_INCHI ""Build inchi support"" ON); option(OPENBABEL_USE_SYSTEM_INCHI; ""Use the system inchi library."" OFF); if(OPENBABEL_USE_SYSTEM_INCHI); find_package(Inchi REQUIRED); if (NOT INCHI_FOUND); message(FATAL_ERROR ""Inchi library not found.""); endif(); else(); message(STATUS ""Using included inchi library.""); set(INCHI_LIBRARY inchi); endif(). if(WIN32); # FIXME: not used on windows... - inconsistency; set(MODULE_EXTENSION "".obf""); else(); set(MODULE_EXTENSION "".so""); endif(). # configure checks; find_package(LibXml2); if(NOT LIBXML2_FOUND); message(WARNING ""libxml2 not found - disabling CML support!""); endif(). find_package(ZLIB); if(ZLIB_FOUND); add_definitions(-DHAVE_LIBZ); include_directories(${ZLIB_INCLUDE_DIR}); # Longstanding unsolved problem with compression under Windows; if(WIN32); add_definitions(-DDISABLE_WRITE_COMPRESSION); endif(); endif(). # wxWidgets instructions based on http://wiki.wxwidgets.org/CMake; #find_package(wxWidgets COMPONENTS base core REQUIRED); find_package(wxWidgets COMPONENTS base core adv); if(wxWidgets_FOUND); include(${wxWidgets_USE_FILE}); add_definitions(-DHAVE_WXWIDGETS); include_directories(${wxWidgets_INCLUDE_DIRS}",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:4943,Integrability,message,message,4943,"; set(PLUGIN_TYPE STATIC). if(WITH_STATIC_INCHI); add_definitions(-DHAVE_STATIC_INCHI); endif(); if(WITH_STATIC_LIBXML); add_definitions(-DHAVE_STATIC_LIBXML); endif(). if(MSVC); # set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_C_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_C_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # note: static libraries are specified when running cmake; else(); set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(); endif(). # Should we attempt to use the system inchi library?; option(WITH_INCHI ""Build inchi support"" ON); option(OPENBABEL_USE_SYSTEM_INCHI; ""Use the system inchi library."" OFF); if(OPENBABEL_USE_SYSTEM_INCHI); find_package(Inchi REQUIRED); if (NOT INCHI_FOUND); message(FATAL_ERROR ""Inchi library not found.""); endif(); else(); message(STATUS ""Using included inchi library.""); set(INCHI_LIBRARY inchi); endif(). if(WIN32); # FIXME: not used on windows... - inconsistency; set(MODULE_EXTENSION "".obf""); else(); set(MODULE_EXTENSION "".so""); endif(). # configure checks; find_package(LibXml2); if(NOT LIBXML2_FOUND); message(WARNING ""libxml2 not found - disabling CML support!""); endif(). find_package(ZLIB); if(ZLIB_FOUND); add_definitions(-DHAVE_LIBZ); include_directories(${ZLIB_INCLUDE_DIR}); # Longstanding unsolved problem with compression under Windows; if(WIN32); add_definitions(-DDISABLE_WRITE_COMPRESSION); endif(); endif(). # wxWidgets instructions based on http://wiki.wxwidgets.org/CMake; #find_package(wxWidgets COMPONENTS base core REQUIRED); find_package(wxWidgets COMPONENTS base core adv); if(wxWidgets_FOUND); include(${wxWidgets_USE_FILE}); add_definitions(-DHAVE_WXWIDGETS); include_directories(${wxWidgets_INCLUDE_DIRS}); endif(). if(MSVC); # Ensure that CharacterSet=""0"" in the project files; add_definitions(-D_SBCS) #",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:5229,Integrability,message,message,5229,"/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_C_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # note: static libraries are specified when running cmake; else(); set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(); endif(). # Should we attempt to use the system inchi library?; option(WITH_INCHI ""Build inchi support"" ON); option(OPENBABEL_USE_SYSTEM_INCHI; ""Use the system inchi library."" OFF); if(OPENBABEL_USE_SYSTEM_INCHI); find_package(Inchi REQUIRED); if (NOT INCHI_FOUND); message(FATAL_ERROR ""Inchi library not found.""); endif(); else(); message(STATUS ""Using included inchi library.""); set(INCHI_LIBRARY inchi); endif(). if(WIN32); # FIXME: not used on windows... - inconsistency; set(MODULE_EXTENSION "".obf""); else(); set(MODULE_EXTENSION "".so""); endif(). # configure checks; find_package(LibXml2); if(NOT LIBXML2_FOUND); message(WARNING ""libxml2 not found - disabling CML support!""); endif(). find_package(ZLIB); if(ZLIB_FOUND); add_definitions(-DHAVE_LIBZ); include_directories(${ZLIB_INCLUDE_DIR}); # Longstanding unsolved problem with compression under Windows; if(WIN32); add_definitions(-DDISABLE_WRITE_COMPRESSION); endif(); endif(). # wxWidgets instructions based on http://wiki.wxwidgets.org/CMake; #find_package(wxWidgets COMPONENTS base core REQUIRED); find_package(wxWidgets COMPONENTS base core adv); if(wxWidgets_FOUND); include(${wxWidgets_USE_FILE}); add_definitions(-DHAVE_WXWIDGETS); include_directories(${wxWidgets_INCLUDE_DIRS}); endif(). if(MSVC); # Ensure that CharacterSet=""0"" in the project files; add_definitions(-D_SBCS) # Single-Byte Character Set (requires CMake 2.8.8); endif(). if(MSVC); option(OB_USE_PREBUILT_BINARIES; ""Should Windows Open Babel builds use prebuilt binaries?"" ON); 	# dlhandler_win32.cpp assumes multibyte character set; 	remove_definitions(-DUNICODE -D_UNICODE); include_dir",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:7768,Integrability,message,message,7768,"s); include(CheckLibraryExists); include(CheckTypeSize); include(CheckCSourceCompiles). check_include_file(conio.h HAVE_CONIO_H); check_include_file(sys/time.h HAVE_SYS_TIME_H); check_include_file(time.h HAVE_TIME_H); check_include_file(strings.h HAVE_STRINGS_H); check_include_file(rpc/xdr.h HAVE_RPC_XDR_H); check_include_file(regex.h HAVE_REGEX_H); check_include_file_cxx(sstream HAVE_SSTREAM). check_symbol_exists(rint ""math.h"" HAVE_RINT); check_symbol_exists(snprintf ""stdio.h"" HAVE_SNPRINTF); check_symbol_exists(sranddev ""stdlib.h"" HAVE_SRANDDEV); check_symbol_exists(strcasecmp ""string.h"" HAVE_STRCASECMP); check_symbol_exists(strncasecmp ""string.h"" HAVE_STRNCASECMP). # BSDs don't link against libdl, but rather libc; check_library_exists(dl dlopen """" HAVE_LIBDL). set(CMAKE_EXTRA_INCLUDE_FILES time.h); check_type_size(clock_t CLOCK_T). # Cygwin may be missing an XDR function: https://www.gnu.org/software/gnulib/manual/html_node/xdrstdio_005fcreate.html; if(CYGWIN); set(HAVE_RPC_XDR_H FALSE); message(STATUS ""Disabling rpc/xdr.h for Cygwin""); endif(). # Get the GCC version - from KDE4 cmake files; if(CMAKE_COMPILER_IS_GNUCXX); if(NOT(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.0.0)); set(GCC_IS_NEWER_THAN_4_0 TRUE); else(); set(GCC_IS_NEWER_THAN_4_0 FALSE); endif(); if(NOT(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.1.0)); set(GCC_IS_NEWER_THAN_4_1 TRUE); else(); set(GCC_IS_NEWER_THAN_4_1 FALSE); endif(); if(NOT(${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 4.2.0)); set(GCC_IS_NEWER_THAN_4_2 TRUE); else(); set(GCC_IS_NEWER_THAN_4_2 FALSE); endif(); endif(). if(UNIX); option(ENABLE_SYMBOL_VISIBILITY; ""Enable support for compiler symbol visibility. WARNING: Some issues reported""; OFF); endif(). if(NOT MSVC); SET(CMAKE_REQUIRED_FLAGS -Werror); check_c_source_compiles(""; #include <sys/types.h>; #include <dirent.h>; int main(){; extern int matchFiles (struct dirent *entry_p);; struct dirent **entries_pp;; int count = scandir (\""./\"", &entries_pp, matchFiles, 0);; return count",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:10808,Integrability,message,message,10808,"LITY ${HAVE_GCC_VISIBILITY} CACHE BOOL ""GCC support for hidden visibility""); set(_GCC_COMPILED_WITH_BAD_ALLOCATOR FALSE); if(GCC_IS_NEWER_THAN_4_1); exec_program(${CMAKE_C_COMPILER} ARGS -v OUTPUT_VARIABLE _gcc_alloc_info); string(REGEX MATCH ""(--enable-libstdcxx-allocator=mt)"" _GCC_COMPILED_WITH_BAD_ALLOCATOR ""${_gcc_alloc_info}""); endif(); if(HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_2 AND ENABLE_SYMBOL_VISIBILITY; AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR); # We have all the parts necessary - use visibility support; add_definitions(-DHAVE_GCC_VISIBILITY); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden""); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); endif(); endif(). # To avoid warnings when linking the plugins and exes; if(MINGW); set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_MODULE_LINKER_FLAGS}""); set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_EXE_LINKER_FLAGS}""); endif(). message(STATUS ""Checking available shared pointer...""); include(CheckCXXSourceCompiles); check_cxx_source_compiles(""#include <memory>; int main(){ std::shared_ptr<int> p; return 0; }""; HAVE_STD_SHARED_PTR); check_cxx_source_compiles(""#include <memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR); check_cxx_source_compiles(""#include <tr1/memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); if(HAVE_STD_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""tr1/memory""); set(SHARED_POINTER true); ad",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:12068,Integrability,message,message,12068,"GS} -fvisibility-inlines-hidden""); endif(); endif(); endif(). # To avoid warnings when linking the plugins and exes; if(MINGW); set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_MODULE_LINKER_FLAGS}""); set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_EXE_LINKER_FLAGS}""); endif(). message(STATUS ""Checking available shared pointer...""); include(CheckCXXSourceCompiles); check_cxx_source_compiles(""#include <memory>; int main(){ std::shared_ptr<int> p; return 0; }""; HAVE_STD_SHARED_PTR); check_cxx_source_compiles(""#include <memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR); check_cxx_source_compiles(""#include <tr1/memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); if(HAVE_STD_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""tr1/memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); else(); find_package(Boost); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); add_definitions(-DUSE_BOOST -DHAVE_SHARED_POINTER); set(SHARED_POINTER true); else(); message(FATAL_ERROR ""Boost is required to compile OpenBabel with GCC 3.x""); endif(); set(OB_SHARED_PTR_IMPLEMENTATION ""boost::shared_ptr""); set(OB_SHARED_PTR_HEADER ""boost/memory""); endif(); message(STATUS ""Use ${OB_SHARED_PTR_IMPLEMENTATION} in ${OB_SHARED_PTR_HEADER}""). find_package(Boost COMPONENTS program_options iostreams); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); endif(). # Intel C+",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:12259,Integrability,message,message,12259," 0; }""; HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); if(HAVE_STD_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""tr1/memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); else(); find_package(Boost); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); add_definitions(-DUSE_BOOST -DHAVE_SHARED_POINTER); set(SHARED_POINTER true); else(); message(FATAL_ERROR ""Boost is required to compile OpenBabel with GCC 3.x""); endif(); set(OB_SHARED_PTR_IMPLEMENTATION ""boost::shared_ptr""); set(OB_SHARED_PTR_HEADER ""boost/memory""); endif(); message(STATUS ""Use ${OB_SHARED_PTR_IMPLEMENTATION} in ${OB_SHARED_PTR_HEADER}""). find_package(Boost COMPONENTS program_options iostreams); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); endif(). # Intel C++ Compiler; # Note: Windows version uses different options!; if(${CMAKE_CXX_COMPILER_ID} MATCHES Intel AND UNIX); add_definitions (-D_BSD_SOURCE); # Set some linker flags; if(CMAKE_SYSTEM_NAME MATCHES Linux); set(CMAKE_SHARED_LINKER_FLAGS; ""-lc ${CMAKE_SHARED_LINKER_FLAGS}""); set(CMAKE_MODULE_LINKER_FLAGS; ""-lc ${CMAKE_MODULE_LINKER_FLAGS}""); set (CMAKE_EXE_LINKER_FLAGS; ""-lc ${CMAKE_EXE_LINKER_FLAGS}""); endif (CMAKE_SYSTEM_NAME MATCHES Linux); check_cxx_compiler_flag(-fvisibility=hidden HAVE_INTEL_VISIBILITY); set(HAVE_INTEL_VISIBILITY ${HAVE_INTEL_VISIBILITY} CACHE BOOL; ""Intel Compiler support for hidden visibility""); if(HAVE_INTEL_VISIBILITY AND ENABLE_SYMBOL_VISIBILITY); add_definitions(-DHAVE_GCC_VISIBILITY); # set (CMAKE_CX",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:14007,Integrability,message,message,14007,"ILITY ${HAVE_INTEL_VISIBILITY} CACHE BOOL; ""Intel Compiler support for hidden visibility""); if(HAVE_INTEL_VISIBILITY AND ENABLE_SYMBOL_VISIBILITY); add_definitions(-DHAVE_GCC_VISIBILITY); # set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden""); check_cxx_compiler_flag(-fvisibility-inlines-hidden HAVE_INTEL_VISIBILITY_INLINES); set(HAVE_INTEL_VISIBILITY_INLINES ${HAVE_INTEL_VISIBILITY_INLINES} CACHE BOOL; ""Intel Compiler support for -fvisibility-inlines-hidden""); if(HAVE_INTEL_VISIBILITY_INLINES); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); endif(). set(CMAKE_C_FLAGS_RELEASE ""-O3 -ipo1 -DNDEBUG -Wl,-s""); set(CMAKE_CXX_FLAGS_RELEASE ""-O3 -ipo1 -DNDEBUG -Wl,-s""). # define WITH_SSE2 to enable the SSE2 instruction set.; # Available on Pentium 4, Athlon 64, and newer CPUs.; # TODO: Remove this? Should be handled by -march=native and only enabled if OPTIMIZE_NATIVE is ON; if(CMAKE_SIZEOF_VOID_P EQUAL 8 OR WITH_SSE2); message(STATUS ""Enabling the SSE2 instruction set""); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -msse2""); endif(CMAKE_SIZEOF_VOID_P EQUAL 8 OR WITH_SSE2); endif(${CMAKE_CXX_COMPILER_ID} MATCHES Intel AND UNIX). #Find if OpenMP support is enabled. option(ENABLE_OPENMP; ""Enable support for OpenMP compilation of forcefield code""; OFF); if(ENABLE_OPENMP); find_package(OpenMP); if(OPENMP_FOUND); set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}""); endif(); endif(). # Some rpath handling for Linux and Mac; if(UNIX AND BUILD_SHARED); if(APPLE); set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}); else(); set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}""); set(CMAKE_SKIP_BUILD_RPATH FALSE); set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(). # Three build types are available: Release, De",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:16891,Integrability,message,message,16891,".pc; DESTINATION ${LIB_INSTALL_DIR}/pkgconfig); endif(). include_directories(${openbabel_BINARY_DIR}/include; ${openbabel_SOURCE_DIR}/data; ${openbabel_SOURCE_DIR}/include; ). #cjh; find_package(Eigen3); if(EIGEN3_FOUND); add_definitions(-DHAVE_EIGEN -DHAVE_EIGEN3); include_directories(${EIGEN3_INCLUDE_DIR}); else(); find_package(Eigen2) # find and setup Eigen2; if(EIGEN2_FOUND); add_definitions (-DHAVE_EIGEN); include_directories(${EIGEN2_INCLUDE_DIR}); endif(); endif(); #cjh. find_package(Boost COMPONENTS filesystem iostreams unit_test_framework); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); option(WITH_MAEPARSER ""Build Maestro support"" ON); if(BUILD_SHARED); option(WITH_COORDGEN ""Build Coordgen support"" ON); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(). if(WITH_MAEPARSER). find_package(maeparser MODULE QUIET). if (maeparser_FOUND). message(STATUS ""Maestro formats will be supported. Using MaeParser libraries at ${maeparser_LIBRARIES}.""). else(). set(MAEPARSER_VERSION ""v1.2.3"" CACHE STRING ""Maeparser fallback version to download""). set(MAEPARSER_DIR ""${openbabel_SOURCE_DIR}/external/maeparser-${MAEPARSER_VERSION}""). option(MAEPARSER_BUILD_SHARED_LIBS ""Build maeparser as a shared library"" ${BUILD_SHARED}). # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.; set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL ""Disable Maeparser tests""). if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt""). message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPA",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:17501,Integrability,message,message,17501,"IR}); option(WITH_MAEPARSER ""Build Maestro support"" ON); if(BUILD_SHARED); option(WITH_COORDGEN ""Build Coordgen support"" ON); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(). if(WITH_MAEPARSER). find_package(maeparser MODULE QUIET). if (maeparser_FOUND). message(STATUS ""Maestro formats will be supported. Using MaeParser libraries at ${maeparser_LIBRARIES}.""). else(). set(MAEPARSER_VERSION ""v1.2.3"" CACHE STRING ""Maeparser fallback version to download""). set(MAEPARSER_DIR ""${openbabel_SOURCE_DIR}/external/maeparser-${MAEPARSER_VERSION}""). option(MAEPARSER_BUILD_SHARED_LIBS ""Build maeparser as a shared library"" ${BUILD_SHARED}). # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.; set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL ""Disable Maeparser tests""). if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt""). message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:18079,Integrability,message,message,18079,"ersion to download""). set(MAEPARSER_DIR ""${openbabel_SOURCE_DIR}/external/maeparser-${MAEPARSER_VERSION}""). option(MAEPARSER_BUILD_SHARED_LIBS ""Build maeparser as a shared library"" ${BUILD_SHARED}). # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.; set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL ""Disable Maeparser tests""). if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt""). message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories(${maeparser_INCLUDE_DIRS}); set(libs ${libs} ${maeparser_LIBRARIES}). else(); message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). if(WITH_COORDGEN). find_package(coordgen MODULE QUIET). if (coordgen_FOUND). message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.""). else(). set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOUR",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:18171,Integrability,message,message,18171,"ED_LIBS ""Build maeparser as a shared library"" ${BUILD_SHARED}). # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.; set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL ""Disable Maeparser tests""). if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt""). message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories(${maeparser_INCLUDE_DIRS}); set(libs ${libs} ${maeparser_LIBRARIES}). else(); message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). if(WITH_COORDGEN). find_package(coordgen MODULE QUIET). if (coordgen_FOUND). message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.""). else(). set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUIL",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:18407,Integrability,message,message,18407,"rser tests""). if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt""). message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories(${maeparser_INCLUDE_DIRS}); set(libs ${libs} ${maeparser_LIBRARIES}). else(); message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). if(WITH_COORDGEN). find_package(coordgen MODULE QUIET). if (coordgen_FOUND). message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.""). else(). set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests""); set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example""). if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:18627,Integrability,message,message,18627,"ger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories(${maeparser_INCLUDE_DIRS}); set(libs ${libs} ${maeparser_LIBRARIES}). else(); message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). if(WITH_COORDGEN). find_package(coordgen MODULE QUIET). if (coordgen_FOUND). message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.""). else(). set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests""); set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example""). if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.ta",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:18819,Integrability,message,message,18819,"WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories(${maeparser_INCLUDE_DIRS}); set(libs ${libs} ${maeparser_LIBRARIES}). else(); message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). if(WITH_COORDGEN). find_package(coordgen MODULE QUIET). if (coordgen_FOUND). message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.""). else(). set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests""); set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example""). if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:19399,Integrability,message,message,19399,"be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories(${maeparser_INCLUDE_DIRS}); set(libs ${libs} ${maeparser_LIBRARIES}). else(); message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). if(WITH_COORDGEN). find_package(coordgen MODULE QUIET). if (coordgen_FOUND). message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.""). else(). set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests""); set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example""). if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH). if(COORDGEN_UNPACK_DIR); file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen""); message(STATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.""); endif(). endif(). add_subdirectory(""${COORDGEN_DIR}/coordgen""). set(coordgen_INCLUDE_DIRS ""${COORDGEN_DIR}""); set(coordgen_LIBRARIES coordgen). message(STATUS ""Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}""). endif(). include_directori",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:19972,Integrability,message,message,19972,"_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests""); set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example""). if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH). if(COORDGEN_UNPACK_DIR); file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen""); message(STATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.""); endif(). endif(). add_subdirectory(""${COORDGEN_DIR}/coordgen""). set(coordgen_INCLUDE_DIRS ""${COORDGEN_DIR}""); set(coordgen_LIBRARIES coordgen). message(STATUS ""Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}""). endif(). include_directories(${coordgen_INCLUDE_DIRS}); set(libs ${libs} ${coordgen_LIBRARIES}). else(); message(STATUS ""Coordinate generation with Coordgen will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). option(WITH_JSON ""Build JSON support"" ON); option(OPENBABEL_USE_SYSTEM_RAPIDJSON ""Use the system rapidjson if available."" ON); if(WITH_JSON); set(RAPIDJSON_VERSION_MIN 1.1.0); # First try find system rapidjson; if(OPENBABEL_USE_SYSTEM_RAPIDJSON); find_package(RapidJSON ${RAPIDJSON_VERSION_MIN}); endif(); #",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:20061,Integrability,message,message,20061,"n-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests""); set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example""). if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH). if(COORDGEN_UNPACK_DIR); file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen""); message(STATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.""); endif(). endif(). add_subdirectory(""${COORDGEN_DIR}/coordgen""). set(coordgen_INCLUDE_DIRS ""${COORDGEN_DIR}""); set(coordgen_LIBRARIES coordgen). message(STATUS ""Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}""). endif(). include_directories(${coordgen_INCLUDE_DIRS}); set(libs ${libs} ${coordgen_LIBRARIES}). else(); message(STATUS ""Coordinate generation with Coordgen will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). option(WITH_JSON ""Build JSON support"" ON); option(OPENBABEL_USE_SYSTEM_RAPIDJSON ""Use the system rapidjson if available."" ON); if(WITH_JSON); set(RAPIDJSON_VERSION_MIN 1.1.0); # First try find system rapidjson; if(OPENBABEL_USE_SYSTEM_RAPIDJSON); find_package(RapidJSON ${RAPIDJSON_VERSION_MIN}); endif(); # Otherwise download rapidjson to openbabel source directory; if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:20289,Integrability,message,message,20289,"TS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH). if(COORDGEN_UNPACK_DIR); file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen""); message(STATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.""); endif(). endif(). add_subdirectory(""${COORDGEN_DIR}/coordgen""). set(coordgen_INCLUDE_DIRS ""${COORDGEN_DIR}""); set(coordgen_LIBRARIES coordgen). message(STATUS ""Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}""). endif(). include_directories(${coordgen_INCLUDE_DIRS}); set(libs ${libs} ${coordgen_LIBRARIES}). else(); message(STATUS ""Coordinate generation with Coordgen will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). option(WITH_JSON ""Build JSON support"" ON); option(OPENBABEL_USE_SYSTEM_RAPIDJSON ""Use the system rapidjson if available."" ON); if(WITH_JSON); set(RAPIDJSON_VERSION_MIN 1.1.0); # First try find system rapidjson; if(OPENBABEL_USE_SYSTEM_RAPIDJSON); find_package(RapidJSON ${RAPIDJSON_VERSION_MIN}); endif(); # Otherwise download rapidjson to openbabel source directory; if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON_VERSION_MIN}); set(RAPIDJSON_VERSION 1.1.0); if(NOT EXISTS ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}""); file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""; ""${openbabel_SOURCE_DIR}/external/rapid",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:20523,Integrability,message,message,20523,"nlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH). if(COORDGEN_UNPACK_DIR); file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen""); message(STATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.""); endif(). endif(). add_subdirectory(""${COORDGEN_DIR}/coordgen""). set(coordgen_INCLUDE_DIRS ""${COORDGEN_DIR}""); set(coordgen_LIBRARIES coordgen). message(STATUS ""Coordinate generation with Coordgen will be supported Using Coordgen '${COORDGEN_VERSION}' at ${COORDGEN_DIR}""). endif(). include_directories(${coordgen_INCLUDE_DIRS}); set(libs ${libs} ${coordgen_LIBRARIES}). else(); message(STATUS ""Coordinate generation with Coordgen will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). option(WITH_JSON ""Build JSON support"" ON); option(OPENBABEL_USE_SYSTEM_RAPIDJSON ""Use the system rapidjson if available."" ON); if(WITH_JSON); set(RAPIDJSON_VERSION_MIN 1.1.0); # First try find system rapidjson; if(OPENBABEL_USE_SYSTEM_RAPIDJSON); find_package(RapidJSON ${RAPIDJSON_VERSION_MIN}); endif(); # Otherwise download rapidjson to openbabel source directory; if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON_VERSION_MIN}); set(RAPIDJSON_VERSION 1.1.0); if(NOT EXISTS ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}""); file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""; ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz"" STATUS status); execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf; ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz; WORKING_DIRECTORY ${openbabe",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:21581,Integrability,message,message,21581," install Boost to enable Maestro formats.""); endif(). option(WITH_JSON ""Build JSON support"" ON); option(OPENBABEL_USE_SYSTEM_RAPIDJSON ""Use the system rapidjson if available."" ON); if(WITH_JSON); set(RAPIDJSON_VERSION_MIN 1.1.0); # First try find system rapidjson; if(OPENBABEL_USE_SYSTEM_RAPIDJSON); find_package(RapidJSON ${RAPIDJSON_VERSION_MIN}); endif(); # Otherwise download rapidjson to openbabel source directory; if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON_VERSION_MIN}); set(RAPIDJSON_VERSION 1.1.0); if(NOT EXISTS ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}""); file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""; ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz"" STATUS status); execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf; ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external); message(STATUS ""Downloaded RapidJSON to ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.""); endif(); set(RAPIDJSON_FOUND TRUE); set(RAPIDJSON_INCLUDE_DIRS ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}/include); endif(); if(RAPIDJSON_FOUND); message(STATUS ""JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}""); add_definitions(-DHAVE_RADPIJSON); include_directories(${RAPIDJSON_INCLUDE_DIRS}); endif(); endif(). find_package(Cairo); if(CAIRO_FOUND); message(STATUS ""Cairo found. PNG output will be supported.""); else(CAIRO_FOUND); message(STATUS ""Could NOT find Cairo. PNG output will NOT be supported.""); endif(CAIRO_FOUND). # Should we enable optimizations for the native CPU architecture?; # (this will speed up JSON handling, similarity calculations and maybe those involving Eigen); option(OPTIMIZE_NATIVE ""Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines."" OFF); if(OPTIMIZE_NATIVE); i",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:21856,Integrability,message,message,21856,"SON); set(RAPIDJSON_VERSION_MIN 1.1.0); # First try find system rapidjson; if(OPENBABEL_USE_SYSTEM_RAPIDJSON); find_package(RapidJSON ${RAPIDJSON_VERSION_MIN}); endif(); # Otherwise download rapidjson to openbabel source directory; if (NOT RAPIDJSON_FOUND OR RAPIDJSON_VERSION VERSION_LESS ${RAPIDJSON_VERSION_MIN}); set(RAPIDJSON_VERSION 1.1.0); if(NOT EXISTS ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}""); file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""; ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz"" STATUS status); execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf; ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external); message(STATUS ""Downloaded RapidJSON to ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.""); endif(); set(RAPIDJSON_FOUND TRUE); set(RAPIDJSON_INCLUDE_DIRS ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}/include); endif(); if(RAPIDJSON_FOUND); message(STATUS ""JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}""); add_definitions(-DHAVE_RADPIJSON); include_directories(${RAPIDJSON_INCLUDE_DIRS}); endif(); endif(). find_package(Cairo); if(CAIRO_FOUND); message(STATUS ""Cairo found. PNG output will be supported.""); else(CAIRO_FOUND); message(STATUS ""Could NOT find Cairo. PNG output will NOT be supported.""); endif(CAIRO_FOUND). # Should we enable optimizations for the native CPU architecture?; # (this will speed up JSON handling, similarity calculations and maybe those involving Eigen); option(OPTIMIZE_NATIVE ""Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines."" OFF); if(OPTIMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif()",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:22112,Integrability,message,message,22112,"N}); set(RAPIDJSON_VERSION 1.1.0); if(NOT EXISTS ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}""); file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""; ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz"" STATUS status); execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf; ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external); message(STATUS ""Downloaded RapidJSON to ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.""); endif(); set(RAPIDJSON_FOUND TRUE); set(RAPIDJSON_INCLUDE_DIRS ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}/include); endif(); if(RAPIDJSON_FOUND); message(STATUS ""JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}""); add_definitions(-DHAVE_RADPIJSON); include_directories(${RAPIDJSON_INCLUDE_DIRS}); endif(); endif(). find_package(Cairo); if(CAIRO_FOUND); message(STATUS ""Cairo found. PNG output will be supported.""); else(CAIRO_FOUND); message(STATUS ""Could NOT find Cairo. PNG output will NOT be supported.""); endif(CAIRO_FOUND). # Should we enable optimizations for the native CPU architecture?; # (this will speed up JSON handling, similarity calculations and maybe those involving Eigen); option(OPTIMIZE_NATIVE ""Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines."" OFF); if(OPTIMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif(); if(HAVE_SSE4_2); add_definitions(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); e",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:22193,Integrability,message,message,22193,"{RAPIDJSON_VERSION}""); file(DOWNLOAD ""https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz""; ""${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz"" STATUS status); execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf; ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external); message(STATUS ""Downloaded RapidJSON to ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.""); endif(); set(RAPIDJSON_FOUND TRUE); set(RAPIDJSON_INCLUDE_DIRS ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}/include); endif(); if(RAPIDJSON_FOUND); message(STATUS ""JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}""); add_definitions(-DHAVE_RADPIJSON); include_directories(${RAPIDJSON_INCLUDE_DIRS}); endif(); endif(). find_package(Cairo); if(CAIRO_FOUND); message(STATUS ""Cairo found. PNG output will be supported.""); else(CAIRO_FOUND); message(STATUS ""Could NOT find Cairo. PNG output will NOT be supported.""); endif(CAIRO_FOUND). # Should we enable optimizations for the native CPU architecture?; # (this will speed up JSON handling, similarity calculations and maybe those involving Eigen); option(OPTIMIZE_NATIVE ""Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines."" OFF); if(OPTIMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif(); if(HAVE_SSE4_2); add_definitions(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdire",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:22953,Integrability,message,message,22953,"APIDJSON_VERSION}/include); endif(); if(RAPIDJSON_FOUND); message(STATUS ""JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}""); add_definitions(-DHAVE_RADPIJSON); include_directories(${RAPIDJSON_INCLUDE_DIRS}); endif(); endif(). find_package(Cairo); if(CAIRO_FOUND); message(STATUS ""Cairo found. PNG output will be supported.""); else(CAIRO_FOUND); message(STATUS ""Could NOT find Cairo. PNG output will NOT be supported.""); endif(CAIRO_FOUND). # Should we enable optimizations for the native CPU architecture?; # (this will speed up JSON handling, similarity calculations and maybe those involving Eigen); option(OPTIMIZE_NATIVE ""Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines."" OFF); if(OPTIMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif(); if(HAVE_SSE4_2); add_definitions(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BUILD_GUI ""Build the GUI"" ON); endif(). if(BUILD_GUI); message(STATUS ""Attempting to build the GUI""); if(wxWidgets_FOUND); message(STATUS "" wxWidgets found => GUI will be built""); add_subdirectory(src/GUI); else(); message(STATUS "" wxWidgets not found => GUI will not be built""); endif(); else(); message(STATUS ""GUI will not be built""); endif(). # Do we want to build the tests?; option(ENABLE_TESTS ",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:23452,Integrability,message,message,23452,"IMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif(); if(HAVE_SSE4_2); add_definitions(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BUILD_GUI ""Build the GUI"" ON); endif(). if(BUILD_GUI); message(STATUS ""Attempting to build the GUI""); if(wxWidgets_FOUND); message(STATUS "" wxWidgets found => GUI will be built""); add_subdirectory(src/GUI); else(); message(STATUS "" wxWidgets not found => GUI will not be built""); endif(); else(); message(STATUS ""GUI will not be built""); endif(). # Do we want to build the tests?; option(ENABLE_TESTS ""Enable unit tests"" ON); if(ENABLE_TESTS); include(CTest); enable_testing(); add_subdirectory(test); endif(). # Should the language bindings be regenereted?; option(RUN_SWIG ""Generate language bindings with SWIG"" OFF). # Build bindings only; option(BINDINGS_ONLY ""Build bindings only"" OFF). # Point to library if building bindings only; set(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}; CACHE PATH ""Point to openbabel library if building bindings only""). # Should all bindings be built?; option(ALL_BINDINGS ""Build all languages bindings"" OFF). # Should PHP bindings be built; option(PHP_BINDINGS ""Build PHP bindings"" OFF). # Should Python bindings be built?; option(PYTHON_BINDINGS ""Build Python bindings"" OFF). # Should Ruby bindings be built?; option(RUBY_BINDINGS ""Build Ruby bindings"" OFF). # S",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:23520,Integrability,message,message,23520,"IMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif(); if(HAVE_SSE4_2); add_definitions(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BUILD_GUI ""Build the GUI"" ON); endif(). if(BUILD_GUI); message(STATUS ""Attempting to build the GUI""); if(wxWidgets_FOUND); message(STATUS "" wxWidgets found => GUI will be built""); add_subdirectory(src/GUI); else(); message(STATUS "" wxWidgets not found => GUI will not be built""); endif(); else(); message(STATUS ""GUI will not be built""); endif(). # Do we want to build the tests?; option(ENABLE_TESTS ""Enable unit tests"" ON); if(ENABLE_TESTS); include(CTest); enable_testing(); add_subdirectory(test); endif(). # Should the language bindings be regenereted?; option(RUN_SWIG ""Generate language bindings with SWIG"" OFF). # Build bindings only; option(BINDINGS_ONLY ""Build bindings only"" OFF). # Point to library if building bindings only; set(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}; CACHE PATH ""Point to openbabel library if building bindings only""). # Should all bindings be built?; option(ALL_BINDINGS ""Build all languages bindings"" OFF). # Should PHP bindings be built; option(PHP_BINDINGS ""Build PHP bindings"" OFF). # Should Python bindings be built?; option(PYTHON_BINDINGS ""Build Python bindings"" OFF). # Should Ruby bindings be built?; option(RUBY_BINDINGS ""Build Ruby bindings"" OFF). # S",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:23612,Integrability,message,message,23612,"IMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif(); if(HAVE_SSE4_2); add_definitions(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BUILD_GUI ""Build the GUI"" ON); endif(). if(BUILD_GUI); message(STATUS ""Attempting to build the GUI""); if(wxWidgets_FOUND); message(STATUS "" wxWidgets found => GUI will be built""); add_subdirectory(src/GUI); else(); message(STATUS "" wxWidgets not found => GUI will not be built""); endif(); else(); message(STATUS ""GUI will not be built""); endif(). # Do we want to build the tests?; option(ENABLE_TESTS ""Enable unit tests"" ON); if(ENABLE_TESTS); include(CTest); enable_testing(); add_subdirectory(test); endif(). # Should the language bindings be regenereted?; option(RUN_SWIG ""Generate language bindings with SWIG"" OFF). # Build bindings only; option(BINDINGS_ONLY ""Build bindings only"" OFF). # Point to library if building bindings only; set(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}; CACHE PATH ""Point to openbabel library if building bindings only""). # Should all bindings be built?; option(ALL_BINDINGS ""Build all languages bindings"" OFF). # Should PHP bindings be built; option(PHP_BINDINGS ""Build PHP bindings"" OFF). # Should Python bindings be built?; option(PYTHON_BINDINGS ""Build Python bindings"" OFF). # Should Ruby bindings be built?; option(RUBY_BINDINGS ""Build Ruby bindings"" OFF). # S",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:23694,Integrability,message,message,23694,"IMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif(); if(HAVE_SSE4_2); add_definitions(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BUILD_GUI ""Build the GUI"" ON); endif(). if(BUILD_GUI); message(STATUS ""Attempting to build the GUI""); if(wxWidgets_FOUND); message(STATUS "" wxWidgets found => GUI will be built""); add_subdirectory(src/GUI); else(); message(STATUS "" wxWidgets not found => GUI will not be built""); endif(); else(); message(STATUS ""GUI will not be built""); endif(). # Do we want to build the tests?; option(ENABLE_TESTS ""Enable unit tests"" ON); if(ENABLE_TESTS); include(CTest); enable_testing(); add_subdirectory(test); endif(). # Should the language bindings be regenereted?; option(RUN_SWIG ""Generate language bindings with SWIG"" OFF). # Build bindings only; option(BINDINGS_ONLY ""Build bindings only"" OFF). # Point to library if building bindings only; set(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}; CACHE PATH ""Point to openbabel library if building bindings only""). # Should all bindings be built?; option(ALL_BINDINGS ""Build all languages bindings"" OFF). # Should PHP bindings be built; option(PHP_BINDINGS ""Build PHP bindings"" OFF). # Should Python bindings be built?; option(PYTHON_BINDINGS ""Build Python bindings"" OFF). # Should Ruby bindings be built?; option(RUBY_BINDINGS ""Build Ruby bindings"" OFF). # S",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:1155,Modifiability,plugin,plugin,1155,"project(openbabel); set(CMAKE_MODULE_PATH ${openbabel_SOURCE_DIR}/cmake/modules). set (CMAKE_CXX_STANDARD 11). if(COMMAND cmake_policy); cmake_policy(SET CMP0003 NEW); if(POLICY CMP0042); cmake_policy(SET CMP0042 OLD); endif(); endif(). include (CheckCXXCompilerFlag). #include (MacroEnsureVersion). # Version numbering - should be bumped for each release; # Note that for ""beta"" releases, we should start at x.90.0 -- we've; # had too many 1.100.1 releases. :-); set(BABEL_MAJ_VER 3); set(BABEL_MIN_VER 1); set(BABEL_PATCH_VER 0). # This should be phased out in preference for just using the target name; set(BABEL_LIBRARY openbabel). # This would be better handled with external projects...; if(EMBED_OPENBABEL); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}"" PARENT_SCOPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins"");",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:1623,Modifiability,plugin,plugins,1623,"OPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(ENABLE_VERSIONED_FORMATS); endif(); endif(); if(NOT DEFINED OB_INCLUDE_DIRS); set(OB_INCLUDE_DIRS ""include/openbabel${BABEL_MAJ_VER}""); endif(); set(OB_EXPORTS_FILE ""${openbabel_BINARY_DIR}/OpenBabel3_EXPORTS.cmake""); # Ensure a fresh file is made each time CMake is run; file(REMOVE ""${OB_EXPORTS_FILE}""). # Place binaries and libraries in the root of the build directory; if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Binary build output directory""); endif(); if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY); if(UNIX); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; CACHE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:1728,Modifiability,plugin,plugins,1728,"OPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(ENABLE_VERSIONED_FORMATS); endif(); endif(); if(NOT DEFINED OB_INCLUDE_DIRS); set(OB_INCLUDE_DIRS ""include/openbabel${BABEL_MAJ_VER}""); endif(); set(OB_EXPORTS_FILE ""${openbabel_BINARY_DIR}/OpenBabel3_EXPORTS.cmake""); # Ensure a fresh file is made each time CMake is run; file(REMOVE ""${OB_EXPORTS_FILE}""). # Place binaries and libraries in the root of the build directory; if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Binary build output directory""); endif(); if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY); if(UNIX); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; CACHE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:1973,Modifiability,plugin,plugins,1973,"OPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(ENABLE_VERSIONED_FORMATS); endif(); endif(); if(NOT DEFINED OB_INCLUDE_DIRS); set(OB_INCLUDE_DIRS ""include/openbabel${BABEL_MAJ_VER}""); endif(); set(OB_EXPORTS_FILE ""${openbabel_BINARY_DIR}/OpenBabel3_EXPORTS.cmake""); # Ensure a fresh file is made each time CMake is run; file(REMOVE ""${OB_EXPORTS_FILE}""). # Place binaries and libraries in the root of the build directory; if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Binary build output directory""); endif(); if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY); if(UNIX); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; CACHE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:2123,Modifiability,plugin,plugins,2123,"OPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(ENABLE_VERSIONED_FORMATS); endif(); endif(); if(NOT DEFINED OB_INCLUDE_DIRS); set(OB_INCLUDE_DIRS ""include/openbabel${BABEL_MAJ_VER}""); endif(); set(OB_EXPORTS_FILE ""${openbabel_BINARY_DIR}/OpenBabel3_EXPORTS.cmake""); # Ensure a fresh file is made each time CMake is run; file(REMOVE ""${OB_EXPORTS_FILE}""). # Place binaries and libraries in the root of the build directory; if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Binary build output directory""); endif(); if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY); if(UNIX); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; CACHE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:2250,Modifiability,plugin,plugins,2250,"OPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(ENABLE_VERSIONED_FORMATS); endif(); endif(); if(NOT DEFINED OB_INCLUDE_DIRS); set(OB_INCLUDE_DIRS ""include/openbabel${BABEL_MAJ_VER}""); endif(); set(OB_EXPORTS_FILE ""${openbabel_BINARY_DIR}/OpenBabel3_EXPORTS.cmake""); # Ensure a fresh file is made each time CMake is run; file(REMOVE ""${OB_EXPORTS_FILE}""). # Place binaries and libraries in the root of the build directory; if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Binary build output directory""); endif(); if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY); if(UNIX); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; CACHE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:3661,Modifiability,plugin,plugins,3661,"RY_DIR}/bin""; CACHE STRING ""Binary build output directory""); endif(); if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY); if(UNIX); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; CACHE STRING ""Library build output directory""); else() # This is preferable on WIndows for example - bin = lib directory.; set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Library build output directory""); endif(); endif(). mark_as_advanced(CMAKE_LIBRARY_OUTPUT_DIRECTORY; CMAKE_RUNTIME_OUTPUT_DIRECTORY). #GLIBC_2.4; option(GLIBC_24_COMPATIBLE ""Build project compatible with GLIBC 2.4"" OFF); if(GLIBC_24_COMPATIBLE AND UNIX); set(WRAP_MEMCPY_SRC memcpy.c); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wl,--wrap=memcpy""); endif(). option(BUILD_SHARED ""enable shared build support"" ON); option(BUILD_MIXED ""enable linux relocatable binaries support"" OFF); option(WITH_STATIC_INCHI ""enable static inchi and related plugins"" OFF); option(WITH_STATIC_LIBXML ""enable static libxml and xml file format plugins"" OFF); # Static building; if(BUILD_SHARED); set(BUILD_TYPE SHARED); set(PLUGIN_TYPE MODULE); add_definitions(-DUSING_DYNAMIC_LIBS); set(CMAKE_POSITION_INDEPENDENT_CODE ON); else(); set(BUILD_TYPE STATIC); set(PLUGIN_TYPE STATIC). if(WITH_STATIC_INCHI); add_definitions(-DHAVE_STATIC_INCHI); endif(); if(WITH_STATIC_LIBXML); add_definitions(-DHAVE_STATIC_LIBXML); endif(). if(MSVC); # set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_C_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_C_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # note: static libraries are specified when running cmake; else(); set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(); endif(). # Should we attempt to use the system inchi library?; option(WITH_INCHI ""Build inchi support"" ON); option(OPE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:3744,Modifiability,plugin,plugins,3744,"RY_DIR}/bin""; CACHE STRING ""Binary build output directory""); endif(); if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY); if(UNIX); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; CACHE STRING ""Library build output directory""); else() # This is preferable on WIndows for example - bin = lib directory.; set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Library build output directory""); endif(); endif(). mark_as_advanced(CMAKE_LIBRARY_OUTPUT_DIRECTORY; CMAKE_RUNTIME_OUTPUT_DIRECTORY). #GLIBC_2.4; option(GLIBC_24_COMPATIBLE ""Build project compatible with GLIBC 2.4"" OFF); if(GLIBC_24_COMPATIBLE AND UNIX); set(WRAP_MEMCPY_SRC memcpy.c); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wl,--wrap=memcpy""); endif(). option(BUILD_SHARED ""enable shared build support"" ON); option(BUILD_MIXED ""enable linux relocatable binaries support"" OFF); option(WITH_STATIC_INCHI ""enable static inchi and related plugins"" OFF); option(WITH_STATIC_LIBXML ""enable static libxml and xml file format plugins"" OFF); # Static building; if(BUILD_SHARED); set(BUILD_TYPE SHARED); set(PLUGIN_TYPE MODULE); add_definitions(-DUSING_DYNAMIC_LIBS); set(CMAKE_POSITION_INDEPENDENT_CODE ON); else(); set(BUILD_TYPE STATIC); set(PLUGIN_TYPE STATIC). if(WITH_STATIC_INCHI); add_definitions(-DHAVE_STATIC_INCHI); endif(); if(WITH_STATIC_LIBXML); add_definitions(-DHAVE_STATIC_LIBXML); endif(). if(MSVC); # set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_C_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_C_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # note: static libraries are specified when running cmake; else(); set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(); endif(). # Should we attempt to use the system inchi library?; option(WITH_INCHI ""Build inchi support"" ON); option(OPE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:5165,Modifiability,config,configure,5165,"/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_C_FLAGS_RELEASE	""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # note: static libraries are specified when running cmake; else(); set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(); endif(). # Should we attempt to use the system inchi library?; option(WITH_INCHI ""Build inchi support"" ON); option(OPENBABEL_USE_SYSTEM_INCHI; ""Use the system inchi library."" OFF); if(OPENBABEL_USE_SYSTEM_INCHI); find_package(Inchi REQUIRED); if (NOT INCHI_FOUND); message(FATAL_ERROR ""Inchi library not found.""); endif(); else(); message(STATUS ""Using included inchi library.""); set(INCHI_LIBRARY inchi); endif(). if(WIN32); # FIXME: not used on windows... - inconsistency; set(MODULE_EXTENSION "".obf""); else(); set(MODULE_EXTENSION "".so""); endif(). # configure checks; find_package(LibXml2); if(NOT LIBXML2_FOUND); message(WARNING ""libxml2 not found - disabling CML support!""); endif(). find_package(ZLIB); if(ZLIB_FOUND); add_definitions(-DHAVE_LIBZ); include_directories(${ZLIB_INCLUDE_DIR}); # Longstanding unsolved problem with compression under Windows; if(WIN32); add_definitions(-DDISABLE_WRITE_COMPRESSION); endif(); endif(). # wxWidgets instructions based on http://wiki.wxwidgets.org/CMake; #find_package(wxWidgets COMPONENTS base core REQUIRED); find_package(wxWidgets COMPONENTS base core adv); if(wxWidgets_FOUND); include(${wxWidgets_USE_FILE}); add_definitions(-DHAVE_WXWIDGETS); include_directories(${wxWidgets_INCLUDE_DIRS}); endif(). if(MSVC); # Ensure that CharacterSet=""0"" in the project files; add_definitions(-D_SBCS) # Single-Byte Character Set (requires CMake 2.8.8); endif(). if(MSVC); option(OB_USE_PREBUILT_BINARIES; ""Should Windows Open Babel builds use prebuilt binaries?"" ON); 	# dlhandler_win32.cpp assumes multibyte character set; 	remove_definitions(-DUNICODE -D_UNICODE); include_dir",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:10598,Modifiability,plugin,plugins,10598,"w check if we can use visibility to selectively export symbols; check_cxx_compiler_flag(-fvisibility=hidden HAVE_GCC_VISIBILITY); set(HAVE_GCC_VISIBILITY ${HAVE_GCC_VISIBILITY} CACHE BOOL ""GCC support for hidden visibility""); set(_GCC_COMPILED_WITH_BAD_ALLOCATOR FALSE); if(GCC_IS_NEWER_THAN_4_1); exec_program(${CMAKE_C_COMPILER} ARGS -v OUTPUT_VARIABLE _gcc_alloc_info); string(REGEX MATCH ""(--enable-libstdcxx-allocator=mt)"" _GCC_COMPILED_WITH_BAD_ALLOCATOR ""${_gcc_alloc_info}""); endif(); if(HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_2 AND ENABLE_SYMBOL_VISIBILITY; AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR); # We have all the parts necessary - use visibility support; add_definitions(-DHAVE_GCC_VISIBILITY); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden""); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); endif(); endif(). # To avoid warnings when linking the plugins and exes; if(MINGW); set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_MODULE_LINKER_FLAGS}""); set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_EXE_LINKER_FLAGS}""); endif(). message(STATUS ""Checking available shared pointer...""); include(CheckCXXSourceCompiles); check_cxx_source_compiles(""#include <memory>; int main(){ std::shared_ptr<int> p; return 0; }""; HAVE_STD_SHARED_PTR); check_cxx_source_compiles(""#include <memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR); check_cxx_source_compiles(""#include <tr1/memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); if(HAVE_STD_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHAR",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:15556,Modifiability,config,config,15556,"KER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}""); endif(); endif(). # Some rpath handling for Linux and Mac; if(UNIX AND BUILD_SHARED); if(APPLE); set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}); else(); set(CMAKE_INSTALL_RPATH ""${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}""); set(CMAKE_SKIP_BUILD_RPATH FALSE); set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(). # Three build types are available: Release, Debug, RelWithDebInfo.; # We default to Release.; if(NOT CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE Release); endif(). #define various build types; if(CMAKE_COMPILER_IS_GNUCXX); set (CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG""); set (CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g""); set (CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG -g3 -fno-inline""); endif(). file(GLOB_RECURSE headers include/openbabel/*.h); configure_file(${openbabel_SOURCE_DIR}/src/config.h.cmake; ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h); install(FILES ${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h; DESTINATION ${OB_INCLUDE_DIRS}/openbabel); if(NOT MSVC); configure_file(${openbabel_SOURCE_DIR}/openbabel-3.pc.cmake; ${openbabel_BINARY_DIR}/openbabel-3.pc @ONLY); install(FILES ${openbabel_BINARY_DIR}/openbabel-3.pc; DESTINATION ${LIB_INSTALL_DIR}/pkgconfig); endif(). include_directories(${openbabel_BINARY_DIR}/include; ${openbabel_SOURCE_DIR}/data; ${openbabel_SOURCE_DIR}/include; ). #cjh; find_package(Eigen3); if(EIGEN3_FOUND); add_definitions(-DHAVE_EIGEN -DHAVE_EIGEN3); include_directories(${EIGEN3_INCLUDE_DIR}); else(); find_package(Eigen2) # find and setup Eigen2; if(EIGEN2_FOUND); add_definitions (-DHAVE_EIGEN); include_directories(${EIGEN2_INCLUDE_DIR}); endif(); endif(); #cjh. find_package(Boost COMPONENTS filesystem iostreams unit_test_framework); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boos",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:25849,Modifiability,config,configure,25849," option(CSHARP_BINDINGS ""Build Csharp bindings"" OFF). if(ALL_BINDINGS); set(PYTHON_BINDINGS ON); set(RUBY_BINDINGS ON); set(PHP_BINDINGS ON); set(PERL_BINDINGS ON); set(JAVA_BINDINGS ON); set(CSHARP_BINDINGS ON); set(R_BINDINGS ON); endif(). add_subdirectory(scripts). # A minimal build with just two formats (SMI, SDF) useful for developers; option(MINIMAL_BUILD ""Disable full build"" OFF). # Create the Config and ConfigVersion files in the build directory, useful to; # build against an uninstalled OpenBabel build. Simply set OpenBabel3_DIR to; # point at the build directory and call find_package(OpenBabel3); set(OpenBabel3_INCLUDE_DIRS; ""${openbabel_SOURCE_DIR}/include""; ""${openbabel_BINARY_DIR}/include""); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3Config.cmake"" @ONLY); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3ConfigVersion.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake"" @ONLY). # Now to configure the installed config file.; set(OB_CONFIG_DIR ""${LIB_INSTALL_DIR}/cmake/openbabel3""); set(OpenBabel3_INCLUDE_DIRS ""\${OpenBabel3_INSTALL_PREFIX}/${OB_INCLUDE_DIRS}""); set(OpenBabel3_LIBRARIES ""$<TARGET_FILE:openbabel>""). set(OB_EXPORTS_FILE; ""\${OpenBabel3_INSTALL_PREFIX}/${OB_CONFIG_DIR}/OpenBabel3_EXPORTS.cmake""); set(REL_REF); if(NOT WIN32); set(REL_REF ""/../../..""); endif(); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake"" @ONLY). install(EXPORT openbabel-targets; DESTINATION ""${OB_CONFIG_DIR}""; FILE OpenBabel3_EXPORTS.cmake; COMPONENT Development); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development; RENAME OpenBabel3Config.cmake); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development). # from https://cmake.org/Wiki/RecipeAddUninstallTarget; ########### Add uninstall targe",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:25873,Modifiability,config,config,25873," option(CSHARP_BINDINGS ""Build Csharp bindings"" OFF). if(ALL_BINDINGS); set(PYTHON_BINDINGS ON); set(RUBY_BINDINGS ON); set(PHP_BINDINGS ON); set(PERL_BINDINGS ON); set(JAVA_BINDINGS ON); set(CSHARP_BINDINGS ON); set(R_BINDINGS ON); endif(). add_subdirectory(scripts). # A minimal build with just two formats (SMI, SDF) useful for developers; option(MINIMAL_BUILD ""Disable full build"" OFF). # Create the Config and ConfigVersion files in the build directory, useful to; # build against an uninstalled OpenBabel build. Simply set OpenBabel3_DIR to; # point at the build directory and call find_package(OpenBabel3); set(OpenBabel3_INCLUDE_DIRS; ""${openbabel_SOURCE_DIR}/include""; ""${openbabel_BINARY_DIR}/include""); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3Config.cmake"" @ONLY); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3ConfigVersion.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake"" @ONLY). # Now to configure the installed config file.; set(OB_CONFIG_DIR ""${LIB_INSTALL_DIR}/cmake/openbabel3""); set(OpenBabel3_INCLUDE_DIRS ""\${OpenBabel3_INSTALL_PREFIX}/${OB_INCLUDE_DIRS}""); set(OpenBabel3_LIBRARIES ""$<TARGET_FILE:openbabel>""). set(OB_EXPORTS_FILE; ""\${OpenBabel3_INSTALL_PREFIX}/${OB_CONFIG_DIR}/OpenBabel3_EXPORTS.cmake""); set(REL_REF); if(NOT WIN32); set(REL_REF ""/../../..""); endif(); configure_file(""${openbabel_SOURCE_DIR}/OpenBabel3Config.cmake.in""; ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake"" @ONLY). install(EXPORT openbabel-targets; DESTINATION ""${OB_CONFIG_DIR}""; FILE OpenBabel3_EXPORTS.cmake; COMPONENT Development); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigInstall.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development; RENAME OpenBabel3Config.cmake); install(FILES ""${openbabel_BINARY_DIR}/OpenBabel3ConfigVersion.cmake""; DESTINATION ${OB_CONFIG_DIR}; COMPONENT Development). # from https://cmake.org/Wiki/RecipeAddUninstallTarget; ########### Add uninstall targe",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:1788,Performance,load,load,1788,"OPE); else(); set(BABEL_VERSION ""${BABEL_MAJ_VER}.${BABEL_MIN_VER}.${BABEL_PATCH_VER}""); endif(); set(BABEL_DATADIR ""${CMAKE_INSTALL_PREFIX}/share/openbabel""). option(ENABLE_VERSIONED_FORMATS; ""Enable versioning of the format plugin directory"" ON). # Set up our path handling, inspired by the path handling used in KDE; set(BIN_INSTALL_DIR ""bin""; CACHE PATH ""Install dir for binaries""); set(LIB_SUFFIX """" CACHE STRING ""Suffix of the directory name, e.g. 64 for lib64""); if(UNIX); set(LIB_INSTALL_DIR ""lib${LIB_SUFFIX}""; CACHE PATH ""Install dir for libraries""); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(); set(OB_PLUGIN_INSTALL_DIR ""${LIB_INSTALL_DIR}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(); else() # Windows - bin dir = lib dir to load libraries; set(LIB_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for libraries""); if(MSVC); set(OB_PLUGIN_INSTALL_DIR ""${BIN_INSTALL_DIR}""; CACHE PATH ""Install dir for plugins""); else(); if(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel/${BABEL_VERSION}""; CACHE PATH ""Install dir for plugins""); else(ENABLE_VERSIONED_FORMATS); set(OB_PLUGIN_INSTALL_DIR ""lib${LIB_SUFFIX}/openbabel""; CACHE PATH ""Install dir for plugins""); endif(ENABLE_VERSIONED_FORMATS); endif(); endif(); if(NOT DEFINED OB_INCLUDE_DIRS); set(OB_INCLUDE_DIRS ""include/openbabel${BABEL_MAJ_VER}""); endif(); set(OB_EXPORTS_FILE ""${openbabel_BINARY_DIR}/OpenBabel3_EXPORTS.cmake""); # Ensure a fresh file is made each time CMake is run; file(REMOVE ""${OB_EXPORTS_FILE}""). # Place binaries and libraries in the root of the build directory; if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""; CACHE STRING ""Binary build output directory""); endif(); if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY); if(UNIX); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; CACHE",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:22307,Performance,optimiz,optimizations,22307,"s); execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf; ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.tar.gz; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}/external); message(STATUS ""Downloaded RapidJSON to ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}.""); endif(); set(RAPIDJSON_FOUND TRUE); set(RAPIDJSON_INCLUDE_DIRS ${openbabel_SOURCE_DIR}/external/rapidjson-${RAPIDJSON_VERSION}/include); endif(); if(RAPIDJSON_FOUND); message(STATUS ""JSON formats will be supported. Using RapidJSON ${RAPIDJSON_VERSION} at ${RAPIDJSON_INCLUDE_DIRS}""); add_definitions(-DHAVE_RADPIJSON); include_directories(${RAPIDJSON_INCLUDE_DIRS}); endif(); endif(). find_package(Cairo); if(CAIRO_FOUND); message(STATUS ""Cairo found. PNG output will be supported.""); else(CAIRO_FOUND); message(STATUS ""Could NOT find Cairo. PNG output will NOT be supported.""); endif(CAIRO_FOUND). # Should we enable optimizations for the native CPU architecture?; # (this will speed up JSON handling, similarity calculations and maybe those involving Eigen); option(OPTIMIZE_NATIVE ""Optimize for native CPU architecture. Turn off if compiling for distribution/reuse on other machines."" OFF); if(OPTIMIZE_NATIVE); include(OptimizeNative); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${NATIVE_FLAGS}""); # Tell rapidjson which extensions are available; if(HAVE_SSE2); add_definitions(-DRAPIDJSON_SSE2); endif(); if(HAVE_SSE4_2); add_definitions(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BU",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:10566,Safety,avoid,avoid,10566,"w check if we can use visibility to selectively export symbols; check_cxx_compiler_flag(-fvisibility=hidden HAVE_GCC_VISIBILITY); set(HAVE_GCC_VISIBILITY ${HAVE_GCC_VISIBILITY} CACHE BOOL ""GCC support for hidden visibility""); set(_GCC_COMPILED_WITH_BAD_ALLOCATOR FALSE); if(GCC_IS_NEWER_THAN_4_1); exec_program(${CMAKE_C_COMPILER} ARGS -v OUTPUT_VARIABLE _gcc_alloc_info); string(REGEX MATCH ""(--enable-libstdcxx-allocator=mt)"" _GCC_COMPILED_WITH_BAD_ALLOCATOR ""${_gcc_alloc_info}""); endif(); if(HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_2 AND ENABLE_SYMBOL_VISIBILITY; AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR); # We have all the parts necessary - use visibility support; add_definitions(-DHAVE_GCC_VISIBILITY); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden""); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); endif(); endif(). # To avoid warnings when linking the plugins and exes; if(MINGW); set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_MODULE_LINKER_FLAGS}""); set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_EXE_LINKER_FLAGS}""); endif(). message(STATUS ""Checking available shared pointer...""); include(CheckCXXSourceCompiles); check_cxx_source_compiles(""#include <memory>; int main(){ std::shared_ptr<int> p; return 0; }""; HAVE_STD_SHARED_PTR); check_cxx_source_compiles(""#include <memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR); check_cxx_source_compiles(""#include <tr1/memory>; int main(){ std::tr1::shared_ptr<int> p; return 0; }""; HAVE_STD_TR1_SHARED_PTR_IN_TR1_HEADER); if(HAVE_STD_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHARED_PTR); set(OB_SHARED_PTR_IMPLEMENTATION ""std::tr1::shared_ptr""); set(OB_SHARED_PTR_HEADER ""memory""); set(SHARED_POINTER true); add_definitions(-DHAVE_SHARED_POINTER); elseif(HAVE_STD_TR1_SHAR",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:8953,Testability,test,test,8953,"; return count;; }; "" SCANDIR_NEEDS_CONST). set(OB_MODULE_PATH ""${CMAKE_INSTALL_PREFIX}/${OB_PLUGIN_INSTALL_DIR}""). # Add some visibility support when using GCC; # note: Altough MinGW g++ 4.4 passes this test, visibility can't be used; if(CMAKE_COMPILER_IS_GNUCXX AND NOT APPLE); if(CMAKE_SYSTEM_NAME MATCHES Linux); set (CMAKE_SHARED_LINKER_FLAGS ""-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}""); set (CMAKE_SHARED_LINKER_FLAGS ""-Wl,--enable-new-dtags ${CMAKE_SHARED_LINKER_FLAGS}""); set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}""); set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--enable-new-dtags ${CMAKE_SHARED_LINKER_FLAGS}""); if(BUILD_SHARED); set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--fatal-warnings -Wl,--no-undefined -lc ${CMAKE_SHARED_LINKER_FLAGS}""); set (CMAKE_EXE_LINKER_FLAGS ""-Wl,--enable-new-dtags ${CMAKE_EXE_LINKER_FLAGS}""); endif(); endif (); # Now check if we can use visibility to selectively export symbols; check_cxx_compiler_flag(-fvisibility=hidden HAVE_GCC_VISIBILITY); set(HAVE_GCC_VISIBILITY ${HAVE_GCC_VISIBILITY} CACHE BOOL ""GCC support for hidden visibility""); set(_GCC_COMPILED_WITH_BAD_ALLOCATOR FALSE); if(GCC_IS_NEWER_THAN_4_1); exec_program(${CMAKE_C_COMPILER} ARGS -v OUTPUT_VARIABLE _gcc_alloc_info); string(REGEX MATCH ""(--enable-libstdcxx-allocator=mt)"" _GCC_COMPILED_WITH_BAD_ALLOCATOR ""${_gcc_alloc_info}""); endif(); if(HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_2 AND ENABLE_SYMBOL_VISIBILITY; AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR); # We have all the parts necessary - use visibility support; add_definitions(-DHAVE_GCC_VISIBILITY); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility=hidden""); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); endif(); endif(). # To avoid warnings when linking the plugins and exes; if(MINGW); set (CMAKE_MODULE_LINKER_FLAGS ""-Wl,--enable-auto-import ${CMAKE_MODULE_LINKER_FLAGS}""); set (CMAKE_EXE_LINKER_FLAGS ""-Wl,-",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:17289,Testability,test,test,17289,"_EIGEN); include_directories(${EIGEN2_INCLUDE_DIR}); endif(); endif(); #cjh. find_package(Boost COMPONENTS filesystem iostreams unit_test_framework); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); option(WITH_MAEPARSER ""Build Maestro support"" ON); if(BUILD_SHARED); option(WITH_COORDGEN ""Build Coordgen support"" ON); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(). if(WITH_MAEPARSER). find_package(maeparser MODULE QUIET). if (maeparser_FOUND). message(STATUS ""Maestro formats will be supported. Using MaeParser libraries at ${maeparser_LIBRARIES}.""). else(). set(MAEPARSER_VERSION ""v1.2.3"" CACHE STRING ""Maeparser fallback version to download""). set(MAEPARSER_DIR ""${openbabel_SOURCE_DIR}/external/maeparser-${MAEPARSER_VERSION}""). option(MAEPARSER_BUILD_SHARED_LIBS ""Build maeparser as a shared library"" ${BUILD_SHARED}). # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.; set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL ""Disable Maeparser tests""). if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt""). message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser"").",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:17362,Testability,test,test,17362,"_EIGEN); include_directories(${EIGEN2_INCLUDE_DIR}); endif(); endif(); #cjh. find_package(Boost COMPONENTS filesystem iostreams unit_test_framework); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); option(WITH_MAEPARSER ""Build Maestro support"" ON); if(BUILD_SHARED); option(WITH_COORDGEN ""Build Coordgen support"" ON); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(). if(WITH_MAEPARSER). find_package(maeparser MODULE QUIET). if (maeparser_FOUND). message(STATUS ""Maestro formats will be supported. Using MaeParser libraries at ${maeparser_LIBRARIES}.""). else(). set(MAEPARSER_VERSION ""v1.2.3"" CACHE STRING ""Maeparser fallback version to download""). set(MAEPARSER_DIR ""${openbabel_SOURCE_DIR}/external/maeparser-${MAEPARSER_VERSION}""). option(MAEPARSER_BUILD_SHARED_LIBS ""Build maeparser as a shared library"" ${BUILD_SHARED}). # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.; set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL ""Disable Maeparser tests""). if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt""). message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser"").",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:17436,Testability,test,tests,17436,"e(Boost COMPONENTS filesystem iostreams unit_test_framework); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); option(WITH_MAEPARSER ""Build Maestro support"" ON); if(BUILD_SHARED); option(WITH_COORDGEN ""Build Coordgen support"" ON); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(); else(); option(WITH_COORDGEN ""Build Coordgen support"" OFF); endif(). if(WITH_MAEPARSER). find_package(maeparser MODULE QUIET). if (maeparser_FOUND). message(STATUS ""Maestro formats will be supported. Using MaeParser libraries at ${maeparser_LIBRARIES}.""). else(). set(MAEPARSER_VERSION ""v1.2.3"" CACHE STRING ""Maeparser fallback version to download""). set(MAEPARSER_DIR ""${openbabel_SOURCE_DIR}/external/maeparser-${MAEPARSER_VERSION}""). option(MAEPARSER_BUILD_SHARED_LIBS ""Build maeparser as a shared library"" ${BUILD_SHARED}). # Do not build the test, as it will be put into the bin dir, where it won't be found by the test runner.; set(MAEPARSER_BUILD_TESTS OFF CACHE BOOL ""Disable Maeparser tests""). if(EXISTS ""${MAEPARSER_DIR}/maeparser/CMakeLists.txt""). message(STATUS ""Building existing MaeParser '${MAEPARSER_VERSION}' source at ${MAEPARSER_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/maeparser/archive/${MAEPARSER_VERSION}.tar.gz""; ""${MAEPARSER_DIR}/maeparser-${MAEPARSER_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""maeparser-${MAEPARSER_VERSION}.tar.gz""; WORKING_DIRECTORY ""${MAEPARSER_DIR}""). find_path(MAEPARSER_UNPACK_DIR ""CMakeLists.txt"" PATH ""${MAEPARSER_DIR}/*"" NO_DEFAULT_PATH). if(MAEPARSER_UNPACK_DIR); file(RENAME ""${MAEPARSER_UNPACK_DIR}"" ""${MAEPARSER_DIR}/maeparser""); message(STATUS ""Downloaded MaeParser '${MAEPARSER_VERSION}' to ${MAEPARSER_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Maeparser '${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). me",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:19256,Testability,test,tests,19256,"${MAEPARSER_VERSION}'.""); endif(). endif(). add_subdirectory(""${MAEPARSER_DIR}/maeparser""). set(maeparser_INCLUDE_DIRS ""${MAEPARSER_DIR}""); set(maeparser_LIBRARIES maeparser). message(STATUS ""Maestro formats will be supported. Using MaeParser '${MAEPARSER_VERSION}' at ${MAEPARSER_DIR}""). endif(). include_directories(${maeparser_INCLUDE_DIRS}); set(libs ${libs} ${maeparser_LIBRARIES}). else(); message(STATUS ""Maestro formats will NOT be supported. Please install Boost to enable Maestro formats.""); endif(). if(WITH_COORDGEN). find_package(coordgen MODULE QUIET). if (coordgen_FOUND). message(STATUS ""Coordinate generation with Coordgen will be supported. Using Coordgen libraries at ${coordgen_LIBRARIES}.""). else(). set(COORDGEN_VERSION ""master"" CACHE STRING ""Coordgen fallback version to download""). set(COORDGEN_DIR ""${openbabel_SOURCE_DIR}/external/coordgen-${COORDGEN_VERSION}""). # These won't work, since openbabel relocates them to the ""bin"" dir; set(COORDGEN_BUILD_TESTS OFF CACHE BOOL ""Disable building Coordgen tests""); set(COORDGEN_BUILD_EXAMPLE OFF CACHE BOOL ""Disable building Coordgen example""). if(EXISTS ""${COORDGEN_DIR}/coordgen/CMakeLists.txt""). message(STATUS ""Building existing Coordgen '${COORDGEN_VERSION}' source at ${COORDGEN_DIR}.""). else(). file(DOWNLOAD ""https://github.com/schrodinger/coordgenlibs/archive/${COORDGEN_VERSION}.tar.gz""; ""${COORDGEN_DIR}/coordgenlibs-${COORDGEN_VERSION}.tar.gz""). execute_process(COMMAND ${CMAKE_COMMAND} -E tar zxf ""coordgenlibs-${COORDGEN_VERSION}.tar.gz""; WORKING_DIRECTORY ""${COORDGEN_DIR}""). find_path(COORDGEN_UNPACK_DIR ""CMakeLists.txt"" PATH ""${COORDGEN_DIR}/*"" NO_DEFAULT_PATH). if(COORDGEN_UNPACK_DIR); file(RENAME ""${COORDGEN_UNPACK_DIR}"" ""${COORDGEN_DIR}/coordgen""); message(STATUS ""Downloaded Coordgen '${COORDGEN_VERSION}' to ${COORDGEN_DIR}.""); else(); message(FATAL_ERROR ""Failed getting or unpacking Coordgen '${COORDGEN_VERSION}'.""); endif(). endif(). add_subdirectory(""${COORDGEN_DIR}/coordgen""). set(coordgen_INCLUDE_DI",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:23770,Testability,test,tests,23770,"ons(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BUILD_GUI ""Build the GUI"" ON); endif(). if(BUILD_GUI); message(STATUS ""Attempting to build the GUI""); if(wxWidgets_FOUND); message(STATUS "" wxWidgets found => GUI will be built""); add_subdirectory(src/GUI); else(); message(STATUS "" wxWidgets not found => GUI will not be built""); endif(); else(); message(STATUS ""GUI will not be built""); endif(). # Do we want to build the tests?; option(ENABLE_TESTS ""Enable unit tests"" ON); if(ENABLE_TESTS); include(CTest); enable_testing(); add_subdirectory(test); endif(). # Should the language bindings be regenereted?; option(RUN_SWIG ""Generate language bindings with SWIG"" OFF). # Build bindings only; option(BINDINGS_ONLY ""Build bindings only"" OFF). # Point to library if building bindings only; set(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}; CACHE PATH ""Point to openbabel library if building bindings only""). # Should all bindings be built?; option(ALL_BINDINGS ""Build all languages bindings"" OFF). # Should PHP bindings be built; option(PHP_BINDINGS ""Build PHP bindings"" OFF). # Should Python bindings be built?; option(PYTHON_BINDINGS ""Build Python bindings"" OFF). # Should Ruby bindings be built?; option(RUBY_BINDINGS ""Build Ruby bindings"" OFF). # Should Perl bindings be built?; option(PERL_BINDINGS ""Build Perl bindings"" OFF). # Should Java bindings be built?; option(JAVA_BINDINGS ""Build Java bindings"" OFF). # Should R bindings be built?; option(R_BINDINGS ""Build R bindings"" OFF)",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:23811,Testability,test,tests,23811,"ons(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BUILD_GUI ""Build the GUI"" ON); endif(). if(BUILD_GUI); message(STATUS ""Attempting to build the GUI""); if(wxWidgets_FOUND); message(STATUS "" wxWidgets found => GUI will be built""); add_subdirectory(src/GUI); else(); message(STATUS "" wxWidgets not found => GUI will not be built""); endif(); else(); message(STATUS ""GUI will not be built""); endif(). # Do we want to build the tests?; option(ENABLE_TESTS ""Enable unit tests"" ON); if(ENABLE_TESTS); include(CTest); enable_testing(); add_subdirectory(test); endif(). # Should the language bindings be regenereted?; option(RUN_SWIG ""Generate language bindings with SWIG"" OFF). # Build bindings only; option(BINDINGS_ONLY ""Build bindings only"" OFF). # Point to library if building bindings only; set(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}; CACHE PATH ""Point to openbabel library if building bindings only""). # Should all bindings be built?; option(ALL_BINDINGS ""Build all languages bindings"" OFF). # Should PHP bindings be built; option(PHP_BINDINGS ""Build PHP bindings"" OFF). # Should Python bindings be built?; option(PYTHON_BINDINGS ""Build Python bindings"" OFF). # Should Ruby bindings be built?; option(RUBY_BINDINGS ""Build Ruby bindings"" OFF). # Should Perl bindings be built?; option(PERL_BINDINGS ""Build Perl bindings"" OFF). # Should Java bindings be built?; option(JAVA_BINDINGS ""Build Java bindings"" OFF). # Should R bindings be built?; option(R_BINDINGS ""Build R bindings"" OFF)",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt:23892,Testability,test,test,23892,"ons(-DRAPIDJSON_SSE42); endif(); if(HAVE_NEON); add_definitions(-DRAPIDJSON_NEON); endif(); add_definitions(-DOPTIMIZE_NATIVE); message(STATUS ""Optimizing code for this machine's CPU architecture. Use -DOPTIMIZE_NATIVE=OFF if compiling for distribution/reuse on other machines.""); endif(). add_subdirectory(include); add_subdirectory(data); add_subdirectory(doc); add_subdirectory(src); add_subdirectory(tools). # Should we build the GUI? Default is yes on Linux or Windows, not Mac.; if (APPLE OR NOT BUILD_SHARED); option(BUILD_GUI ""Build the GUI"" OFF); else (); option(BUILD_GUI ""Build the GUI"" ON); endif(). if(BUILD_GUI); message(STATUS ""Attempting to build the GUI""); if(wxWidgets_FOUND); message(STATUS "" wxWidgets found => GUI will be built""); add_subdirectory(src/GUI); else(); message(STATUS "" wxWidgets not found => GUI will not be built""); endif(); else(); message(STATUS ""GUI will not be built""); endif(). # Do we want to build the tests?; option(ENABLE_TESTS ""Enable unit tests"" ON); if(ENABLE_TESTS); include(CTest); enable_testing(); add_subdirectory(test); endif(). # Should the language bindings be regenereted?; option(RUN_SWIG ""Generate language bindings with SWIG"" OFF). # Build bindings only; option(BINDINGS_ONLY ""Build bindings only"" OFF). # Point to library if building bindings only; set(BABEL_SYSTEM_LIBRARY ${BABEL_LIBRARY}; CACHE PATH ""Point to openbabel library if building bindings only""). # Should all bindings be built?; option(ALL_BINDINGS ""Build all languages bindings"" OFF). # Should PHP bindings be built; option(PHP_BINDINGS ""Build PHP bindings"" OFF). # Should Python bindings be built?; option(PYTHON_BINDINGS ""Build Python bindings"" OFF). # Should Ruby bindings be built?; option(RUBY_BINDINGS ""Build Ruby bindings"" OFF). # Should Perl bindings be built?; option(PERL_BINDINGS ""Build Perl bindings"" OFF). # Should Java bindings be built?; option(JAVA_BINDINGS ""Build Java bindings"" OFF). # Should R bindings be built?; option(R_BINDINGS ""Build R bindings"" OFF)",MatchSource.DOCS,CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/atomization-energies.txt:6,Energy Efficiency,charge,charge,6,#atom|charge|method|property|T(K)|Value|spin multiplicity|unit|reference|; Al|0|exp|H(0)-H(T)|0|0|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|0|0|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|100|0.483|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|100|6.987|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|200|2.285|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|200|19.144|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|298.15|4.539|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|298.15|28.275|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|300|4.584|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|300|28.425|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|400|7.092|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|400|35.63|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|500|9.725|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|500|41.501|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|600|12.46|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|600|46.485|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|700|15.308|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|700|50.872|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|800|18.288|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|800|54.85|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|900|21.429|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|900|58.548|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|933.450|22.521|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|933.450|59.738|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|933.450|33.232|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|933.450|71.213|2|J/mol K|http://kinetics.nist.gov/janaf|; Al|0|exp|H(0)-H(T)|1000|35.345|2|kJ/mol|http://kinetics.nist.gov/janaf|; Al|0|exp|S0(T)|1000|73,MatchSource.DOCS,data/atomization-energies.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/atomization-energies.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/atomtyp.txt:3623,Deployability,patch,patch,3623,", like sp hybrids; INTHYB [Mg] 1; INTHYB [Ca] 1; INTHYB [Sr] 1; INTHYB [Ba] 1; INTHYB [Ra] 1. #INTHYB [Pt] 4 # normally square planar; #INTHYB [Pd] 4; #INTHYB [Cu] 4; #INTHYB [Ag] 4; #INTHYB [Au] 4. #; #IMPLICIT VALENCE RULES; #; #IMPVAL [#3,#11,#19,#37,#55,#87] 1 # Alkali metals; #IMPVAL [#4,#12,#20,#38,#56,#88] 2 # Alkaline earth. IMPVAL [#5+] 2; IMPVAL [#5-] 4; IMPVAL [#5] 3 # Generic boron; IMPVAL [$([#6+]=*)]		 2; IMPVAL [$([#6+]#*)]		 1 # just for InChI C2. IMPVAL [#6^3] 4; IMPVAL [#6^2] 3; IMPVAL [#6^1] 2; IMPVAL [#6^3+] 3; IMPVAL [#6^2+] 2; IMPVAL [#6^1+] 1. IMPVAL [#6^3-] 3; IMPVAL [#6^2-] 2; IMPVAL [#6^1-] 1 # isocyanides, CO (valence=1, bond order=3); IMPVAL [c+] 2. IMPVAL [N^3] 3; IMPVAL [N^3+] 4; IMPVAL [N^2] 3; #IMPVAL [N^2-,N^3-] 2; IMPVAL [ND1^1] 1; IMPVAL [ND2^1] 2; IMPVAL [$(N([OD1])*)] 3; IMPVAL [$(NC=O)] 3; #IMPVAL [$(n(c=O)c=O)] 3 # aromatic diimide; IMPVAL [$(N(~[OD1])~[OD1])] 3; IMPVAL [$([Nr0]C=[Nr0])] 3; IMPVAL [$(N=*)] 2; #IMPVAL [$([Nr0]=C[Nr0])] 3; IMPVAL [$([Nr0]=C[Nr0])] 2; IMPVAL [$([N+r0]=C[Nr0])] 3 # patch from Steve Constable; IMPVAL [$([#7D1-]=*)] 1; IMPVAL [N^1-] 1 # N2O [N-]=[N+]=O (valence=1, bondorder=2); IMPVAL [N-] 2; IMPVAL [n] 2; IMPVAL [n-] 2; IMPVAL [n+] 3; IMPVAL [$([#7-]=*)] 1; IMPVAL [$([#7+]#*)] 2; IMPVAL [$([#7+]=*)] 3; IMPVAL [$([#7+](=*)=*)] 2. IMPVAL [#8] 2 # Generic O; IMPVAL [#8-] 1; IMPVAL [#8-2] 0; IMPVAL [#8+] 3; IMPVAL [$([#8]=*)] 1; IMPVAL [#8^1+] 1 # carbon monoxide; IMPVAL [$([#8]#*)] 1. IMPVAL [#9D0] 1; IMPVAL [#9D0-] 0 #[F-]. IMPVAL [#13] 3 # generic Al. IMPVAL [#14] 4 # regular sp3 Si; IMPVAL [#14^2] 2 # silylenes; IMPVAL [$([#14]=*)] 3 # e.g., Si=O; IMPVAL [$([#14](=*)=*)] 0 # e.g., Si(=O)=O; IMPVAL [$([#14+]#*)]		 1 # just for InChI Si2; IMPVAL [$([#14-]#*)]		 1 # just for InChI Si2. IMPVAL [#15D4] 4; IMPVAL [#15D3] 3; IMPVAL [#15D2] 3; IMPVAL [#15D1^3] 3; IMPVAL [#15D1^2] 3; IMPVAL [#15D0] 3; IMPVAL [$([#15]=[#6])] 2; IMPVAL [pD2] 2; IMPVAL [$([#15]=[#8])] 4 # phosphinate (double bond = one valence);",MatchSource.DOCS,data/atomtyp.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/atomtyp.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/bondtyp.txt:3472,Energy Efficiency,charge,charge,3472,"([#8D1])([*!#8])([*!#8]) 	0 1 2 0 2 2 0 3 1 0 4 1; # Sulfates; [#16D4]([#8D1])([#8D1])([#8-,#8D1])([#8-,#8D1])	0 1 2 0 2 2 0 3 1 0 4 1; # Thiosulfates; [#16D4]([#16D1])([#8D1])([#8-,#8])([#8-,#8])	0 1 2 0 2 2 0 3 1 0 4 1; # Sulfoxides; [#16D3]([#8D1])([*!#8])([*!#8])			0 1 2 0 2 1 0 3 1; # Sulfite; [#16D3]([#8D1])([#8D1-])([#8D1-])		0 1 2 0 2 1 0 3 1; # Sulfur trioxide; [#16D3]([#8D1])([#8D1])([#8D1])			0 1 2 0 2 2 0 3 2; # Sulfites; [#16D3]([#8D1])([#8])([#8])			0 1 2 0 2 1 0 3 1; # Disulfur monoxide; [#16D2]([#8D1])([#16D1])			0 1 2 0 2 2; # Sulfmonoxides; [#16D2]([#8D1])([*!#8])				0 1 2 0 2 1; # Sulfur dioxide; [#16D2]([#8D1])([#8D1])				0 1 2 0 2 2. #Phosphite; [#15D3]([#8D1])([#8D1])([#8D2])		0 1 2 0 2 2 0 3 1. #oxophosphane; #[#15D2]([#8D1])([#1]) 0 1 2 0 2 1. #Nitrosyl Hydride; [#7D2]([#8D1])([#1])		0 1 2 0 2 1. # Phosphone; [#15D4]([#8D1])(*)(*)(*)	0 1 2 0 2 1 0 3 1 0 4 1. # Carboxylic Acid, ester, etc.; [#6D3^2]([#8D1])([#8])*		0 1 2 0 2 1 0 3 1; # Carbon dioxide; [#8D1][#6D2^1][#8D1]		0 1 2 1 2 2; # Amide C(=O)N - no negative charge on O (2aix_u1k.sdf); [#6D3^2]([#8D1;!-])([#7])*		0 1 2 0 2 1 0 3 1; # Seleninic acid Se(=O)OH; [#34D3^2]([#8D1])([#8])*		0 1 2 0 2 1 0 3 1; # Thioacid / Thioester C(=O)S; [#6D3^2]([#8D1])([#16])*		0 1 2 0 2 1 0 3 1; # dithioacid / dithioester C(=S)S; [#6D3^2]([#16D1])([#16])*		0 1 2 0 2 1 0 3 1; # thioamide C(=S)N; # avoid aromatics (pdb_ligands_sdf/1yry_msg.sdf); [CD3^2]([#16D1])([N])*		0 1 2 0 2 1 0 3 1. # allene C=C=C; # (this is problematic -- need to make sure the center carbon is sp); [#6^2][#6D2^1][#6^2]		0 1 2 1 2 2; # ene-one C=C=O; [#6^2][#6D2^1][#8D1]		0 1 2 1 2 2 . # isonitrile / isocyano; [#6D1][#7D2^1]* 0 1 3 1 2 1; # NR2 in ring with hybridized carbon neighbors, do not apply to aromatic N; # valence insted of degree used to fix pdb_ligands_sdf/3dcv_55e.sdf; [Nv2R][#6v3^2][#8v2] 0 1 2 1 2 1; [Nv2R][#6v3^2][Nv2] 0 1 2 1 2 1. # if three N are present in R-N-guanidine-ish, prefer double bond to the; # non-terminal N",MatchSource.DOCS,data/bondtyp.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/bondtyp.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/bondtyp.txt:963,Safety,avoid,avoid,963,"Geoffrey R Hutchison #; # Part of the Open Babel package, under the GNU General Public License (GPL)#; # #; # Used by bondtyper.cpp::OBBondTyper (and thus OBMol::PerceiveBondOrders() #; # #; # List of functional groups with double, triple (etc.) bond orders #; # Pattern Atom1 Atom2 Bond Order (repeat as needed) #; # * = Any atom (for setting non-multiple bonds) #; # #; # NOTE: These are applied in order, first to last. #; # So it's generally better to have a long (specifc) SMARTS first. #; # (all bonds must be single bonds to match) #; # #; ##############################################################################. # Porphyrin / phthalocyanine (3 patterns for three separate bonding motifs); # this one has explicit bonds to all four nitrogens (e.g., metal bond or hydrogens); # X2,X3 is needed to avoid mis-typing coproporphyrinogen; #0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23; [X2,X3]1[#6]([#7D3]2)[#6][#6][#6]2[X2,X3][#6]([#7D3]3)[#6][#6][#6]3[X2,X3][#6]([#7D3]4)[#6][#6][#6]4[X2,X3][#6]([#7D3]5)[#6][#6][#6]51	0 1 2 1 2 1 1 3 1 3 4 2 4 5 1 5 2 1 5 6 2 6 7 1 7 8 2 7 9 1 9 10 2 10 11 1 11 8 1 11 12 2 12 13 1 13 14 1 13 15 2 15 16 1 16 17 2 17 14 1 17 18 1 18 19 2 19 20 1 19 21 1 21 22 2 22 23 1 23 20 2. # this one has explicit bonds to two nitrogens (12 and 14); #0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23; [X2,X3]1[#6]([#7D3]2)[#6][#6][#6]2[X2,X3][#6]([#7]3)[#6][#6][#6]3[X2,X3][#6]([#7D3]4)[#6][#6][#6]4[X2,X3][#6]([#7]5)[#6][#6][#6]51	0 1 2 1 2 1 1 3 1 3 4 2 4 5 1 5 2 1 5 6 2 6 7 1 7 8 2 7 9 1 9 10 2 10 11 1 11 8 1 11 12 2 12 13 1 13 14 1 13 15 2 15 16 1 16 17 2 17 14 1 17 18 1 18 19 2 19 20 1 19 21 1 21 22 2 22 23 1 23 20 2. # and this one doesn't have any explicit bonds to the nitrogens; #0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23; [X2,X3]1[#6]([#7]2)[#6][#6][#6]2[X2,X3][#6]([#7]3)[#6][#6][#6]3[X2,X3][#6]([#7]4)[#6][#6][#6]4[X2,X3][#6]([#7]5)[#6][#6][#6]51	0 1 2 1 2 1 1 3 1 3 4 2 4 5 1 5 2 1 5 6 2 6 7 1 7 8 2 ",MatchSource.DOCS,data/bondtyp.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/bondtyp.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/bondtyp.txt:3798,Safety,avoid,avoid,3798,"1])([*!#8])([*!#8])			0 1 2 0 2 1 0 3 1; # Sulfite; [#16D3]([#8D1])([#8D1-])([#8D1-])		0 1 2 0 2 1 0 3 1; # Sulfur trioxide; [#16D3]([#8D1])([#8D1])([#8D1])			0 1 2 0 2 2 0 3 2; # Sulfites; [#16D3]([#8D1])([#8])([#8])			0 1 2 0 2 1 0 3 1; # Disulfur monoxide; [#16D2]([#8D1])([#16D1])			0 1 2 0 2 2; # Sulfmonoxides; [#16D2]([#8D1])([*!#8])				0 1 2 0 2 1; # Sulfur dioxide; [#16D2]([#8D1])([#8D1])				0 1 2 0 2 2. #Phosphite; [#15D3]([#8D1])([#8D1])([#8D2])		0 1 2 0 2 2 0 3 1. #oxophosphane; #[#15D2]([#8D1])([#1]) 0 1 2 0 2 1. #Nitrosyl Hydride; [#7D2]([#8D1])([#1])		0 1 2 0 2 1. # Phosphone; [#15D4]([#8D1])(*)(*)(*)	0 1 2 0 2 1 0 3 1 0 4 1. # Carboxylic Acid, ester, etc.; [#6D3^2]([#8D1])([#8])*		0 1 2 0 2 1 0 3 1; # Carbon dioxide; [#8D1][#6D2^1][#8D1]		0 1 2 1 2 2; # Amide C(=O)N - no negative charge on O (2aix_u1k.sdf); [#6D3^2]([#8D1;!-])([#7])*		0 1 2 0 2 1 0 3 1; # Seleninic acid Se(=O)OH; [#34D3^2]([#8D1])([#8])*		0 1 2 0 2 1 0 3 1; # Thioacid / Thioester C(=O)S; [#6D3^2]([#8D1])([#16])*		0 1 2 0 2 1 0 3 1; # dithioacid / dithioester C(=S)S; [#6D3^2]([#16D1])([#16])*		0 1 2 0 2 1 0 3 1; # thioamide C(=S)N; # avoid aromatics (pdb_ligands_sdf/1yry_msg.sdf); [CD3^2]([#16D1])([N])*		0 1 2 0 2 1 0 3 1. # allene C=C=C; # (this is problematic -- need to make sure the center carbon is sp); [#6^2][#6D2^1][#6^2]		0 1 2 1 2 2; # ene-one C=C=O; [#6^2][#6D2^1][#8D1]		0 1 2 1 2 2 . # isonitrile / isocyano; [#6D1][#7D2^1]* 0 1 3 1 2 1; # NR2 in ring with hybridized carbon neighbors, do not apply to aromatic N; # valence insted of degree used to fix pdb_ligands_sdf/3dcv_55e.sdf; [Nv2R][#6v3^2][#8v2] 0 1 2 1 2 1; [Nv2R][#6v3^2][Nv2] 0 1 2 1 2 1. # if three N are present in R-N-guanidine-ish, prefer double bond to the; # non-terminal N (i.e. D2 if present); [#6D3^2;!R]([#7D2;!R])([#7D1;!R])~[#7D1;!R] 0 1 2 0 2 1 0 3 1; # guanidinium and amidine -C(=NH)NH2 without hydrogens; [#6D3^2;!R]([#7D1H0;!R])([#7;!R])*	0 1 2 0 2 1 0 3 1; # and also with hydrogens; # (this can normally be f",MatchSource.DOCS,data/bondtyp.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/bondtyp.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/bondtyp.txt:4696,Safety,avoid,avoid,4696,"D1])([#8D1])([#8D2])		0 1 2 0 2 2 0 3 1. #oxophosphane; #[#15D2]([#8D1])([#1]) 0 1 2 0 2 1. #Nitrosyl Hydride; [#7D2]([#8D1])([#1])		0 1 2 0 2 1. # Phosphone; [#15D4]([#8D1])(*)(*)(*)	0 1 2 0 2 1 0 3 1 0 4 1. # Carboxylic Acid, ester, etc.; [#6D3^2]([#8D1])([#8])*		0 1 2 0 2 1 0 3 1; # Carbon dioxide; [#8D1][#6D2^1][#8D1]		0 1 2 1 2 2; # Amide C(=O)N - no negative charge on O (2aix_u1k.sdf); [#6D3^2]([#8D1;!-])([#7])*		0 1 2 0 2 1 0 3 1; # Seleninic acid Se(=O)OH; [#34D3^2]([#8D1])([#8])*		0 1 2 0 2 1 0 3 1; # Thioacid / Thioester C(=O)S; [#6D3^2]([#8D1])([#16])*		0 1 2 0 2 1 0 3 1; # dithioacid / dithioester C(=S)S; [#6D3^2]([#16D1])([#16])*		0 1 2 0 2 1 0 3 1; # thioamide C(=S)N; # avoid aromatics (pdb_ligands_sdf/1yry_msg.sdf); [CD3^2]([#16D1])([N])*		0 1 2 0 2 1 0 3 1. # allene C=C=C; # (this is problematic -- need to make sure the center carbon is sp); [#6^2][#6D2^1][#6^2]		0 1 2 1 2 2; # ene-one C=C=O; [#6^2][#6D2^1][#8D1]		0 1 2 1 2 2 . # isonitrile / isocyano; [#6D1][#7D2^1]* 0 1 3 1 2 1; # NR2 in ring with hybridized carbon neighbors, do not apply to aromatic N; # valence insted of degree used to fix pdb_ligands_sdf/3dcv_55e.sdf; [Nv2R][#6v3^2][#8v2] 0 1 2 1 2 1; [Nv2R][#6v3^2][Nv2] 0 1 2 1 2 1. # if three N are present in R-N-guanidine-ish, prefer double bond to the; # non-terminal N (i.e. D2 if present); [#6D3^2;!R]([#7D2;!R])([#7D1;!R])~[#7D1;!R] 0 1 2 0 2 1 0 3 1; # guanidinium and amidine -C(=NH)NH2 without hydrogens; [#6D3^2;!R]([#7D1H0;!R])([#7;!R])*	0 1 2 0 2 1 0 3 1; # and also with hydrogens; # (this can normally be figured out, but is needed to avoid matching the next SMARTS); [#6D3^2;!R]([#7D2H1;!R])([#7;!R])*	0 1 2 0 2 1 0 3 1; # and also with more hydrogens than normal (protonated); [#6D3^2;!R]([#7D3H2;!R])([#7;!R])*	0 1 2 0 2 1 0 3 1. # Schiff base, protonated; [#6D3^2;!R]([#1,#6])([#1,#6])[#7D3^2;!R]([#1])[#6]	0 1 1 0 2 1 0 3 2 3 4 1 3 5 1. ### other potential functional groups that may (or may not) be useful to add; # imidines ( N=C/N\C=N; ",MatchSource.DOCS,data/bondtyp.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/bondtyp.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/CMakeLists.txt:828,Deployability,install,install,828,# Open Babel data files. set(to_install; atomization-energies.txt; atomtyp.txt; babel_povray3.inc; bondtyp.txt; eem.txt; eem2015ba.txt; eem2015bm.txt; eem2015bn.txt; eem2015ha.txt; eem2015hm.txt; eem2015hn.txt; eqeqIonizations.txt; gaff.dat; gaff.prm; ghemical.prm; logp.txt; MACCS.txt; mmff94.ff; mmff94s.ff; mmffang.par; mmffbndk.par; mmffbond.par; mmffchg.par; mmffdef.par; mmffdfsb.par; mmffoop.par; mmffpbci.par; mmffprop.par; mmffstbn.par; mmfftor.par; mmffvdw.par; mmffs_oop.par; mmffs_tor.par; mpC.txt; mr.txt; patterns.txt; phmodel.txt; plugindefines.txt; psa.txt; qeq.txt; resdata.txt; rigid-fragments.txt; rigid-fragments-index.txt; ring-fragments.txt; ringtyp.txt; SMARTS_InteLigand.txt; space-groups.txt; superatom.txt; svgformat.script; templates.sdf; torlib.txt; torsion.txt; types.txt; UFF.prm; ). if(NOT MSVC); install(FILES ${to_install} DESTINATION share/openbabel/${BABEL_VERSION}); else(NOT MSVC); install(FILES ${to_install} DESTINATION bin/data); endif(NOT MSVC); ,MatchSource.DOCS,data/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/CMakeLists.txt:919,Deployability,install,install,919,# Open Babel data files. set(to_install; atomization-energies.txt; atomtyp.txt; babel_povray3.inc; bondtyp.txt; eem.txt; eem2015ba.txt; eem2015bm.txt; eem2015bn.txt; eem2015ha.txt; eem2015hm.txt; eem2015hn.txt; eqeqIonizations.txt; gaff.dat; gaff.prm; ghemical.prm; logp.txt; MACCS.txt; mmff94.ff; mmff94s.ff; mmffang.par; mmffbndk.par; mmffbond.par; mmffchg.par; mmffdef.par; mmffdfsb.par; mmffoop.par; mmffpbci.par; mmffprop.par; mmffstbn.par; mmfftor.par; mmffvdw.par; mmffs_oop.par; mmffs_tor.par; mpC.txt; mr.txt; patterns.txt; phmodel.txt; plugindefines.txt; psa.txt; qeq.txt; resdata.txt; rigid-fragments.txt; rigid-fragments-index.txt; ring-fragments.txt; ringtyp.txt; SMARTS_InteLigand.txt; space-groups.txt; superatom.txt; svgformat.script; templates.sdf; torlib.txt; torsion.txt; types.txt; UFF.prm; ). if(NOT MSVC); install(FILES ${to_install} DESTINATION share/openbabel/${BABEL_VERSION}); else(NOT MSVC); install(FILES ${to_install} DESTINATION bin/data); endif(NOT MSVC); ,MatchSource.DOCS,data/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/CMakeLists.txt:546,Modifiability,plugin,plugindefines,546,# Open Babel data files. set(to_install; atomization-energies.txt; atomtyp.txt; babel_povray3.inc; bondtyp.txt; eem.txt; eem2015ba.txt; eem2015bm.txt; eem2015bn.txt; eem2015ha.txt; eem2015hm.txt; eem2015hn.txt; eqeqIonizations.txt; gaff.dat; gaff.prm; ghemical.prm; logp.txt; MACCS.txt; mmff94.ff; mmff94s.ff; mmffang.par; mmffbndk.par; mmffbond.par; mmffchg.par; mmffdef.par; mmffdfsb.par; mmffoop.par; mmffpbci.par; mmffprop.par; mmffstbn.par; mmfftor.par; mmffvdw.par; mmffs_oop.par; mmffs_tor.par; mpC.txt; mr.txt; patterns.txt; phmodel.txt; plugindefines.txt; psa.txt; qeq.txt; resdata.txt; rigid-fragments.txt; rigid-fragments-index.txt; ring-fragments.txt; ringtyp.txt; SMARTS_InteLigand.txt; space-groups.txt; superatom.txt; svgformat.script; templates.sdf; torlib.txt; torsion.txt; types.txt; UFF.prm; ). if(NOT MSVC); install(FILES ${to_install} DESTINATION share/openbabel/${BABEL_VERSION}); else(NOT MSVC); install(FILES ${to_install} DESTINATION bin/data); endif(NOT MSVC); ,MatchSource.DOCS,data/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/CMakeLists.txt:266,Testability,log,logp,266,# Open Babel data files. set(to_install; atomization-energies.txt; atomtyp.txt; babel_povray3.inc; bondtyp.txt; eem.txt; eem2015ba.txt; eem2015bm.txt; eem2015bn.txt; eem2015ha.txt; eem2015hm.txt; eem2015hn.txt; eqeqIonizations.txt; gaff.dat; gaff.prm; ghemical.prm; logp.txt; MACCS.txt; mmff94.ff; mmff94s.ff; mmffang.par; mmffbndk.par; mmffbond.par; mmffchg.par; mmffdef.par; mmffdfsb.par; mmffoop.par; mmffpbci.par; mmffprop.par; mmffstbn.par; mmfftor.par; mmffvdw.par; mmffs_oop.par; mmffs_tor.par; mpC.txt; mr.txt; patterns.txt; phmodel.txt; plugindefines.txt; psa.txt; qeq.txt; resdata.txt; rigid-fragments.txt; rigid-fragments-index.txt; ring-fragments.txt; ringtyp.txt; SMARTS_InteLigand.txt; space-groups.txt; superatom.txt; svgformat.script; templates.sdf; torlib.txt; torsion.txt; types.txt; UFF.prm; ). if(NOT MSVC); install(FILES ${to_install} DESTINATION share/openbabel/${BABEL_VERSION}); else(NOT MSVC); install(FILES ${to_install} DESTINATION bin/data); endif(NOT MSVC); ,MatchSource.DOCS,data/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/eqeqIonizations.txt:217,Availability,redundant,redundant,217,#; # Open Babel file: eqeqIonizations.txt; #; # Additional ionization energies for elements used by EQeq.; # Also contains common metal ion charges and electron affinities.; #; # Note that some of this information is redundant with OBElementTable. TODO fix.; #; # Parameters:; # Num: Atomic number; # Symbol: Element symbol; # Charge: Common charge of ionized metals (0 if nonmetal); # Affinity: Element electron affinity; # Ionizations: Nth ionization of atom (-1 if does not exist); #; # Num Symbol Charge Affinity Ionizations; 1	H	0	0.7542	13.598	-1	-1	-1	-1	-1	-1	-1; 2	He	0	0	24.587	54.416	-1	-1	-1	-1	-1	-1; 3	Li	1	0.61805	5.392	75.638	122.451	-1	-1	-1	-1	-1; 4	Be	2	0	9.322	18.211	153.893	217.713	-1	-1	-1	-1; 5	B	0	0.27972	8.298	25.154	37.93	259.368	340.217	-1	-1	-1; 6	C	0	1.26212	11.26	24.383	47.887	64.492	392.077	489.981	-1	-1; 7	N	0	-0.07	14.534	29.601	47.448	77.472	97.888	552.057	667.029	-1; 8	O	0	1.46111	13.618	35.116	54.934	77.412	113.896	138.116	739.315	871.387; 9	F	0	3.40119	17.422	34.97	62.707	87.138	114.24	157.161	185.182	953.886; 10	Ne	0	0	21.564	40.962	63.45	97.11	126.21	157.93	207.27	239.09; 11	Na	1	0.54793	5.139	47.286	71.64	98.91	138.39	172.15	208.47	264.18; 12	Mg	2	0	7.646	15.035	80.143	109.24	141.26	186.5	224.94	265.9; 13	Al	3	0.43283	5.986	18.828	28.447	119.99	153.71	190.47	241.43	284.59; 14	Si	0	1.38952	8.151	16.345	33.492	45.141	166.77	205.05	246.52	303.17; 15	P	0	0.7465	10.458	19.725	30.18	51.37	65.023	220.43	263.22	309.41; 16	S	0	2.0771	10.36	23.33	34.83	47.3	72.68	88.049	280.93	328.23; 17	Cl	0	3.61272	12.967	23.81	39.61	53.46	67.8	97.03	114.193	348.28; 18	Ar	0	0	15.759	27.629	40.74	59.81	75.02	91.007	124.319	143.456; 19	K	1	0.50146	4.341	31.625	45.72	60.91	82.66	100	117.56	154.86; 20	Ca	2	0.02455	6.113	11.871	50.908	67.1	84.41	108.78	127.7	147.24; 21	Sc	3	0.188	6.54	12.8	24.76	73.47	91.66	111.1	138	158.7; 22	Ti	3	0.084	6.82	13.58	27.491	43.266	99.22	119.36	140.8	168.5; 23	V	3	0.525	6.74	14.65	29.31	46.707	65.23	128.12	150.17	173.7; 24	Cr	2	0.6758,MatchSource.DOCS,data/eqeqIonizations.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/eqeqIonizations.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/eqeqIonizations.txt:140,Energy Efficiency,charge,charges,140,#; # Open Babel file: eqeqIonizations.txt; #; # Additional ionization energies for elements used by EQeq.; # Also contains common metal ion charges and electron affinities.; #; # Note that some of this information is redundant with OBElementTable. TODO fix.; #; # Parameters:; # Num: Atomic number; # Symbol: Element symbol; # Charge: Common charge of ionized metals (0 if nonmetal); # Affinity: Element electron affinity; # Ionizations: Nth ionization of atom (-1 if does not exist); #; # Num Symbol Charge Affinity Ionizations; 1	H	0	0.7542	13.598	-1	-1	-1	-1	-1	-1	-1; 2	He	0	0	24.587	54.416	-1	-1	-1	-1	-1	-1; 3	Li	1	0.61805	5.392	75.638	122.451	-1	-1	-1	-1	-1; 4	Be	2	0	9.322	18.211	153.893	217.713	-1	-1	-1	-1; 5	B	0	0.27972	8.298	25.154	37.93	259.368	340.217	-1	-1	-1; 6	C	0	1.26212	11.26	24.383	47.887	64.492	392.077	489.981	-1	-1; 7	N	0	-0.07	14.534	29.601	47.448	77.472	97.888	552.057	667.029	-1; 8	O	0	1.46111	13.618	35.116	54.934	77.412	113.896	138.116	739.315	871.387; 9	F	0	3.40119	17.422	34.97	62.707	87.138	114.24	157.161	185.182	953.886; 10	Ne	0	0	21.564	40.962	63.45	97.11	126.21	157.93	207.27	239.09; 11	Na	1	0.54793	5.139	47.286	71.64	98.91	138.39	172.15	208.47	264.18; 12	Mg	2	0	7.646	15.035	80.143	109.24	141.26	186.5	224.94	265.9; 13	Al	3	0.43283	5.986	18.828	28.447	119.99	153.71	190.47	241.43	284.59; 14	Si	0	1.38952	8.151	16.345	33.492	45.141	166.77	205.05	246.52	303.17; 15	P	0	0.7465	10.458	19.725	30.18	51.37	65.023	220.43	263.22	309.41; 16	S	0	2.0771	10.36	23.33	34.83	47.3	72.68	88.049	280.93	328.23; 17	Cl	0	3.61272	12.967	23.81	39.61	53.46	67.8	97.03	114.193	348.28; 18	Ar	0	0	15.759	27.629	40.74	59.81	75.02	91.007	124.319	143.456; 19	K	1	0.50146	4.341	31.625	45.72	60.91	82.66	100	117.56	154.86; 20	Ca	2	0.02455	6.113	11.871	50.908	67.1	84.41	108.78	127.7	147.24; 21	Sc	3	0.188	6.54	12.8	24.76	73.47	91.66	111.1	138	158.7; 22	Ti	3	0.084	6.82	13.58	27.491	43.266	99.22	119.36	140.8	168.5; 23	V	3	0.525	6.74	14.65	29.31	46.707	65.23	128.12	150.17	173.7; 24	Cr	2	0.6758,MatchSource.DOCS,data/eqeqIonizations.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/eqeqIonizations.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/eqeqIonizations.txt:342,Energy Efficiency,charge,charge,342,#; # Open Babel file: eqeqIonizations.txt; #; # Additional ionization energies for elements used by EQeq.; # Also contains common metal ion charges and electron affinities.; #; # Note that some of this information is redundant with OBElementTable. TODO fix.; #; # Parameters:; # Num: Atomic number; # Symbol: Element symbol; # Charge: Common charge of ionized metals (0 if nonmetal); # Affinity: Element electron affinity; # Ionizations: Nth ionization of atom (-1 if does not exist); #; # Num Symbol Charge Affinity Ionizations; 1	H	0	0.7542	13.598	-1	-1	-1	-1	-1	-1	-1; 2	He	0	0	24.587	54.416	-1	-1	-1	-1	-1	-1; 3	Li	1	0.61805	5.392	75.638	122.451	-1	-1	-1	-1	-1; 4	Be	2	0	9.322	18.211	153.893	217.713	-1	-1	-1	-1; 5	B	0	0.27972	8.298	25.154	37.93	259.368	340.217	-1	-1	-1; 6	C	0	1.26212	11.26	24.383	47.887	64.492	392.077	489.981	-1	-1; 7	N	0	-0.07	14.534	29.601	47.448	77.472	97.888	552.057	667.029	-1; 8	O	0	1.46111	13.618	35.116	54.934	77.412	113.896	138.116	739.315	871.387; 9	F	0	3.40119	17.422	34.97	62.707	87.138	114.24	157.161	185.182	953.886; 10	Ne	0	0	21.564	40.962	63.45	97.11	126.21	157.93	207.27	239.09; 11	Na	1	0.54793	5.139	47.286	71.64	98.91	138.39	172.15	208.47	264.18; 12	Mg	2	0	7.646	15.035	80.143	109.24	141.26	186.5	224.94	265.9; 13	Al	3	0.43283	5.986	18.828	28.447	119.99	153.71	190.47	241.43	284.59; 14	Si	0	1.38952	8.151	16.345	33.492	45.141	166.77	205.05	246.52	303.17; 15	P	0	0.7465	10.458	19.725	30.18	51.37	65.023	220.43	263.22	309.41; 16	S	0	2.0771	10.36	23.33	34.83	47.3	72.68	88.049	280.93	328.23; 17	Cl	0	3.61272	12.967	23.81	39.61	53.46	67.8	97.03	114.193	348.28; 18	Ar	0	0	15.759	27.629	40.74	59.81	75.02	91.007	124.319	143.456; 19	K	1	0.50146	4.341	31.625	45.72	60.91	82.66	100	117.56	154.86; 20	Ca	2	0.02455	6.113	11.871	50.908	67.1	84.41	108.78	127.7	147.24; 21	Sc	3	0.188	6.54	12.8	24.76	73.47	91.66	111.1	138	158.7; 22	Ti	3	0.084	6.82	13.58	27.491	43.266	99.22	119.36	140.8	168.5; 23	V	3	0.525	6.74	14.65	29.31	46.707	65.23	128.12	150.17	173.7; 24	Cr	2	0.6758,MatchSource.DOCS,data/eqeqIonizations.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/eqeqIonizations.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/eqeqIonizations.txt:217,Safety,redund,redundant,217,#; # Open Babel file: eqeqIonizations.txt; #; # Additional ionization energies for elements used by EQeq.; # Also contains common metal ion charges and electron affinities.; #; # Note that some of this information is redundant with OBElementTable. TODO fix.; #; # Parameters:; # Num: Atomic number; # Symbol: Element symbol; # Charge: Common charge of ionized metals (0 if nonmetal); # Affinity: Element electron affinity; # Ionizations: Nth ionization of atom (-1 if does not exist); #; # Num Symbol Charge Affinity Ionizations; 1	H	0	0.7542	13.598	-1	-1	-1	-1	-1	-1	-1; 2	He	0	0	24.587	54.416	-1	-1	-1	-1	-1	-1; 3	Li	1	0.61805	5.392	75.638	122.451	-1	-1	-1	-1	-1; 4	Be	2	0	9.322	18.211	153.893	217.713	-1	-1	-1	-1; 5	B	0	0.27972	8.298	25.154	37.93	259.368	340.217	-1	-1	-1; 6	C	0	1.26212	11.26	24.383	47.887	64.492	392.077	489.981	-1	-1; 7	N	0	-0.07	14.534	29.601	47.448	77.472	97.888	552.057	667.029	-1; 8	O	0	1.46111	13.618	35.116	54.934	77.412	113.896	138.116	739.315	871.387; 9	F	0	3.40119	17.422	34.97	62.707	87.138	114.24	157.161	185.182	953.886; 10	Ne	0	0	21.564	40.962	63.45	97.11	126.21	157.93	207.27	239.09; 11	Na	1	0.54793	5.139	47.286	71.64	98.91	138.39	172.15	208.47	264.18; 12	Mg	2	0	7.646	15.035	80.143	109.24	141.26	186.5	224.94	265.9; 13	Al	3	0.43283	5.986	18.828	28.447	119.99	153.71	190.47	241.43	284.59; 14	Si	0	1.38952	8.151	16.345	33.492	45.141	166.77	205.05	246.52	303.17; 15	P	0	0.7465	10.458	19.725	30.18	51.37	65.023	220.43	263.22	309.41; 16	S	0	2.0771	10.36	23.33	34.83	47.3	72.68	88.049	280.93	328.23; 17	Cl	0	3.61272	12.967	23.81	39.61	53.46	67.8	97.03	114.193	348.28; 18	Ar	0	0	15.759	27.629	40.74	59.81	75.02	91.007	124.319	143.456; 19	K	1	0.50146	4.341	31.625	45.72	60.91	82.66	100	117.56	154.86; 20	Ca	2	0.02455	6.113	11.871	50.908	67.1	84.41	108.78	127.7	147.24; 21	Sc	3	0.188	6.54	12.8	24.76	73.47	91.66	111.1	138	158.7; 22	Ti	3	0.084	6.82	13.58	27.491	43.266	99.22	119.36	140.8	168.5; 23	V	3	0.525	6.74	14.65	29.31	46.707	65.23	128.12	150.17	173.7; 24	Cr	2	0.6758,MatchSource.DOCS,data/eqeqIonizations.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/eqeqIonizations.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/logp.txt:1114,Energy Efficiency,adapt,adapted,1114,"re, Santa Fe, ; # U.S.A., 1999,2000,2001 ; # Copyright JOELIB/JOELib2: Dept. Computer Architecture, University of ; # Tuebingen, Germany, 2001,2002,2003,2004,2005; # Copyright JOELIB/JOELib2: ALTANA PHARMA AG, Konstanz, Germany, ; # 2003,2004,2005 ; # ; # Authors: Stephen Jelfs ; # Joerg Kurt Wegner, me@cheminformatics.eu ; # ; # This program is free software; you can redistribute it and/or modify ; # it under the terms of the GNU General Public License as published by ; # the Free Software Foundation version 2 of the License. ; # ; # This program is distributed in the hope that it will be useful, ; # but WITHOUT ANY WARRANTY; without even the implied warranty of ; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ; # GNU General Public License for more details. ; ######################################################################; # LopP Atomic Contributions; # ref. Wildman, S.A. and Crippen, G.M., J. Chem. Inf. Comput. Sci., ; # 1999, 39, 868-873.; # Table below is adapted from above ref.; ######################################################################; ;hydrogen; [*]	0.1125; [#6]	0.123; [#1]	0.123; [O][CX4]	-0.2677; [O]c	-0.2677; [O][#5]	-0.2677; [O][#14]	-0.2677; [O][#15]	-0.2677; [O][#33]	-0.2677; [O][#50]	-0.2677; [#5]	-0.2677; [#14]	-0.2677; [#15]	-0.2677; [#16]	-0.2677; [#50]	-0.2677; [#7]	0.2142; [O][#7]	0.2142; [O]C=[#6]	0.298; [O]C=[#7]	0.298; [O]C=O	0.298; [O]C=S	0.298; [O]O	0.298; [O]S	0.298; ;heavy; [*]	0; [#6]	0.0813; [CH4]	0.1441; [CH3]C	0.1441; [CH2](C)C	0.1441; [CH](C)(C)C	0; [C](C)(C)(C)C	0; [CH3][O,N,F,Cl,Br,#15,#16,#53;!a]	-0.2035; [CH2X4][O,N,F,Cl,Br,#15,#16,#53;!a]	-0.2035; [CHX4][O,N,F,Cl,Br,#15,#16,#53;!a]	-0.2051; [CH0X4][O,N,F,Cl,Br,#15,#16,#53;!a]	-0.2051; [C]=[A!#6]	-0.2783; [CH2]=C	0.1551; [CH1](=C)A	0.1551; [CH0](=C)(A)A	0.1551; [C](=C)=C	0.1551; [CX2]#A	0.0017; [CH3]c	0.0845; [CH3][a!#6]	-0.1444; [CH2X4]a	-0.0516; [CHX4]a	0.1193; [CH0X4]a	-0.0967; [c][#5,#14,#15,#33,#34,#50,#80]	-0.5443; [c][#9]	0; [c][#17]	0.24",MatchSource.DOCS,data/logp.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/logp.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/logp.txt:1114,Modifiability,adapt,adapted,1114,"re, Santa Fe, ; # U.S.A., 1999,2000,2001 ; # Copyright JOELIB/JOELib2: Dept. Computer Architecture, University of ; # Tuebingen, Germany, 2001,2002,2003,2004,2005; # Copyright JOELIB/JOELib2: ALTANA PHARMA AG, Konstanz, Germany, ; # 2003,2004,2005 ; # ; # Authors: Stephen Jelfs ; # Joerg Kurt Wegner, me@cheminformatics.eu ; # ; # This program is free software; you can redistribute it and/or modify ; # it under the terms of the GNU General Public License as published by ; # the Free Software Foundation version 2 of the License. ; # ; # This program is distributed in the hope that it will be useful, ; # but WITHOUT ANY WARRANTY; without even the implied warranty of ; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ; # GNU General Public License for more details. ; ######################################################################; # LopP Atomic Contributions; # ref. Wildman, S.A. and Crippen, G.M., J. Chem. Inf. Comput. Sci., ; # 1999, 39, 868-873.; # Table below is adapted from above ref.; ######################################################################; ;hydrogen; [*]	0.1125; [#6]	0.123; [#1]	0.123; [O][CX4]	-0.2677; [O]c	-0.2677; [O][#5]	-0.2677; [O][#14]	-0.2677; [O][#15]	-0.2677; [O][#33]	-0.2677; [O][#50]	-0.2677; [#5]	-0.2677; [#14]	-0.2677; [#15]	-0.2677; [#16]	-0.2677; [#50]	-0.2677; [#7]	0.2142; [O][#7]	0.2142; [O]C=[#6]	0.298; [O]C=[#7]	0.298; [O]C=O	0.298; [O]C=S	0.298; [O]O	0.298; [O]S	0.298; ;heavy; [*]	0; [#6]	0.0813; [CH4]	0.1441; [CH3]C	0.1441; [CH2](C)C	0.1441; [CH](C)(C)C	0; [C](C)(C)(C)C	0; [CH3][O,N,F,Cl,Br,#15,#16,#53;!a]	-0.2035; [CH2X4][O,N,F,Cl,Br,#15,#16,#53;!a]	-0.2035; [CHX4][O,N,F,Cl,Br,#15,#16,#53;!a]	-0.2051; [CH0X4][O,N,F,Cl,Br,#15,#16,#53;!a]	-0.2051; [C]=[A!#6]	-0.2783; [CH2]=C	0.1551; [CH1](=C)A	0.1551; [CH0](=C)(A)A	0.1551; [C](=C)=C	0.1551; [CX2]#A	0.0017; [CH3]c	0.0845; [CH3][a!#6]	-0.1444; [CH2X4]a	-0.0516; [CHX4]a	0.1193; [CH0X4]a	-0.0967; [c][#5,#14,#15,#33,#34,#50,#80]	-0.5443; [c][#9]	0; [c][#17]	0.24",MatchSource.DOCS,data/logp.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/logp.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/MACCS.txt:420,Availability,avail,available,420,"#Comments after SMARTS; # Extracted from RDKit r1553 Nov 2010 rdkit/Chem/MACCSKeys.py; #; # Copyright (C) 2001-2008 greg Landrum and Rational Discovery LLC; #; # @@ All Rights Reserved @@; # This file is part of the RDKit.; # The contents are covered by the terms of the BSD license; # which is included in the file license.txt, found at the root; # of the RDKit source tree.; #; # SMARTS definitions for the publically available MACCS keys. # I compared the MACCS fingerprints generated here with those from two; # other packages (not MDL, unfortunately). Of course there are; # disagreements between the various fingerprints still, but I think; # these definitions work pretty well. Some notes:. # 1) most of the differences have to do with aromaticity; # 2) there's a discrepancy sometimes because the current RDKit; # definitions do not require multiple matches to be distinct. e.g. the; # SMILES C(=O)CC(=O) can match the (hypothetical) key O=CC twice in my; # definition. It's not clear to me what the correct behavior is.; # 3) Some keys are not fully defined in the MDL documentation; # 4) Two keys, 125 and 166, have to be done outside of SMARTS.; # 5) Key 1 (ISOTOPE) isn't defined. # these are SMARTS patterns corresponding to the MDL MACCS keys; 1:('?',0), # ISOTOPE; #2:('[#103,#104,#105,#106,#107,#106,#109,#110,#111,#112]',0), # ISOTOPE Not complete; 2:('[#103,#104]',0), # ISOTOPE Not complete; 3:('[Ge,As,Se,Sn,Sb,Te,Tl,Pb,Bi]',0), # Group IVa,Va,VIa Periods 4-6 (Ge...) *NOTE* spec wrong; 4:('[Ac,Th,Pa,U,Np,Pu,Am,Cm,Bk,Cf,Es,Fm,Md,No,Lr]',0), # actinide; 5:('[Sc,Ti,Y,Zr,Hf]',0), # Group IIIB,IVB (Sc...) *NOTE* spec wrong; 6:('[La,Ce,Pr,Nd,Pm,Sm,Eu,Gd,Tb,Dy,Ho,Er,Tm,Yb,Lu]',0), # Lanthanide; 7:('[V,Cr,Mn,Nb,Mo,Tc,Ta,W,Re]',0), # Group VB,VIB,VIIB (V...) *NOTE* spec wrong; 8:('[!#6;!#1]1~*~*~*~1',0), # QAAA@1; 9:('[Fe,Co,Ni,Ru,Rh,Pd,Os,Ir,Pt]',0), # Group VIII (Fe...); 10:('[Be,Mg,Ca,Sr,Ba,Ra]',0), # Group IIa (Alkaline earth); 11:('*1~*~*~*~1',0), # 4M Ring; 12:('[Cu,Zn,Ag,C",MatchSource.DOCS,data/MACCS.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/MACCS.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/MACCS.txt:987,Usability,clear,clear,987,"omments after SMARTS; # Extracted from RDKit r1553 Nov 2010 rdkit/Chem/MACCSKeys.py; #; # Copyright (C) 2001-2008 greg Landrum and Rational Discovery LLC; #; # @@ All Rights Reserved @@; # This file is part of the RDKit.; # The contents are covered by the terms of the BSD license; # which is included in the file license.txt, found at the root; # of the RDKit source tree.; #; # SMARTS definitions for the publically available MACCS keys. # I compared the MACCS fingerprints generated here with those from two; # other packages (not MDL, unfortunately). Of course there are; # disagreements between the various fingerprints still, but I think; # these definitions work pretty well. Some notes:. # 1) most of the differences have to do with aromaticity; # 2) there's a discrepancy sometimes because the current RDKit; # definitions do not require multiple matches to be distinct. e.g. the; # SMILES C(=O)CC(=O) can match the (hypothetical) key O=CC twice in my; # definition. It's not clear to me what the correct behavior is.; # 3) Some keys are not fully defined in the MDL documentation; # 4) Two keys, 125 and 166, have to be done outside of SMARTS.; # 5) Key 1 (ISOTOPE) isn't defined. # these are SMARTS patterns corresponding to the MDL MACCS keys; 1:('?',0), # ISOTOPE; #2:('[#103,#104,#105,#106,#107,#106,#109,#110,#111,#112]',0), # ISOTOPE Not complete; 2:('[#103,#104]',0), # ISOTOPE Not complete; 3:('[Ge,As,Se,Sn,Sb,Te,Tl,Pb,Bi]',0), # Group IVa,Va,VIa Periods 4-6 (Ge...) *NOTE* spec wrong; 4:('[Ac,Th,Pa,U,Np,Pu,Am,Cm,Bk,Cf,Es,Fm,Md,No,Lr]',0), # actinide; 5:('[Sc,Ti,Y,Zr,Hf]',0), # Group IIIB,IVB (Sc...) *NOTE* spec wrong; 6:('[La,Ce,Pr,Nd,Pm,Sm,Eu,Gd,Tb,Dy,Ho,Er,Tm,Yb,Lu]',0), # Lanthanide; 7:('[V,Cr,Mn,Nb,Mo,Tc,Ta,W,Re]',0), # Group VB,VIB,VIIB (V...) *NOTE* spec wrong; 8:('[!#6;!#1]1~*~*~*~1',0), # QAAA@1; 9:('[Fe,Co,Ni,Ru,Rh,Pd,Os,Ir,Pt]',0), # Group VIII (Fe...); 10:('[Be,Mg,Ca,Sr,Ba,Ra]',0), # Group IIa (Alkaline earth); 11:('*1~*~*~*~1',0), # 4M Ring; 12:('[Cu,Zn,Ag,Cd,",MatchSource.DOCS,data/MACCS.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/MACCS.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/mpC.txt:191,Deployability,release,released,191,"#######################################################################; # An Open Notebook Science Project: Celcius Melting Point Model ; # This model and the data upon which it is built is released under a CC0 license ; ######################################################################; # mpC Atomic Contributions; # Authors: Jean-Claude Bradley, Evan M. Curtin, William J. Griffiths, Andrew S.I.D. Lang, Antony J. Williams ; # ref. ONSMP011 http://onschallenge.wikispaces.com/MeltingPointModel011; ######################################################################; ;hydrogen	; [*]	0; [#6]	-11.2891; [#1]	0; [#5]	-8.0352; [#14]	-36.0534; [#15]	0; [#16]	0; [#50]	0; [#7]	32.1543; [O][CX4]	7.3289; [O]c	22.9132; [O][#5]	48.0277; [O][#14]	0; [O][#15]	26.5074; [O][#33]	0; [O][#50]	0; [O][#7]	42.6169; [O]C=[#6]	0; [O]C=[#7]	0; [O]C=O	44.4787; [O]C=S	0; [O]O	24.8303; [O]S	40.0567; ;heavy	; [*]	0; [#9-0]	-15.2212; [#17-0]	-8.2654; [#35-0]	0; [#53-0]	14.7222; [#9-*]	0; [#17-*]	0; [#35-*]	0; [#53-*]	0; [#53+*]	0; [B,Si,Ga,Ge,As,Se,Sn,Te,Pb,Nc,Nr,Kr,Xe,Rn]	17.7551; [Fe,Cu,Zn,Tc,Cd,Pt,Au,Hg]	0; [#6]	34.2188; [CH4]	0; [CH2](C)C	0; [CH](C)(C)C	0; [C](C)(C)(C)C	40.6006; [CH3][O,N,F,Cl,Br,#15,#16,#53;!a]	0; [CH2X4][O,N,F,Cl,Br,#15,#16,#53;!a]	0; [CHX4][O,N,F,Cl,Br,#15,#16,#53;!a]	0; [CH0X4][O,N,F,Cl,Br,#15,#16,#53;!a]	32.9369; [C]=[A!#6]	20.7267; [CH2]=C	-14.8687; [CH1](=C)A	15.5201; [CH0](=C)(A)A	18.94; [C](=C)=C	0; [CX2]#A	8.0103; [CH3]c	0; [CH3][a!#6]	0; [CH2X4]a	0; [CHX4]a	0; [CH0X4]a	28.8598; [c][#5,#14,#15,#33,#34,#50,#80]	27.9572; [c][#9]	19.6289; [c][#17]	25.3437; [c][#35]	26.479; [c][#53]	10.0405; [cH]	11.6743; [c](:a)(:a):a	22.2839; [c](:a)(:a)-a	18.3672; [c](:a)(:a)-C	17.1777; [c](:a)(:a)-N	20.7165; [c](:a)(:a)-O	18.4476; [c](:a)(:a)-S	17.1867; [c](:a)(:a)=C	31.1712; [c](:a)(:a)=N	43.4894; [c](:a)(:a)=O	35.4438; [C](=C)(a)A	18.5955; [C](=C)(c)a	16.8983; [CH](=C)a	26.0819; [C]=c	0; [CX4][!#6;!#7;!#8;!#9;!#15;!#16;!#17;!#35;!#53;!#1]	0; [CX4][!#6;!#7;!#8;!#9;!#15;!#16;!#",MatchSource.DOCS,data/mpC.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/mpC.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/mr.txt:1112,Energy Efficiency,adapt,adapted,1112,"ware, Santa Fe, ; # U.S.A., 1999,2000,2001 ; # Copyright JOELIB/JOELib2: Dept. Computer Architecture, University of ; # Tuebingen, Germany, 2001,2002,2003,2004,2005; # Copyright JOELIB/JOELib2: ALTANA PHARMA AG, Konstanz, Germany, ; # 2003,2004,2005 ; # ; # Authors: Stephen Jelfs ; # Joerg Kurt Wegner, me@cheminformatics.eu ; # ; # This program is free software; you can redistribute it and/or modify ; # it under the terms of the GNU General Public License as published by ; # the Free Software Foundation version 2 of the License. ; # ; # This program is distributed in the hope that it will be useful, ; # but WITHOUT ANY WARRANTY; without even the implied warranty of ; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ; # GNU General Public License for more details. ; ######################################################################; # MR Atomic Contributions; # ref. Wildman, S.A. and Crippen, G.M., J. Chem. Inf. Comput. ; # Sci., 1999, 39, 868-873.; # Table below is adapted from above ref. ; ######################################################################; ;hydrogen; [*]	1.112; [#6]	1.057; [#1]	1.057; [O][CX4]	1.395; [O]c	1.395; [O][#5]	1.395; [O][#14]	1.395; [O][#15]	1.395; [O][#33]	1.395; [O][#50]	1.395; [#5]	1.395; [#14]	1.395; [#15]	1.395; [#16]	1.395; [#50]	1.395; [#7]	0.9627; [O][#7]	0.9627; [O]C=[#6]	1.805; [O]C=[#7]	1.805; [O]C=O	1.805; [O]C=S	1.805; [O]O	1.805; [O]S	1.805; ;heavy; [*]	0; [#6]	3.243; [CH4]	2.503; [CH3]C	2.503; [CH2](C)C	2.503; [CH](C)(C)C	2.433; [C](C)(C)(C)C	2.433; [CH3][O,N,F,Cl,Br,#15,#16,#53;!a]	2.753; [CH2X4][O,N,F,Cl,Br,#15,#16,#53;!a]	2.753; [CHX4][O,N,F,Cl,Br,#15,#16,#53;!a]	2.731; [CH0X4][O,N,F,Cl,Br,#15,#16,#53;!a]	2.731; [C]=[A!#6]	5.007; [CH2]=C	3.513; [CH1](=C)A	3.513; [CH0](=C)(A)A	3.513; [C](=C)=C	3.513; [CX2]#A	3.888; [CH3]c	2.464; [CH3][a!#6]	2.412; [CH2X4]a	2.488; [CHX4]a	2.582; [CH0X4]a	2.576; [c][#5,#14,#15,#33,#34,#50,#80]	4.041; [c][#9]	3.257; [c][#17]	3.564; [c][#35]	3.18; [c][#53]	3.104; [cH]	3.",MatchSource.DOCS,data/mr.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/mr.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/mr.txt:1112,Modifiability,adapt,adapted,1112,"ware, Santa Fe, ; # U.S.A., 1999,2000,2001 ; # Copyright JOELIB/JOELib2: Dept. Computer Architecture, University of ; # Tuebingen, Germany, 2001,2002,2003,2004,2005; # Copyright JOELIB/JOELib2: ALTANA PHARMA AG, Konstanz, Germany, ; # 2003,2004,2005 ; # ; # Authors: Stephen Jelfs ; # Joerg Kurt Wegner, me@cheminformatics.eu ; # ; # This program is free software; you can redistribute it and/or modify ; # it under the terms of the GNU General Public License as published by ; # the Free Software Foundation version 2 of the License. ; # ; # This program is distributed in the hope that it will be useful, ; # but WITHOUT ANY WARRANTY; without even the implied warranty of ; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ; # GNU General Public License for more details. ; ######################################################################; # MR Atomic Contributions; # ref. Wildman, S.A. and Crippen, G.M., J. Chem. Inf. Comput. ; # Sci., 1999, 39, 868-873.; # Table below is adapted from above ref. ; ######################################################################; ;hydrogen; [*]	1.112; [#6]	1.057; [#1]	1.057; [O][CX4]	1.395; [O]c	1.395; [O][#5]	1.395; [O][#14]	1.395; [O][#15]	1.395; [O][#33]	1.395; [O][#50]	1.395; [#5]	1.395; [#14]	1.395; [#15]	1.395; [#16]	1.395; [#50]	1.395; [#7]	0.9627; [O][#7]	0.9627; [O]C=[#6]	1.805; [O]C=[#7]	1.805; [O]C=O	1.805; [O]C=S	1.805; [O]O	1.805; [O]S	1.805; ;heavy; [*]	0; [#6]	3.243; [CH4]	2.503; [CH3]C	2.503; [CH2](C)C	2.503; [CH](C)(C)C	2.433; [C](C)(C)(C)C	2.433; [CH3][O,N,F,Cl,Br,#15,#16,#53;!a]	2.753; [CH2X4][O,N,F,Cl,Br,#15,#16,#53;!a]	2.753; [CHX4][O,N,F,Cl,Br,#15,#16,#53;!a]	2.731; [CH0X4][O,N,F,Cl,Br,#15,#16,#53;!a]	2.731; [C]=[A!#6]	5.007; [CH2]=C	3.513; [CH1](=C)A	3.513; [CH0](=C)(A)A	3.513; [C](=C)=C	3.513; [CX2]#A	3.888; [CH3]c	2.464; [CH3][a!#6]	2.412; [CH2X4]a	2.488; [CHX4]a	2.582; [CH0X4]a	2.576; [c][#5,#14,#15,#33,#34,#50,#80]	4.041; [c][#9]	3.257; [c][#17]	3.564; [c][#35]	3.18; [c][#53]	3.104; [cH]	3.",MatchSource.DOCS,data/mr.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/mr.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/patterns.txt:879,Testability,test,test,879,"txt, can also be used #; # #; # INCOMPLETE!! Really only useful to test the fingerprint FP3 #; ##############################################################################; [+]	1	cation; [-]	2	anion; [#6][CX3](=O)	3 aldehyde or ketone; [CX3H1](=O)[#6]	4 aldehyde; [#6][CX3](=O)[#6]	5 ketone; [#6][CX3](=S)	6 thioaldehyde or thioketone; [CX3H1](=S)	7 thioaldehyde; [#6]C(=[S])[#6]	8 thioketone; [CX3]=N([#6,#1])[#6,#1]	9 imine; [#6,#1]C([#6,#1])=[N][N]([#6,#1])[#6,#1]	10 hydrazone; [#6,#1]C([#6,#1])=[N][N]([#6,#1])C(=[O])[N]([#6,#1])[#6,#1]	11 semicarbazone; [#6,#1]C([#6,#1])=[N][N]([#6,#1])C(=[S])[N]([#6,#1])[#6,#1]	12 thiosemicarbazone; [#6,#1]C([#6,#1])=[N][OH]	13 oxime; [#6,#1]C([#6,#1])=[N][O][#6]	14 oxime ether; [CX3]=C=O	15 ketene; [CX3]=C=O	16 keten acetyl derivative***; [#6,#1]C([#6,#1])([OH])([OH])	17 carbonyl hydrate; [#6,#1]C([#6,#1])([OH])(O[#6])	18 hemiacetal; [#6,#1]C([#6,#1])(O[#6])(O[#6])	19 acetal; [#6,#1]C([#6,#1])(N([#6,#1])[#6,#1])(O[#6])	20 hemiaminal	; [#6,#1]C([#6,#1])(N([#6,#1])[#6,#1])(N([#6,#1])[#6,#1])	21 aminal	; [#6,#1]C([#6,#1])(N([#6,#1])[#6,#1])([S][#6])	22 thiohemiaminal	; [#6,#1]C([#6,#1])([S][#6])([S][#6])	23 thioacetal; [#6,#1]C([#6,#1])",MatchSource.DOCS,data/patterns.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/patterns.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt:460,Energy Efficiency,charge,charges,460,"##############################################################################; # #; # Open Babel file: phmodel.txt #; # #; # Copyright (c) 1998-2001 by OpenEye Scientific Software, Inc. #; # Some portions Copyright (c) 2001-2003 by Geoffrey R. Hutchison #; # Part of the Open Babel package, under the GNU General Public License (GPL)#; # #; # pH model data (used by phmodel.cpp:OBPhModel) #; # #; # TRANSFORM: chemical transforms can be used to modify formal charges, bond #; # orders, and to delete atoms (i.e hydrogens). Changes are applied#; # to vector bound atoms (use the [:#] SMARTS notation) and bonds #; # between vector bound atoms. #; # SEEDCHARGE: used to seed partial charges. Seed partial charges #; # are used as initial values in Gasteiger charge calculation #; # #; ##############################################################################. #carboxylic acid							# pKa; #TRANSFORM O=CO[#1:1] >> O=CO						4.0 # pKa from acid (AH); TRANSFORM O=C[OD1-0:1] >> O=C[O-:1]					4.0 # pKa from acid (AH). #uncomment for vinylogous carboxylic acids (e.g. ascorbic acid); TRANSFORM [O:1]=[C:2][C:3]=[C:4][O:5] >> [O:1]=[C:2][C:3]=[C:4][O-:5] 4.0 # pKa from acid (AH). #charged amine; TRANSFORM [N^3;!$(N~[!#6;!#1]):1] >> [N+:1]				10.0 # pKa from conjugated acid (BH+). #imidazole: note pKa=7.0; #if you uncomment this, also uncomment the seedcharge statement below; TRANSFORM [nD2:1]1c[nH]cc1 >> [n+:1]1c[nH]cc1				7.0. #imine; TRANSFORM [ND3+0:1]=[#6] >> [ND3+:1]=[#6]				4.0 # pKa from conjugated acid (BH+). #tetrazole; TRANSFORM [nD2:1]([#1:2])1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0]1[nD2:1]([#1:2])[nD2-0][nD2-0]c1 >> n1[n-:1]nnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0:1]1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1		4.89 #pKa from acid (AH). #azide (always apply these transformations); TRANSFORM [ND1:1]~[ND2:2]~[ND1:3] >> [N-:1]=[N+:2]=[N-:3] 1E+10	 # azide ion; TRANSFORM [ND1:1]~[ND2:2]~[ND1:3]~* >> [N-:1]=[N+:2]=[N:3]-* 1E+10 # ",MatchSource.DOCS,data/phmodel.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt:682,Energy Efficiency,charge,charges,682,"##############################################################################; # #; # Open Babel file: phmodel.txt #; # #; # Copyright (c) 1998-2001 by OpenEye Scientific Software, Inc. #; # Some portions Copyright (c) 2001-2003 by Geoffrey R. Hutchison #; # Part of the Open Babel package, under the GNU General Public License (GPL)#; # #; # pH model data (used by phmodel.cpp:OBPhModel) #; # #; # TRANSFORM: chemical transforms can be used to modify formal charges, bond #; # orders, and to delete atoms (i.e hydrogens). Changes are applied#; # to vector bound atoms (use the [:#] SMARTS notation) and bonds #; # between vector bound atoms. #; # SEEDCHARGE: used to seed partial charges. Seed partial charges #; # are used as initial values in Gasteiger charge calculation #; # #; ##############################################################################. #carboxylic acid							# pKa; #TRANSFORM O=CO[#1:1] >> O=CO						4.0 # pKa from acid (AH); TRANSFORM O=C[OD1-0:1] >> O=C[O-:1]					4.0 # pKa from acid (AH). #uncomment for vinylogous carboxylic acids (e.g. ascorbic acid); TRANSFORM [O:1]=[C:2][C:3]=[C:4][O:5] >> [O:1]=[C:2][C:3]=[C:4][O-:5] 4.0 # pKa from acid (AH). #charged amine; TRANSFORM [N^3;!$(N~[!#6;!#1]):1] >> [N+:1]				10.0 # pKa from conjugated acid (BH+). #imidazole: note pKa=7.0; #if you uncomment this, also uncomment the seedcharge statement below; TRANSFORM [nD2:1]1c[nH]cc1 >> [n+:1]1c[nH]cc1				7.0. #imine; TRANSFORM [ND3+0:1]=[#6] >> [ND3+:1]=[#6]				4.0 # pKa from conjugated acid (BH+). #tetrazole; TRANSFORM [nD2:1]([#1:2])1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0]1[nD2:1]([#1:2])[nD2-0][nD2-0]c1 >> n1[n-:1]nnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0:1]1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1		4.89 #pKa from acid (AH). #azide (always apply these transformations); TRANSFORM [ND1:1]~[ND2:2]~[ND1:3] >> [N-:1]=[N+:2]=[N-:3] 1E+10	 # azide ion; TRANSFORM [ND1:1]~[ND2:2]~[ND1:3]~* >> [N-:1]=[N+:2]=[N:3]-* 1E+10 # ",MatchSource.DOCS,data/phmodel.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt:704,Energy Efficiency,charge,charges,704,"##############################################################################; # #; # Open Babel file: phmodel.txt #; # #; # Copyright (c) 1998-2001 by OpenEye Scientific Software, Inc. #; # Some portions Copyright (c) 2001-2003 by Geoffrey R. Hutchison #; # Part of the Open Babel package, under the GNU General Public License (GPL)#; # #; # pH model data (used by phmodel.cpp:OBPhModel) #; # #; # TRANSFORM: chemical transforms can be used to modify formal charges, bond #; # orders, and to delete atoms (i.e hydrogens). Changes are applied#; # to vector bound atoms (use the [:#] SMARTS notation) and bonds #; # between vector bound atoms. #; # SEEDCHARGE: used to seed partial charges. Seed partial charges #; # are used as initial values in Gasteiger charge calculation #; # #; ##############################################################################. #carboxylic acid							# pKa; #TRANSFORM O=CO[#1:1] >> O=CO						4.0 # pKa from acid (AH); TRANSFORM O=C[OD1-0:1] >> O=C[O-:1]					4.0 # pKa from acid (AH). #uncomment for vinylogous carboxylic acids (e.g. ascorbic acid); TRANSFORM [O:1]=[C:2][C:3]=[C:4][O:5] >> [O:1]=[C:2][C:3]=[C:4][O-:5] 4.0 # pKa from acid (AH). #charged amine; TRANSFORM [N^3;!$(N~[!#6;!#1]):1] >> [N+:1]				10.0 # pKa from conjugated acid (BH+). #imidazole: note pKa=7.0; #if you uncomment this, also uncomment the seedcharge statement below; TRANSFORM [nD2:1]1c[nH]cc1 >> [n+:1]1c[nH]cc1				7.0. #imine; TRANSFORM [ND3+0:1]=[#6] >> [ND3+:1]=[#6]				4.0 # pKa from conjugated acid (BH+). #tetrazole; TRANSFORM [nD2:1]([#1:2])1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0]1[nD2:1]([#1:2])[nD2-0][nD2-0]c1 >> n1[n-:1]nnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0:1]1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1		4.89 #pKa from acid (AH). #azide (always apply these transformations); TRANSFORM [ND1:1]~[ND2:2]~[ND1:3] >> [N-:1]=[N+:2]=[N-:3] 1E+10	 # azide ion; TRANSFORM [ND1:1]~[ND2:2]~[ND1:3]~* >> [N-:1]=[N+:2]=[N:3]-* 1E+10 # ",MatchSource.DOCS,data/phmodel.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt:757,Energy Efficiency,charge,charge,757,"##############################################################################; # #; # Open Babel file: phmodel.txt #; # #; # Copyright (c) 1998-2001 by OpenEye Scientific Software, Inc. #; # Some portions Copyright (c) 2001-2003 by Geoffrey R. Hutchison #; # Part of the Open Babel package, under the GNU General Public License (GPL)#; # #; # pH model data (used by phmodel.cpp:OBPhModel) #; # #; # TRANSFORM: chemical transforms can be used to modify formal charges, bond #; # orders, and to delete atoms (i.e hydrogens). Changes are applied#; # to vector bound atoms (use the [:#] SMARTS notation) and bonds #; # between vector bound atoms. #; # SEEDCHARGE: used to seed partial charges. Seed partial charges #; # are used as initial values in Gasteiger charge calculation #; # #; ##############################################################################. #carboxylic acid							# pKa; #TRANSFORM O=CO[#1:1] >> O=CO						4.0 # pKa from acid (AH); TRANSFORM O=C[OD1-0:1] >> O=C[O-:1]					4.0 # pKa from acid (AH). #uncomment for vinylogous carboxylic acids (e.g. ascorbic acid); TRANSFORM [O:1]=[C:2][C:3]=[C:4][O:5] >> [O:1]=[C:2][C:3]=[C:4][O-:5] 4.0 # pKa from acid (AH). #charged amine; TRANSFORM [N^3;!$(N~[!#6;!#1]):1] >> [N+:1]				10.0 # pKa from conjugated acid (BH+). #imidazole: note pKa=7.0; #if you uncomment this, also uncomment the seedcharge statement below; TRANSFORM [nD2:1]1c[nH]cc1 >> [n+:1]1c[nH]cc1				7.0. #imine; TRANSFORM [ND3+0:1]=[#6] >> [ND3+:1]=[#6]				4.0 # pKa from conjugated acid (BH+). #tetrazole; TRANSFORM [nD2:1]([#1:2])1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0]1[nD2:1]([#1:2])[nD2-0][nD2-0]c1 >> n1[n-:1]nnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0:1]1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1		4.89 #pKa from acid (AH). #azide (always apply these transformations); TRANSFORM [ND1:1]~[ND2:2]~[ND1:3] >> [N-:1]=[N+:2]=[N-:3] 1E+10	 # azide ion; TRANSFORM [ND1:1]~[ND2:2]~[ND1:3]~* >> [N-:1]=[N+:2]=[N:3]-* 1E+10 # ",MatchSource.DOCS,data/phmodel.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt:1183,Energy Efficiency,charge,charged,1183,"t (c) 2001-2003 by Geoffrey R. Hutchison #; # Part of the Open Babel package, under the GNU General Public License (GPL)#; # #; # pH model data (used by phmodel.cpp:OBPhModel) #; # #; # TRANSFORM: chemical transforms can be used to modify formal charges, bond #; # orders, and to delete atoms (i.e hydrogens). Changes are applied#; # to vector bound atoms (use the [:#] SMARTS notation) and bonds #; # between vector bound atoms. #; # SEEDCHARGE: used to seed partial charges. Seed partial charges #; # are used as initial values in Gasteiger charge calculation #; # #; ##############################################################################. #carboxylic acid							# pKa; #TRANSFORM O=CO[#1:1] >> O=CO						4.0 # pKa from acid (AH); TRANSFORM O=C[OD1-0:1] >> O=C[O-:1]					4.0 # pKa from acid (AH). #uncomment for vinylogous carboxylic acids (e.g. ascorbic acid); TRANSFORM [O:1]=[C:2][C:3]=[C:4][O:5] >> [O:1]=[C:2][C:3]=[C:4][O-:5] 4.0 # pKa from acid (AH). #charged amine; TRANSFORM [N^3;!$(N~[!#6;!#1]):1] >> [N+:1]				10.0 # pKa from conjugated acid (BH+). #imidazole: note pKa=7.0; #if you uncomment this, also uncomment the seedcharge statement below; TRANSFORM [nD2:1]1c[nH]cc1 >> [n+:1]1c[nH]cc1				7.0. #imine; TRANSFORM [ND3+0:1]=[#6] >> [ND3+:1]=[#6]				4.0 # pKa from conjugated acid (BH+). #tetrazole; TRANSFORM [nD2:1]([#1:2])1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0]1[nD2:1]([#1:2])[nD2-0][nD2-0]c1 >> n1[n-:1]nnc1	4.89 #pKa from acid (AH); TRANSFORM [nD2-0:1]1[nD2-0][nD2-0][nD2-0]c1 >> [n-:1]1nnnc1		4.89 #pKa from acid (AH). #azide (always apply these transformations); TRANSFORM [ND1:1]~[ND2:2]~[ND1:3] >> [N-:1]=[N+:2]=[N-:3] 1E+10	 # azide ion; TRANSFORM [ND1:1]~[ND2:2]~[ND1:3]~* >> [N-:1]=[N+:2]=[N:3]-* 1E+10 # azide group; TRANSFORM [NH2:1]~[NH1:2]~[NH1:3]~* >> [N-:1]=[N+:2]=[N:3]-* 1E+10	# azide group; TRANSFORM [NH1:1]~[ND2:2]~[NH1:3]~* >> [N-:1]=[N+:2]=[N:3]-* 1E+10	# azide group. #nitro group (-NO2); TRANSFORM [O:1]=",MatchSource.DOCS,data/phmodel.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt:5125,Energy Efficiency,charge,charges,5125,"CCCNC(N)=[N+:1] 	12.0; TRANSFORM O=C(NCC=O)C(N)CCCNC(N)=[N:1] >> O=C(NCC=O)C(N)CCCNC(N)=[N+:1] 12.0. # lysine; TRANSFORM O=C(O)C(N)CCCC[N:1] >> O=C(O)C(N)CCCC[N+:1] 			10.5; TRANSFORM O=C(NCC=O)C(N)CCCC[N:1] >> O=C(NCC=O)C(N)CCCC[N+:1] 	 10.5. # histidine; TRANSFORM O=C(O)C(N)Cc1[nH0:1]c[nH]c1 >> O=C(O)C(N)Cc1[n+:1]c[nH]c1 6.08; TRANSFORM O=C(O)C(N)Cc1[nH]c[nH0:1]c1 >> O=C(O)C(N)Cc1[nH]c[n+:1]c1 6.08; TRANSFORM O=C(NCC=O)C(N)Cc1[nH0:1]c[nH]c1 >> O=C(NCC=O)C(N)Cc1[n+:1]c[nH]c1 6.08. # cysteine; TRANSFORM O=C(O)C(N)C[S:1] >> O=C(O)C(N)C[S-:1]			 8.28; TRANSFORM O=C(NCC=O)C(N)C[S:1] >> O=C(NCC=O)C(N)C[S-:1]		 8.28. # tyrosine; TRANSFORM O=C(O)C(N)Cc1ccc([O:1])cc1 >> O=C(O)C(N)Cc1ccc([O-:1])cc1	 10.1; TRANSFORM O=C(NCC=O)C(N)Cc1ccc([O:1])cc1 >> O=C(NCC=O)C(N)Cc1ccc([O-:1])cc1 10.1. # old:; # histidine; #TRANSFORM [nD2:1]1c[nD2]cc1 >> [n+:1]1c[nD2]cc1; # uncomment for tryptophan; # TRANSFORM [nD2:1]1cccc1 >> [n+:1]1cccc1; #, histidine pKa=6.0. #; #	Seeding partial charges for gasteiger calculation; #; #default charges; SEEDCHARGE [#6+]	1.0; SEEDCHARGE [#6-]	-1.0; SEEDCHARGE [#7+]	1.0; SEEDCHARGE [#7-]	-1.0; SEEDCHARGE [#8+]	1.0; SEEDCHARGE [#8-]	-1.0; SEEDCHARGE [#15+]	1.0; SEEDCHARGE [#15-]	-1.0; SEEDCHARGE [#16+]	1.0; SEEDCHARGE [#16-]	-1.0. #charges spread over multiple atoms; #carboxylic acid; SEEDCHARGE	C(=O)[O-]		0.0	-0.5	-0.5. #amines; SEEDCHARGE	[N+]		1.0; #tetrazole; SEEDCHARGE	[nD2]1[nD2][nD2][nD2]c1	-0.2	-0.2	-0.2 -0.2 -0.2. #sulfinic; SEEDCHARGE	[SD3](=O)[O-]		0.0	-0.5	-0.5; #sulfuric acid; SEEDCHARGE	[SD4](=O)(=O)([O-])[OH1]	0.0	-0.33	-0.33	-0.33	0.0; #sulfonic acid; SEEDCHARGE	[SD4]([D2])(~[OD1])(~[OD1])~[OD1]	0.0	0.0	-0.33	-0.33	-0.33. #guanidine; SEEDCHARGE	[#7^2]~[C^2](~[N^2])~[N^2]	0.33	0.0	0.33	0.33. #amidine; SEEDCHARGE	[#6]~[C^2](~[N^2])~[N^2]	0.0	0.0	0.5	0.5. #phosphoate ester; SEEDCHARGE	[PD4](=O)([OD2])([OD2])[OD1]	0.0	-0.5	0.0	0.0	-0.5; #phosphoric acid; SEEDCHARGE	O=P([!D1])([O-])[O-]	-0.66	0.0	0.0	-0.66	-0.66. #phosphuric acid; SEEDCHARGE	P(=O)(",MatchSource.DOCS,data/phmodel.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt:5172,Energy Efficiency,charge,charges,5172,"CCCNC(N)=[N+:1] 	12.0; TRANSFORM O=C(NCC=O)C(N)CCCNC(N)=[N:1] >> O=C(NCC=O)C(N)CCCNC(N)=[N+:1] 12.0. # lysine; TRANSFORM O=C(O)C(N)CCCC[N:1] >> O=C(O)C(N)CCCC[N+:1] 			10.5; TRANSFORM O=C(NCC=O)C(N)CCCC[N:1] >> O=C(NCC=O)C(N)CCCC[N+:1] 	 10.5. # histidine; TRANSFORM O=C(O)C(N)Cc1[nH0:1]c[nH]c1 >> O=C(O)C(N)Cc1[n+:1]c[nH]c1 6.08; TRANSFORM O=C(O)C(N)Cc1[nH]c[nH0:1]c1 >> O=C(O)C(N)Cc1[nH]c[n+:1]c1 6.08; TRANSFORM O=C(NCC=O)C(N)Cc1[nH0:1]c[nH]c1 >> O=C(NCC=O)C(N)Cc1[n+:1]c[nH]c1 6.08. # cysteine; TRANSFORM O=C(O)C(N)C[S:1] >> O=C(O)C(N)C[S-:1]			 8.28; TRANSFORM O=C(NCC=O)C(N)C[S:1] >> O=C(NCC=O)C(N)C[S-:1]		 8.28. # tyrosine; TRANSFORM O=C(O)C(N)Cc1ccc([O:1])cc1 >> O=C(O)C(N)Cc1ccc([O-:1])cc1	 10.1; TRANSFORM O=C(NCC=O)C(N)Cc1ccc([O:1])cc1 >> O=C(NCC=O)C(N)Cc1ccc([O-:1])cc1 10.1. # old:; # histidine; #TRANSFORM [nD2:1]1c[nD2]cc1 >> [n+:1]1c[nD2]cc1; # uncomment for tryptophan; # TRANSFORM [nD2:1]1cccc1 >> [n+:1]1cccc1; #, histidine pKa=6.0. #; #	Seeding partial charges for gasteiger calculation; #; #default charges; SEEDCHARGE [#6+]	1.0; SEEDCHARGE [#6-]	-1.0; SEEDCHARGE [#7+]	1.0; SEEDCHARGE [#7-]	-1.0; SEEDCHARGE [#8+]	1.0; SEEDCHARGE [#8-]	-1.0; SEEDCHARGE [#15+]	1.0; SEEDCHARGE [#15-]	-1.0; SEEDCHARGE [#16+]	1.0; SEEDCHARGE [#16-]	-1.0. #charges spread over multiple atoms; #carboxylic acid; SEEDCHARGE	C(=O)[O-]		0.0	-0.5	-0.5. #amines; SEEDCHARGE	[N+]		1.0; #tetrazole; SEEDCHARGE	[nD2]1[nD2][nD2][nD2]c1	-0.2	-0.2	-0.2 -0.2 -0.2. #sulfinic; SEEDCHARGE	[SD3](=O)[O-]		0.0	-0.5	-0.5; #sulfuric acid; SEEDCHARGE	[SD4](=O)(=O)([O-])[OH1]	0.0	-0.33	-0.33	-0.33	0.0; #sulfonic acid; SEEDCHARGE	[SD4]([D2])(~[OD1])(~[OD1])~[OD1]	0.0	0.0	-0.33	-0.33	-0.33. #guanidine; SEEDCHARGE	[#7^2]~[C^2](~[N^2])~[N^2]	0.33	0.0	0.33	0.33. #amidine; SEEDCHARGE	[#6]~[C^2](~[N^2])~[N^2]	0.0	0.0	0.5	0.5. #phosphoate ester; SEEDCHARGE	[PD4](=O)([OD2])([OD2])[OD1]	0.0	-0.5	0.0	0.0	-0.5; #phosphoric acid; SEEDCHARGE	O=P([!D1])([O-])[O-]	-0.66	0.0	0.0	-0.66	-0.66. #phosphuric acid; SEEDCHARGE	P(=O)(",MatchSource.DOCS,data/phmodel.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt:5411,Energy Efficiency,charge,charges,5411,"O=C(O)C(N)Cc1[n+:1]c[nH]c1 6.08; TRANSFORM O=C(O)C(N)Cc1[nH]c[nH0:1]c1 >> O=C(O)C(N)Cc1[nH]c[n+:1]c1 6.08; TRANSFORM O=C(NCC=O)C(N)Cc1[nH0:1]c[nH]c1 >> O=C(NCC=O)C(N)Cc1[n+:1]c[nH]c1 6.08. # cysteine; TRANSFORM O=C(O)C(N)C[S:1] >> O=C(O)C(N)C[S-:1]			 8.28; TRANSFORM O=C(NCC=O)C(N)C[S:1] >> O=C(NCC=O)C(N)C[S-:1]		 8.28. # tyrosine; TRANSFORM O=C(O)C(N)Cc1ccc([O:1])cc1 >> O=C(O)C(N)Cc1ccc([O-:1])cc1	 10.1; TRANSFORM O=C(NCC=O)C(N)Cc1ccc([O:1])cc1 >> O=C(NCC=O)C(N)Cc1ccc([O-:1])cc1 10.1. # old:; # histidine; #TRANSFORM [nD2:1]1c[nD2]cc1 >> [n+:1]1c[nD2]cc1; # uncomment for tryptophan; # TRANSFORM [nD2:1]1cccc1 >> [n+:1]1cccc1; #, histidine pKa=6.0. #; #	Seeding partial charges for gasteiger calculation; #; #default charges; SEEDCHARGE [#6+]	1.0; SEEDCHARGE [#6-]	-1.0; SEEDCHARGE [#7+]	1.0; SEEDCHARGE [#7-]	-1.0; SEEDCHARGE [#8+]	1.0; SEEDCHARGE [#8-]	-1.0; SEEDCHARGE [#15+]	1.0; SEEDCHARGE [#15-]	-1.0; SEEDCHARGE [#16+]	1.0; SEEDCHARGE [#16-]	-1.0. #charges spread over multiple atoms; #carboxylic acid; SEEDCHARGE	C(=O)[O-]		0.0	-0.5	-0.5. #amines; SEEDCHARGE	[N+]		1.0; #tetrazole; SEEDCHARGE	[nD2]1[nD2][nD2][nD2]c1	-0.2	-0.2	-0.2 -0.2 -0.2. #sulfinic; SEEDCHARGE	[SD3](=O)[O-]		0.0	-0.5	-0.5; #sulfuric acid; SEEDCHARGE	[SD4](=O)(=O)([O-])[OH1]	0.0	-0.33	-0.33	-0.33	0.0; #sulfonic acid; SEEDCHARGE	[SD4]([D2])(~[OD1])(~[OD1])~[OD1]	0.0	0.0	-0.33	-0.33	-0.33. #guanidine; SEEDCHARGE	[#7^2]~[C^2](~[N^2])~[N^2]	0.33	0.0	0.33	0.33. #amidine; SEEDCHARGE	[#6]~[C^2](~[N^2])~[N^2]	0.0	0.0	0.5	0.5. #phosphoate ester; SEEDCHARGE	[PD4](=O)([OD2])([OD2])[OD1]	0.0	-0.5	0.0	0.0	-0.5; #phosphoric acid; SEEDCHARGE	O=P([!D1])([O-])[O-]	-0.66	0.0	0.0	-0.66	-0.66. #phosphuric acid; SEEDCHARGE	P(=O)(=O)([O-])[O-]	0.0	0.0	0.0 -0.5	-0.5; #phosphonic acid; SEEDCHARGE	[#6]P(~[OD1])(~[OD1])~[OD1]	0.0	0.0	-0.33 -0.33 -0.33. #hydroxamic acid; SEEDCHARGE	O=C[N;!$(N(C=O)C=O)][OD1]	-0.5	0.0	0.0	-0.5; SEEDCHARGE	O=CN([OD1])NC=O		-0.33	0.0	0.0	-0.33	0.0 0.0	-0.33. #imidazole: note pKa=7.0, histidine pKa",MatchSource.DOCS,data/phmodel.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/phmodel.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/plugindefines.txt:1099,Availability,reliab,reliable,1099,"omment and; # the rest of the characters on a line are ignored.; # White space is trimmed from the front and back of the line.; # ; # There can be any number of lines containing only whitespace and ; # comment between objects, but none within an object.; # Lines which have ""\n"" at the end have this replaced by a new line; # character and the next line is concatenated. #SmartsDescriptor; #nHal # name of descriptor. Use for example --filter ""nHal<3"" ; #[F,Cl,Br,I,At] # SMARTS defining the descriptor; #Number of halogen atoms\n #This comment has two lines because of \n at the end.; #count fluorine, chlorine, etc. #When listing plugins, use verbose option to see lines after the first. #OpTransform # Description() for the class includes a line ""OpTransform is definable""; #tautomers # ID. Commandline option to invoke is --tautomers; #tautomers.txt # Datafile containing transforms. If filename is * the data follows later in the entry.; #Replace tautomers with their standard forms. Not reliable at present. # An explanatory description. #OpTransform; #nodative # ID. Commandline option to invoke is --nodative; #* # There is no datafile; the transforms are at the end of the entry; #Replace [N+]([O-])=O by N(=O)=O; #TRANSFORM [N+:1](=O)[O-:2] >> [N:1](=O)=[O:2]. CompoundFilter; L5 # ID; HBD<5 HBA1<10 MW<500 logP<5 # definition in terms of other descriptors or properties; Lipinski Rule of Five # description. PatternFP; MACCS # ID of this fingerprint type; MACCS.txt # File containing the SMARTS patterns. SmartsDescriptor; sbonds; *-*; Number of single bonds. SmartsDescriptor; dbonds; *=*; Number of double bonds. SmartsDescriptor; tbonds; *#*; Number of triple bonds. SmartsDescriptor; abonds; *:*; Number of aromatic bonds. SmartsDescriptor; bonds; *~*; Number of bonds\n; Add or remove hydrogens to count total or bonds between heavy atoms. SmartsDescriptor; atoms; *; Number of atoms\n; Add or remove hydrogens to count total or heavy atoms. OBGroupContrib; MP # name of descriptor; mp",MatchSource.DOCS,data/plugindefines.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/plugindefines.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/plugindefines.txt:738,Modifiability,plugin,plugins,738,"# Data file for OBDefinable class.; # A # in the first column or a # followed by whitespace introduces a comment and; # the rest of the characters on a line are ignored.; # White space is trimmed from the front and back of the line.; # ; # There can be any number of lines containing only whitespace and ; # comment between objects, but none within an object.; # Lines which have ""\n"" at the end have this replaced by a new line; # character and the next line is concatenated. #SmartsDescriptor; #nHal # name of descriptor. Use for example --filter ""nHal<3"" ; #[F,Cl,Br,I,At] # SMARTS defining the descriptor; #Number of halogen atoms\n #This comment has two lines because of \n at the end.; #count fluorine, chlorine, etc. #When listing plugins, use verbose option to see lines after the first. #OpTransform # Description() for the class includes a line ""OpTransform is definable""; #tautomers # ID. Commandline option to invoke is --tautomers; #tautomers.txt # Datafile containing transforms. If filename is * the data follows later in the entry.; #Replace tautomers with their standard forms. Not reliable at present. # An explanatory description. #OpTransform; #nodative # ID. Commandline option to invoke is --nodative; #* # There is no datafile; the transforms are at the end of the entry; #Replace [N+]([O-])=O by N(=O)=O; #TRANSFORM [N+:1](=O)[O-:2] >> [N:1](=O)=[O:2]. CompoundFilter; L5 # ID; HBD<5 HBA1<10 MW<500 logP<5 # definition in terms of other descriptors or properties; Lipinski Rule of Five # description. PatternFP; MACCS # ID of this fingerprint type; MACCS.txt # File containing the SMARTS patterns. SmartsDescriptor; sbonds; *-*; Number of single bonds. SmartsDescriptor; dbonds; *=*; Number of double bonds. SmartsDescriptor; tbonds; *#*; Number of triple bonds. SmartsDescriptor; abonds; *:*; Number of aromatic bonds. SmartsDescriptor; bonds; *~*; Number of bonds\n; Add or remove hydrogens to count total or bonds between heavy atoms. SmartsDescriptor; atoms; *; Number of a",MatchSource.DOCS,data/plugindefines.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/plugindefines.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/plugindefines.txt:1423,Testability,log,logP,1423," objects, but none within an object.; # Lines which have ""\n"" at the end have this replaced by a new line; # character and the next line is concatenated. #SmartsDescriptor; #nHal # name of descriptor. Use for example --filter ""nHal<3"" ; #[F,Cl,Br,I,At] # SMARTS defining the descriptor; #Number of halogen atoms\n #This comment has two lines because of \n at the end.; #count fluorine, chlorine, etc. #When listing plugins, use verbose option to see lines after the first. #OpTransform # Description() for the class includes a line ""OpTransform is definable""; #tautomers # ID. Commandline option to invoke is --tautomers; #tautomers.txt # Datafile containing transforms. If filename is * the data follows later in the entry.; #Replace tautomers with their standard forms. Not reliable at present. # An explanatory description. #OpTransform; #nodative # ID. Commandline option to invoke is --nodative; #* # There is no datafile; the transforms are at the end of the entry; #Replace [N+]([O-])=O by N(=O)=O; #TRANSFORM [N+:1](=O)[O-:2] >> [N:1](=O)=[O:2]. CompoundFilter; L5 # ID; HBD<5 HBA1<10 MW<500 logP<5 # definition in terms of other descriptors or properties; Lipinski Rule of Five # description. PatternFP; MACCS # ID of this fingerprint type; MACCS.txt # File containing the SMARTS patterns. SmartsDescriptor; sbonds; *-*; Number of single bonds. SmartsDescriptor; dbonds; *=*; Number of double bonds. SmartsDescriptor; tbonds; *#*; Number of triple bonds. SmartsDescriptor; abonds; *:*; Number of aromatic bonds. SmartsDescriptor; bonds; *~*; Number of bonds\n; Add or remove hydrogens to count total or bonds between heavy atoms. SmartsDescriptor; atoms; *; Number of atoms\n; Add or remove hydrogens to count total or heavy atoms. OBGroupContrib; MP # name of descriptor; mpC.txt # data file; Melting point\n # brief description; This is a melting point descriptor developed\n # longer description; by Andy Lang. For details see:\n; http://onschallenge.wikispaces.com/MeltingPointModel011; ",MatchSource.DOCS,data/plugindefines.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/plugindefines.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/ring-fragments.txt:578,Availability,down,download,578,"#; # Open Babel file: fragments.txt; #; # Copyright (c) 2007-2008 by Geoffrey R Hutchison; # Part of the Open Babel package, under the GNU General Public License (GPL); #; # Fragments for OBBuilder coordinate generation ; # These consist of a generic SMARTS pattern; # followed by the 3D coordinates of all heavy atoms; # ; # Fragments are ordered by length of SMARTS pattern; # (i.e., most complicated will match first); #; # This file contains ~1000 of the most common ring fragments; # from analysis over the NCI database and ZINC; #; # NCI: http://cactus.nci.nih.gov/ncidb2/download.html; # ZINC: http://zinc.docking.org/; #; A1AA[A@@]2(AA1)A[A@H]1[A@H](A[A@@H]3[A@@H]1AA[A@H]1[A@@H]3AA[A@H]3AAAA[A@H]13)A2; -6.211 -1.460 -0.030; -5.943 -0.593 1.206; -5.091 0.648 0.864; -3.994 0.300 -0.169; -4.538 -0.250 -1.367; -5.898 -0.674 -1.321; -3.111 1.535 -0.461; -1.792 1.261 0.318; -2.126 0.038 1.158; -0.839 -0.820 1.272; 0.215 0.187 0.788; -0.505 0.862 -0.397; 0.361 2.038 -0.842; 1.787 1.544 -1.206; 2.492 0.838 -0.023; 1.643 -0.352 0.504; 1.731 -1.601 -0.389; 3.140 -1.884 -0.874; 4.220 -1.079 -0.124; 5.652 -1.521 -0.524; 6.711 -0.431 -0.189; 6.283 0.453 0.974; 4.934 1.171 0.717; 3.983 0.435 -0.283; -3.106 -0.636 0.409; A1A=A2AA3AA[A@@]45[A@@H]3A[A@@H]2[A@H]2[A@@H](A1)AAA(a1aaaaa51)[A@H]42; -3.888 0.914 0.115; -3.459 -0.469 0.519; -2.450 -1.056 -0.087; -1.962 -2.361 0.428; -0.673 -2.830 -0.062; 0.191 -3.047 1.144; 0.602 -1.615 1.554; 0.598 -0.812 0.219; 0.084 -1.793 -0.806; -0.800 -1.233 -1.901; -1.848 -0.330 -1.263; -1.065 0.868 -0.767; -1.865 2.101 -0.431; -2.873 1.838 0.542; -0.974 3.251 0.020; 0.403 2.844 0.453; 0.828 1.570 0.379; 2.076 1.022 0.182; 3.313 1.677 0.144; 4.435 0.913 -0.126; 4.355 -0.449 -0.358; 3.133 -1.117 -0.307; 2.013 -0.363 -0.016; -0.183 0.472 0.416; A1AA[A@@H]2[A@H](A1)AA[A@H]1[A@@H]2AA[A@@H]2[A@H]1AA[A@@H]1AAA[A@@H]21; -3.053 1.785 1.205; -3.252 1.888 -0.289; -3.572 0.529 -0.878; -2.734 -0.643 -0.356; -2.599 -0.629 1.153; -2.102 0.714 1.691; -1.649 -1.724 ",MatchSource.DOCS,data/ring-fragments.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/ring-fragments.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:32181,Energy Efficiency,charge,charge,32181,"ride(s), reactive. Daylight's depictmatch does not add hydrogens automatically to ; # the free positions at Si, thus Hs had to be added implicitly. Silylmonohalide: [SiX4]([FX1,ClX1,BrX1,IX1])([#6])([#6])[#6]; # reagents for inserting protection groups. Het_trialkylsilane: [SiX4]([!#6])([#6])([#6])[#6]; # mostly acid-labile protection groups such as trimethylsilyl-ethers . Dihet_dialkylsilane: [SiX4]([!#6])([!#6])([#6])[#6]. Trihet_alkylsilane: [SiX4]([!#6])([!#6])([!#6])[#6]. Silicic_acid_derivative: [SiX4]([!#6])([!#6])([!#6])[!#6]; # four substituent which are neither C nor H. # II.5 Boron; # ----------. Trialkylborane: [BX3]([#6])([#6])[#6] ; # also carbonyls allowed. Boric_acid_derivatives: [BX3]([!#6])([!#6])[!#6]; # includes acids, esters, amides, ... H-substituent at B is very rare. Boronic_acid_derivative: [BX3]([!#6])([!#6])[!#6]; # # includes acids, esters, amides, ... Borohydride: [BH1,BH2,BH3,BH4]; # at least one H attached to B. Quaternary_boron: [BX4]; # mostly borates (negative charge), in complex with Lewis-base. # Part III: Some Special Patterns; # ===============================. # III.1 Chains; # ------------. # some simple chains. # III.2 Rings; # -----------. Aromatic: a. Heterocyclic: [!#6;!R0]; # may be aromatic or not. Epoxide: [OX2r3]1[#6r3][#6r3]1; # toxic/reactive. may be annelated to aromat, but must not be aromatic itself (oxirane-2,3-dione). NH_aziridine: [NX3H1r3]1[#6r3][#6r3]1; # toxic/reactive according to Maybridge's garbage filter. Spiro: [D4R;$(*(@*)(@*)(@*)@*)]; # at least two different rings can be found which are sharing just one atom.; # these two rings can be connected by a third ring, so it matches also some ; # bridged systems, like morphine. Annelated_rings: [R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]; # two different rings sharing exactly two atoms. Bridged_rings: [R;$(*(@*)(@*)@*);!$([D4R;$(*(@*)(@*)(@*)@*)]);!$([R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:36863,Energy Efficiency,charge,charges,36863,"=[D2]/*; # analog. Mixed_anhydrides: [$(*=O),$([#16,#14,#5]),$([#7]([#6]=[OX1]))][#8X2][$(*=O),$([#16,#14,#5]),$([#7]([#6]=[OX1]))]; # should hits all combinations of two acids. Halogen_on_hetero: [FX1,ClX1,BrX1,IX1][!#6]. Halogen_multi_subst: [F,Cl,Br,I;!$([X1]);!$([X0-])]; # Halogen which is not mono-substituted nor an anion, e.g. chlorate.; # Most of these cases should be also filtered by Halogen_on_hetero. Trifluoromethyl: [FX1][CX4;!$([H0][Cl,Br,I]);!$([F][C]([F])([F])[F])]([FX1])([FX1]); # C with three F attached, connected to anything which is not another halogen. C_ONS_bond: [#6]~[#7,#8,#16]; # probably all drug-like molecules have at least one O, N, or S connected to a C -> nice filter. ## Mixture: (*).(*); # two or more seperate parts, may also be salt; # component-level grouping is not yet supported in Open Babel Version 2.0. Charged: [!+0]. Anion: [-1,-2,-3,-4,-5,-6,-7]. Kation: [+1,+2,+3,+4,+5,+6,+7]. Salt: ([-1,-2,-3,-4,-5,-6,-7]).([+1,+2,+3,+4,+5,+6,+7]); # two or more seperate components with opposite charges. ##Zwitterion: ([-1,-2,-3,-4,-5,-6,-7].[+1,+2,+3,+4,+5,+6,+7]); # both negative and positive charges somewhere within the same molecule. . 1,3-Tautomerizable: [$([#7X2,OX1,SX1]=*[!H0;!$([a;!n])]),$([#7X3,OX2,SX2;!H0]*=*),$([#7X3,OX2,SX2;!H0]*:n)]; # 1,3 migration of H allowed. Includes keto/enol and amide/enamide. ; # Aromatic rings must stay aromatic - no keto form of phenol . 1,5-Tautomerizable: [$([#7X2,OX1,SX1]=,:**=,:*[!H0;!$([a;!n])]),$([#7X3,OX2,SX2;!H0]*=**=*),$([#7X3,OX2,SX2;!H0]*=,:**:n)]. Rotatable_bond: [!$(*#*)&!D1]-!@[!$(*#*)&!D1]; # taken from http://www.daylight.com/support/contrib/smarts/content.html. Michael_acceptor: [CX3]=[CX3][$([CX3]=[O,N,S]),$(C#[N]),$([S,P]=[OX1]),$([NX3]=O),$([NX3+](=O)[O-])]; # the classical case: C=C near carbonyl, nitrile, nitro, or similar; # Oxo-heteroaromats and similar are not included. Dicarbodiazene: [CX3](=[OX1])[NX2]=[NX2][CX3](=[OX1]); # Michael-like acceptor, see Mitsunobu reaction. # H-Bond",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:36964,Energy Efficiency,charge,charges,36964,"))]; # should hits all combinations of two acids. Halogen_on_hetero: [FX1,ClX1,BrX1,IX1][!#6]. Halogen_multi_subst: [F,Cl,Br,I;!$([X1]);!$([X0-])]; # Halogen which is not mono-substituted nor an anion, e.g. chlorate.; # Most of these cases should be also filtered by Halogen_on_hetero. Trifluoromethyl: [FX1][CX4;!$([H0][Cl,Br,I]);!$([F][C]([F])([F])[F])]([FX1])([FX1]); # C with three F attached, connected to anything which is not another halogen. C_ONS_bond: [#6]~[#7,#8,#16]; # probably all drug-like molecules have at least one O, N, or S connected to a C -> nice filter. ## Mixture: (*).(*); # two or more seperate parts, may also be salt; # component-level grouping is not yet supported in Open Babel Version 2.0. Charged: [!+0]. Anion: [-1,-2,-3,-4,-5,-6,-7]. Kation: [+1,+2,+3,+4,+5,+6,+7]. Salt: ([-1,-2,-3,-4,-5,-6,-7]).([+1,+2,+3,+4,+5,+6,+7]); # two or more seperate components with opposite charges. ##Zwitterion: ([-1,-2,-3,-4,-5,-6,-7].[+1,+2,+3,+4,+5,+6,+7]); # both negative and positive charges somewhere within the same molecule. . 1,3-Tautomerizable: [$([#7X2,OX1,SX1]=*[!H0;!$([a;!n])]),$([#7X3,OX2,SX2;!H0]*=*),$([#7X3,OX2,SX2;!H0]*:n)]; # 1,3 migration of H allowed. Includes keto/enol and amide/enamide. ; # Aromatic rings must stay aromatic - no keto form of phenol . 1,5-Tautomerizable: [$([#7X2,OX1,SX1]=,:**=,:*[!H0;!$([a;!n])]),$([#7X3,OX2,SX2;!H0]*=**=*),$([#7X3,OX2,SX2;!H0]*=,:**:n)]. Rotatable_bond: [!$(*#*)&!D1]-!@[!$(*#*)&!D1]; # taken from http://www.daylight.com/support/contrib/smarts/content.html. Michael_acceptor: [CX3]=[CX3][$([CX3]=[O,N,S]),$(C#[N]),$([S,P]=[OX1]),$([NX3]=O),$([NX3+](=O)[O-])]; # the classical case: C=C near carbonyl, nitrile, nitro, or similar; # Oxo-heteroaromats and similar are not included. Dicarbodiazene: [CX3](=[OX1])[NX2]=[NX2][CX3](=[OX1]); # Michael-like acceptor, see Mitsunobu reaction. # H-Bond_donor:. # H-Bond_acceptor:. # Pos_ionizable:. # Neg_ionizable:. # Unlikely_ions: ; # O+,N-,C+,C-, ... CH-acidic: [$([CX4;!$([H0]",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:32855,Integrability,bridg,bridged,32855,"also carbonyls allowed. Boric_acid_derivatives: [BX3]([!#6])([!#6])[!#6]; # includes acids, esters, amides, ... H-substituent at B is very rare. Boronic_acid_derivative: [BX3]([!#6])([!#6])[!#6]; # # includes acids, esters, amides, ... Borohydride: [BH1,BH2,BH3,BH4]; # at least one H attached to B. Quaternary_boron: [BX4]; # mostly borates (negative charge), in complex with Lewis-base. # Part III: Some Special Patterns; # ===============================. # III.1 Chains; # ------------. # some simple chains. # III.2 Rings; # -----------. Aromatic: a. Heterocyclic: [!#6;!R0]; # may be aromatic or not. Epoxide: [OX2r3]1[#6r3][#6r3]1; # toxic/reactive. may be annelated to aromat, but must not be aromatic itself (oxirane-2,3-dione). NH_aziridine: [NX3H1r3]1[#6r3][#6r3]1; # toxic/reactive according to Maybridge's garbage filter. Spiro: [D4R;$(*(@*)(@*)(@*)@*)]; # at least two different rings can be found which are sharing just one atom.; # these two rings can be connected by a third ring, so it matches also some ; # bridged systems, like morphine. Annelated_rings: [R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]; # two different rings sharing exactly two atoms. Bridged_rings: [R;$(*(@*)(@*)@*);!$([D4R;$(*(@*)(@*)(@*)@*)]);!$([R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])])]; # part of two or more rings, not spiro, not annelated -> finds bridgehead atoms, ; # but only if they are not annelated at the same time - otherwise impossible (?); # to distinguish from non-bridgehead annelated atoms. # some basic ring-patterns (just size, no other information):. # III.3 Sugars and Nucleosides/Nucleotides, Steroids; # --------------------------------------------------. # because of the large variety of sugar derivatives, different patterns can be applied.; # The choice of patterns and their combinations will depend on the contents of the database; # e.g. natural products, nucleoside analoges wit",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:33273,Integrability,bridg,bridgehead,33273,"ecial Patterns; # ===============================. # III.1 Chains; # ------------. # some simple chains. # III.2 Rings; # -----------. Aromatic: a. Heterocyclic: [!#6;!R0]; # may be aromatic or not. Epoxide: [OX2r3]1[#6r3][#6r3]1; # toxic/reactive. may be annelated to aromat, but must not be aromatic itself (oxirane-2,3-dione). NH_aziridine: [NX3H1r3]1[#6r3][#6r3]1; # toxic/reactive according to Maybridge's garbage filter. Spiro: [D4R;$(*(@*)(@*)(@*)@*)]; # at least two different rings can be found which are sharing just one atom.; # these two rings can be connected by a third ring, so it matches also some ; # bridged systems, like morphine. Annelated_rings: [R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]; # two different rings sharing exactly two atoms. Bridged_rings: [R;$(*(@*)(@*)@*);!$([D4R;$(*(@*)(@*)(@*)@*)]);!$([R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])])]; # part of two or more rings, not spiro, not annelated -> finds bridgehead atoms, ; # but only if they are not annelated at the same time - otherwise impossible (?); # to distinguish from non-bridgehead annelated atoms. # some basic ring-patterns (just size, no other information):. # III.3 Sugars and Nucleosides/Nucleotides, Steroids; # --------------------------------------------------. # because of the large variety of sugar derivatives, different patterns can be applied.; # The choice of patterns and their combinations will depend on the contents of the database; # e.g. natural products, nucleoside analoges with modified sugars, ... as well as on the ; # desired restriction. Sugar_pattern_1: [OX2;$([r5]1@C@C@C(O)@C1),$([r6]1@C@C@C(O)@C(O)@C1)]; # 5 or 6-membered ring containing one O and at least one (r5) or two (r6) oxygen-substituents. . Sugar_pattern_2: [OX2;$([r5]1@C(!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C@C1),$([r6]1@C(!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C@C@C1)]; # 5 or 6-membered ring containing one O an",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:33401,Integrability,bridg,bridgehead,33401,"ecial Patterns; # ===============================. # III.1 Chains; # ------------. # some simple chains. # III.2 Rings; # -----------. Aromatic: a. Heterocyclic: [!#6;!R0]; # may be aromatic or not. Epoxide: [OX2r3]1[#6r3][#6r3]1; # toxic/reactive. may be annelated to aromat, but must not be aromatic itself (oxirane-2,3-dione). NH_aziridine: [NX3H1r3]1[#6r3][#6r3]1; # toxic/reactive according to Maybridge's garbage filter. Spiro: [D4R;$(*(@*)(@*)(@*)@*)]; # at least two different rings can be found which are sharing just one atom.; # these two rings can be connected by a third ring, so it matches also some ; # bridged systems, like morphine. Annelated_rings: [R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]; # two different rings sharing exactly two atoms. Bridged_rings: [R;$(*(@*)(@*)@*);!$([D4R;$(*(@*)(@*)(@*)@*)]);!$([R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])])]; # part of two or more rings, not spiro, not annelated -> finds bridgehead atoms, ; # but only if they are not annelated at the same time - otherwise impossible (?); # to distinguish from non-bridgehead annelated atoms. # some basic ring-patterns (just size, no other information):. # III.3 Sugars and Nucleosides/Nucleotides, Steroids; # --------------------------------------------------. # because of the large variety of sugar derivatives, different patterns can be applied.; # The choice of patterns and their combinations will depend on the contents of the database; # e.g. natural products, nucleoside analoges with modified sugars, ... as well as on the ; # desired restriction. Sugar_pattern_1: [OX2;$([r5]1@C@C@C(O)@C1),$([r6]1@C@C@C(O)@C(O)@C1)]; # 5 or 6-membered ring containing one O and at least one (r5) or two (r6) oxygen-substituents. . Sugar_pattern_2: [OX2;$([r5]1@C(!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C@C1),$([r6]1@C(!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C@C@C1)]; # 5 or 6-membered ring containing one O an",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:33742,Integrability,depend,depend,33742,"ound which are sharing just one atom.; # these two rings can be connected by a third ring, so it matches also some ; # bridged systems, like morphine. Annelated_rings: [R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]; # two different rings sharing exactly two atoms. Bridged_rings: [R;$(*(@*)(@*)@*);!$([D4R;$(*(@*)(@*)(@*)@*)]);!$([R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])])]; # part of two or more rings, not spiro, not annelated -> finds bridgehead atoms, ; # but only if they are not annelated at the same time - otherwise impossible (?); # to distinguish from non-bridgehead annelated atoms. # some basic ring-patterns (just size, no other information):. # III.3 Sugars and Nucleosides/Nucleotides, Steroids; # --------------------------------------------------. # because of the large variety of sugar derivatives, different patterns can be applied.; # The choice of patterns and their combinations will depend on the contents of the database; # e.g. natural products, nucleoside analoges with modified sugars, ... as well as on the ; # desired restriction. Sugar_pattern_1: [OX2;$([r5]1@C@C@C(O)@C1),$([r6]1@C@C@C(O)@C(O)@C1)]; # 5 or 6-membered ring containing one O and at least one (r5) or two (r6) oxygen-substituents. . Sugar_pattern_2: [OX2;$([r5]1@C(!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C@C1),$([r6]1@C(!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C@C@C1)]; # 5 or 6-membered ring containing one O and an acetal-like bond at postion 2. . Sugar_pattern_combi: [OX2;$([r5]1@C(!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C(O)@C1),$([r6]1@C(!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C(O)@C(O)@C1)]; # combination of the two above. Sugar_pattern_2_reducing: [OX2;$([r5]1@C(!@[OX2H1])@C@C@C1),$([r6]1@C(!@[OX2H1])@C@C@C@C1)]; # 5 or 6-membered cyclic hemi-acetal. Sugar_pattern_2_alpha: [OX2;$([r5]1@[C@@](!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C@C1),$([r6]1@[C@@](!@[OX2,NX3,SX2,FX1,ClX1,BrX1,IX1])@C@C@C@C1)]; # 5 or ",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:18963,Safety,avoid,avoid,18963,"art of a ring, even aromatic. Thiocarbonic_acid_esterhalide: [#6;!$(C=[O,N,S])][OX2;!R][CX3](=[SX1])[OX2][FX1,ClX1,BrX1,IX1]. Thiocarbonic_acid_monoester: [#6;!$(C=[O,N,S])][OX2;!R][CX3](=[SX1])[$([OX2H]),$([OX1-])]. Urea:[#7X3;!$([#7][!#6])][#6X3](=[OX1])[#7X3;!$([#7][!#6])]; # no check whether part of imide, biuret, etc. Aromatic structures are only hit if; # both N share no double bonds, like in the dioxo-form of uracil. Thiourea: [#7X3;!$([#7][!#6])][#6X3](=[SX1])[#7X3;!$([#7][!#6])]. Isourea: [#7X2;!$([#7][!#6])]=,:[#6X3]([#8X2&!$([#8][!#6]),OX1-])[#7X3;!$([#7][!#6])]; # O may be substituted. no check whether further amide-like bonds are present. Aromatic ; # structures are only hit if single bonded N shares no additional double bond, like in; # the 1-hydroxy-3-oxo form of uracil. Isothiourea: [#7X2;!$([#7][!#6])]=,:[#6X3]([#16X2&!$([#16][!#6]),SX1-])[#7X3;!$([#7][!#6])]. Guanidine: [N;v3X3,v4X4+][CX3](=[N;v3X2,v4X3+])[N;v3X3,v4X4+]; # also hits guanidinium salts. v3 and v4 to avoid nitroamidines. Carbaminic_acid: [NX3]C(=[OX1])[O;X2H,X1-]; # quite unstable, unlikely to be found. Also hits salts. Urethan: [#7X3][#6](=[OX1])[#8X2][#6]; # also hits when part of a ring, no check whether the last C is part of carbonyl. Biuret: [#7X3][#6](=[OX1])[#7X3][#6](=[OX1])[#7X3]. Semicarbazide: [#7X3][#7X3][#6X3]([#7X3;!$([#7][#7])])=[OX1]. Carbazide: [#7X3][#7X3][#6X3]([#7X3][#7X3])=[OX1]. Semicarbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3;!$([#7][#7])])=[OX1]. Carbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3][#7X3])=[OX1]. Thiosemicarbazide: [#7X3][#7X3][#6X3]([#7X3;!$([#7][#7])])=[SX1]. Thiocarbazide: [#7X3][#7X3][#6X3]([#7X3][#7X3])=[SX1]. Thiosemicarbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3;!$([#7][#7])])=[SX1]. Thiocarbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3][#7X3])=[SX1]. Isocyanate: [NX2]=[CX2]=[OX1]. Cyanate: [OX2][CX2]#[NX1]. Isothiocyanate: [NX2]=[CX2]=[SX1]. Thiocyanate: [SX2][CX2]#[NX1]. Carbodiimide: [NX2]=[CX2]=[NX2]. Orthocarbonic_derivatives: [CX4H0]([O,S,#7])([O,S,#7])(",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:20027,Safety,avoid,avoid,20027,"1])[O;X2H,X1-]; # quite unstable, unlikely to be found. Also hits salts. Urethan: [#7X3][#6](=[OX1])[#8X2][#6]; # also hits when part of a ring, no check whether the last C is part of carbonyl. Biuret: [#7X3][#6](=[OX1])[#7X3][#6](=[OX1])[#7X3]. Semicarbazide: [#7X3][#7X3][#6X3]([#7X3;!$([#7][#7])])=[OX1]. Carbazide: [#7X3][#7X3][#6X3]([#7X3][#7X3])=[OX1]. Semicarbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3;!$([#7][#7])])=[OX1]. Carbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3][#7X3])=[OX1]. Thiosemicarbazide: [#7X3][#7X3][#6X3]([#7X3;!$([#7][#7])])=[SX1]. Thiocarbazide: [#7X3][#7X3][#6X3]([#7X3][#7X3])=[SX1]. Thiosemicarbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3;!$([#7][#7])])=[SX1]. Thiocarbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3][#7X3])=[SX1]. Isocyanate: [NX2]=[CX2]=[OX1]. Cyanate: [OX2][CX2]#[NX1]. Isothiocyanate: [NX2]=[CX2]=[SX1]. Thiocyanate: [SX2][CX2]#[NX1]. Carbodiimide: [NX2]=[CX2]=[NX2]. Orthocarbonic_derivatives: [CX4H0]([O,S,#7])([O,S,#7])([O,S,#7])[O,S,#7,F,Cl,Br,I]; # halogen allowed just once, to avoid mapping to -OCF3 and similar groups (much more; # stable as for example C(OCH3)4). # I.6 Aromatics; # -------------. # I know that this classification is not very logical, arylamines are found under I.2 ... Phenol: [OX2H][c]. 1,2-Diphenol: [OX2H][c][c][OX2H]. Arylchloride: [Cl][c]. Arylfluoride: [F][c]. Arylbromide: [Br][c]. Aryliodide: [I][c]. Arylthiol: [SX2H][c]. Iminoarene: [c]=[NX2;$([H1]),$([H0][#6;!$([C]=[N,S,O])])]; # N may be substituted with H or C, but not carbonyl or similar; # aromatic atom is always C, not S or P (these are not planar when substituted). Oxoarene: [c]=[OX1]. Thioarene: [c]=[SX1]. Hetero_N_basic_H: [nX3H1+0]; # as in pyrole. uncharged to exclude pyridinium ions. Hetero_N_basic_no_H: [nX3H0+0]; # as in N-methylpyrole. uncharged to exclude pyridinium ions. Hetero_N_nonbasic: [nX2,nX3+]; # as in pyridine, pyridinium. Hetero_O: [o]. Hetero_S: [sX2]; # X2 because Daylight's depictmatch falsely describes C1=CS(=O)C=C1 as aromatic; # (is not pl",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:20196,Testability,log,logical,20196,"t of carbonyl. Biuret: [#7X3][#6](=[OX1])[#7X3][#6](=[OX1])[#7X3]. Semicarbazide: [#7X3][#7X3][#6X3]([#7X3;!$([#7][#7])])=[OX1]. Carbazide: [#7X3][#7X3][#6X3]([#7X3][#7X3])=[OX1]. Semicarbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3;!$([#7][#7])])=[OX1]. Carbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3][#7X3])=[OX1]. Thiosemicarbazide: [#7X3][#7X3][#6X3]([#7X3;!$([#7][#7])])=[SX1]. Thiocarbazide: [#7X3][#7X3][#6X3]([#7X3][#7X3])=[SX1]. Thiosemicarbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3;!$([#7][#7])])=[SX1]. Thiocarbazone: [#7X2](=[#6])[#7X3][#6X3]([#7X3][#7X3])=[SX1]. Isocyanate: [NX2]=[CX2]=[OX1]. Cyanate: [OX2][CX2]#[NX1]. Isothiocyanate: [NX2]=[CX2]=[SX1]. Thiocyanate: [SX2][CX2]#[NX1]. Carbodiimide: [NX2]=[CX2]=[NX2]. Orthocarbonic_derivatives: [CX4H0]([O,S,#7])([O,S,#7])([O,S,#7])[O,S,#7,F,Cl,Br,I]; # halogen allowed just once, to avoid mapping to -OCF3 and similar groups (much more; # stable as for example C(OCH3)4). # I.6 Aromatics; # -------------. # I know that this classification is not very logical, arylamines are found under I.2 ... Phenol: [OX2H][c]. 1,2-Diphenol: [OX2H][c][c][OX2H]. Arylchloride: [Cl][c]. Arylfluoride: [F][c]. Arylbromide: [Br][c]. Aryliodide: [I][c]. Arylthiol: [SX2H][c]. Iminoarene: [c]=[NX2;$([H1]),$([H0][#6;!$([C]=[N,S,O])])]; # N may be substituted with H or C, but not carbonyl or similar; # aromatic atom is always C, not S or P (these are not planar when substituted). Oxoarene: [c]=[OX1]. Thioarene: [c]=[SX1]. Hetero_N_basic_H: [nX3H1+0]; # as in pyrole. uncharged to exclude pyridinium ions. Hetero_N_basic_no_H: [nX3H0+0]; # as in N-methylpyrole. uncharged to exclude pyridinium ions. Hetero_N_nonbasic: [nX2,nX3+]; # as in pyridine, pyridinium. Hetero_O: [o]. Hetero_S: [sX2]; # X2 because Daylight's depictmatch falsely describes C1=CS(=O)C=C1 as aromatic; # (is not planar because of lonepair at S). Heteroaromatic: [a;!c]. # Part II: N, S, P, Si, B ; # =======================. # II.1 Nitrogen; # -------------. Nitrite: [NX2](=[OX1])[O;$([X2]),$",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:9517,Usability,simpl,simple,9517,".. Enolether: [OX2]([#6;!$(C=[N,O,S])])[CX3;$([H0][#6]),$([H1])]=[CX3]; # finds also endiodiethers, but not enolesters, no aromats. Enolester: [OX2]([CX3]=[OX1])[#6X3;$([#6][#6]),$([H1])]=[#6X3;!$(C[OX2H])]. Enamine: [NX3;$([NH2][CX3]),$([NH1]([CX3])[#6]),$([N]([CX3])([#6])[#6]);!$([N]*=[#7,#8,#15,#16])][CX3;$([CH]),$([C][#6])]=[CX3]; # does not hit amines attached to aromatic rings, nor may the nitrogen be aromatic. Thioenol: [SX2H][CX3;$([H1]),$(C[#6])]=[CX3]. Thioenolether: [SX2]([#6;!$(C=[N,O,S])])[CX3;$(C[#6]),$([CH])]=[CX3]. # I.4: Three Carbon-Hetero Bonds (Carboxyl and Derivatives); # ------------------------------. Acylchloride: [CX3;$([R0][#6]),$([H1R0])](=[OX1])[ClX1] . Acylfluoride: [CX3;$([R0][#6]),$([H1R0])](=[OX1])[FX1] . Acylbromide: [CX3;$([R0][#6]),$([H1R0])](=[OX1])[BrX1] . Acyliodide: [CX3;$([R0][#6]),$([H1R0])](=[OX1])[IX1]. Acylhalide: [CX3;$([R0][#6]),$([H1R0])](=[OX1])[FX1,ClX1,BrX1,IX1]; # all of the above. # The following contains all simple carboxylic combinations of O, N, S, & Hal -; # - acids, esters, amides, ... as well as a few extra cases (anhydride, hydrazide...); # Cyclic structures (including aromats) like lactones, lactames, ... got their own ; # definitions. Structures where both heteroatoms are part of an aromatic ring ; # (oxazoles, imidazoles, ...) were excluded. Carboxylic_acid: [CX3;$([R0][#6]),$([H1R0])](=[OX1])[$([OX2H]),$([OX1-])]; # includes carboxylate anions. Carboxylic_ester: [CX3;$([R0][#6]),$([H1R0])](=[OX1])[OX2][#6;!$(C=[O,N,S])]; # does not hit anhydrides or lactones. Lactone: [#6][#6X3R](=[OX1])[#8X2][#6;!$(C=[O,N,S])]; # may also be aromatic. Carboxylic_anhydride: [CX3;$([H0][#6]),$([H1])](=[OX1])[#8X2][CX3;$([H0][#6]),$([H1])](=[OX1]); # anhydride formed by two carboxylic acids, no mixed anhydrides (e.g. between carboxylic acid and sulfuric acid); may be part of a ring, even aromatic. Carboxylic_acid_derivative: [$([#6X3H0][#6]),$([#6X3H])](=[!#6])[!#6]; # includes most of the structures of I.4 and many more, ",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt:32327,Usability,simpl,simple,32327,"alide: [SiX4]([FX1,ClX1,BrX1,IX1])([#6])([#6])[#6]; # reagents for inserting protection groups. Het_trialkylsilane: [SiX4]([!#6])([#6])([#6])[#6]; # mostly acid-labile protection groups such as trimethylsilyl-ethers . Dihet_dialkylsilane: [SiX4]([!#6])([!#6])([#6])[#6]. Trihet_alkylsilane: [SiX4]([!#6])([!#6])([!#6])[#6]. Silicic_acid_derivative: [SiX4]([!#6])([!#6])([!#6])[!#6]; # four substituent which are neither C nor H. # II.5 Boron; # ----------. Trialkylborane: [BX3]([#6])([#6])[#6] ; # also carbonyls allowed. Boric_acid_derivatives: [BX3]([!#6])([!#6])[!#6]; # includes acids, esters, amides, ... H-substituent at B is very rare. Boronic_acid_derivative: [BX3]([!#6])([!#6])[!#6]; # # includes acids, esters, amides, ... Borohydride: [BH1,BH2,BH3,BH4]; # at least one H attached to B. Quaternary_boron: [BX4]; # mostly borates (negative charge), in complex with Lewis-base. # Part III: Some Special Patterns; # ===============================. # III.1 Chains; # ------------. # some simple chains. # III.2 Rings; # -----------. Aromatic: a. Heterocyclic: [!#6;!R0]; # may be aromatic or not. Epoxide: [OX2r3]1[#6r3][#6r3]1; # toxic/reactive. may be annelated to aromat, but must not be aromatic itself (oxirane-2,3-dione). NH_aziridine: [NX3H1r3]1[#6r3][#6r3]1; # toxic/reactive according to Maybridge's garbage filter. Spiro: [D4R;$(*(@*)(@*)(@*)@*)]; # at least two different rings can be found which are sharing just one atom.; # these two rings can be connected by a third ring, so it matches also some ; # bridged systems, like morphine. Annelated_rings: [R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]; # two different rings sharing exactly two atoms. Bridged_rings: [R;$(*(@*)(@*)@*);!$([D4R;$(*(@*)(@*)(@*)@*)]);!$([R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])]@[R;$(*(@*)(@*)@*);!$([R2;$(*(@*)(@*)(@*)@*)])])]; # part of two or more rings, not spiro, not annelated -> finds bridgehead atoms, ; # but only if they are not annelated ",MatchSource.DOCS,data/SMARTS_InteLigand.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/SMARTS_InteLigand.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/torlib.txt:1587,Integrability,bridg,bridges,1587,"r the rotor rule #; # * A set of 4 ""reference atoms"" (as integers, numbered from 1 #; # in the specified SMARTS pattern #; # * At least one torsion value (in degrees) #; # * Optionally ending with ""Delta"" and a delta value #; # (i.e., the resolution of a dihedral step #; # #; # SMARTS rules will be attempted first, then hybridization #; # #; ##############################################################################. SP3-SP3 60.0 -60.0 180.0; SP2-SP2 0.0 180.0 -30.0 30.0 150.0 -150.0; SP3-SP2 0.0 30.0 -30.0 60.0 -60.0 120.0 -120.0 -150.0 150.0 180.0 -90.0 90.0. # ring bonds; [r4]-[r4]-[r4]-[r4] 1 2 3 4 0.0 25.0 -25.0; [r5]-[r5]-[r5]-[r5] 1 2 3 4 0.0 15.0 -15.0 35.0 -35.0; [r6]-[r6]-[r6]-[r6] 1 2 3 4 0.0 30.0 -30.0 60.0 -60.0; [r7]-[r7]-[r7]-[r7] 1 2 3 4 0.0; [r8]-[r8]-[r8]-[r8] 1 2 3 4 0.0 30.0 -30.0 60.0 -60.0 90.0 -90.0 120.0 -120.0. # Many of these rules came from the Supporting Information; # from Irwin, et. al., J. Med. Chem. (2006) 49(23) 6789-6801. #polysaccaride bridges; O@[CD3]O[CD3]([#1])@C 2 3 4 5 0.0 30.0 -30.0 180.0; O@[CD3]([#1])O[CD3]([#1])@C 3 2 4 5 0.0 30.0 -30.0 180.0. #acids; [OD1]~C(~[OD1])[CX4](*)* 1 2 4 5 30.0 -30.0 -60.0 60.0 90.0 -90.0 0.0 180.0; [a]cC([OD1])=O 1 2 3 4 0.0 20.0 -20.0; [OD1]C(=O)[CD2]C 1 2 4 5 0.0 45.0 90.0. #sulfonamides; NS(=O)(=O)c1[cD2][cD2]a[cD2][cD2]1 1 2 5 6 90.0; c([aD2])S(=O)(=O)[ND2][CD2] 1 3 6 7 60.0 -60.0; O=S(=O)N[CX4D3]* 2 4 5 6 -90.0 90.0 120.0 -120.0; O=S(=O)N[CX4D2]* 2 4 5 6 -90.0 90.0 120.0 -120.0; [c]S(=O)(=O)NC 1 2 5 6 -70.0 70.0 90.0 -90.0 50.0 -50.0; *=*-S(=O)(=O)C 1 2 3 6 90.0 -90.0 60.0 -60.0; O=S(=O)N[CH2] 1 2 4 5 -60.0 60.0 180.0 0.0 30.0 -30.0; [aD2]c([aD2])S(=O)(=O)[ND2^3] 1 2 4 7 90.0 -90.0 120.0 -120.0 60.0 -60.0; [aD2]c([aD3])S(=O)(=O)[ND2^3] 1 2 4 7 80.0 -80.0 110.0 -110.0; [aD3]c([aD3])S(=O)(=O)[ND2^3] 1 2 4 7 70.0 -70.0 110.0 -110.0; [aD2]c([aD2])S(=O)(=O)[CD2^3] 1 2 4 7 90.0 -90.0 110.0 -110.0 70.0 -70.0; [a]cS(=O)(=O)[C,N] 1 2 3 6 60.0 -60.0 90.0 -90.0 120.0 -120.0 0.0 180.0; aS(=O)(=O)[ND",MatchSource.DOCS,data/torlib.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/data/torlib.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/CMakeLists.txt:47,Deployability,install,install,47,"include(GNUInstallDirs). file(GLOB man_1 *.1); install(FILES ${man_1} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1); install(FILES splash.png DESTINATION share/openbabel/${BABEL_VERSION}). OPTION(BUILD_DOCS ""Build Open Babel documentation"" OFF); IF(BUILD_DOCS); find_package(Doxygen); if(NOT DOXYGEN_EXECUTABLE); return(); endif(NOT DOXYGEN_EXECUTABLE); IF(DOT); SET(HAVE_DOT YES); ELSE(DOT); SET(HAVE_DOT NO); ENDIF(DOT); # This processes our Doxyfile.in and substitutes paths to generate; # a final Doxyfile; CONFIGURE_FILE(${openbabel_SOURCE_DIR}/doc/Doxyfile.in; ${openbabel_SOURCE_DIR}/Doxyfile; ); # This creates a new target to build documentation.; # It runs ${DOXYGEN} which is the full path and executable to; # Doxygen on your system, set by the FindDoxygen.cmake module; # It runs the final generated Doxyfile against it.; # The DOT_PATH is substituted into the Doxyfile.; ADD_CUSTOM_TARGET(docs; COMMAND ${DOXYGEN_EXECUTABLE} ${openbabel_SOURCE_DIR}/Doxyfile; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}; ); ENDIF(BUILD_DOCS). OPTION(BUILD_EXAMPLES ""Build Open Babel examples"" OFF); IF(BUILD_EXAMPLES); add_subdirectory(examples); ENDIF(BUILD_EXAMPLES); ",MatchSource.DOCS,doc/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/CMakeLists.txt:113,Deployability,install,install,113,"include(GNUInstallDirs). file(GLOB man_1 *.1); install(FILES ${man_1} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1); install(FILES splash.png DESTINATION share/openbabel/${BABEL_VERSION}). OPTION(BUILD_DOCS ""Build Open Babel documentation"" OFF); IF(BUILD_DOCS); find_package(Doxygen); if(NOT DOXYGEN_EXECUTABLE); return(); endif(NOT DOXYGEN_EXECUTABLE); IF(DOT); SET(HAVE_DOT YES); ELSE(DOT); SET(HAVE_DOT NO); ENDIF(DOT); # This processes our Doxyfile.in and substitutes paths to generate; # a final Doxyfile; CONFIGURE_FILE(${openbabel_SOURCE_DIR}/doc/Doxyfile.in; ${openbabel_SOURCE_DIR}/Doxyfile; ); # This creates a new target to build documentation.; # It runs ${DOXYGEN} which is the full path and executable to; # Doxygen on your system, set by the FindDoxygen.cmake module; # It runs the final generated Doxyfile against it.; # The DOT_PATH is substituted into the Doxyfile.; ADD_CUSTOM_TARGET(docs; COMMAND ${DOXYGEN_EXECUTABLE} ${openbabel_SOURCE_DIR}/Doxyfile; WORKING_DIRECTORY ${openbabel_SOURCE_DIR}; ); ENDIF(BUILD_DOCS). OPTION(BUILD_EXAMPLES ""Build Open Babel examples"" OFF); IF(BUILD_EXAMPLES); add_subdirectory(examples); ENDIF(BUILD_EXAMPLES); ",MatchSource.DOCS,doc/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt:258,Deployability,install,install,258,; file(GLOB openbabel_headers openbabel/*.h); file(GLOB math_headers openbabel/math/*.h); file(GLOB stereo_headers openbabel/stereo/*.h); file(GLOB depict_headers openbabel/depict/*.h); file(GLOB lbfgs_headers LBFGS/*.h). if(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES inchi_api.h DESTINATION include/inchi); endif(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES chemdrawcdx.h DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${openbabel_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${math_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/math); install(FILES ${stereo_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/stereo); install(FILES ${depict_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/depict); if(EIGEN2_FOUND OR EIGEN3_FOUND); install(FILES LBFGS.h DESTINATION ${OB_INCLUDE_DIRS}); install(FILES ${lbfgs_headers} DESTINATION ${OB_INCLUDE_DIRS}/LBFGS); endif(); ,MatchSource.DOCS,include/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt:351,Deployability,install,install,351,; file(GLOB openbabel_headers openbabel/*.h); file(GLOB math_headers openbabel/math/*.h); file(GLOB stereo_headers openbabel/stereo/*.h); file(GLOB depict_headers openbabel/depict/*.h); file(GLOB lbfgs_headers LBFGS/*.h). if(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES inchi_api.h DESTINATION include/inchi); endif(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES chemdrawcdx.h DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${openbabel_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${math_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/math); install(FILES ${stereo_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/stereo); install(FILES ${depict_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/depict); if(EIGEN2_FOUND OR EIGEN3_FOUND); install(FILES LBFGS.h DESTINATION ${OB_INCLUDE_DIRS}); install(FILES ${lbfgs_headers} DESTINATION ${OB_INCLUDE_DIRS}/LBFGS); endif(); ,MatchSource.DOCS,include/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt:422,Deployability,install,install,422,; file(GLOB openbabel_headers openbabel/*.h); file(GLOB math_headers openbabel/math/*.h); file(GLOB stereo_headers openbabel/stereo/*.h); file(GLOB depict_headers openbabel/depict/*.h); file(GLOB lbfgs_headers LBFGS/*.h). if(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES inchi_api.h DESTINATION include/inchi); endif(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES chemdrawcdx.h DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${openbabel_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${math_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/math); install(FILES ${stereo_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/stereo); install(FILES ${depict_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/depict); if(EIGEN2_FOUND OR EIGEN3_FOUND); install(FILES LBFGS.h DESTINATION ${OB_INCLUDE_DIRS}); install(FILES ${lbfgs_headers} DESTINATION ${OB_INCLUDE_DIRS}/LBFGS); endif(); ,MatchSource.DOCS,include/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt:500,Deployability,install,install,500,; file(GLOB openbabel_headers openbabel/*.h); file(GLOB math_headers openbabel/math/*.h); file(GLOB stereo_headers openbabel/stereo/*.h); file(GLOB depict_headers openbabel/depict/*.h); file(GLOB lbfgs_headers LBFGS/*.h). if(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES inchi_api.h DESTINATION include/inchi); endif(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES chemdrawcdx.h DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${openbabel_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${math_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/math); install(FILES ${stereo_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/stereo); install(FILES ${depict_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/depict); if(EIGEN2_FOUND OR EIGEN3_FOUND); install(FILES LBFGS.h DESTINATION ${OB_INCLUDE_DIRS}); install(FILES ${lbfgs_headers} DESTINATION ${OB_INCLUDE_DIRS}/LBFGS); endif(); ,MatchSource.DOCS,include/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt:578,Deployability,install,install,578,; file(GLOB openbabel_headers openbabel/*.h); file(GLOB math_headers openbabel/math/*.h); file(GLOB stereo_headers openbabel/stereo/*.h); file(GLOB depict_headers openbabel/depict/*.h); file(GLOB lbfgs_headers LBFGS/*.h). if(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES inchi_api.h DESTINATION include/inchi); endif(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES chemdrawcdx.h DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${openbabel_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${math_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/math); install(FILES ${stereo_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/stereo); install(FILES ${depict_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/depict); if(EIGEN2_FOUND OR EIGEN3_FOUND); install(FILES LBFGS.h DESTINATION ${OB_INCLUDE_DIRS}); install(FILES ${lbfgs_headers} DESTINATION ${OB_INCLUDE_DIRS}/LBFGS); endif(); ,MatchSource.DOCS,include/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt:660,Deployability,install,install,660,; file(GLOB openbabel_headers openbabel/*.h); file(GLOB math_headers openbabel/math/*.h); file(GLOB stereo_headers openbabel/stereo/*.h); file(GLOB depict_headers openbabel/depict/*.h); file(GLOB lbfgs_headers LBFGS/*.h). if(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES inchi_api.h DESTINATION include/inchi); endif(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES chemdrawcdx.h DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${openbabel_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${math_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/math); install(FILES ${stereo_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/stereo); install(FILES ${depict_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/depict); if(EIGEN2_FOUND OR EIGEN3_FOUND); install(FILES LBFGS.h DESTINATION ${OB_INCLUDE_DIRS}); install(FILES ${lbfgs_headers} DESTINATION ${OB_INCLUDE_DIRS}/LBFGS); endif(); ,MatchSource.DOCS,include/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt:776,Deployability,install,install,776,; file(GLOB openbabel_headers openbabel/*.h); file(GLOB math_headers openbabel/math/*.h); file(GLOB stereo_headers openbabel/stereo/*.h); file(GLOB depict_headers openbabel/depict/*.h); file(GLOB lbfgs_headers LBFGS/*.h). if(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES inchi_api.h DESTINATION include/inchi); endif(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES chemdrawcdx.h DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${openbabel_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${math_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/math); install(FILES ${stereo_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/stereo); install(FILES ${depict_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/depict); if(EIGEN2_FOUND OR EIGEN3_FOUND); install(FILES LBFGS.h DESTINATION ${OB_INCLUDE_DIRS}); install(FILES ${lbfgs_headers} DESTINATION ${OB_INCLUDE_DIRS}/LBFGS); endif(); ,MatchSource.DOCS,include/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt:831,Deployability,install,install,831,; file(GLOB openbabel_headers openbabel/*.h); file(GLOB math_headers openbabel/math/*.h); file(GLOB stereo_headers openbabel/stereo/*.h); file(GLOB depict_headers openbabel/depict/*.h); file(GLOB lbfgs_headers LBFGS/*.h). if(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES inchi_api.h DESTINATION include/inchi); endif(NOT OPENBABEL_USE_SYSTEM_INCHI); install(FILES chemdrawcdx.h DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${openbabel_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel); install(FILES ${math_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/math); install(FILES ${stereo_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/stereo); install(FILES ${depict_headers} DESTINATION ${OB_INCLUDE_DIRS}/openbabel/depict); if(EIGEN2_FOUND OR EIGEN3_FOUND); install(FILES LBFGS.h DESTINATION ${OB_INCLUDE_DIRS}); install(FILES ${lbfgs_headers} DESTINATION ${OB_INCLUDE_DIRS}/LBFGS); endif(); ,MatchSource.DOCS,include/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/include/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:167,Deployability,install,installed,167,"cmake_minimum_required(VERSION 2.6.0); # Library versioning (used in Mac Python bindings)x; set(SOVERSION 4). if (RUN_SWIG); include(FindSWIG); # This module finds an installed SWIG. It sets the following variables:; # SWIG_FOUND - set to true if SWIG is found; # SWIG_DIR - the directory where swig is installed; # SWIG_EXECUTABLE - the path to the swig executable; # SWIG_VERSION - the version number of the swig executable. find_package(SWIG 2.0); if (NOT SWIG_FOUND); message(STATUS ""SWIG 2.0 NOT found""); return(); endif (NOT SWIG_FOUND); endif (RUN_SWIG). # The following needs to be kept in synch with ..\CMakeLists.txt; if(EIGEN3_FOUND); set (eigen_define ""-DHAVE_EIGEN"" ""-DHAVE_EIGEN3""); include_directories(${EIGEN3_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN3_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); else(); if(EIGEN2_FOUND); set (eigen_define ""-DHAVE_EIGEN""); include_directories(${EIGEN2_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN2_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); endif(); endif(). ###################; # Python; ###################. if (PYTHON_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp OR RUN_SWIG); find_package(PythonInterp); if (NOT PYTHONINTERP_FOUND); message(STATUS ""Python interpreter NOT found""); endif (NOT PYTHONINTERP_FOUND). if (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS); set(Python_ADDITIONAL_VERSIONS ""${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}""); endif (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS). find_package(PythonLibs); if (NOT PYTHONLIBS_FOUND); message(STATUS ""Python libraries NOT found""); endif (NOT PYTHONLIBS_FOUND). if(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND); set(DO_PYTHON_BINDINGS ON BOOL); message(STATUS ""Python bindings will be compiled""); endif(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND). else (); message(STATUS ""Warning: Python bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (); endif (PYTHON_BIND",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:303,Deployability,install,installed,303,"cmake_minimum_required(VERSION 2.6.0); # Library versioning (used in Mac Python bindings)x; set(SOVERSION 4). if (RUN_SWIG); include(FindSWIG); # This module finds an installed SWIG. It sets the following variables:; # SWIG_FOUND - set to true if SWIG is found; # SWIG_DIR - the directory where swig is installed; # SWIG_EXECUTABLE - the path to the swig executable; # SWIG_VERSION - the version number of the swig executable. find_package(SWIG 2.0); if (NOT SWIG_FOUND); message(STATUS ""SWIG 2.0 NOT found""); return(); endif (NOT SWIG_FOUND); endif (RUN_SWIG). # The following needs to be kept in synch with ..\CMakeLists.txt; if(EIGEN3_FOUND); set (eigen_define ""-DHAVE_EIGEN"" ""-DHAVE_EIGEN3""); include_directories(${EIGEN3_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN3_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); else(); if(EIGEN2_FOUND); set (eigen_define ""-DHAVE_EIGEN""); include_directories(${EIGEN2_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN2_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); endif(); endif(). ###################; # Python; ###################. if (PYTHON_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp OR RUN_SWIG); find_package(PythonInterp); if (NOT PYTHONINTERP_FOUND); message(STATUS ""Python interpreter NOT found""); endif (NOT PYTHONINTERP_FOUND). if (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS); set(Python_ADDITIONAL_VERSIONS ""${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}""); endif (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS). find_package(PythonLibs); if (NOT PYTHONLIBS_FOUND); message(STATUS ""Python libraries NOT found""); endif (NOT PYTHONLIBS_FOUND). if(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND); set(DO_PYTHON_BINDINGS ON BOOL); message(STATUS ""Python bindings will be compiled""); endif(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND). else (); message(STATUS ""Warning: Python bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (); endif (PYTHON_BIND",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:4341,Deployability,install,install,4341,"YTHON_LIBRARIES} ${BABEL_LIBRARY}); endif(); endif(). if(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .so ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); 	#workaround for https://bugs.launchpad.net/ubuntu/+source/python3-defaults/+bug/1814653; 	if(NOT ${PYTHON_INSTDIR} MATCHES ""python[0-9].[0-9]""); 	 execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,1,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); set(PYTHON_INSTDIR ""${PYTHON_INSTDIR}/dist-packages""); 	endif(); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); else(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .pyd ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${op",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:4451,Deployability,install,install,4451,"YTHON_LIBRARIES} ${BABEL_LIBRARY}); endif(); endif(). if(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .so ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); 	#workaround for https://bugs.launchpad.net/ubuntu/+source/python3-defaults/+bug/1814653; 	if(NOT ${PYTHON_INSTDIR} MATCHES ""python[0-9].[0-9]""); 	 execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,1,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); set(PYTHON_INSTDIR ""${PYTHON_INSTDIR}/dist-packages""); 	endif(); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); else(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .pyd ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${op",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:4596,Deployability,install,install,4596,"); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); 	#workaround for https://bugs.launchpad.net/ubuntu/+source/python3-defaults/+bug/1814653; 	if(NOT ${PYTHON_INSTDIR} MATCHES ""python[0-9].[0-9]""); 	 execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,1,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); set(PYTHON_INSTDIR ""${PYTHON_INSTDIR}/dist-packages""); 	endif(); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); else(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .pyd ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:4742,Deployability,install,install,4742,"LL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); 	#workaround for https://bugs.launchpad.net/ubuntu/+source/python3-defaults/+bug/1814653; 	if(NOT ${PYTHON_INSTDIR} MATCHES ""python[0-9].[0-9]""); 	 execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,1,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); set(PYTHON_INSTDIR ""${PYTHON_INSTDIR}/dist-packages""); 	endif(); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); else(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .pyd ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DI",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:5304,Deployability,install,install,5304,"${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); else(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .pyd ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); add_custom_command(TARGET bindings_python POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py ${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}; ); endif(NOT WIN32); endif (DO_PYTHON_BINDINGS). ###################; # Java; ###################. if (JAVA_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG). find_package(JNI); if (NOT JNI_INCLUDE_DIRS); message(STATUS ""Java Native Interface NOT found. Java bindings will NOT be compiled.""); endif (). if (RU",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:5414,Deployability,install,install,5414,"${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); else(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .pyd ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); add_custom_command(TARGET bindings_python POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py ${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}; ); endif(NOT WIN32); endif (DO_PYTHON_BINDINGS). ###################; # Java; ###################. if (JAVA_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG). find_package(JNI); if (NOT JNI_INCLUDE_DIRS); message(STATUS ""Java Native Interface NOT found. Java bindings will NOT be compiled.""); endif (). if (RU",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:5559,Deployability,install,install,5559,"enbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); else(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .pyd ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); add_custom_command(TARGET bindings_python POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py ${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}; ); endif(NOT WIN32); endif (DO_PYTHON_BINDINGS). ###################; # Java; ###################. if (JAVA_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG). find_package(JNI); if (NOT JNI_INCLUDE_DIRS); message(STATUS ""Java Native Interface NOT found. Java bindings will NOT be compiled.""); endif (). if (RUN_SWIG); find_package(Java); if (NOT JAVA_COMPILE); message(STATUS ""Java compiler NOT found. Java bindings will NOT be generated.""); set(JAVAC_FAIL ON BOOL); endif ",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:5705,Deployability,install,install,5705,"openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); else(NOT WIN32); set_target_properties(bindings_python PROPERTIES; OUTPUT_NAME _openbabel; PREFIX """"; SUFFIX .pyd ); execute_process(; COMMAND; ${PYTHON_EXECUTABLE} -c ""from distutils import sysconfig; print(sysconfig.get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))""; OUTPUT_VARIABLE PYTHON_INSTDIR; OUTPUT_STRIP_TRAILING_WHITESPACE; ); if(NOT BINDINGS_ONLY); add_dependencies(bindings_python openbabel); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); add_custom_command(TARGET bindings_python POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py ${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}; ); endif(NOT WIN32); endif (DO_PYTHON_BINDINGS). ###################; # Java; ###################. if (JAVA_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG). find_package(JNI); if (NOT JNI_INCLUDE_DIRS); message(STATUS ""Java Native Interface NOT found. Java bindings will NOT be compiled.""); endif (). if (RUN_SWIG); find_package(Java); if (NOT JAVA_COMPILE); message(STATUS ""Java compiler NOT found. Java bindings will NOT be generated.""); set(JAVAC_FAIL ON BOOL); endif (NOT JAVA_COMPILE); endif (RUN_SWIG). if(JNI_INCLUDE_DIRS AND NOT JAVAC_FAIL); set(DO_JAVA_BINDINGS ON BOOL); message(STATUS ""Java bindings will",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:8571,Deployability,install,install,8571,"java/org/openbabel/*.java""; COMMAND ${CMAKE_COMMAND} -E chdir ${openbabel_BINARY_DIR}/scripts/java ${JAVA_ARCHIVE} cf openbabel.jar org; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_BINARY_DIR}/scripts/java/openbabel.jar ${openbabel_SOURCE_DIR}/scripts/java; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_BINARY_DIR}/scripts/java/org; MAIN_DEPENDENCY openbabel-java.i; ); endif (RUN_SWIG). add_library(bindings_java MODULE ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp); if(BINDINGS_ONLY); target_link_libraries(bindings_java ${JNI_LIBRARIES} ${BABEL_SYSTEM_LIBRARY}); else(); target_link_libraries(bindings_java ${JNI_LIBRARIES} ${BABEL_LIBRARY}); endif(). set_target_properties(bindings_java PROPERTIES; OUTPUT_NAME openbabel_java); if(APPLE); set_target_properties(bindings_java PROPERTIES SUFFIX "".jnilib""); endif(APPLE); if(NOT BINDINGS_ONLY); add_dependencies(bindings_java openbabel); endif(). install(TARGETS bindings_java; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_java); install(FILES ${openbabel_SOURCE_DIR}/scripts/java/openbabel.jar; DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_java). endif (DO_JAVA_BINDINGS). ###################; # R; ###################. if (R_BINDINGS); 	if (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG). if (RUN_SWIG); set(DO_R_BINDINGS ON BOOL); endif (RUN_SWIG). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG); 	 message(STATUS ""Warning: R bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG); endif (R_BINDINGS). if (DO_R_BINDINGS). include_directories(/usr/share/R/include ); if (RUN_SWIG); 		 add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp; 			 COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_BINARY_DIR}/scripts/R; 			 COMMAND ${SWIG_EXECUTABLE} -r -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_D",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:8668,Deployability,install,install,8668,"java/org/openbabel/*.java""; COMMAND ${CMAKE_COMMAND} -E chdir ${openbabel_BINARY_DIR}/scripts/java ${JAVA_ARCHIVE} cf openbabel.jar org; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_BINARY_DIR}/scripts/java/openbabel.jar ${openbabel_SOURCE_DIR}/scripts/java; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_BINARY_DIR}/scripts/java/org; MAIN_DEPENDENCY openbabel-java.i; ); endif (RUN_SWIG). add_library(bindings_java MODULE ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp); if(BINDINGS_ONLY); target_link_libraries(bindings_java ${JNI_LIBRARIES} ${BABEL_SYSTEM_LIBRARY}); else(); target_link_libraries(bindings_java ${JNI_LIBRARIES} ${BABEL_LIBRARY}); endif(). set_target_properties(bindings_java PROPERTIES; OUTPUT_NAME openbabel_java); if(APPLE); set_target_properties(bindings_java PROPERTIES SUFFIX "".jnilib""); endif(APPLE); if(NOT BINDINGS_ONLY); add_dependencies(bindings_java openbabel); endif(). install(TARGETS bindings_java; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_java); install(FILES ${openbabel_SOURCE_DIR}/scripts/java/openbabel.jar; DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_java). endif (DO_JAVA_BINDINGS). ###################; # R; ###################. if (R_BINDINGS); 	if (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG). if (RUN_SWIG); set(DO_R_BINDINGS ON BOOL); endif (RUN_SWIG). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG); 	 message(STATUS ""Warning: R bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG); endif (R_BINDINGS). if (DO_R_BINDINGS). include_directories(/usr/share/R/include ); if (RUN_SWIG); 		 add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp; 			 COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_BINARY_DIR}/scripts/R; 			 COMMAND ${SWIG_EXECUTABLE} -r -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_D",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:10505,Deployability,install,install,10505,"-naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp ${eigen_define} -outdir ${openbabel_BINARY_DIR}/scripts/R ${openbabel_SOURCE_DIR}/scripts/openbabel-R.i; 			 # COMMAND sed -i -e ""'s/reg\.finalizer(\(.*\)) /reg.finalizer(\1); /g'"" ${openbabel_BINARY_DIR}/scripts/R/openbabelR.R; 			 MAIN_DEPENDENCY openbabel-R.i; ); endif (RUN_SWIG). 	 add_library(bindings_R MODULE ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp); 	 set(R_EXTRA_LINK_FLAGS ""-Wl,--unresolved-symbols=ignore-all""); 	 if(BINDINGS_ONLY); 		 target_link_libraries(bindings_R ${BABEL_SYSTEM_LIBRARY} ${R_EXTRA_LINK_FLAGS}); 	 else(); 		 target_link_libraries(bindings_R ${BABEL_LIBRARY} ${R_EXTRA_LINK_FLAGS}); 	 endif(). 	 set_target_properties(bindings_R PROPERTIES; 		 OUTPUT_NAME openbabel_R); if(NOT BINDINGS_ONLY); 		 add_dependencies(bindings_R openbabel); endif(). 	 install(TARGETS bindings_R; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; 				COMPONENT bindings_R); 	 install(FILES ${openbabel_BINARY_DIR}/scripts/R/openbabel_R.R; DESTINATION ${LIB_INSTALL_DIR}; 				COMPONENT bindings_R). endif (DO_R_BINDINGS). ###################; # Perl; ###################. if (PERL_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG). find_package(PerlLibs); if (NOT PERL_LIBRARY); message(STATUS ""Perl library files NOT found. Perl bindings will NOT be compiled.""); endif (NOT PERL_LIBRARY). if(PERL_LIBRARY); set(DO_PERL_BINDINGS ON BOOL); message(STATUS ""Perl bindings will be compiled""); ### On some Linux OSes, linking against Perl fails due to no -lpthread.; ### The following is an attempt to work around this by taking the; ### link libraries from Perl.; execute_process(; COMMAND; ${PERL_EXECUTABLE} -V:perllibs; OUTPUT_VARIABLE; PERLLIBS_OUTPUT_VARIABLE; RESULT_VARIABLE; PERLLIBS_RESULT_VARIABLE; ); if (NOT PERLLIBS_RESULT_VARIABLE); string(REGEX REPLACE ""perllibs='([^']+)'.*"" ""\\1"" PERL_EXTRA_LINK_FLAGS $",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:10602,Deployability,install,install,10602,"-naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp ${eigen_define} -outdir ${openbabel_BINARY_DIR}/scripts/R ${openbabel_SOURCE_DIR}/scripts/openbabel-R.i; 			 # COMMAND sed -i -e ""'s/reg\.finalizer(\(.*\)) /reg.finalizer(\1); /g'"" ${openbabel_BINARY_DIR}/scripts/R/openbabelR.R; 			 MAIN_DEPENDENCY openbabel-R.i; ); endif (RUN_SWIG). 	 add_library(bindings_R MODULE ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp); 	 set(R_EXTRA_LINK_FLAGS ""-Wl,--unresolved-symbols=ignore-all""); 	 if(BINDINGS_ONLY); 		 target_link_libraries(bindings_R ${BABEL_SYSTEM_LIBRARY} ${R_EXTRA_LINK_FLAGS}); 	 else(); 		 target_link_libraries(bindings_R ${BABEL_LIBRARY} ${R_EXTRA_LINK_FLAGS}); 	 endif(). 	 set_target_properties(bindings_R PROPERTIES; 		 OUTPUT_NAME openbabel_R); if(NOT BINDINGS_ONLY); 		 add_dependencies(bindings_R openbabel); endif(). 	 install(TARGETS bindings_R; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; 				COMPONENT bindings_R); 	 install(FILES ${openbabel_BINARY_DIR}/scripts/R/openbabel_R.R; DESTINATION ${LIB_INSTALL_DIR}; 				COMPONENT bindings_R). endif (DO_R_BINDINGS). ###################; # Perl; ###################. if (PERL_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG). find_package(PerlLibs); if (NOT PERL_LIBRARY); message(STATUS ""Perl library files NOT found. Perl bindings will NOT be compiled.""); endif (NOT PERL_LIBRARY). if(PERL_LIBRARY); set(DO_PERL_BINDINGS ON BOOL); message(STATUS ""Perl bindings will be compiled""); ### On some Linux OSes, linking against Perl fails due to no -lpthread.; ### The following is an attempt to work around this by taking the; ### link libraries from Perl.; execute_process(; COMMAND; ${PERL_EXECUTABLE} -V:perllibs; OUTPUT_VARIABLE; PERLLIBS_OUTPUT_VARIABLE; RESULT_VARIABLE; PERLLIBS_RESULT_VARIABLE; ); if (NOT PERLLIBS_RESULT_VARIABLE); string(REGEX REPLACE ""perllibs='([^']+)'.*"" ""\\1"" PERL_EXTRA_LINK_FLAGS $",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:13486,Deployability,install,install,13486,"l_load_flags { 0x01 }/\"" <${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm >${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm; COMMAND ${CMAKE_COMMAND} -E remove ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new; MAIN_DEPENDENCY openbabel-perl.i; ); endif (NOT WIN32); endif (RUN_SWIG). add_library(bindings_perl MODULE ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp); if(BINDINGS_ONLY); target_link_libraries(bindings_perl ${PERL_LIBRARY} ${BABEL_SYSTEM_LIBRARY} ${PERL_EXTRA_LINK_FLAGS}); else(); target_link_libraries(bindings_perl ${PERL_LIBRARY} ${BABEL_LIBRARY} ${PERL_EXTRA_LINK_FLAGS}); endif(). set_target_properties(bindings_perl PROPERTIES; PREFIX """"; OUTPUT_NAME OpenBabel); if(NOT BINDINGS_ONLY); add_dependencies(bindings_perl openbabel); endif(). install(TARGETS bindings_perl; LIBRARY DESTINATION ${LIB_INSTALL_DIR}/auto/Chemistry/OpenBabel/; COMPONENT bindings_perl); install(FILES ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm; DESTINATION ${LIB_INSTALL_DIR}/Chemistry/; COMPONENT bindings_perl). endif (DO_PERL_BINDINGS). ###################; # Ruby; ###################. if (RUBY_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); find_package(Ruby); if (NOT RUBY_LIBRARY); message(STATUS ""Ruby library files NOT found. Ruby bindings will NOT be compiled.""); endif (NOT RUBY_LIBRARY). if (RUBY_LIBRARY); set(DO_RUBY_BINDINGS ON BOOL); message(STATUS ""Ruby bindings will be compiled""); endif (RUBY_LIBRARY). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); message(STATUS ""Warning: Ruby bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); endif (RUBY_BINDINGS). if (DO_RUBY_BINDINGS). if (RUN_SWIG); set(WORKAROUND_CMAKE260_BUG ""s/rb_define_module(\""Openbabel\"")/rb_defin",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:13609,Deployability,install,install,13609,"l_load_flags { 0x01 }/\"" <${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm >${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm; COMMAND ${CMAKE_COMMAND} -E remove ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new; MAIN_DEPENDENCY openbabel-perl.i; ); endif (NOT WIN32); endif (RUN_SWIG). add_library(bindings_perl MODULE ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp); if(BINDINGS_ONLY); target_link_libraries(bindings_perl ${PERL_LIBRARY} ${BABEL_SYSTEM_LIBRARY} ${PERL_EXTRA_LINK_FLAGS}); else(); target_link_libraries(bindings_perl ${PERL_LIBRARY} ${BABEL_LIBRARY} ${PERL_EXTRA_LINK_FLAGS}); endif(). set_target_properties(bindings_perl PROPERTIES; PREFIX """"; OUTPUT_NAME OpenBabel); if(NOT BINDINGS_ONLY); add_dependencies(bindings_perl openbabel); endif(). install(TARGETS bindings_perl; LIBRARY DESTINATION ${LIB_INSTALL_DIR}/auto/Chemistry/OpenBabel/; COMPONENT bindings_perl); install(FILES ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm; DESTINATION ${LIB_INSTALL_DIR}/Chemistry/; COMPONENT bindings_perl). endif (DO_PERL_BINDINGS). ###################; # Ruby; ###################. if (RUBY_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); find_package(Ruby); if (NOT RUBY_LIBRARY); message(STATUS ""Ruby library files NOT found. Ruby bindings will NOT be compiled.""); endif (NOT RUBY_LIBRARY). if (RUBY_LIBRARY); set(DO_RUBY_BINDINGS ON BOOL); message(STATUS ""Ruby bindings will be compiled""); endif (RUBY_LIBRARY). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); message(STATUS ""Warning: Ruby bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); endif (RUBY_BINDINGS). if (DO_RUBY_BINDINGS). if (RUN_SWIG); set(WORKAROUND_CMAKE260_BUG ""s/rb_define_module(\""Openbabel\"")/rb_defin",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:15790,Deployability,install,install,15790,"include -o ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt ${openbabel_SOURCE_DIR}/scripts/openbabel-ruby.i; COMMAND sed -e '${WORKAROUND_CMAKE_260_BUG}' -e's/void Init_OpenBabel/void Init_openbabel/' <${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt >${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp; COMMAND ${CMAKE_COMMAND} -E remove ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt; MAIN_DEPENDENCY openbabel-ruby.i; ); endif (RUN_SWIG). include_directories(; ${RUBY_INCLUDE_PATH}; ). add_library(bindings_ruby MODULE ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp); if(BINDINGS_ONLY); target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_SYSTEM_LIBRARY}); else(); target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_LIBRARY}); endif(). set_target_properties(bindings_ruby PROPERTIES; OUTPUT_NAME openbabel; PREFIX """" ). if(NOT BINDINGS_ONLY); add_dependencies(bindings_ruby openbabel); endif(). install(TARGETS bindings_ruby; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_ruby). endif (DO_RUBY_BINDINGS). ###################; # CSharp; ###################. if (CSHARP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); if (NOT CSHARP_EXECUTABLE); message(STATUS ""CSHARP_EXECUTABLE NOT defined. .NET bindings will NOT be created.""); endif (NOT CSHARP_EXECUTABLE). if (CSHARP_EXECUTABLE); set(DO_CSHARP_BINDINGS ON BOOL); message(STATUS ""CSharp bindings will be compiled""); endif (CSHARP_EXECUTABLE). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); message(STATUS ""Warning: Csharp bindings NOT found. Generate using -DRUN_SWIG=ON.""); endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); endif (CSHARP_BINDINGS). if (DO_CSHARP_BINDINGS). if (RUN_SWIG); set(PLATFORM_TYPE """"); if (WIN32) # i.e. any Windows; if (CMAKE_GENERATOR MATCHES Win64$); set(PLATFORM_TYPE ""/platform:anycpu""); else(); set(PLATFORM_TYPE ""/pla",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:18348,Deployability,install,install,18348,"_EXECUTABLE} -csharp -c++ -small -O -templatereduce -namespace OpenBabel -outdir ${openbabel_SOURCE_DIR}/scripts/csharp/src -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp ${openbabel_SOURCE_DIR}/scripts/openbabel-csharp.i; COMMAND ${CMAKE_COMMAND} -E chdir ${openbabel_SOURCE_DIR}/scripts/csharp/src ${CSHARP_EXECUTABLE} /target:library ${PLATFORM_TYPE} /keyfile:${openbabel_SOURCE_DIR}/scripts/csharp/obdotnet.snk /optimize /out:${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll *.cs; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; MAIN_DEPENDENCY openbabel-csharp.i; WORKING_DIRECTORY ${openbabel_BINARY_DIR}/scripts; ); endif (RUN_SWIG). add_library(bindings_csharp MODULE ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp); target_link_libraries(bindings_csharp ${BABEL_LIBRARY}); set_target_properties(bindings_csharp PROPERTIES; OUTPUT_NAME openbabel_csharp ); install(TARGETS bindings_csharp LIBRARY DESTINATION ${LIB_INSTALL_DIR}); install(FILES ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll DESTINATION ${LIB_INSTALL_DIR}). endif (DO_CSHARP_BINDINGS). ###################; # PHP; ###################. if (PHP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG). FIND_PROGRAM(PHP_CONFIG_EXECUTABLE; NAMES php5-config php-config; ); if (NOT PHP_CONFIG_EXECUTABLE); message(STATUS ""PHP-Config files NOT found. PHP bindings will NOT be compiled.""); endif (NOT PHP_CONFIG_EXECUTABLE). if(PHP_CONFIG_EXECUTABLE); set(DO_PHP_BINDINGS ON BOOL); message(STATUS ""PHP bindings will be compiled""); execute_process(; COMMAND; ${PHP_CONFIG_EXECUTABLE} --includes; OUTPUT_VARIABLE; PHP_CONFIG_INCLUDES; RESULT_VARIABLE; PHP_CONFIG_RESULT; ); STRING(REPLACE ""\n"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE ""-I"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE "" "" "";"" PHP_CONFIG_INCLUDES ",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:18421,Deployability,install,install,18421,"_EXECUTABLE} -csharp -c++ -small -O -templatereduce -namespace OpenBabel -outdir ${openbabel_SOURCE_DIR}/scripts/csharp/src -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp ${openbabel_SOURCE_DIR}/scripts/openbabel-csharp.i; COMMAND ${CMAKE_COMMAND} -E chdir ${openbabel_SOURCE_DIR}/scripts/csharp/src ${CSHARP_EXECUTABLE} /target:library ${PLATFORM_TYPE} /keyfile:${openbabel_SOURCE_DIR}/scripts/csharp/obdotnet.snk /optimize /out:${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll *.cs; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; MAIN_DEPENDENCY openbabel-csharp.i; WORKING_DIRECTORY ${openbabel_BINARY_DIR}/scripts; ); endif (RUN_SWIG). add_library(bindings_csharp MODULE ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp); target_link_libraries(bindings_csharp ${BABEL_LIBRARY}); set_target_properties(bindings_csharp PROPERTIES; OUTPUT_NAME openbabel_csharp ); install(TARGETS bindings_csharp LIBRARY DESTINATION ${LIB_INSTALL_DIR}); install(FILES ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll DESTINATION ${LIB_INSTALL_DIR}). endif (DO_CSHARP_BINDINGS). ###################; # PHP; ###################. if (PHP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG). FIND_PROGRAM(PHP_CONFIG_EXECUTABLE; NAMES php5-config php-config; ); if (NOT PHP_CONFIG_EXECUTABLE); message(STATUS ""PHP-Config files NOT found. PHP bindings will NOT be compiled.""); endif (NOT PHP_CONFIG_EXECUTABLE). if(PHP_CONFIG_EXECUTABLE); set(DO_PHP_BINDINGS ON BOOL); message(STATUS ""PHP bindings will be compiled""); execute_process(; COMMAND; ${PHP_CONFIG_EXECUTABLE} --includes; OUTPUT_VARIABLE; PHP_CONFIG_INCLUDES; RESULT_VARIABLE; PHP_CONFIG_RESULT; ); STRING(REPLACE ""\n"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE ""-I"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE "" "" "";"" PHP_CONFIG_INCLUDES ",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:21470,Deployability,install,install,21470,"S). if (DO_PHP_BINDINGS); include_directories(; ${PHP_CONFIG_INCLUDES}; ); if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp; COMMAND ${SWIG_EXECUTABLE} -php -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp -outdir ${openbabel_SOURCE_DIR}/scripts/php ${openbabel_SOURCE_DIR}/scripts/openbabel-php.i; COMMAND sed -i -e's/abstract class OBForceField/class OBForceField/g' -e's/abstract class OBFingerprint/class OBFingerprint/g' -e's/abstract class OBOp/class OBOp/g' -e 's/static function FindType/function FindType/g' ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php; MAIN_DEPENDENCY openbabel-php.i; ); endif (RUN_SWIG). # set openbabel.php include path; execute_process(COMMAND sed -i -e ""s,include_once '\\(.*\\)openbabel.php,include_once '${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}/openbabel.php,g"" ${openbabel_SOURCE_DIR}/scripts/php/baphpel.php). add_library(bindings_php MODULE ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp); # Overriding --no-undefined linker flag, since PHP library should not be linked into extension.; set(PHP_EXTRA_LINK_FLAGS ""-Wl,--unresolved-symbols=ignore-all""); if(BINDINGS_ONLY); target_link_libraries(bindings_php ${BABEL_SYSTEM_LIBRARY} ${PHP_EXTRA_LINK_FLAGS}); else(); target_link_libraries(bindings_php ${BABEL_LIBRARY} ${PHP_EXTRA_LINK_FLAGS}); endif(). set_target_properties(bindings_php PROPERTIES; PREFIX """"; OUTPUT_NAME openbabel-php); if(NOT BINDINGS_ONLY); add_dependencies(bindings_php openbabel); endif(). install(TARGETS bindings_php; LIBRARY DESTINATION ${PHP_EXTENSION_DIR}; 	 COMPONENT bindings_php); install(FILES ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php; DESTINATION ${LIB_INSTALL_DIR}; 	 COMPONENT bindings_php); 	install(FILES ${openbabel_SOURCE_DIR}/scripts/php/baphpel.php; 	 DESTINATION ${LIB_INSTALL_DIR}; 	 COMPONENT bindings_php). endif (DO_PHP_BINDINGS); ",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:21569,Deployability,install,install,21569,"S). if (DO_PHP_BINDINGS); include_directories(; ${PHP_CONFIG_INCLUDES}; ); if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp; COMMAND ${SWIG_EXECUTABLE} -php -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp -outdir ${openbabel_SOURCE_DIR}/scripts/php ${openbabel_SOURCE_DIR}/scripts/openbabel-php.i; COMMAND sed -i -e's/abstract class OBForceField/class OBForceField/g' -e's/abstract class OBFingerprint/class OBFingerprint/g' -e's/abstract class OBOp/class OBOp/g' -e 's/static function FindType/function FindType/g' ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php; MAIN_DEPENDENCY openbabel-php.i; ); endif (RUN_SWIG). # set openbabel.php include path; execute_process(COMMAND sed -i -e ""s,include_once '\\(.*\\)openbabel.php,include_once '${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}/openbabel.php,g"" ${openbabel_SOURCE_DIR}/scripts/php/baphpel.php). add_library(bindings_php MODULE ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp); # Overriding --no-undefined linker flag, since PHP library should not be linked into extension.; set(PHP_EXTRA_LINK_FLAGS ""-Wl,--unresolved-symbols=ignore-all""); if(BINDINGS_ONLY); target_link_libraries(bindings_php ${BABEL_SYSTEM_LIBRARY} ${PHP_EXTRA_LINK_FLAGS}); else(); target_link_libraries(bindings_php ${BABEL_LIBRARY} ${PHP_EXTRA_LINK_FLAGS}); endif(). set_target_properties(bindings_php PROPERTIES; PREFIX """"; OUTPUT_NAME openbabel-php); if(NOT BINDINGS_ONLY); add_dependencies(bindings_php openbabel); endif(). install(TARGETS bindings_php; LIBRARY DESTINATION ${PHP_EXTENSION_DIR}; 	 COMPONENT bindings_php); install(FILES ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php; DESTINATION ${LIB_INSTALL_DIR}; 	 COMPONENT bindings_php); 	install(FILES ${openbabel_SOURCE_DIR}/scripts/php/baphpel.php; 	 DESTINATION ${LIB_INSTALL_DIR}; 	 COMPONENT bindings_php). endif (DO_PHP_BINDINGS); ",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:21694,Deployability,install,install,21694,"S). if (DO_PHP_BINDINGS); include_directories(; ${PHP_CONFIG_INCLUDES}; ); if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp; COMMAND ${SWIG_EXECUTABLE} -php -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp -outdir ${openbabel_SOURCE_DIR}/scripts/php ${openbabel_SOURCE_DIR}/scripts/openbabel-php.i; COMMAND sed -i -e's/abstract class OBForceField/class OBForceField/g' -e's/abstract class OBFingerprint/class OBFingerprint/g' -e's/abstract class OBOp/class OBOp/g' -e 's/static function FindType/function FindType/g' ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php; MAIN_DEPENDENCY openbabel-php.i; ); endif (RUN_SWIG). # set openbabel.php include path; execute_process(COMMAND sed -i -e ""s,include_once '\\(.*\\)openbabel.php,include_once '${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}/openbabel.php,g"" ${openbabel_SOURCE_DIR}/scripts/php/baphpel.php). add_library(bindings_php MODULE ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp); # Overriding --no-undefined linker flag, since PHP library should not be linked into extension.; set(PHP_EXTRA_LINK_FLAGS ""-Wl,--unresolved-symbols=ignore-all""); if(BINDINGS_ONLY); target_link_libraries(bindings_php ${BABEL_SYSTEM_LIBRARY} ${PHP_EXTRA_LINK_FLAGS}); else(); target_link_libraries(bindings_php ${BABEL_LIBRARY} ${PHP_EXTRA_LINK_FLAGS}); endif(). set_target_properties(bindings_php PROPERTIES; PREFIX """"; OUTPUT_NAME openbabel-php); if(NOT BINDINGS_ONLY); add_dependencies(bindings_php openbabel); endif(). install(TARGETS bindings_php; LIBRARY DESTINATION ${PHP_EXTENSION_DIR}; 	 COMPONENT bindings_php); install(FILES ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php; DESTINATION ${LIB_INSTALL_DIR}; 	 COMPONENT bindings_php); 	install(FILES ${openbabel_SOURCE_DIR}/scripts/php/baphpel.php; 	 DESTINATION ${LIB_INSTALL_DIR}; 	 COMPONENT bindings_php). endif (DO_PHP_BINDINGS); ",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:472,Integrability,message,message,472,"cmake_minimum_required(VERSION 2.6.0); # Library versioning (used in Mac Python bindings)x; set(SOVERSION 4). if (RUN_SWIG); include(FindSWIG); # This module finds an installed SWIG. It sets the following variables:; # SWIG_FOUND - set to true if SWIG is found; # SWIG_DIR - the directory where swig is installed; # SWIG_EXECUTABLE - the path to the swig executable; # SWIG_VERSION - the version number of the swig executable. find_package(SWIG 2.0); if (NOT SWIG_FOUND); message(STATUS ""SWIG 2.0 NOT found""); return(); endif (NOT SWIG_FOUND); endif (RUN_SWIG). # The following needs to be kept in synch with ..\CMakeLists.txt; if(EIGEN3_FOUND); set (eigen_define ""-DHAVE_EIGEN"" ""-DHAVE_EIGEN3""); include_directories(${EIGEN3_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN3_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); else(); if(EIGEN2_FOUND); set (eigen_define ""-DHAVE_EIGEN""); include_directories(${EIGEN2_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN2_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); endif(); endif(). ###################; # Python; ###################. if (PYTHON_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp OR RUN_SWIG); find_package(PythonInterp); if (NOT PYTHONINTERP_FOUND); message(STATUS ""Python interpreter NOT found""); endif (NOT PYTHONINTERP_FOUND). if (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS); set(Python_ADDITIONAL_VERSIONS ""${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}""); endif (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS). find_package(PythonLibs); if (NOT PYTHONLIBS_FOUND); message(STATUS ""Python libraries NOT found""); endif (NOT PYTHONLIBS_FOUND). if(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND); set(DO_PYTHON_BINDINGS ON BOOL); message(STATUS ""Python bindings will be compiled""); endif(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND). else (); message(STATUS ""Warning: Python bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (); endif (PYTHON_BIND",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:1286,Integrability,message,message,1286," where swig is installed; # SWIG_EXECUTABLE - the path to the swig executable; # SWIG_VERSION - the version number of the swig executable. find_package(SWIG 2.0); if (NOT SWIG_FOUND); message(STATUS ""SWIG 2.0 NOT found""); return(); endif (NOT SWIG_FOUND); endif (RUN_SWIG). # The following needs to be kept in synch with ..\CMakeLists.txt; if(EIGEN3_FOUND); set (eigen_define ""-DHAVE_EIGEN"" ""-DHAVE_EIGEN3""); include_directories(${EIGEN3_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN3_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); else(); if(EIGEN2_FOUND); set (eigen_define ""-DHAVE_EIGEN""); include_directories(${EIGEN2_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN2_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); endif(); endif(). ###################; # Python; ###################. if (PYTHON_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp OR RUN_SWIG); find_package(PythonInterp); if (NOT PYTHONINTERP_FOUND); message(STATUS ""Python interpreter NOT found""); endif (NOT PYTHONINTERP_FOUND). if (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS); set(Python_ADDITIONAL_VERSIONS ""${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}""); endif (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS). find_package(PythonLibs); if (NOT PYTHONLIBS_FOUND); message(STATUS ""Python libraries NOT found""); endif (NOT PYTHONLIBS_FOUND). if(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND); set(DO_PYTHON_BINDINGS ON BOOL); message(STATUS ""Python bindings will be compiled""); endif(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND). else (); message(STATUS ""Warning: Python bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (); endif (PYTHON_BINDINGS). if (DO_PYTHON_BINDINGS). include_directories(; ${PYTHON_INCLUDE_PATH}; ). if(RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; COMMAND ${SWIG_EXECUTABLE} -pytho",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:1625,Integrability,message,message,1625,"N3_FOUND); set (eigen_define ""-DHAVE_EIGEN"" ""-DHAVE_EIGEN3""); include_directories(${EIGEN3_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN3_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); else(); if(EIGEN2_FOUND); set (eigen_define ""-DHAVE_EIGEN""); include_directories(${EIGEN2_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN2_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); endif(); endif(). ###################; # Python; ###################. if (PYTHON_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp OR RUN_SWIG); find_package(PythonInterp); if (NOT PYTHONINTERP_FOUND); message(STATUS ""Python interpreter NOT found""); endif (NOT PYTHONINTERP_FOUND). if (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS); set(Python_ADDITIONAL_VERSIONS ""${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}""); endif (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS). find_package(PythonLibs); if (NOT PYTHONLIBS_FOUND); message(STATUS ""Python libraries NOT found""); endif (NOT PYTHONLIBS_FOUND). if(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND); set(DO_PYTHON_BINDINGS ON BOOL); message(STATUS ""Python bindings will be compiled""); endif(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND). else (); message(STATUS ""Warning: Python bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (); endif (PYTHON_BINDINGS). if (DO_PYTHON_BINDINGS). include_directories(; ${PYTHON_INCLUDE_PATH}; ). if(RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; COMMAND ${SWIG_EXECUTABLE} -python -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp ${eigen_define} -outdir ${openbabel_SOURCE_DIR}/scripts/python/openbabel ${openbabel_SOURCE_DIR}/scripts/openbabel-python.i; MAIN_DEPENDENCY openbabel-python.i; V",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:1779,Integrability,message,message,1779,"set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); else(); if(EIGEN2_FOUND); set (eigen_define ""-DHAVE_EIGEN""); include_directories(${EIGEN2_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN2_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); endif(); endif(). ###################; # Python; ###################. if (PYTHON_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp OR RUN_SWIG); find_package(PythonInterp); if (NOT PYTHONINTERP_FOUND); message(STATUS ""Python interpreter NOT found""); endif (NOT PYTHONINTERP_FOUND). if (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS); set(Python_ADDITIONAL_VERSIONS ""${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}""); endif (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS). find_package(PythonLibs); if (NOT PYTHONLIBS_FOUND); message(STATUS ""Python libraries NOT found""); endif (NOT PYTHONLIBS_FOUND). if(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND); set(DO_PYTHON_BINDINGS ON BOOL); message(STATUS ""Python bindings will be compiled""); endif(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND). else (); message(STATUS ""Warning: Python bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (); endif (PYTHON_BINDINGS). if (DO_PYTHON_BINDINGS). include_directories(; ${PYTHON_INCLUDE_PATH}; ). if(RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; COMMAND ${SWIG_EXECUTABLE} -python -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp ${eigen_define} -outdir ${openbabel_SOURCE_DIR}/scripts/python/openbabel ${openbabel_SOURCE_DIR}/scripts/openbabel-python.i; MAIN_DEPENDENCY openbabel-python.i; VERBATIM; ); endif(RUN_SWIG); ; configure_file(${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py.in; ${openbabel_SOURCE_DIR}/scripts/python/ope",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:1888,Integrability,message,message,1888,"directories(${EIGEN2_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN2_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); endif(); endif(). ###################; # Python; ###################. if (PYTHON_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp OR RUN_SWIG); find_package(PythonInterp); if (NOT PYTHONINTERP_FOUND); message(STATUS ""Python interpreter NOT found""); endif (NOT PYTHONINTERP_FOUND). if (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS); set(Python_ADDITIONAL_VERSIONS ""${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}""); endif (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS). find_package(PythonLibs); if (NOT PYTHONLIBS_FOUND); message(STATUS ""Python libraries NOT found""); endif (NOT PYTHONLIBS_FOUND). if(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND); set(DO_PYTHON_BINDINGS ON BOOL); message(STATUS ""Python bindings will be compiled""); endif(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND). else (); message(STATUS ""Warning: Python bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (); endif (PYTHON_BINDINGS). if (DO_PYTHON_BINDINGS). include_directories(; ${PYTHON_INCLUDE_PATH}; ). if(RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; COMMAND ${SWIG_EXECUTABLE} -python -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp ${eigen_define} -outdir ${openbabel_SOURCE_DIR}/scripts/python/openbabel ${openbabel_SOURCE_DIR}/scripts/openbabel-python.i; MAIN_DEPENDENCY openbabel-python.i; VERBATIM; ); endif(RUN_SWIG); ; configure_file(${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py.in; ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py); add_library(bindings_python MODULE ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-pytho",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:6291,Integrability,message,message,6291,"l); endif(). install(TARGETS bindings_python; LIBRARY DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); add_custom_command(TARGET bindings_python POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py ${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}; ); endif(NOT WIN32); endif (DO_PYTHON_BINDINGS). ###################; # Java; ###################. if (JAVA_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG). find_package(JNI); if (NOT JNI_INCLUDE_DIRS); message(STATUS ""Java Native Interface NOT found. Java bindings will NOT be compiled.""); endif (). if (RUN_SWIG); find_package(Java); if (NOT JAVA_COMPILE); message(STATUS ""Java compiler NOT found. Java bindings will NOT be generated.""); set(JAVAC_FAIL ON BOOL); endif (NOT JAVA_COMPILE); endif (RUN_SWIG). if(JNI_INCLUDE_DIRS AND NOT JAVAC_FAIL); set(DO_JAVA_BINDINGS ON BOOL); message(STATUS ""Java bindings will be compiled""); endif(). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG); message(STATUS ""Warning: Java bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG); endif (JAVA_BINDINGS). if (DO_JAVA_BINDINGS). include_directories(; 	${JNI_INCLUDE_DIRS}; ). if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp; COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_BINARY_DIR}/scripts/java/org/openbabel; COMMAND ${SWIG_EXECUTABLE} -",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:6447,Integrability,message,message,6447,"el_SOURCE_DIR}/scripts/python/openbabel/__init__.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); add_custom_command(TARGET bindings_python POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py ${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}; ); endif(NOT WIN32); endif (DO_PYTHON_BINDINGS). ###################; # Java; ###################. if (JAVA_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG). find_package(JNI); if (NOT JNI_INCLUDE_DIRS); message(STATUS ""Java Native Interface NOT found. Java bindings will NOT be compiled.""); endif (). if (RUN_SWIG); find_package(Java); if (NOT JAVA_COMPILE); message(STATUS ""Java compiler NOT found. Java bindings will NOT be generated.""); set(JAVAC_FAIL ON BOOL); endif (NOT JAVA_COMPILE); endif (RUN_SWIG). if(JNI_INCLUDE_DIRS AND NOT JAVAC_FAIL); set(DO_JAVA_BINDINGS ON BOOL); message(STATUS ""Java bindings will be compiled""); endif(). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG); message(STATUS ""Warning: Java bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG); endif (JAVA_BINDINGS). if (DO_JAVA_BINDINGS). include_directories(; 	${JNI_INCLUDE_DIRS}; ). if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp; COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_BINARY_DIR}/scripts/java/org/openbabel; COMMAND ${SWIG_EXECUTABLE} -java -package org.openbabel -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${op",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:6669,Integrability,message,message,6669,"DIR}/openbabel; COMPONENT bindings_python); install(FILES ${openbabel_SOURCE_DIR}/scripts/python/openbabel/pybel.py; DESTINATION ${PYTHON_INSTDIR}/openbabel; COMPONENT bindings_python); add_custom_command(TARGET bindings_python POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py ${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}; ); endif(NOT WIN32); endif (DO_PYTHON_BINDINGS). ###################; # Java; ###################. if (JAVA_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG). find_package(JNI); if (NOT JNI_INCLUDE_DIRS); message(STATUS ""Java Native Interface NOT found. Java bindings will NOT be compiled.""); endif (). if (RUN_SWIG); find_package(Java); if (NOT JAVA_COMPILE); message(STATUS ""Java compiler NOT found. Java bindings will NOT be generated.""); set(JAVAC_FAIL ON BOOL); endif (NOT JAVA_COMPILE); endif (RUN_SWIG). if(JNI_INCLUDE_DIRS AND NOT JAVAC_FAIL); set(DO_JAVA_BINDINGS ON BOOL); message(STATUS ""Java bindings will be compiled""); endif(). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG); message(STATUS ""Warning: Java bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG); endif (JAVA_BINDINGS). if (DO_JAVA_BINDINGS). include_directories(; 	${JNI_INCLUDE_DIRS}; ). if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp; COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_BINARY_DIR}/scripts/java/org/openbabel; COMMAND ${SWIG_EXECUTABLE} -java -package org.openbabel -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp ${eigen_define} -outdir ${openbabel_BINARY_DIR}/scripts/java/org/openbabel ${openbabel_SOURCE_DIR}/scripts/openbabel-java.i; 			 COMMAND ${JAVA_COMPILE} ARGS ""java/org/open",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:6811,Integrability,message,message,6811,"NT bindings_python); add_custom_command(TARGET bindings_python POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel.py ${openbabel_BINARY_DIR}/bin/${CMAKE_CFG_INTDIR}; ); endif(NOT WIN32); endif (DO_PYTHON_BINDINGS). ###################; # Java; ###################. if (JAVA_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG). find_package(JNI); if (NOT JNI_INCLUDE_DIRS); message(STATUS ""Java Native Interface NOT found. Java bindings will NOT be compiled.""); endif (). if (RUN_SWIG); find_package(Java); if (NOT JAVA_COMPILE); message(STATUS ""Java compiler NOT found. Java bindings will NOT be generated.""); set(JAVAC_FAIL ON BOOL); endif (NOT JAVA_COMPILE); endif (RUN_SWIG). if(JNI_INCLUDE_DIRS AND NOT JAVAC_FAIL); set(DO_JAVA_BINDINGS ON BOOL); message(STATUS ""Java bindings will be compiled""); endif(). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG); message(STATUS ""Warning: Java bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp OR RUN_SWIG); endif (JAVA_BINDINGS). if (DO_JAVA_BINDINGS). include_directories(; 	${JNI_INCLUDE_DIRS}; ). if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp; COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_BINARY_DIR}/scripts/java/org/openbabel; COMMAND ${SWIG_EXECUTABLE} -java -package org.openbabel -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/java/openbabel-java.cpp ${eigen_define} -outdir ${openbabel_BINARY_DIR}/scripts/java/org/openbabel ${openbabel_SOURCE_DIR}/scripts/openbabel-java.i; 			 COMMAND ${JAVA_COMPILE} ARGS ""java/org/openbabel/*.java""; COMMAND ${CMAKE_COMMAND} -E chdir ${openbabel_BINARY_DIR}/scripts/java ${JAVA_ARCHIVE} cf openbabel.jar org; COMMAND ${CMAKE_COMMAND} -E copy ${openba",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:9098,Integrability,message,message,9098,"pts/java/openbabel-java.cpp); if(BINDINGS_ONLY); target_link_libraries(bindings_java ${JNI_LIBRARIES} ${BABEL_SYSTEM_LIBRARY}); else(); target_link_libraries(bindings_java ${JNI_LIBRARIES} ${BABEL_LIBRARY}); endif(). set_target_properties(bindings_java PROPERTIES; OUTPUT_NAME openbabel_java); if(APPLE); set_target_properties(bindings_java PROPERTIES SUFFIX "".jnilib""); endif(APPLE); if(NOT BINDINGS_ONLY); add_dependencies(bindings_java openbabel); endif(). install(TARGETS bindings_java; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_java); install(FILES ${openbabel_SOURCE_DIR}/scripts/java/openbabel.jar; DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_java). endif (DO_JAVA_BINDINGS). ###################; # R; ###################. if (R_BINDINGS); 	if (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG). if (RUN_SWIG); set(DO_R_BINDINGS ON BOOL); endif (RUN_SWIG). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG); 	 message(STATUS ""Warning: R bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp OR RUN_SWIG); endif (R_BINDINGS). if (DO_R_BINDINGS). include_directories(/usr/share/R/include ); if (RUN_SWIG); 		 add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp; 			 COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_BINARY_DIR}/scripts/R; 			 COMMAND ${SWIG_EXECUTABLE} -r -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp ${eigen_define} -outdir ${openbabel_BINARY_DIR}/scripts/R ${openbabel_SOURCE_DIR}/scripts/openbabel-R.i; 			 # COMMAND sed -i -e ""'s/reg\.finalizer(\(.*\)) /reg.finalizer(\1); /g'"" ${openbabel_BINARY_DIR}/scripts/R/openbabelR.R; 			 MAIN_DEPENDENCY openbabel-R.i; ); endif (RUN_SWIG). 	 add_library(bindings_R MODULE ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp); 	 set(R_EXTRA_LINK_FLAGS ""-",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:10945,Integrability,message,message,10945," 			 MAIN_DEPENDENCY openbabel-R.i; ); endif (RUN_SWIG). 	 add_library(bindings_R MODULE ${openbabel_SOURCE_DIR}/scripts/R/openbabel-R.cpp); 	 set(R_EXTRA_LINK_FLAGS ""-Wl,--unresolved-symbols=ignore-all""); 	 if(BINDINGS_ONLY); 		 target_link_libraries(bindings_R ${BABEL_SYSTEM_LIBRARY} ${R_EXTRA_LINK_FLAGS}); 	 else(); 		 target_link_libraries(bindings_R ${BABEL_LIBRARY} ${R_EXTRA_LINK_FLAGS}); 	 endif(). 	 set_target_properties(bindings_R PROPERTIES; 		 OUTPUT_NAME openbabel_R); if(NOT BINDINGS_ONLY); 		 add_dependencies(bindings_R openbabel); endif(). 	 install(TARGETS bindings_R; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; 				COMPONENT bindings_R); 	 install(FILES ${openbabel_BINARY_DIR}/scripts/R/openbabel_R.R; DESTINATION ${LIB_INSTALL_DIR}; 				COMPONENT bindings_R). endif (DO_R_BINDINGS). ###################; # Perl; ###################. if (PERL_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG). find_package(PerlLibs); if (NOT PERL_LIBRARY); message(STATUS ""Perl library files NOT found. Perl bindings will NOT be compiled.""); endif (NOT PERL_LIBRARY). if(PERL_LIBRARY); set(DO_PERL_BINDINGS ON BOOL); message(STATUS ""Perl bindings will be compiled""); ### On some Linux OSes, linking against Perl fails due to no -lpthread.; ### The following is an attempt to work around this by taking the; ### link libraries from Perl.; execute_process(; COMMAND; ${PERL_EXECUTABLE} -V:perllibs; OUTPUT_VARIABLE; PERLLIBS_OUTPUT_VARIABLE; RESULT_VARIABLE; PERLLIBS_RESULT_VARIABLE; ); if (NOT PERLLIBS_RESULT_VARIABLE); string(REGEX REPLACE ""perllibs='([^']+)'.*"" ""\\1"" PERL_EXTRA_LINK_FLAGS ${PERLLIBS_OUTPUT_VARIABLE}); endif (NOT PERLLIBS_RESULT_VARIABLE); endif(PERL_LIBRARY). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG); message(STATUS ""Warning: Perl bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG); endif (PERL_BINDINGS). i",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:11105,Integrability,message,message,11105,"e-all""); 	 if(BINDINGS_ONLY); 		 target_link_libraries(bindings_R ${BABEL_SYSTEM_LIBRARY} ${R_EXTRA_LINK_FLAGS}); 	 else(); 		 target_link_libraries(bindings_R ${BABEL_LIBRARY} ${R_EXTRA_LINK_FLAGS}); 	 endif(). 	 set_target_properties(bindings_R PROPERTIES; 		 OUTPUT_NAME openbabel_R); if(NOT BINDINGS_ONLY); 		 add_dependencies(bindings_R openbabel); endif(). 	 install(TARGETS bindings_R; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; 				COMPONENT bindings_R); 	 install(FILES ${openbabel_BINARY_DIR}/scripts/R/openbabel_R.R; DESTINATION ${LIB_INSTALL_DIR}; 				COMPONENT bindings_R). endif (DO_R_BINDINGS). ###################; # Perl; ###################. if (PERL_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG). find_package(PerlLibs); if (NOT PERL_LIBRARY); message(STATUS ""Perl library files NOT found. Perl bindings will NOT be compiled.""); endif (NOT PERL_LIBRARY). if(PERL_LIBRARY); set(DO_PERL_BINDINGS ON BOOL); message(STATUS ""Perl bindings will be compiled""); ### On some Linux OSes, linking against Perl fails due to no -lpthread.; ### The following is an attempt to work around this by taking the; ### link libraries from Perl.; execute_process(; COMMAND; ${PERL_EXECUTABLE} -V:perllibs; OUTPUT_VARIABLE; PERLLIBS_OUTPUT_VARIABLE; RESULT_VARIABLE; PERLLIBS_RESULT_VARIABLE; ); if (NOT PERLLIBS_RESULT_VARIABLE); string(REGEX REPLACE ""perllibs='([^']+)'.*"" ""\\1"" PERL_EXTRA_LINK_FLAGS ${PERLLIBS_OUTPUT_VARIABLE}); endif (NOT PERLLIBS_RESULT_VARIABLE); endif(PERL_LIBRARY). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG); message(STATUS ""Warning: Perl bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG); endif (PERL_BINDINGS). if (DO_PERL_BINDINGS); include_directories(; ${PERL_INCLUDE_PATH}; ). if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp; COMMAND ${SWIG_EXECUTABLE} -pe",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:11753,Integrability,message,message,11753,"# Perl; ###################. if (PERL_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG). find_package(PerlLibs); if (NOT PERL_LIBRARY); message(STATUS ""Perl library files NOT found. Perl bindings will NOT be compiled.""); endif (NOT PERL_LIBRARY). if(PERL_LIBRARY); set(DO_PERL_BINDINGS ON BOOL); message(STATUS ""Perl bindings will be compiled""); ### On some Linux OSes, linking against Perl fails due to no -lpthread.; ### The following is an attempt to work around this by taking the; ### link libraries from Perl.; execute_process(; COMMAND; ${PERL_EXECUTABLE} -V:perllibs; OUTPUT_VARIABLE; PERLLIBS_OUTPUT_VARIABLE; RESULT_VARIABLE; PERLLIBS_RESULT_VARIABLE; ); if (NOT PERLLIBS_RESULT_VARIABLE); string(REGEX REPLACE ""perllibs='([^']+)'.*"" ""\\1"" PERL_EXTRA_LINK_FLAGS ${PERLLIBS_OUTPUT_VARIABLE}); endif (NOT PERLLIBS_RESULT_VARIABLE); endif(PERL_LIBRARY). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG); message(STATUS ""Warning: Perl bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp OR RUN_SWIG); endif (PERL_BINDINGS). if (DO_PERL_BINDINGS); include_directories(; ${PERL_INCLUDE_PATH}; ). if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp; COMMAND ${SWIG_EXECUTABLE} -perl5 -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp -outdir ${openbabel_SOURCE_DIR}/scripts/perl ${openbabel_SOURCE_DIR}/scripts/openbabel-perl.i; MAIN_DEPENDENCY openbabel-perl.i; ); if (NOT WIN32); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm; COMMAND sed -e \""s/^@EXPORT.*/& sub dl_load_flags { 0x01 }/\"" <${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm >${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.new; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/script",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:13963,Integrability,message,message,13963,"erl.i; ); endif (NOT WIN32); endif (RUN_SWIG). add_library(bindings_perl MODULE ${openbabel_SOURCE_DIR}/scripts/perl/openbabel-perl.cpp); if(BINDINGS_ONLY); target_link_libraries(bindings_perl ${PERL_LIBRARY} ${BABEL_SYSTEM_LIBRARY} ${PERL_EXTRA_LINK_FLAGS}); else(); target_link_libraries(bindings_perl ${PERL_LIBRARY} ${BABEL_LIBRARY} ${PERL_EXTRA_LINK_FLAGS}); endif(). set_target_properties(bindings_perl PROPERTIES; PREFIX """"; OUTPUT_NAME OpenBabel); if(NOT BINDINGS_ONLY); add_dependencies(bindings_perl openbabel); endif(). install(TARGETS bindings_perl; LIBRARY DESTINATION ${LIB_INSTALL_DIR}/auto/Chemistry/OpenBabel/; COMPONENT bindings_perl); install(FILES ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm; DESTINATION ${LIB_INSTALL_DIR}/Chemistry/; COMPONENT bindings_perl). endif (DO_PERL_BINDINGS). ###################; # Ruby; ###################. if (RUBY_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); find_package(Ruby); if (NOT RUBY_LIBRARY); message(STATUS ""Ruby library files NOT found. Ruby bindings will NOT be compiled.""); endif (NOT RUBY_LIBRARY). if (RUBY_LIBRARY); set(DO_RUBY_BINDINGS ON BOOL); message(STATUS ""Ruby bindings will be compiled""); endif (RUBY_LIBRARY). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); message(STATUS ""Warning: Ruby bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); endif (RUBY_BINDINGS). if (DO_RUBY_BINDINGS). if (RUN_SWIG); set(WORKAROUND_CMAKE260_BUG ""s/rb_define_module(\""Openbabel\"")/rb_define_module(\""OpenBabel\"")/""); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp; COMMAND ${SWIG_EXECUTABLE} -ruby -c++ -small -O -templatereduce -naturalvar -autorename -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt ${openbabel_SOURCE_DIR}/scripts/openbabel-ruby.i; C",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:14124,Integrability,message,message,14124,"bindings_perl ${PERL_LIBRARY} ${BABEL_SYSTEM_LIBRARY} ${PERL_EXTRA_LINK_FLAGS}); else(); target_link_libraries(bindings_perl ${PERL_LIBRARY} ${BABEL_LIBRARY} ${PERL_EXTRA_LINK_FLAGS}); endif(). set_target_properties(bindings_perl PROPERTIES; PREFIX """"; OUTPUT_NAME OpenBabel); if(NOT BINDINGS_ONLY); add_dependencies(bindings_perl openbabel); endif(). install(TARGETS bindings_perl; LIBRARY DESTINATION ${LIB_INSTALL_DIR}/auto/Chemistry/OpenBabel/; COMPONENT bindings_perl); install(FILES ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm; DESTINATION ${LIB_INSTALL_DIR}/Chemistry/; COMPONENT bindings_perl). endif (DO_PERL_BINDINGS). ###################; # Ruby; ###################. if (RUBY_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); find_package(Ruby); if (NOT RUBY_LIBRARY); message(STATUS ""Ruby library files NOT found. Ruby bindings will NOT be compiled.""); endif (NOT RUBY_LIBRARY). if (RUBY_LIBRARY); set(DO_RUBY_BINDINGS ON BOOL); message(STATUS ""Ruby bindings will be compiled""); endif (RUBY_LIBRARY). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); message(STATUS ""Warning: Ruby bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); endif (RUBY_BINDINGS). if (DO_RUBY_BINDINGS). if (RUN_SWIG); set(WORKAROUND_CMAKE260_BUG ""s/rb_define_module(\""Openbabel\"")/rb_define_module(\""OpenBabel\"")/""); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp; COMMAND ${SWIG_EXECUTABLE} -ruby -c++ -small -O -templatereduce -naturalvar -autorename -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt ${openbabel_SOURCE_DIR}/scripts/openbabel-ruby.i; COMMAND sed -e '${WORKAROUND_CMAKE_260_BUG}' -e's/void Init_OpenBabel/void Init_openbabel/' <${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt >${openbabel_SOURCE_DIR}/script",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:14279,Integrability,message,message,14279,"PERL_EXTRA_LINK_FLAGS}); endif(). set_target_properties(bindings_perl PROPERTIES; PREFIX """"; OUTPUT_NAME OpenBabel); if(NOT BINDINGS_ONLY); add_dependencies(bindings_perl openbabel); endif(). install(TARGETS bindings_perl; LIBRARY DESTINATION ${LIB_INSTALL_DIR}/auto/Chemistry/OpenBabel/; COMPONENT bindings_perl); install(FILES ${openbabel_SOURCE_DIR}/scripts/perl/OpenBabel.pm; DESTINATION ${LIB_INSTALL_DIR}/Chemistry/; COMPONENT bindings_perl). endif (DO_PERL_BINDINGS). ###################; # Ruby; ###################. if (RUBY_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); find_package(Ruby); if (NOT RUBY_LIBRARY); message(STATUS ""Ruby library files NOT found. Ruby bindings will NOT be compiled.""); endif (NOT RUBY_LIBRARY). if (RUBY_LIBRARY); set(DO_RUBY_BINDINGS ON BOOL); message(STATUS ""Ruby bindings will be compiled""); endif (RUBY_LIBRARY). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); message(STATUS ""Warning: Ruby bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp OR RUN_SWIG); endif (RUBY_BINDINGS). if (DO_RUBY_BINDINGS). if (RUN_SWIG); set(WORKAROUND_CMAKE260_BUG ""s/rb_define_module(\""Openbabel\"")/rb_define_module(\""OpenBabel\"")/""); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp; COMMAND ${SWIG_EXECUTABLE} -ruby -c++ -small -O -templatereduce -naturalvar -autorename -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt ${openbabel_SOURCE_DIR}/scripts/openbabel-ruby.i; COMMAND sed -e '${WORKAROUND_CMAKE_260_BUG}' -e's/void Init_OpenBabel/void Init_openbabel/' <${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt >${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp; COMMAND ${CMAKE_COMMAND} -E remove ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt; MAIN_DEPENDENCY openbabel-ruby.i; ); endif",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:16100,Integrability,message,message,16100,"xt >${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp; COMMAND ${CMAKE_COMMAND} -E remove ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.txt; MAIN_DEPENDENCY openbabel-ruby.i; ); endif (RUN_SWIG). include_directories(; ${RUBY_INCLUDE_PATH}; ). add_library(bindings_ruby MODULE ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp); if(BINDINGS_ONLY); target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_SYSTEM_LIBRARY}); else(); target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_LIBRARY}); endif(). set_target_properties(bindings_ruby PROPERTIES; OUTPUT_NAME openbabel; PREFIX """" ). if(NOT BINDINGS_ONLY); add_dependencies(bindings_ruby openbabel); endif(). install(TARGETS bindings_ruby; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_ruby). endif (DO_RUBY_BINDINGS). ###################; # CSharp; ###################. if (CSHARP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); if (NOT CSHARP_EXECUTABLE); message(STATUS ""CSHARP_EXECUTABLE NOT defined. .NET bindings will NOT be created.""); endif (NOT CSHARP_EXECUTABLE). if (CSHARP_EXECUTABLE); set(DO_CSHARP_BINDINGS ON BOOL); message(STATUS ""CSharp bindings will be compiled""); endif (CSHARP_EXECUTABLE). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); message(STATUS ""Warning: Csharp bindings NOT found. Generate using -DRUN_SWIG=ON.""); endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); endif (CSHARP_BINDINGS). if (DO_CSHARP_BINDINGS). if (RUN_SWIG); set(PLATFORM_TYPE """"); if (WIN32) # i.e. any Windows; if (CMAKE_GENERATOR MATCHES Win64$); set(PLATFORM_TYPE ""/platform:anycpu""); else(); set(PLATFORM_TYPE ""/platform:x86""); endif(); endif(WIN32); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:16273,Integrability,message,message,16273,".i; ); endif (RUN_SWIG). include_directories(; ${RUBY_INCLUDE_PATH}; ). add_library(bindings_ruby MODULE ${openbabel_SOURCE_DIR}/scripts/ruby/openbabel-ruby.cpp); if(BINDINGS_ONLY); target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_SYSTEM_LIBRARY}); else(); target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_LIBRARY}); endif(). set_target_properties(bindings_ruby PROPERTIES; OUTPUT_NAME openbabel; PREFIX """" ). if(NOT BINDINGS_ONLY); add_dependencies(bindings_ruby openbabel); endif(). install(TARGETS bindings_ruby; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_ruby). endif (DO_RUBY_BINDINGS). ###################; # CSharp; ###################. if (CSHARP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); if (NOT CSHARP_EXECUTABLE); message(STATUS ""CSHARP_EXECUTABLE NOT defined. .NET bindings will NOT be created.""); endif (NOT CSHARP_EXECUTABLE). if (CSHARP_EXECUTABLE); set(DO_CSHARP_BINDINGS ON BOOL); message(STATUS ""CSharp bindings will be compiled""); endif (CSHARP_EXECUTABLE). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); message(STATUS ""Warning: Csharp bindings NOT found. Generate using -DRUN_SWIG=ON.""); endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); endif (CSHARP_BINDINGS). if (DO_CSHARP_BINDINGS). if (RUN_SWIG); set(PLATFORM_TYPE """"); if (WIN32) # i.e. any Windows; if (CMAKE_GENERATOR MATCHES Win64$); set(PLATFORM_TYPE ""/platform:anycpu""); else(); set(PLATFORM_TYPE ""/platform:x86""); endif(); endif(WIN32); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNetAssemblyInfo.c",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:16439,Integrability,message,message,16439,"GS_ONLY); target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_SYSTEM_LIBRARY}); else(); target_link_libraries(bindings_ruby ${RUBY_LIBRARY} ${BABEL_LIBRARY}); endif(). set_target_properties(bindings_ruby PROPERTIES; OUTPUT_NAME openbabel; PREFIX """" ). if(NOT BINDINGS_ONLY); add_dependencies(bindings_ruby openbabel); endif(). install(TARGETS bindings_ruby; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; COMPONENT bindings_ruby). endif (DO_RUBY_BINDINGS). ###################; # CSharp; ###################. if (CSHARP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); if (NOT CSHARP_EXECUTABLE); message(STATUS ""CSHARP_EXECUTABLE NOT defined. .NET bindings will NOT be created.""); endif (NOT CSHARP_EXECUTABLE). if (CSHARP_EXECUTABLE); set(DO_CSHARP_BINDINGS ON BOOL); message(STATUS ""CSharp bindings will be compiled""); endif (CSHARP_EXECUTABLE). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); message(STATUS ""Warning: Csharp bindings NOT found. Generate using -DRUN_SWIG=ON.""); endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp OR RUN_SWIG); endif (CSHARP_BINDINGS). if (DO_CSHARP_BINDINGS). if (RUN_SWIG); set(PLATFORM_TYPE """"); if (WIN32) # i.e. any Windows; if (CMAKE_GENERATOR MATCHES Win64$); set(PLATFORM_TYPE ""/platform:anycpu""); else(); set(PLATFORM_TYPE ""/platform:x86""); endif(); endif(WIN32); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNetAssemblyInfo.cs ${openbabel_SOURCE_DIR}/scripts/csharp/src; COMMAND ${SWIG_EXECUTABLE} -csharp -c++ -small -O -templatereduce -namespace OpenBabel -outdir ${openbabel_SOURCE_DIR}/scripts/",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:18796,Integrability,message,message,18796,"PLATFORM_TYPE} /keyfile:${openbabel_SOURCE_DIR}/scripts/csharp/obdotnet.snk /optimize /out:${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll *.cs; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; MAIN_DEPENDENCY openbabel-csharp.i; WORKING_DIRECTORY ${openbabel_BINARY_DIR}/scripts; ); endif (RUN_SWIG). add_library(bindings_csharp MODULE ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp); target_link_libraries(bindings_csharp ${BABEL_LIBRARY}); set_target_properties(bindings_csharp PROPERTIES; OUTPUT_NAME openbabel_csharp ); install(TARGETS bindings_csharp LIBRARY DESTINATION ${LIB_INSTALL_DIR}); install(FILES ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll DESTINATION ${LIB_INSTALL_DIR}). endif (DO_CSHARP_BINDINGS). ###################; # PHP; ###################. if (PHP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG). FIND_PROGRAM(PHP_CONFIG_EXECUTABLE; NAMES php5-config php-config; ); if (NOT PHP_CONFIG_EXECUTABLE); message(STATUS ""PHP-Config files NOT found. PHP bindings will NOT be compiled.""); endif (NOT PHP_CONFIG_EXECUTABLE). if(PHP_CONFIG_EXECUTABLE); set(DO_PHP_BINDINGS ON BOOL); message(STATUS ""PHP bindings will be compiled""); execute_process(; COMMAND; ${PHP_CONFIG_EXECUTABLE} --includes; OUTPUT_VARIABLE; PHP_CONFIG_INCLUDES; RESULT_VARIABLE; PHP_CONFIG_RESULT; ); STRING(REPLACE ""\n"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE ""-I"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE "" "" "";"" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""). execute_process(; 	COMMAND; 	 ${PHP_CONFIG_EXECUTABLE} --extension-dir; 	OUTPUT_VARIABLE; 	 PHP_EXTENSION_DIR; ); STRING(REPLACE ""\n"" """" PHP_EXTENSION_DIR ""${PHP_EXTENSION_DIR}""); endif(PHP_CONFIG_EXECUTABLE). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG); message(STATUS ""Warning: PHP bindings NOT found. Generate using -DRUN_SWIG=ON.""); endif (EXISTS ${openbabe",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:18970,Integrability,message,message,18970,"MODULE ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp); target_link_libraries(bindings_csharp ${BABEL_LIBRARY}); set_target_properties(bindings_csharp PROPERTIES; OUTPUT_NAME openbabel_csharp ); install(TARGETS bindings_csharp LIBRARY DESTINATION ${LIB_INSTALL_DIR}); install(FILES ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll DESTINATION ${LIB_INSTALL_DIR}). endif (DO_CSHARP_BINDINGS). ###################; # PHP; ###################. if (PHP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG). FIND_PROGRAM(PHP_CONFIG_EXECUTABLE; NAMES php5-config php-config; ); if (NOT PHP_CONFIG_EXECUTABLE); message(STATUS ""PHP-Config files NOT found. PHP bindings will NOT be compiled.""); endif (NOT PHP_CONFIG_EXECUTABLE). if(PHP_CONFIG_EXECUTABLE); set(DO_PHP_BINDINGS ON BOOL); message(STATUS ""PHP bindings will be compiled""); execute_process(; COMMAND; ${PHP_CONFIG_EXECUTABLE} --includes; OUTPUT_VARIABLE; PHP_CONFIG_INCLUDES; RESULT_VARIABLE; PHP_CONFIG_RESULT; ); STRING(REPLACE ""\n"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE ""-I"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE "" "" "";"" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""). execute_process(; 	COMMAND; 	 ${PHP_CONFIG_EXECUTABLE} --extension-dir; 	OUTPUT_VARIABLE; 	 PHP_EXTENSION_DIR; ); STRING(REPLACE ""\n"" """" PHP_EXTENSION_DIR ""${PHP_EXTENSION_DIR}""); endif(PHP_CONFIG_EXECUTABLE). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG); message(STATUS ""Warning: PHP bindings NOT found. Generate using -DRUN_SWIG=ON.""); endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG); endif (PHP_BINDINGS). if (DO_PHP_BINDINGS); include_directories(; ${PHP_CONFIG_INCLUDES}; ); if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp; COMMAND ${SWIG_EXECUTABLE} -php -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINA",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:19661,Integrability,message,message,19661,".cpp OR RUN_SWIG). FIND_PROGRAM(PHP_CONFIG_EXECUTABLE; NAMES php5-config php-config; ); if (NOT PHP_CONFIG_EXECUTABLE); message(STATUS ""PHP-Config files NOT found. PHP bindings will NOT be compiled.""); endif (NOT PHP_CONFIG_EXECUTABLE). if(PHP_CONFIG_EXECUTABLE); set(DO_PHP_BINDINGS ON BOOL); message(STATUS ""PHP bindings will be compiled""); execute_process(; COMMAND; ${PHP_CONFIG_EXECUTABLE} --includes; OUTPUT_VARIABLE; PHP_CONFIG_INCLUDES; RESULT_VARIABLE; PHP_CONFIG_RESULT; ); STRING(REPLACE ""\n"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE ""-I"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE "" "" "";"" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""). execute_process(; 	COMMAND; 	 ${PHP_CONFIG_EXECUTABLE} --extension-dir; 	OUTPUT_VARIABLE; 	 PHP_EXTENSION_DIR; ); STRING(REPLACE ""\n"" """" PHP_EXTENSION_DIR ""${PHP_EXTENSION_DIR}""); endif(PHP_CONFIG_EXECUTABLE). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG); message(STATUS ""Warning: PHP bindings NOT found. Generate using -DRUN_SWIG=ON.""); endif (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG); endif (PHP_BINDINGS). if (DO_PHP_BINDINGS); include_directories(; ${PHP_CONFIG_INCLUDES}; ); if (RUN_SWIG); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp; COMMAND ${SWIG_EXECUTABLE} -php -c++ -small -O -templatereduce -naturalvar -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp -outdir ${openbabel_SOURCE_DIR}/scripts/php ${openbabel_SOURCE_DIR}/scripts/openbabel-php.i; COMMAND sed -i -e's/abstract class OBForceField/class OBForceField/g' -e's/abstract class OBFingerprint/class OBFingerprint/g' -e's/abstract class OBOp/class OBOp/g' -e 's/static function FindType/function FindType/g' ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php; MAIN_DEPENDENCY openbabel-php.i; ); endif (RUN_SWIG). # set openbabel.php include path; execute_proc",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:205,Modifiability,variab,variables,205,"cmake_minimum_required(VERSION 2.6.0); # Library versioning (used in Mac Python bindings)x; set(SOVERSION 4). if (RUN_SWIG); include(FindSWIG); # This module finds an installed SWIG. It sets the following variables:; # SWIG_FOUND - set to true if SWIG is found; # SWIG_DIR - the directory where swig is installed; # SWIG_EXECUTABLE - the path to the swig executable; # SWIG_VERSION - the version number of the swig executable. find_package(SWIG 2.0); if (NOT SWIG_FOUND); message(STATUS ""SWIG 2.0 NOT found""); return(); endif (NOT SWIG_FOUND); endif (RUN_SWIG). # The following needs to be kept in synch with ..\CMakeLists.txt; if(EIGEN3_FOUND); set (eigen_define ""-DHAVE_EIGEN"" ""-DHAVE_EIGEN3""); include_directories(${EIGEN3_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN3_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); else(); if(EIGEN2_FOUND); set (eigen_define ""-DHAVE_EIGEN""); include_directories(${EIGEN2_INCLUDE_DIR}); set (CPPFLAGS_VALUE ""-I${EIGEN2_INCLUDE_DIR}""); set (CPPFLAGS_TEXT ""CPPFLAGS=${CPPFLAGS_VALUE}""); endif(); endif(). ###################; # Python; ###################. if (PYTHON_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/python/openbabel/openbabel-python.cpp OR RUN_SWIG); find_package(PythonInterp); if (NOT PYTHONINTERP_FOUND); message(STATUS ""Python interpreter NOT found""); endif (NOT PYTHONINTERP_FOUND). if (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS); set(Python_ADDITIONAL_VERSIONS ""${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}""); endif (PYTHONINTERP_FOUND AND NOT Python_ADDITIONAL_VERSIONS). find_package(PythonLibs); if (NOT PYTHONLIBS_FOUND); message(STATUS ""Python libraries NOT found""); endif (NOT PYTHONLIBS_FOUND). if(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND); set(DO_PYTHON_BINDINGS ON BOOL); message(STATUS ""Python bindings will be compiled""); endif(PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND). else (); message(STATUS ""Warning: Python bindings NOT found. Generate using -DRUN_SWIG=ON.""). endif (); endif (PYTHON_BIND",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:18742,Modifiability,config,config,18742,"PLATFORM_TYPE} /keyfile:${openbabel_SOURCE_DIR}/scripts/csharp/obdotnet.snk /optimize /out:${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll *.cs; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; MAIN_DEPENDENCY openbabel-csharp.i; WORKING_DIRECTORY ${openbabel_BINARY_DIR}/scripts; ); endif (RUN_SWIG). add_library(bindings_csharp MODULE ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp); target_link_libraries(bindings_csharp ${BABEL_LIBRARY}); set_target_properties(bindings_csharp PROPERTIES; OUTPUT_NAME openbabel_csharp ); install(TARGETS bindings_csharp LIBRARY DESTINATION ${LIB_INSTALL_DIR}); install(FILES ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll DESTINATION ${LIB_INSTALL_DIR}). endif (DO_CSHARP_BINDINGS). ###################; # PHP; ###################. if (PHP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG). FIND_PROGRAM(PHP_CONFIG_EXECUTABLE; NAMES php5-config php-config; ); if (NOT PHP_CONFIG_EXECUTABLE); message(STATUS ""PHP-Config files NOT found. PHP bindings will NOT be compiled.""); endif (NOT PHP_CONFIG_EXECUTABLE). if(PHP_CONFIG_EXECUTABLE); set(DO_PHP_BINDINGS ON BOOL); message(STATUS ""PHP bindings will be compiled""); execute_process(; COMMAND; ${PHP_CONFIG_EXECUTABLE} --includes; OUTPUT_VARIABLE; PHP_CONFIG_INCLUDES; RESULT_VARIABLE; PHP_CONFIG_RESULT; ); STRING(REPLACE ""\n"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE ""-I"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE "" "" "";"" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""). execute_process(; 	COMMAND; 	 ${PHP_CONFIG_EXECUTABLE} --extension-dir; 	OUTPUT_VARIABLE; 	 PHP_EXTENSION_DIR; ); STRING(REPLACE ""\n"" """" PHP_EXTENSION_DIR ""${PHP_EXTENSION_DIR}""); endif(PHP_CONFIG_EXECUTABLE). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG); message(STATUS ""Warning: PHP bindings NOT found. Generate using -DRUN_SWIG=ON.""); endif (EXISTS ${openbabe",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:18753,Modifiability,config,config,18753,"PLATFORM_TYPE} /keyfile:${openbabel_SOURCE_DIR}/scripts/csharp/obdotnet.snk /optimize /out:${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll *.cs; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; MAIN_DEPENDENCY openbabel-csharp.i; WORKING_DIRECTORY ${openbabel_BINARY_DIR}/scripts; ); endif (RUN_SWIG). add_library(bindings_csharp MODULE ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp); target_link_libraries(bindings_csharp ${BABEL_LIBRARY}); set_target_properties(bindings_csharp PROPERTIES; OUTPUT_NAME openbabel_csharp ); install(TARGETS bindings_csharp LIBRARY DESTINATION ${LIB_INSTALL_DIR}); install(FILES ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll DESTINATION ${LIB_INSTALL_DIR}). endif (DO_CSHARP_BINDINGS). ###################; # PHP; ###################. if (PHP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG). FIND_PROGRAM(PHP_CONFIG_EXECUTABLE; NAMES php5-config php-config; ); if (NOT PHP_CONFIG_EXECUTABLE); message(STATUS ""PHP-Config files NOT found. PHP bindings will NOT be compiled.""); endif (NOT PHP_CONFIG_EXECUTABLE). if(PHP_CONFIG_EXECUTABLE); set(DO_PHP_BINDINGS ON BOOL); message(STATUS ""PHP bindings will be compiled""); execute_process(; COMMAND; ${PHP_CONFIG_EXECUTABLE} --includes; OUTPUT_VARIABLE; PHP_CONFIG_INCLUDES; RESULT_VARIABLE; PHP_CONFIG_RESULT; ); STRING(REPLACE ""\n"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE ""-I"" """" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""); STRING(REPLACE "" "" "";"" PHP_CONFIG_INCLUDES ""${PHP_CONFIG_INCLUDES}""). execute_process(; 	COMMAND; 	 ${PHP_CONFIG_EXECUTABLE} --extension-dir; 	OUTPUT_VARIABLE; 	 PHP_EXTENSION_DIR; ); STRING(REPLACE ""\n"" """" PHP_EXTENSION_DIR ""${PHP_EXTENSION_DIR}""); endif(PHP_CONFIG_EXECUTABLE). else (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG); message(STATUS ""Warning: PHP bindings NOT found. Generate using -DRUN_SWIG=ON.""); endif (EXISTS ${openbabe",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt:17843,Performance,optimiz,optimize,17843,"); add_custom_command(OUTPUT ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; COMMAND ${CMAKE_COMMAND} -E make_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; COMMAND ${CMAKE_COMMAND} -E copy ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNetAssemblyInfo.cs ${openbabel_SOURCE_DIR}/scripts/csharp/src; COMMAND ${SWIG_EXECUTABLE} -csharp -c++ -small -O -templatereduce -namespace OpenBabel -outdir ${openbabel_SOURCE_DIR}/scripts/csharp/src -I${openbabel_SOURCE_DIR}/include -I${openbabel_BINARY_DIR}/include -o ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp ${openbabel_SOURCE_DIR}/scripts/openbabel-csharp.i; COMMAND ${CMAKE_COMMAND} -E chdir ${openbabel_SOURCE_DIR}/scripts/csharp/src ${CSHARP_EXECUTABLE} /target:library ${PLATFORM_TYPE} /keyfile:${openbabel_SOURCE_DIR}/scripts/csharp/obdotnet.snk /optimize /out:${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll *.cs; COMMAND ${CMAKE_COMMAND} -E remove_directory ${openbabel_SOURCE_DIR}/scripts/csharp/src; MAIN_DEPENDENCY openbabel-csharp.i; WORKING_DIRECTORY ${openbabel_BINARY_DIR}/scripts; ); endif (RUN_SWIG). add_library(bindings_csharp MODULE ${openbabel_SOURCE_DIR}/scripts/csharp/openbabel-csharp.cpp); target_link_libraries(bindings_csharp ${BABEL_LIBRARY}); set_target_properties(bindings_csharp PROPERTIES; OUTPUT_NAME openbabel_csharp ); install(TARGETS bindings_csharp LIBRARY DESTINATION ${LIB_INSTALL_DIR}); install(FILES ${openbabel_SOURCE_DIR}/scripts/csharp/OBDotNet.dll DESTINATION ${LIB_INSTALL_DIR}). endif (DO_CSHARP_BINDINGS). ###################; # PHP; ###################. if (PHP_BINDINGS); if (EXISTS ${openbabel_SOURCE_DIR}/scripts/php/openbabel-php.cpp OR RUN_SWIG). FIND_PROGRAM(PHP_CONFIG_EXECUTABLE; NAMES php5-config php-config; ); if (NOT PHP_CONFIG_EXECUTABLE); message(STATUS ""PHP-Config files NOT found. PHP bindings will NOT be compile",MatchSource.DOCS,scripts/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:279,Availability,avail,available,279,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:5489,Deployability,install,install,5489,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:5946,Deployability,install,install,5946,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:118,Energy Efficiency,charge,charges,118,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:127,Energy Efficiency,charge,charges,127,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:144,Energy Efficiency,charge,charges,144,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:167,Energy Efficiency,charge,charges,167,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:185,Energy Efficiency,charge,charges,185,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:205,Energy Efficiency,charge,charges,205,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:319,Energy Efficiency,charge,charge,319,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:338,Energy Efficiency,charge,charges,338,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:348,Energy Efficiency,charge,charges,348,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:358,Energy Efficiency,charge,charges,358,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:376,Energy Efficiency,charge,charges,376,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:393,Energy Efficiency,charge,charges,393,"# Library versioning; set(SOVERSION 7); set(LIBRARY_VERSION 7.0.0). find_package(Boost 1.45.0 COMPONENTS system). set(charges; charges/eem.cpp; charges/gasteiger.cpp; charges/none.cpp; charges/mmff94.cpp; charges/fromfile.cpp; ). if (EIGEN2_FOUND OR EIGEN3_FOUND); # if eigen is available, compile QEq, EQeq, and QTPIE charge models; set(charges ${charges}; charges/eqeq.cpp; charges/qeq.cpp; charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cp",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:2055,Energy Efficiency,charge,chargemodel,2055,ND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cpp; bondtyper.cpp; builder.cpp; canon.cpp; chains.cpp; chargemodel.cpp; data.cpp; data_utilities.cpp; descriptor.cpp; elements.cpp; fingerprint.cpp; forcefield.cpp; format.cpp; generic.cpp; graphsym.cpp; grid.cpp; griddata.cpp; isomorphism.cpp; kekulize.cpp; locale.cpp; matrix.cpp; mcdlutil.cpp; molchrg.cpp; mol.cpp; obconversion.cpp; oberror.cpp; obfunctions.cpp; obiter.cpp; obutil.cpp; op.cpp; parsmart.cpp; patty.cpp; phmodel.cpp; plugin.cpp; pointgroup.cpp; query.cpp; rand.cpp; reactionfacade.cpp; residue.cpp; ring.cpp; rotamer.cpp; rotor.cpp; spectrophore.cpp; tautomer.cpp; tokenst.cpp; transform.cpp; typer.cpp; obmolecformat.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(openbabel_srcs ${openbabel_srcs}; conformersearch.cpp; confsearch.cpp; distgeom.cpp; ); endif (). if(BUILD_SHARED); if(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_win32.cpp; ); else(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_unix.cpp; ); endif(MSVC); else(BUILD_SHARED); include(formats/formats.cmake); foreach(format ${formats}); set(openbabel_srcs ${,MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:3469,Energy Efficiency,charge,charges,3469,"sidue.cpp; ring.cpp; rotamer.cpp; rotor.cpp; spectrophore.cpp; tautomer.cpp; tokenst.cpp; transform.cpp; typer.cpp; obmolecformat.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(openbabel_srcs ${openbabel_srcs}; conformersearch.cpp; confsearch.cpp; distgeom.cpp; ); endif (). if(BUILD_SHARED); if(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_win32.cpp; ); else(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_unix.cpp; ); endif(MSVC); else(BUILD_SHARED); include(formats/formats.cmake); foreach(format ${formats}); set(openbabel_srcs ${openbabel_srcs} formats/${format}.cpp); endforeach(format ${formats}). if(LIBXML2_FOUND AND WITH_STATIC_LIBXML); set(openbabel_srcs ${openbabel_srcs} formats/xml/xml.cpp); foreach(format ${formats_xml}); set(openbabel_srcs ${openbabel_srcs} formats/xml/${format}.cpp); endforeach(format ${formats_xml}); endif(LIBXML2_FOUND AND WITH_STATIC_LIBXML). foreach(plugingroup descriptors fingerprints forcefields ops charges); set(openbabel_srcs ${openbabel_srcs} ${${plugingroup}}); endforeach(plugingroup descriptors fingerprints forcefields ops charges). if(WITH_STATIC_INCHI); if(NOT OPENBABEL_USE_SYSTEM_INCHI); add_subdirectory(formats/libinchi); endif(); set(openbabel_srcs ${openbabel_srcs} formats/getinchi.cpp ops/unique.cpp); set(libs ${libs} ${INCHI_LIBRARY}); endif(WITH_STATIC_INCHI); endif(BUILD_SHARED). set(openbabel_library_srcs; ${WRAP_MEMCPY_SRC}; ${openbabel_srcs}; ${depict_srcs}; ${math_srcs}; ${stereo_srcs}; ${headers}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""; ). if(WIN32); if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); else(WIN32); # the C math library; if(BUILD_MIXED); set(libs ${libs} m); else(BUILD_MIXED); # Make sure to find the static library with .a suffix (see CMAKE_FIND_LIBRARY_SUFFIXES); find_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:3600,Energy Efficiency,charge,charges,3600,"sidue.cpp; ring.cpp; rotamer.cpp; rotor.cpp; spectrophore.cpp; tautomer.cpp; tokenst.cpp; transform.cpp; typer.cpp; obmolecformat.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(openbabel_srcs ${openbabel_srcs}; conformersearch.cpp; confsearch.cpp; distgeom.cpp; ); endif (). if(BUILD_SHARED); if(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_win32.cpp; ); else(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_unix.cpp; ); endif(MSVC); else(BUILD_SHARED); include(formats/formats.cmake); foreach(format ${formats}); set(openbabel_srcs ${openbabel_srcs} formats/${format}.cpp); endforeach(format ${formats}). if(LIBXML2_FOUND AND WITH_STATIC_LIBXML); set(openbabel_srcs ${openbabel_srcs} formats/xml/xml.cpp); foreach(format ${formats_xml}); set(openbabel_srcs ${openbabel_srcs} formats/xml/${format}.cpp); endforeach(format ${formats_xml}); endif(LIBXML2_FOUND AND WITH_STATIC_LIBXML). foreach(plugingroup descriptors fingerprints forcefields ops charges); set(openbabel_srcs ${openbabel_srcs} ${${plugingroup}}); endforeach(plugingroup descriptors fingerprints forcefields ops charges). if(WITH_STATIC_INCHI); if(NOT OPENBABEL_USE_SYSTEM_INCHI); add_subdirectory(formats/libinchi); endif(); set(openbabel_srcs ${openbabel_srcs} formats/getinchi.cpp ops/unique.cpp); set(libs ${libs} ${INCHI_LIBRARY}); endif(WITH_STATIC_INCHI); endif(BUILD_SHARED). set(openbabel_library_srcs; ${WRAP_MEMCPY_SRC}; ${openbabel_srcs}; ${depict_srcs}; ${math_srcs}; ${stereo_srcs}; ${headers}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""; ). if(WIN32); if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); else(WIN32); # the C math library; if(BUILD_MIXED); set(libs ${libs} m); else(BUILD_MIXED); # Make sure to find the static library with .a suffix (see CMAKE_FIND_LIBRARY_SUFFIXES); find_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:5744,Energy Efficiency,charge,charges,5744,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:2437,Modifiability,plugin,plugin,2437,pp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cpp; bondtyper.cpp; builder.cpp; canon.cpp; chains.cpp; chargemodel.cpp; data.cpp; data_utilities.cpp; descriptor.cpp; elements.cpp; fingerprint.cpp; forcefield.cpp; format.cpp; generic.cpp; graphsym.cpp; grid.cpp; griddata.cpp; isomorphism.cpp; kekulize.cpp; locale.cpp; matrix.cpp; mcdlutil.cpp; molchrg.cpp; mol.cpp; obconversion.cpp; oberror.cpp; obfunctions.cpp; obiter.cpp; obutil.cpp; op.cpp; parsmart.cpp; patty.cpp; phmodel.cpp; plugin.cpp; pointgroup.cpp; query.cpp; rand.cpp; reactionfacade.cpp; residue.cpp; ring.cpp; rotamer.cpp; rotor.cpp; spectrophore.cpp; tautomer.cpp; tokenst.cpp; transform.cpp; typer.cpp; obmolecformat.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(openbabel_srcs ${openbabel_srcs}; conformersearch.cpp; confsearch.cpp; distgeom.cpp; ); endif (). if(BUILD_SHARED); if(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_win32.cpp; ); else(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_unix.cpp; ); endif(MSVC); else(BUILD_SHARED); include(formats/formats.cmake); foreach(format ${formats}); set(openbabel_srcs ${openbabel_srcs} formats/${format}.cpp); endforeach(format ${formats}). if(LIBXML2_FOUND AND WITH_STATIC_LIBXML); set(openbabel_srcs ${openbabel_srcs} formats/xml/xml.cpp); foreach(format ${formats_xml}); set(openbabel_srcs ${openbabel_srcs} formats/xml/${format}.cpp); endforeach(format ${formats_xml}); endif(LIBXML2_FOUND AND WITH_STATIC_LIBXML). foreach(plugingroup descriptor,MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:3416,Modifiability,plugin,plugingroup,3416,"sidue.cpp; ring.cpp; rotamer.cpp; rotor.cpp; spectrophore.cpp; tautomer.cpp; tokenst.cpp; transform.cpp; typer.cpp; obmolecformat.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(openbabel_srcs ${openbabel_srcs}; conformersearch.cpp; confsearch.cpp; distgeom.cpp; ); endif (). if(BUILD_SHARED); if(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_win32.cpp; ); else(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_unix.cpp; ); endif(MSVC); else(BUILD_SHARED); include(formats/formats.cmake); foreach(format ${formats}); set(openbabel_srcs ${openbabel_srcs} formats/${format}.cpp); endforeach(format ${formats}). if(LIBXML2_FOUND AND WITH_STATIC_LIBXML); set(openbabel_srcs ${openbabel_srcs} formats/xml/xml.cpp); foreach(format ${formats_xml}); set(openbabel_srcs ${openbabel_srcs} formats/xml/${format}.cpp); endforeach(format ${formats_xml}); endif(LIBXML2_FOUND AND WITH_STATIC_LIBXML). foreach(plugingroup descriptors fingerprints forcefields ops charges); set(openbabel_srcs ${openbabel_srcs} ${${plugingroup}}); endforeach(plugingroup descriptors fingerprints forcefields ops charges). if(WITH_STATIC_INCHI); if(NOT OPENBABEL_USE_SYSTEM_INCHI); add_subdirectory(formats/libinchi); endif(); set(openbabel_srcs ${openbabel_srcs} formats/getinchi.cpp ops/unique.cpp); set(libs ${libs} ${INCHI_LIBRARY}); endif(WITH_STATIC_INCHI); endif(BUILD_SHARED). set(openbabel_library_srcs; ${WRAP_MEMCPY_SRC}; ${openbabel_srcs}; ${depict_srcs}; ${math_srcs}; ${stereo_srcs}; ${headers}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""; ). if(WIN32); if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); else(WIN32); # the C math library; if(BUILD_MIXED); set(libs ${libs} m); else(BUILD_MIXED); # Make sure to find the static library with .a suffix (see CMAKE_FIND_LIBRARY_SUFFIXES); find_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:3520,Modifiability,plugin,plugingroup,3520,"sidue.cpp; ring.cpp; rotamer.cpp; rotor.cpp; spectrophore.cpp; tautomer.cpp; tokenst.cpp; transform.cpp; typer.cpp; obmolecformat.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(openbabel_srcs ${openbabel_srcs}; conformersearch.cpp; confsearch.cpp; distgeom.cpp; ); endif (). if(BUILD_SHARED); if(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_win32.cpp; ); else(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_unix.cpp; ); endif(MSVC); else(BUILD_SHARED); include(formats/formats.cmake); foreach(format ${formats}); set(openbabel_srcs ${openbabel_srcs} formats/${format}.cpp); endforeach(format ${formats}). if(LIBXML2_FOUND AND WITH_STATIC_LIBXML); set(openbabel_srcs ${openbabel_srcs} formats/xml/xml.cpp); foreach(format ${formats_xml}); set(openbabel_srcs ${openbabel_srcs} formats/xml/${format}.cpp); endforeach(format ${formats_xml}); endif(LIBXML2_FOUND AND WITH_STATIC_LIBXML). foreach(plugingroup descriptors fingerprints forcefields ops charges); set(openbabel_srcs ${openbabel_srcs} ${${plugingroup}}); endforeach(plugingroup descriptors fingerprints forcefields ops charges). if(WITH_STATIC_INCHI); if(NOT OPENBABEL_USE_SYSTEM_INCHI); add_subdirectory(formats/libinchi); endif(); set(openbabel_srcs ${openbabel_srcs} formats/getinchi.cpp ops/unique.cpp); set(libs ${libs} ${INCHI_LIBRARY}); endif(WITH_STATIC_INCHI); endif(BUILD_SHARED). set(openbabel_library_srcs; ${WRAP_MEMCPY_SRC}; ${openbabel_srcs}; ${depict_srcs}; ${math_srcs}; ${stereo_srcs}; ${headers}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""; ). if(WIN32); if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); else(WIN32); # the C math library; if(BUILD_MIXED); set(libs ${libs} m); else(BUILD_MIXED); # Make sure to find the static library with .a suffix (see CMAKE_FIND_LIBRARY_SUFFIXES); find_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:3547,Modifiability,plugin,plugingroup,3547,"sidue.cpp; ring.cpp; rotamer.cpp; rotor.cpp; spectrophore.cpp; tautomer.cpp; tokenst.cpp; transform.cpp; typer.cpp; obmolecformat.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(openbabel_srcs ${openbabel_srcs}; conformersearch.cpp; confsearch.cpp; distgeom.cpp; ); endif (). if(BUILD_SHARED); if(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_win32.cpp; ); else(MSVC); set(openbabel_srcs ${openbabel_srcs}; dlhandler_unix.cpp; ); endif(MSVC); else(BUILD_SHARED); include(formats/formats.cmake); foreach(format ${formats}); set(openbabel_srcs ${openbabel_srcs} formats/${format}.cpp); endforeach(format ${formats}). if(LIBXML2_FOUND AND WITH_STATIC_LIBXML); set(openbabel_srcs ${openbabel_srcs} formats/xml/xml.cpp); foreach(format ${formats_xml}); set(openbabel_srcs ${openbabel_srcs} formats/xml/${format}.cpp); endforeach(format ${formats_xml}); endif(LIBXML2_FOUND AND WITH_STATIC_LIBXML). foreach(plugingroup descriptors fingerprints forcefields ops charges); set(openbabel_srcs ${openbabel_srcs} ${${plugingroup}}); endforeach(plugingroup descriptors fingerprints forcefields ops charges). if(WITH_STATIC_INCHI); if(NOT OPENBABEL_USE_SYSTEM_INCHI); add_subdirectory(formats/libinchi); endif(); set(openbabel_srcs ${openbabel_srcs} formats/getinchi.cpp ops/unique.cpp); set(libs ${libs} ${INCHI_LIBRARY}); endif(WITH_STATIC_INCHI); endif(BUILD_SHARED). set(openbabel_library_srcs; ${WRAP_MEMCPY_SRC}; ${openbabel_srcs}; ${depict_srcs}; ${math_srcs}; ${stereo_srcs}; ${headers}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""; ). if(WIN32); if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); else(WIN32); # the C math library; if(BUILD_MIXED); set(libs ${libs} m); else(BUILD_MIXED); # Make sure to find the static library with .a suffix (see CMAKE_FIND_LIBRARY_SUFFIXES); find_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:5691,Modifiability,plugin,plugingroup,5691,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:5775,Modifiability,plugin,plugingroup,5775,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:5807,Modifiability,plugin,plugingroup,5807,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:5913,Modifiability,plugin,plugingroup,5913,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:5971,Modifiability,plugin,plugingroup,5971,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:6149,Modifiability,plugin,plugingroup,6149,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:6195,Modifiability,plugin,plugingroup,6195,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:6260,Modifiability,plugin,plugingroup,6260,"ind_library(MATH_LIBRARY NAMES m); if(MATH_LIBRARY); set(libs ${libs} ${MATH_LIBRARY}); endif(MATH_LIBRARY); endif(BUILD_MIXED). if(BUILD_SHARED); # dl library if it is found and we are doing a shared build; if(HAVE_LIBDL); set(libs ${libs} dl); endif(HAVE_LIBDL); endif(BUILD_SHARED). if(ZLIB_FOUND); set(libs ${libs} ${ZLIB_LIBRARY}); endif(ZLIB_FOUND); endif(WIN32). add_library(openbabel ${BUILD_TYPE}; ${openbabel_library_srcs}; ). target_link_libraries(openbabel ${libs}); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS}); endif(). if(BUILD_SHARED OR BUILD_MIXED); set(THREADS_PREFER_PTHREAD_FLAG ON); find_package(Threads REQUIRED); target_link_libraries(openbabel Threads::Threads); endif(). set_target_properties(openbabel PROPERTIES; VERSION ${LIBRARY_VERSION}; SOVERSION ${SOVERSION}; DEFINE_SYMBOL MAKE_OBDLL; ); if(MSVC); # Set the output name to openbabel-3 (preserves old behaviour). Is this desired?; set_target_properties(openbabel PROPERTIES; OUTPUT_NAME openbabel-3); remove_definitions(_UNICODE UNICODE); endif(MSVC). # Export the openbabel target, for use in other projects; export(TARGETS openbabel APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS openbabel; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ). if(BUILD_SHARED); foreach(plugingroup descriptors fingerprints forcefields ops charges); add_library(plugin_${plugingroup} ${PLUGIN_TYPE} ${${plugingroup}}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(plugin_${plugingroup} ${libs} openbabel); install(TARGETS plugin_${plugingroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(plugin_${plugingroup} PROPERTIES; OUTPUT_NAME plugin_${plugingroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(plugingroup). add_subdirectory(formats); endif(BUILD_SHARED); ",MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt:1393,Performance,load,loader,1393, charges/qtpie.cpp; ); endif(). set(depict_srcs; depict/depict.cpp; depict/svgpainter.cpp; ). set(descriptors; descriptors/cansmidescriptor.cpp; descriptors/cmpdfilter.cpp; descriptors/groupcontrib.cpp; descriptors/filters.cpp; descriptors/inchidescriptor.cpp; descriptors/smartsdescriptors.cpp; ). set(fingerprints; fingerprints/finger2.cpp; fingerprints/finger3.cpp; fingerprints/fingerecfp.cpp; ). set(forcefields; forcefields/forcefieldgaff.cpp; forcefields/forcefieldghemical.cpp; forcefields/forcefieldmmff94.cpp; forcefields/forcefielduff.cpp; ). set(math_srcs; math/matrix3x3.cpp; math/spacegroup.cpp; math/transform3d.cpp; math/vector3.cpp; ). if(EIGEN2_FOUND OR EIGEN3_FOUND); set(math_srcs ${math_srcs}; math/align.cpp; ); endif(). set(ops; ops/addfilename.cpp; ops/addinindex.cpp; ops/addpolarh.cpp; ops/addnonpolarh.cpp; ops/canonical.cpp; ops/changecell.cpp; ops/delpolarh.cpp; ops/delnonpolarh.cpp; ops/gen2D.cpp; ops/fillUC.cpp; ops/forcefield.cpp; ops/gen3d.cpp; ops/largest.cpp; ops/loader.cpp; ops/neutralize.cpp; ops/opsplit.cpp; ops/optransform.cpp; ops/partialcharges.cpp; ops/readconformers.cpp; ops/sort.cpp; ops/opisomorph.cpp; ops/ophighlight.cpp; ops/xout.cpp; ); if(EIGEN2_FOUND OR EIGEN3_FOUND); set(ops ${ops}; ops/conformer.cpp; ops/opalign.cpp; ops/opconfab.cpp; ); endif(). set(stereo_srcs; stereo/stereo.cpp; stereo/tetranonplanar.cpp; stereo/tetraplanar.cpp; stereo/squareplanar.cpp; stereo/cistrans.cpp; stereo/tetrahedral.cpp; stereo/perception.cpp; stereo/facade.cpp; stereo/gen3dstereohelper.cpp; ). set(openbabel_srcs; alias.cpp; atom.cpp; base.cpp; bitvec.cpp; bond.cpp; bondtyper.cpp; builder.cpp; canon.cpp; chains.cpp; chargemodel.cpp; data.cpp; data_utilities.cpp; descriptor.cpp; elements.cpp; fingerprint.cpp; forcefield.cpp; format.cpp; generic.cpp; graphsym.cpp; grid.cpp; griddata.cpp; isomorphism.cpp; kekulize.cpp; locale.cpp; matrix.cpp; mcdlutil.cpp; molchrg.cpp; mol.cpp; obconversion.cpp; oberror.cpp; obfunctions.cpp; obiter.cpp; obutil.cpp; o,MatchSource.DOCS,src/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:6753,Deployability,install,install,6753,"ARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the calling; # script needs some work. On Cygwin, there's some weird DLL problems when; # calling from Python.; if(NOT MINGW AND NOT CYGWIN); include(UsePythonTest); if(PYTHON_EXECUTABLE); set(pytests; babel sym smartssym fastsearch distgeom unique kekule pdbformat RInChI); foreach(pytest ${pytests}); SET_SOURCE_FILES_PROPERTIES(test${pytest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); ADD_PYTHON_TEST(pytest_${pytest} test${pytest}.py); set_tests_properties(pytest_${pytest} PROPERTIE",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:6921,Integrability,wrap,wrapped,6921,"TechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the calling; # script needs some work. On Cygwin, there's some weird DLL problems when; # calling from Python.; if(NOT MINGW AND NOT CYGWIN); include(UsePythonTest); if(PYTHON_EXECUTABLE); set(pytests; babel sym smartssym fastsearch distgeom unique kekule pdbformat RInChI); foreach(pytest ${pytests}); SET_SOURCE_FILES_PROPERTIES(test${pytest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); ADD_PYTHON_TEST(pytest_${pytest} test${pytest}.py); set_tests_properties(pytest_${pytest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pytest ${pytests}); endif(PYTHON_EXECUTABLE); endif(NOT MINGW AND NOT CYGWIN). ###############################; # Tests using Py",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:162,Modifiability,plugin,plugin,162,"# define TESTDATADIR for tests that need input files; add_definitions(-DTESTDATADIR=""${CMAKE_SOURCE_DIR}/test/files/""). # define FORMATDIR for location of format plugin binaries; if(BINDINGS_ONLY); set(FORMATDIR ""${OB_MODULE_PATH}/""); else(); set(FORMATDIR ""${openbabel_BINARY_DIR}/lib${LIB_SUFFIX}/""); endif(); add_definitions(-DFORMATDIR=""${FORMATDIR}/""). ###########################################################; # new tests using obtest.h; ############################################################. ################ Add new tests here; set (cpptests; alias automorphism builder canonconsistent canonfragment canonstable carspacegroup cifspacegroup; cistrans conversion graphsym gzip addh; implicitH lssr isomorphism multicml periodic regressions rotor shuffle smiles spectrophore; squareplanar stereo stereoperception tautomer tetrahedral; tetranonplanar tetraplanar uniqueid; ); set (alias_parts 1); set (automorphism_parts 1 2 3 4 5 6 7 8 9 10); set (builder_parts 1 2 3 4 5 6); set (canonconsistent_parts 1 2 3); set (canonfragment_parts 1); set (canonstable_parts 1); set (carspacegroup_parts 1 2 3 4); set (cifspacegroup_parts 1 2 3 4 5 6 7 8 9 10 11 12 13); set (cistrans_parts 1 2 3 4 5 6 7 8 9); set (conversion_parts 1); set (graphsym_parts 1 2 3 4 5); set (gzip_parts 1); set (addh_parts 1); set (implicitH_parts 1); set (lssr_parts 1 2 3 4 5); set (isomorphism_parts 1 2 3 4 5 6 7 8 9); set (multicml_parts 1); set (periodic_parts 1 2 3 4); set (regressions_parts 1 221 222 223 224 225 226 227 228 240 241 242 1794 2111); set (rotor_parts 1 2 3 4); set (shuffle_parts 1 2 3 4 5); set (smiles_parts 1 2 3); set (spectrophore_parts 1 2 3 4 5); set (squareplanar_parts 1 2 3 4 5); set (stereo_parts 1 2 3 4 5 6); set (stereoperception_parts 1 2 3 4); set (tautomer_parts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28); set (tetrahedral_parts 1 2 3 4 5); set (tetranonplanar_parts 1); set (tetraplanar_parts 1); set (uniqueid_parts 1 2). if (EIGEN2_FOUND ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:25,Testability,test,tests,25,"# define TESTDATADIR for tests that need input files; add_definitions(-DTESTDATADIR=""${CMAKE_SOURCE_DIR}/test/files/""). # define FORMATDIR for location of format plugin binaries; if(BINDINGS_ONLY); set(FORMATDIR ""${OB_MODULE_PATH}/""); else(); set(FORMATDIR ""${openbabel_BINARY_DIR}/lib${LIB_SUFFIX}/""); endif(); add_definitions(-DFORMATDIR=""${FORMATDIR}/""). ###########################################################; # new tests using obtest.h; ############################################################. ################ Add new tests here; set (cpptests; alias automorphism builder canonconsistent canonfragment canonstable carspacegroup cifspacegroup; cistrans conversion graphsym gzip addh; implicitH lssr isomorphism multicml periodic regressions rotor shuffle smiles spectrophore; squareplanar stereo stereoperception tautomer tetrahedral; tetranonplanar tetraplanar uniqueid; ); set (alias_parts 1); set (automorphism_parts 1 2 3 4 5 6 7 8 9 10); set (builder_parts 1 2 3 4 5 6); set (canonconsistent_parts 1 2 3); set (canonfragment_parts 1); set (canonstable_parts 1); set (carspacegroup_parts 1 2 3 4); set (cifspacegroup_parts 1 2 3 4 5 6 7 8 9 10 11 12 13); set (cistrans_parts 1 2 3 4 5 6 7 8 9); set (conversion_parts 1); set (graphsym_parts 1 2 3 4 5); set (gzip_parts 1); set (addh_parts 1); set (implicitH_parts 1); set (lssr_parts 1 2 3 4 5); set (isomorphism_parts 1 2 3 4 5 6 7 8 9); set (multicml_parts 1); set (periodic_parts 1 2 3 4); set (regressions_parts 1 221 222 223 224 225 226 227 228 240 241 242 1794 2111); set (rotor_parts 1 2 3 4); set (shuffle_parts 1 2 3 4 5); set (smiles_parts 1 2 3); set (spectrophore_parts 1 2 3 4 5); set (squareplanar_parts 1 2 3 4 5); set (stereo_parts 1 2 3 4 5 6); set (stereoperception_parts 1 2 3 4); set (tautomer_parts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28); set (tetrahedral_parts 1 2 3 4 5); set (tetranonplanar_parts 1); set (tetraplanar_parts 1); set (uniqueid_parts 1 2). if (EIGEN2_FOUND ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:105,Testability,test,test,105,"# define TESTDATADIR for tests that need input files; add_definitions(-DTESTDATADIR=""${CMAKE_SOURCE_DIR}/test/files/""). # define FORMATDIR for location of format plugin binaries; if(BINDINGS_ONLY); set(FORMATDIR ""${OB_MODULE_PATH}/""); else(); set(FORMATDIR ""${openbabel_BINARY_DIR}/lib${LIB_SUFFIX}/""); endif(); add_definitions(-DFORMATDIR=""${FORMATDIR}/""). ###########################################################; # new tests using obtest.h; ############################################################. ################ Add new tests here; set (cpptests; alias automorphism builder canonconsistent canonfragment canonstable carspacegroup cifspacegroup; cistrans conversion graphsym gzip addh; implicitH lssr isomorphism multicml periodic regressions rotor shuffle smiles spectrophore; squareplanar stereo stereoperception tautomer tetrahedral; tetranonplanar tetraplanar uniqueid; ); set (alias_parts 1); set (automorphism_parts 1 2 3 4 5 6 7 8 9 10); set (builder_parts 1 2 3 4 5 6); set (canonconsistent_parts 1 2 3); set (canonfragment_parts 1); set (canonstable_parts 1); set (carspacegroup_parts 1 2 3 4); set (cifspacegroup_parts 1 2 3 4 5 6 7 8 9 10 11 12 13); set (cistrans_parts 1 2 3 4 5 6 7 8 9); set (conversion_parts 1); set (graphsym_parts 1 2 3 4 5); set (gzip_parts 1); set (addh_parts 1); set (implicitH_parts 1); set (lssr_parts 1 2 3 4 5); set (isomorphism_parts 1 2 3 4 5 6 7 8 9); set (multicml_parts 1); set (periodic_parts 1 2 3 4); set (regressions_parts 1 221 222 223 224 225 226 227 228 240 241 242 1794 2111); set (rotor_parts 1 2 3 4); set (shuffle_parts 1 2 3 4 5); set (smiles_parts 1 2 3); set (spectrophore_parts 1 2 3 4 5); set (squareplanar_parts 1 2 3 4 5); set (stereo_parts 1 2 3 4 5 6); set (stereoperception_parts 1 2 3 4); set (tautomer_parts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28); set (tetrahedral_parts 1 2 3 4 5); set (tetranonplanar_parts 1); set (tetraplanar_parts 1); set (uniqueid_parts 1 2). if (EIGEN2_FOUND ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:425,Testability,test,tests,425,"# define TESTDATADIR for tests that need input files; add_definitions(-DTESTDATADIR=""${CMAKE_SOURCE_DIR}/test/files/""). # define FORMATDIR for location of format plugin binaries; if(BINDINGS_ONLY); set(FORMATDIR ""${OB_MODULE_PATH}/""); else(); set(FORMATDIR ""${openbabel_BINARY_DIR}/lib${LIB_SUFFIX}/""); endif(); add_definitions(-DFORMATDIR=""${FORMATDIR}/""). ###########################################################; # new tests using obtest.h; ############################################################. ################ Add new tests here; set (cpptests; alias automorphism builder canonconsistent canonfragment canonstable carspacegroup cifspacegroup; cistrans conversion graphsym gzip addh; implicitH lssr isomorphism multicml periodic regressions rotor shuffle smiles spectrophore; squareplanar stereo stereoperception tautomer tetrahedral; tetranonplanar tetraplanar uniqueid; ); set (alias_parts 1); set (automorphism_parts 1 2 3 4 5 6 7 8 9 10); set (builder_parts 1 2 3 4 5 6); set (canonconsistent_parts 1 2 3); set (canonfragment_parts 1); set (canonstable_parts 1); set (carspacegroup_parts 1 2 3 4); set (cifspacegroup_parts 1 2 3 4 5 6 7 8 9 10 11 12 13); set (cistrans_parts 1 2 3 4 5 6 7 8 9); set (conversion_parts 1); set (graphsym_parts 1 2 3 4 5); set (gzip_parts 1); set (addh_parts 1); set (implicitH_parts 1); set (lssr_parts 1 2 3 4 5); set (isomorphism_parts 1 2 3 4 5 6 7 8 9); set (multicml_parts 1); set (periodic_parts 1 2 3 4); set (regressions_parts 1 221 222 223 224 225 226 227 228 240 241 242 1794 2111); set (rotor_parts 1 2 3 4); set (shuffle_parts 1 2 3 4 5); set (smiles_parts 1 2 3); set (spectrophore_parts 1 2 3 4 5); set (squareplanar_parts 1 2 3 4 5); set (stereo_parts 1 2 3 4 5 6); set (stereoperception_parts 1 2 3 4); set (tautomer_parts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28); set (tetrahedral_parts 1 2 3 4 5); set (tetranonplanar_parts 1); set (tetraplanar_parts 1); set (uniqueid_parts 1 2). if (EIGEN2_FOUND ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:534,Testability,test,tests,534,"t(FORMATDIR ""${openbabel_BINARY_DIR}/lib${LIB_SUFFIX}/""); endif(); add_definitions(-DFORMATDIR=""${FORMATDIR}/""). ###########################################################; # new tests using obtest.h; ############################################################. ################ Add new tests here; set (cpptests; alias automorphism builder canonconsistent canonfragment canonstable carspacegroup cifspacegroup; cistrans conversion graphsym gzip addh; implicitH lssr isomorphism multicml periodic regressions rotor shuffle smiles spectrophore; squareplanar stereo stereoperception tautomer tetrahedral; tetranonplanar tetraplanar uniqueid; ); set (alias_parts 1); set (automorphism_parts 1 2 3 4 5 6 7 8 9 10); set (builder_parts 1 2 3 4 5 6); set (canonconsistent_parts 1 2 3); set (canonfragment_parts 1); set (canonstable_parts 1); set (carspacegroup_parts 1 2 3 4); set (cifspacegroup_parts 1 2 3 4 5 6 7 8 9 10 11 12 13); set (cistrans_parts 1 2 3 4 5 6 7 8 9); set (conversion_parts 1); set (graphsym_parts 1 2 3 4 5); set (gzip_parts 1); set (addh_parts 1); set (implicitH_parts 1); set (lssr_parts 1 2 3 4 5); set (isomorphism_parts 1 2 3 4 5 6 7 8 9); set (multicml_parts 1); set (periodic_parts 1 2 3 4); set (regressions_parts 1 221 222 223 224 225 226 227 228 240 241 242 1794 2111); set (rotor_parts 1 2 3 4); set (shuffle_parts 1 2 3 4 5); set (smiles_parts 1 2 3); set (spectrophore_parts 1 2 3 4 5); set (squareplanar_parts 1 2 3 4 5); set (stereo_parts 1 2 3 4 5 6); set (stereoperception_parts 1 2 3 4); set (tautomer_parts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28); set (tetrahedral_parts 1 2 3 4 5); set (tetranonplanar_parts 1); set (tetraplanar_parts 1); set (uniqueid_parts 1 2). if (EIGEN2_FOUND OR EIGEN3_FOUND); set(cpptests; align ${cpptests}); set (align_parts 1 2 3 4 5); endif (). if (WITH_MAEPARSER); set(cpptests ${cpptests}; maereader); set (maereader_parts 1 2); endif (). set(origtests; aromatest atom bond cansmi charge_mmff94 ch",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:2916,Testability,test,test,2916,"parts 1 2 3 4 5); set (tetranonplanar_parts 1); set (tetraplanar_parts 1); set (uniqueid_parts 1 2). if (EIGEN2_FOUND OR EIGEN3_FOUND); set(cpptests; align ${cpptests}); set (align_parts 1 2 3 4 5); endif (). if (WITH_MAEPARSER); set(cpptests ${cpptests}; maereader); set (maereader_parts 1 2); endif (). set(origtests; aromatest atom bond cansmi charge_mmff94 charge_gasteiger conversion; datatest ffgaff ffghemical ffmmff94 ffuff formalcharge format formula; internalcoord invalidsmarts invalidsmiles iterators logp_psa math mol; pdbreadfile phmodel residue ringtest smartstest smartsparse smilesmatch; unitcell; ); set (atom_parts 1 2 3 4); set (ffmmff94_parts 1 2 3 4 5 6); set (math_parts 1 2 3 4); set (pdbreadfile_parts 1 2 3 4). if(BUILD_SHARED); if(LIBXML2_FOUND); set(origtests ${origtests} cmlreadfile); endif(LIBXML2_FOUND); else(); if(WITH_STATIC_LIBXML); set(origtests ${origtests} cmlreadfile); endif(); endif(). ##################################. foreach(cpptest ${cpptests}); set(cpptestsrc ${cpptestsrc} ${cpptest}test.cpp); endforeach(); foreach(origtest ${origtests}); set(cpptestsrc ${cpptestsrc} ${origtest}.cpp); endforeach(). foreach(origtest ${origtests}); if(NOT DEFINED ""${origtest}_parts""); set(${origtest}_parts ""1""); endif(); endforeach(). include_directories(${CMAKE_CURRENT_SOURCE_DIR}); create_test_sourcelist(srclist test_runner.cpp; ${cpptestsrc}). set(TEST_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}). if(NOT BUILD_SHARED); set(libs openbabel); if(WITH_STATIC_LIBXML); set(libs ${libs} ${LIBXML2_LIBRARIES}); endif(); if(WITH_STATIC_INCHI); set(libs ${libs} ${INCHI_LIBRARY}); endif(); if(NOT MSVC); if(BUILD_MIXED); if(CMAKE_COMPILER_IS_GNUCXX); if(CMAKE_SYSTEM_NAME MATCHES Linux). #; # Relocatable binaries on linux using -static-libgcc. (GCC only); #; set(CMAKE_CXX_FLAGS ""-static-libgcc ${CMAKE_CXX_FLAGS}""); # make sure the linker will find the static libstdc++; file(REMOVE ""${CMAKE_BINARY_DIR}/libstdc++.a""); execute_process(COMMAND ""g++"" ""-print-file-name=lib",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:4675,Testability,test,test,4675,"inker will find the static libstdc++; file(REMOVE ""${CMAKE_BINARY_DIR}/libstdc++.a""); execute_process(COMMAND ""g++"" ""-print-file-name=libstdc++.a""; OUTPUT_VARIABLE libstdcpp; OUTPUT_STRIP_TRAILING_WHITESPACE); execute_process(COMMAND ""ln"" ""-s"" ""${libstdcpp}""; WORKING_DIRECTORY ${CMAKE_BINARY_DIR}). link_directories(${CMAKE_BINARY_DIR}). endif(CMAKE_SYSTEM_NAME MATCHES Linux); endif(CMAKE_COMPILER_IS_GNUCXX); else(BUILD_MIXED); if(NOT APPLE); set(CMAKE_CXX_FLAGS ""-static ${CMAKE_CXX_FLAGS}""); endif(); endif(BUILD_MIXED); endif(); else(); set(libs openbabel); endif(). add_executable(test_runner ${srclist} obtest.cpp); target_link_libraries(test_runner ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_runner PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(). foreach(cpptest ${cpptests}); foreach(part ${${cpptest}_parts}); add_test(test_${cpptest}_${part}; ${TEST_PATH}/test_runner ${cpptest}test ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). foreach(cpptest ${origtests}); foreach(part ${${cpptest}_parts}); add_test(test_${cpptest}_${part}; ${TEST_PATH}/test_runner ${cpptest} ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BU",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:5424,Testability,test,tests,5424,"SHARED AND NOT BUILD_MIXED); set_target_properties(test_runner PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(). foreach(cpptest ${cpptests}); foreach(part ${${cpptest}_parts}); add_test(test_${cpptest}_${part}; ${TEST_PATH}/test_runner ${cpptest}test ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). foreach(cpptest ${origtests}); foreach(part ${${cpptest}_parts}); add_test(test_${cpptest}_${part}; ${TEST_PATH}/test_runner ${cpptest} ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ###################",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:5858,Testability,test,test,5858," ""ERROR;FAIL;Test failed""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). foreach(cpptest ${origtests}); foreach(part ${${cpptest}_parts}); add_test(test_${cpptest}_${part}; ${TEST_PATH}/test_runner ${cpptest} ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS ro",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:5994,Testability,test,test,5994,"}_${part}; ${TEST_PATH}/test_runner ${cpptest} ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the callin",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:6015,Testability,test,test,6015,"}_${part}; ${TEST_PATH}/test_runner ${cpptest} ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the callin",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:6052,Testability,test,test,6052,"}_${part}; ${TEST_PATH}/test_runner ${cpptest} ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the callin",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:6108,Testability,test,test,6108,"}_${part}; ${TEST_PATH}/test_runner ${cpptest} ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the callin",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:6129,Testability,test,test,6129,"}_${part}; ${TEST_PATH}/test_runner ${cpptest} ${part}); set_tests_properties(test_${cpptest}_${part} PROPERTIES; FAIL_REGULAR_EXPRESSION ""not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the callin",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:6169,Testability,test,test,6169,"ARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the calling; # script needs some work. On Cygwin, there's some weird DLL problems when; # calling from Python.; if(NOT MINGW AND NOT CYGWIN); include(UsePythonTest); if(PYTHON_EXECUTABLE); set(pytests; babel sym smartssym fastsearch dist",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:6369,Testability,test,test,6369,"ARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""); endforeach(); endforeach(). ############################################################; # old-style tests using ""not ok""; ############################################################. if(NOT BUILD_SHARED); set(WITH_INCHI ${WITH_STATIC_INCHI}); endif(). if(WITH_INCHI); add_executable(test_inchiwrite inchiwrite.cpp ../src/formats/getinchi.cpp); target_link_libraries(test_inchiwrite ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(test_inchiwrite PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); # files in test/inchi -- both .sdf and .txt; set(inchitests Samples.sdf SamplesTechMan.sdf Steffen_PubChem.smi); set(inchidata ${CMAKE_SOURCE_DIR}/test/inchi); foreach(test ${inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the calling; # script needs some work. On Cygwin, there's some weird DLL problems when; # calling from Python.; if(NOT MINGW AND NOT CYGWIN); include(UsePythonTest); if(PYTHON_EXECUTABLE); set(pytests; babel sym smartssym fastsearch dist",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:6987,Testability,test,tests,6987,"{inchitests}); add_test(inchi${test}_Test; ${TEST_PATH}/test_inchiwrite ${inchidata}/${test} ${inchidata}/${test}.txt); set_tests_properties(inchi${test}_Test PROPERTIES; FAIL_REGULAR_EXPRESSION ""Not ok""; ENVIRONMENT ""BABEL_DATADIR=${CMAKE_SOURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the calling; # script needs some work. On Cygwin, there's some weird DLL problems when; # calling from Python.; if(NOT MINGW AND NOT CYGWIN); include(UsePythonTest); if(PYTHON_EXECUTABLE); set(pytests; babel sym smartssym fastsearch distgeom unique kekule pdbformat RInChI); foreach(pytest ${pytests}); SET_SOURCE_FILES_PROPERTIES(test${pytest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); ADD_PYTHON_TEST(pytest_${pytest} test${pytest}.py); set_tests_properties(pytest_${pytest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pytest ${pytests}); endif(PYTHON_EXECUTABLE); endif(NOT MINGW AND NOT CYGWIN). ###############################; # Tests using Python bindings #; ###############################. if (PYTHON_BINDINGS); include(UsePythonTest);",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:7366,Testability,test,test,7366,"OURCE_DIR}/data;LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); endforeach(test ${inchitests}); endif(WITH_INCHI). ############################################################; # roundtrip; ############################################################. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the calling; # script needs some work. On Cygwin, there's some weird DLL problems when; # calling from Python.; if(NOT MINGW AND NOT CYGWIN); include(UsePythonTest); if(PYTHON_EXECUTABLE); set(pytests; babel sym smartssym fastsearch distgeom unique kekule pdbformat RInChI); foreach(pytest ${pytests}); SET_SOURCE_FILES_PROPERTIES(test${pytest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); ADD_PYTHON_TEST(pytest_${pytest} test${pytest}.py); set_tests_properties(pytest_${pytest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pytest ${pytests}); endif(PYTHON_EXECUTABLE); endif(NOT MINGW AND NOT CYGWIN). ###############################; # Tests using Python bindings #; ###############################. if (PYTHON_BINDINGS); include(UsePythonTest); set(pybindtests; bindings; _pybel; example ; obconv_writers; cdjsonformat; pcjsonformat; roundtrip; ); foreach(pybindtest ${pybindtests}); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:7666,Testability,test,test,7666,"##############. add_executable(roundtrip roundtrip.cpp); target_link_libraries(roundtrip ${libs}); if(NOT BUILD_SHARED AND NOT BUILD_MIXED); set_target_properties(roundtrip PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(); install(TARGETS roundtrip; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ). ###########################; # Tests wrapped in Python #; ###########################. # The following tests should work okay in MinGW, it's just that the calling; # script needs some work. On Cygwin, there's some weird DLL problems when; # calling from Python.; if(NOT MINGW AND NOT CYGWIN); include(UsePythonTest); if(PYTHON_EXECUTABLE); set(pytests; babel sym smartssym fastsearch distgeom unique kekule pdbformat RInChI); foreach(pytest ${pytests}); SET_SOURCE_FILES_PROPERTIES(test${pytest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); ADD_PYTHON_TEST(pytest_${pytest} test${pytest}.py); set_tests_properties(pytest_${pytest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pytest ${pytests}); endif(PYTHON_EXECUTABLE); endif(NOT MINGW AND NOT CYGWIN). ###############################; # Tests using Python bindings #; ###############################. if (PYTHON_BINDINGS); include(UsePythonTest); set(pybindtests; bindings; _pybel; example ; obconv_writers; cdjsonformat; pcjsonformat; roundtrip; ); foreach(pybindtest ${pybindtests}); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:8190,Testability,test,test,8190," some weird DLL problems when; # calling from Python.; if(NOT MINGW AND NOT CYGWIN); include(UsePythonTest); if(PYTHON_EXECUTABLE); set(pytests; babel sym smartssym fastsearch distgeom unique kekule pdbformat RInChI); foreach(pytest ${pytests}); SET_SOURCE_FILES_PROPERTIES(test${pytest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); ADD_PYTHON_TEST(pytest_${pytest} test${pytest}.py); set_tests_properties(pytest_${pytest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pytest ${pytests}); endif(PYTHON_EXECUTABLE); endif(NOT MINGW AND NOT CYGWIN). ###############################; # Tests using Python bindings #; ###############################. if (PYTHON_BINDINGS); include(UsePythonTest); set(pybindtests; bindings; _pybel; example ; obconv_writers; cdjsonformat; pcjsonformat; roundtrip; ); foreach(pybindtest ${pybindtests}); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:8499,Testability,test,test,8499,"IES(test${pytest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); ADD_PYTHON_TEST(pytest_${pytest} test${pytest}.py); set_tests_properties(pytest_${pytest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pytest ${pytests}); endif(PYTHON_EXECUTABLE); endif(NOT MINGW AND NOT CYGWIN). ###############################; # Tests using Python bindings #; ###############################. if (PYTHON_BINDINGS); include(UsePythonTest); set(pybindtests; bindings; _pybel; example ; obconv_writers; cdjsonformat; pcjsonformat; roundtrip; ); foreach(pybindtest ${pybindtests}); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; $",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:8670,Testability,test,test,8670,"IX}:$ENV{LD_LIBRARY_PATH}""; ); ADD_PYTHON_TEST(pytest_${pytest} test${pytest}.py); set_tests_properties(pytest_${pytest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pytest ${pytests}); endif(PYTHON_EXECUTABLE); endif(NOT MINGW AND NOT CYGWIN). ###############################; # Tests using Python bindings #; ###############################. if (PYTHON_BINDINGS); include(UsePythonTest); set(pybindtests; bindings; _pybel; example ; obconv_writers; cdjsonformat; pcjsonformat; roundtrip; ); foreach(pybindtest ${pybindtests}); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); e",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:9088,Testability,test,test,9088,"_writers; cdjsonformat; pcjsonformat; roundtrip; ); foreach(pybindtest ${pybindtests}); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depi",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:9143,Testability,test,test,9143,"pybindtest ${pybindtests}); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depict_alias ${CMAKE_SOURCE_DIR}/test/files/alias.mol; alias ${C",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:9191,Testability,test,testname,9191,"t${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depict_alias ${CMAKE_SOURCE_DIR}/test/files/alias.mol; alias ${CMAKE_SOURCE_DIR}/test/files/alias.png); endif(); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:9300,Testability,test,testname,9300,"t${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depict_alias ${CMAKE_SOURCE_DIR}/test/files/alias.mol; alias ${CMAKE_SOURCE_DIR}/test/files/alias.png); endif(); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:9338,Testability,test,test,9338,"t${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depict_alias ${CMAKE_SOURCE_DIR}/test/files/alias.mol; alias ${CMAKE_SOURCE_DIR}/test/files/alias.png); endif(); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:9544,Testability,test,testname,9544,"t${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depict_alias ${CMAKE_SOURCE_DIR}/test/files/alias.mol; alias ${CMAKE_SOURCE_DIR}/test/files/alias.png); endif(); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:9972,Testability,test,test,9972,"t${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depict_alias ${CMAKE_SOURCE_DIR}/test/files/alias.mol; alias ${CMAKE_SOURCE_DIR}/test/files/alias.png); endif(); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:10028,Testability,test,test,10028,"t${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depict_alias ${CMAKE_SOURCE_DIR}/test/files/alias.mol; alias ${CMAKE_SOURCE_DIR}/test/files/alias.png); endif(); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:10104,Testability,test,test,10104,"t${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depict_alias ${CMAKE_SOURCE_DIR}/test/files/alias.mol; alias ${CMAKE_SOURCE_DIR}/test/files/alias.png); endif(); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt:10152,Testability,test,test,10152,"t${pybindtest}.py PROPERTIES; PYTHONPATH ""${CMAKE_SOURCE_DIR}/scripts/python:${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}""; BABEL_LIBDIR ""${FORMATDIR}""; BABEL_DATADIR ""${CMAKE_SOURCE_DIR}/data""; LD_LIBRARY_PATH ""${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}:$ENV{LD_LIBRARY_PATH}""; ); if(MSVC); SET_SOURCE_FILES_PROPERTIES(test${pybindtest}.py PROPERTIES; PYTHONPATH ""\""${CMAKE_SOURCE_DIR}/scripts/python;${CMAKE_BINARY_DIR}/bin/Release\""""; ); endif(); ADD_PYTHON_TEST(pybindtest_${pybindtest} test${pybindtest}.py); set_tests_properties(pybindtest_${pybindtest} PROPERTIES; FAIL_REGULAR_EXPRESSION ""ERROR;FAIL;Test failed""; ); endforeach(pybindtest ${pybindtests}); endif (PYTHON_BINDINGS). ############################################################; # Test 2D depiction using ImageMagick utilities; ############################################################. # Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png); function(add_depict_test testname obfile image_file ref_image); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); add_test(NAME test_${testname} COMMAND ${CMAKE_SOURCE_DIR}/test/test_depiction.sh; ${CMAKE_BINARY_DIR}/bin/obabel ${ImageMagick_convert_EXECUTABLE}; ${ImageMagick_compare_EXECUTABLE} ${obfile} ${depict_dir}; ${image_file} ${ref_image}); set_tests_properties(test_${testname} PROPERTIES; PASS_REGULAR_EXPRESSION ""0 @ 0,0""); endfunction(). option(TEST_DEPICTION ""Test depiction using ImageMagick utilities"" OFF); if(TEST_DEPICTION AND UNIX); find_package(ImageMagick COMPONENTS convert compare); if(ImageMagick_convert_FOUND AND ImageMagick_compare_FOUND); set(depict_dir ${CMAKE_BINARY_DIR}/depict_test); file(MAKE_DIRECTORY ${depict_dir}); add_depict_test(depict_aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.smi; aromatics ${CMAKE_SOURCE_DIR}/test/files/aromatics.png); add_depict_test(depict_alias ${CMAKE_SOURCE_DIR}/test/files/alias.mol; alias ${CMAKE_SOURCE_DIR}/test/files/alias.png); endif(); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/tools/CMakeLists.txt:675,Deployability,install,install,675,"if(MINIMAL_BUILD); set(tools; obabel; ); else(MINIMAL_BUILD); find_package(Boost COMPONENTS program_options iostreams); if(Boost_FOUND); include_directories(${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIR}); endif(). set(tools; obabel; obconformer; obenergy; obfit; 	obfitall; obgen; obminimize; obmm; obprobe; obprop; obrotamer; obrotate; obsym; obtautomer; obthermo; ); if(EIGEN3_FOUND); set(tools; ${tools}; obdistgen; ); endif(); endif(MINIMAL_BUILD). INCLUDE(CheckFunctionExists); SET(GETOPT getopt); CHECK_FUNCTION_EXISTS(${GETOPT} GETOPT_FOUND). if(BUILD_SHARED); foreach(tool ${tools}); add_executable(${tool} ${tool}.cpp); target_link_libraries(${tool} ${BABEL_LIBRARY}); install(TARGETS ${tool}; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ); endforeach(tool). if(NOT MINIMAL_BUILD); # obgrep, obrms, obspectrophore -- require getopt; set(toolnames obgrep obspectrophore); if(EIGEN3_FOUND); set(toolnames ${toolnames} obrms); endif(); foreach(tool ${toolnames}); if (NOT GETOPT_FOUND); add_executable(${tool} ${tool}.cpp getopt.c); else(NOT GETOPT_FOUND); add_executable(${tool} ${tool}.cpp); endif(NOT GETOPT_FOUND); target_link_libraries(${tool} ${BABEL_LIBRARY}); install(TARGETS ${tool}; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ); endforeach(). endif(NOT MINIMAL_BUILD). else(BUILD_SHARED); ###############################################################################; #; # Build STATIC obabel with all plugins taken from the static libopenbabel.a; #; ###############################################################################. # Set libs to imported openbabel target; set(libs openbabel); if(WITH_STATIC_INCHI); set(libs ${libs} ${INCHI_LIBRARY}); endif(); if(WITH_STATIC_LIBXML); set(libs ${libs} ${LIBXML2_LIBRARIES}); endif(). if(NOT MSVC); find_package(Threads); if(BUILD_MIXED); list(APPEND libs Threads::Threads); elseif(CMAKE_USE_PTHREADS_INIT); # Make sure t",MatchSource.DOCS,tools/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/tools/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/tools/CMakeLists.txt:1228,Deployability,install,install,1228," 	obfitall; obgen; obminimize; obmm; obprobe; obprop; obrotamer; obrotate; obsym; obtautomer; obthermo; ); if(EIGEN3_FOUND); set(tools; ${tools}; obdistgen; ); endif(); endif(MINIMAL_BUILD). INCLUDE(CheckFunctionExists); SET(GETOPT getopt); CHECK_FUNCTION_EXISTS(${GETOPT} GETOPT_FOUND). if(BUILD_SHARED); foreach(tool ${tools}); add_executable(${tool} ${tool}.cpp); target_link_libraries(${tool} ${BABEL_LIBRARY}); install(TARGETS ${tool}; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ); endforeach(tool). if(NOT MINIMAL_BUILD); # obgrep, obrms, obspectrophore -- require getopt; set(toolnames obgrep obspectrophore); if(EIGEN3_FOUND); set(toolnames ${toolnames} obrms); endif(); foreach(tool ${toolnames}); if (NOT GETOPT_FOUND); add_executable(${tool} ${tool}.cpp getopt.c); else(NOT GETOPT_FOUND); add_executable(${tool} ${tool}.cpp); endif(NOT GETOPT_FOUND); target_link_libraries(${tool} ${BABEL_LIBRARY}); install(TARGETS ${tool}; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ); endforeach(). endif(NOT MINIMAL_BUILD). else(BUILD_SHARED); ###############################################################################; #; # Build STATIC obabel with all plugins taken from the static libopenbabel.a; #; ###############################################################################. # Set libs to imported openbabel target; set(libs openbabel); if(WITH_STATIC_INCHI); set(libs ${libs} ${INCHI_LIBRARY}); endif(); if(WITH_STATIC_LIBXML); set(libs ${libs} ${LIBXML2_LIBRARIES}); endif(). if(NOT MSVC); find_package(Threads); if(BUILD_MIXED); list(APPEND libs Threads::Threads); elseif(CMAKE_USE_PTHREADS_INIT); # Make sure to find the static library; find_library(PTHREAD_LIBRARY NAMES pthread); list(APPEND libs ${PTHREAD_LIBRARY}); endif(). if(BUILD_MIXED); if(CMAKE_COMPILER_IS_GNUCXX); if(CMAKE_SYSTEM_NAME MATCHES Linux). #; # Relocatable binaries on linux using -static-libgcc",MatchSource.DOCS,tools/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/tools/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/tools/CMakeLists.txt:3261,Deployability,install,install,3261,"SHARED); ###############################################################################; #; # Build STATIC obabel with all plugins taken from the static libopenbabel.a; #; ###############################################################################. # Set libs to imported openbabel target; set(libs openbabel); if(WITH_STATIC_INCHI); set(libs ${libs} ${INCHI_LIBRARY}); endif(); if(WITH_STATIC_LIBXML); set(libs ${libs} ${LIBXML2_LIBRARIES}); endif(). if(NOT MSVC); find_package(Threads); if(BUILD_MIXED); list(APPEND libs Threads::Threads); elseif(CMAKE_USE_PTHREADS_INIT); # Make sure to find the static library; find_library(PTHREAD_LIBRARY NAMES pthread); list(APPEND libs ${PTHREAD_LIBRARY}); endif(). if(BUILD_MIXED); if(CMAKE_COMPILER_IS_GNUCXX); if(CMAKE_SYSTEM_NAME MATCHES Linux). #; # Relocatable binaries on linux using -static-libgcc. (GCC only); #; set(CMAKE_CXX_FLAGS ""-static-libgcc ${CMAKE_CXX_FLAGS}""); # make sure the linker will find the static libstdc++; file(REMOVE ""${CMAKE_BINARY_DIR}/libstdc++.a""); execute_process(COMMAND ""g++"" ""-print-file-name=libstdc++.a""; OUTPUT_VARIABLE libstdcpp; OUTPUT_STRIP_TRAILING_WHITESPACE); execute_process(COMMAND ""ln"" ""-s"" ""${libstdcpp}""; WORKING_DIRECTORY ${CMAKE_BINARY_DIR}). link_directories(${CMAKE_BINARY_DIR}). endif(CMAKE_SYSTEM_NAME MATCHES Linux); endif(CMAKE_COMPILER_IS_GNUCXX); else(BUILD_MIXED); #; # Default static build using GNU-like compiler.; #; if (NOT APPLE); set(CMAKE_CXX_FLAGS ""-static ${CMAKE_CXX_FLAGS}""); endif(); # APPLE doesn't use -static; endif(BUILD_MIXED); endif(). # build a static obabel only; add_executable(obabel obabel.cpp); target_link_libraries(obabel ${libs}). if(NOT BUILD_MIXED); # Prevent -Wl,-Bdynamic from being added to the end of the link line.; set_target_properties(obabel PROPERTIES LINK_SEARCH_END_STATIC TRUE); endif(NOT BUILD_MIXED). install(TARGETS obabel; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}). endif(BUILD_SHARED); ",MatchSource.DOCS,tools/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/tools/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/tools/CMakeLists.txt:1532,Modifiability,plugin,plugins,1532,"ETOPT getopt); CHECK_FUNCTION_EXISTS(${GETOPT} GETOPT_FOUND). if(BUILD_SHARED); foreach(tool ${tools}); add_executable(${tool} ${tool}.cpp); target_link_libraries(${tool} ${BABEL_LIBRARY}); install(TARGETS ${tool}; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ); endforeach(tool). if(NOT MINIMAL_BUILD); # obgrep, obrms, obspectrophore -- require getopt; set(toolnames obgrep obspectrophore); if(EIGEN3_FOUND); set(toolnames ${toolnames} obrms); endif(); foreach(tool ${toolnames}); if (NOT GETOPT_FOUND); add_executable(${tool} ${tool}.cpp getopt.c); else(NOT GETOPT_FOUND); add_executable(${tool} ${tool}.cpp); endif(NOT GETOPT_FOUND); target_link_libraries(${tool} ${BABEL_LIBRARY}); install(TARGETS ${tool}; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib${LIB_SUFFIX}; ARCHIVE DESTINATION lib${LIB_SUFFIX}; ); endforeach(). endif(NOT MINIMAL_BUILD). else(BUILD_SHARED); ###############################################################################; #; # Build STATIC obabel with all plugins taken from the static libopenbabel.a; #; ###############################################################################. # Set libs to imported openbabel target; set(libs openbabel); if(WITH_STATIC_INCHI); set(libs ${libs} ${INCHI_LIBRARY}); endif(); if(WITH_STATIC_LIBXML); set(libs ${libs} ${LIBXML2_LIBRARIES}); endif(). if(NOT MSVC); find_package(Threads); if(BUILD_MIXED); list(APPEND libs Threads::Threads); elseif(CMAKE_USE_PTHREADS_INIT); # Make sure to find the static library; find_library(PTHREAD_LIBRARY NAMES pthread); list(APPEND libs ${PTHREAD_LIBRARY}); endif(). if(BUILD_MIXED); if(CMAKE_COMPILER_IS_GNUCXX); if(CMAKE_SYSTEM_NAME MATCHES Linux). #; # Relocatable binaries on linux using -static-libgcc. (GCC only); #; set(CMAKE_CXX_FLAGS ""-static-libgcc ${CMAKE_CXX_FLAGS}""); # make sure the linker will find the static libstdc++; file(REMOVE ""${CMAKE_BINARY_DIR}/libstdc++.a""); execute_process(COMMAND ""g++"" ""-print-file-name=l",MatchSource.DOCS,tools/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/tools/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/CMakeLists.txt:194,Deployability,install,install,194,set(examples; obconformersearch_default; obconversion_readstring; ). foreach(example ${examples}); add_executable(${example} ${example}.cpp); target_link_libraries(${example} ${BABEL_LIBRARY}); install(TARGETS ${example}; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib; ); endforeach(example); ,MatchSource.DOCS,doc/examples/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt:156,Deployability,install,installed,156,"#; # This script can be used to create static executables linking to the static; # OpenBabel3 library.; #; # This script requires OpenBabel to be build and installed. For example:; #; # cd openbabel; # mkdir build; # cd build; # cmake -DBUILD_SHARED=OFF -DCMAKE_INSTALL_PREFIX=/home/me/some/path ..; # make; # make install; #; # To compile your static executable:; #; # cd myproject; # mkdir build; # cd build; # cmake -DOpenBabel3_DIR=/home/me/some/path/lib/openbabel ..; # make; #; # All plugins are inside the static libopenbabel.a but the symbols for the; # plugin classes have to be undefined. Plugins can be disabled by removing; # the class names from the format_classes, descriptor_classes, ... lists below.; #. # This line is required for cmake backwards compatibility.; cmake_minimum_required(VERSION 2.6). # Name of your project; project(myproject); # Create a list of source files (easier to maintain); set(sources myexe.cpp); # Set the name for the executable; set(executable_target myexe). ################################################################################. #; # Set compile flags for various compilers.; #; if(MSVC); # Set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE ""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # Note: static libraries are specified when running cmake; else(); # Use -static flag to create static executable; set(CMAKE_CXX_FLAGS ""-static ${CMAKE_CXX_FLAGS}""); # Make sure we find static libraries; set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(). # Set the path containing OpenBabel3Config.cmake, needed for find_package below.; find_path(OpenBabel3_DIR OpenBabel3Config.cmake PATHS; ${OpenBabel3_DIR}; ""/usr/lib/openbabel""; ""/usr/local/lib/openbabel""). #; # Find and setup OpenBabel3.; #; find_package(OpenBabel3 REQUIRED); include_directories(${OpenBabel3_INCLUDE_DIRS}).",MatchSource.DOCS,doc/examples/static_executable/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt:315,Deployability,install,install,315,"#; # This script can be used to create static executables linking to the static; # OpenBabel3 library.; #; # This script requires OpenBabel to be build and installed. For example:; #; # cd openbabel; # mkdir build; # cd build; # cmake -DBUILD_SHARED=OFF -DCMAKE_INSTALL_PREFIX=/home/me/some/path ..; # make; # make install; #; # To compile your static executable:; #; # cd myproject; # mkdir build; # cd build; # cmake -DOpenBabel3_DIR=/home/me/some/path/lib/openbabel ..; # make; #; # All plugins are inside the static libopenbabel.a but the symbols for the; # plugin classes have to be undefined. Plugins can be disabled by removing; # the class names from the format_classes, descriptor_classes, ... lists below.; #. # This line is required for cmake backwards compatibility.; cmake_minimum_required(VERSION 2.6). # Name of your project; project(myproject); # Create a list of source files (easier to maintain); set(sources myexe.cpp); # Set the name for the executable; set(executable_target myexe). ################################################################################. #; # Set compile flags for various compilers.; #; if(MSVC); # Set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE ""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # Note: static libraries are specified when running cmake; else(); # Use -static flag to create static executable; set(CMAKE_CXX_FLAGS ""-static ${CMAKE_CXX_FLAGS}""); # Make sure we find static libraries; set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(). # Set the path containing OpenBabel3Config.cmake, needed for find_package below.; find_path(OpenBabel3_DIR OpenBabel3Config.cmake PATHS; ${OpenBabel3_DIR}; ""/usr/lib/openbabel""; ""/usr/local/lib/openbabel""). #; # Find and setup OpenBabel3.; #; find_package(OpenBabel3 REQUIRED); include_directories(${OpenBabel3_INCLUDE_DIRS}).",MatchSource.DOCS,doc/examples/static_executable/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt:2382,Deployability,install,install,2382,"home/me/some/path/lib/openbabel ..; # make; #; # All plugins are inside the static libopenbabel.a but the symbols for the; # plugin classes have to be undefined. Plugins can be disabled by removing; # the class names from the format_classes, descriptor_classes, ... lists below.; #. # This line is required for cmake backwards compatibility.; cmake_minimum_required(VERSION 2.6). # Name of your project; project(myproject); # Create a list of source files (easier to maintain); set(sources myexe.cpp); # Set the name for the executable; set(executable_target myexe). ################################################################################. #; # Set compile flags for various compilers.; #; if(MSVC); # Set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE ""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # Note: static libraries are specified when running cmake; else(); # Use -static flag to create static executable; set(CMAKE_CXX_FLAGS ""-static ${CMAKE_CXX_FLAGS}""); # Make sure we find static libraries; set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(). # Set the path containing OpenBabel3Config.cmake, needed for find_package below.; find_path(OpenBabel3_DIR OpenBabel3Config.cmake PATHS; ${OpenBabel3_DIR}; ""/usr/lib/openbabel""; ""/usr/local/lib/openbabel""). #; # Find and setup OpenBabel3.; #; find_package(OpenBabel3 REQUIRED); include_directories(${OpenBabel3_INCLUDE_DIRS}). # Dependencies; find_package(LibXml2). # The executable; add_executable(${executable_target} ${sources}); # Link against imported openbabel target; target_link_libraries(${executable_target} openbabel ${LIBXML2_LIBRARIES}); # Prevent -Wl,-Bdynamic from being added to the end of the link line.; set_target_properties(${executable_target} PROPERTIES; LINK_SEARCH_END_STATIC TRUE); install(TARGETS ${executable_target} DESTINATION bin); ",MatchSource.DOCS,doc/examples/static_executable/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt:490,Modifiability,plugin,plugins,490,"#; # This script can be used to create static executables linking to the static; # OpenBabel3 library.; #; # This script requires OpenBabel to be build and installed. For example:; #; # cd openbabel; # mkdir build; # cd build; # cmake -DBUILD_SHARED=OFF -DCMAKE_INSTALL_PREFIX=/home/me/some/path ..; # make; # make install; #; # To compile your static executable:; #; # cd myproject; # mkdir build; # cd build; # cmake -DOpenBabel3_DIR=/home/me/some/path/lib/openbabel ..; # make; #; # All plugins are inside the static libopenbabel.a but the symbols for the; # plugin classes have to be undefined. Plugins can be disabled by removing; # the class names from the format_classes, descriptor_classes, ... lists below.; #. # This line is required for cmake backwards compatibility.; cmake_minimum_required(VERSION 2.6). # Name of your project; project(myproject); # Create a list of source files (easier to maintain); set(sources myexe.cpp); # Set the name for the executable; set(executable_target myexe). ################################################################################. #; # Set compile flags for various compilers.; #; if(MSVC); # Set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE ""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # Note: static libraries are specified when running cmake; else(); # Use -static flag to create static executable; set(CMAKE_CXX_FLAGS ""-static ${CMAKE_CXX_FLAGS}""); # Make sure we find static libraries; set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(). # Set the path containing OpenBabel3Config.cmake, needed for find_package below.; find_path(OpenBabel3_DIR OpenBabel3Config.cmake PATHS; ${OpenBabel3_DIR}; ""/usr/lib/openbabel""; ""/usr/local/lib/openbabel""). #; # Find and setup OpenBabel3.; #; find_package(OpenBabel3 REQUIRED); include_directories(${OpenBabel3_INCLUDE_DIRS}).",MatchSource.DOCS,doc/examples/static_executable/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt:562,Modifiability,plugin,plugin,562,"#; # This script can be used to create static executables linking to the static; # OpenBabel3 library.; #; # This script requires OpenBabel to be build and installed. For example:; #; # cd openbabel; # mkdir build; # cd build; # cmake -DBUILD_SHARED=OFF -DCMAKE_INSTALL_PREFIX=/home/me/some/path ..; # make; # make install; #; # To compile your static executable:; #; # cd myproject; # mkdir build; # cd build; # cmake -DOpenBabel3_DIR=/home/me/some/path/lib/openbabel ..; # make; #; # All plugins are inside the static libopenbabel.a but the symbols for the; # plugin classes have to be undefined. Plugins can be disabled by removing; # the class names from the format_classes, descriptor_classes, ... lists below.; #. # This line is required for cmake backwards compatibility.; cmake_minimum_required(VERSION 2.6). # Name of your project; project(myproject); # Create a list of source files (easier to maintain); set(sources myexe.cpp); # Set the name for the executable; set(executable_target myexe). ################################################################################. #; # Set compile flags for various compilers.; #; if(MSVC); # Set cl flags for static compiling; set(CMAKE_CXX_FLAGS_DEBUG ""/MTd""); set(CMAKE_EXE_LINKER_FLAGS_DEBUG ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); set(CMAKE_CXX_FLAGS_RELEASE ""/MT /O2 /Ob2 /D NDEBUG""); set(CMAKE_EXE_LINKER_FLAGS_RELEASE ""/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT""); # Note: static libraries are specified when running cmake; else(); # Use -static flag to create static executable; set(CMAKE_CXX_FLAGS ""-static ${CMAKE_CXX_FLAGS}""); # Make sure we find static libraries; set(CMAKE_FIND_LIBRARY_SUFFIXES "".a""); endif(). # Set the path containing OpenBabel3Config.cmake, needed for find_package below.; find_path(OpenBabel3_DIR OpenBabel3Config.cmake PATHS; ${OpenBabel3_DIR}; ""/usr/lib/openbabel""; ""/usr/local/lib/openbabel""). #; # Find and setup OpenBabel3.; #; find_package(OpenBabel3 REQUIRED); include_directories(${OpenBabel3_INCLUDE_DIRS}).",MatchSource.DOCS,doc/examples/static_executable/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/examples/static_executable/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt:702,Deployability,install,install,702,"include(formats.cmake). if(NOT WIN32); set(libs ${libs} m); endif(NOT WIN32). if(WIN32); set(openbabel_srcs ${openbabel_srcs}; dlhandler_win32; ); else(WIN32); set(openbabel_srcs ${openbabel_srcs}; dlhandler_unix; ); endif(WIN32). if(MSVC); foreach(formatgroup formats_common formats_utility formats_compchem formats_misc ${optional_formatgroups}); set(formatsources """"); foreach(format ${${formatgroup}}); set(formatsources ${formatsources} ${format}.cpp ${${format}_additional_sources}); endforeach(format); add_library(${formatgroup} ${PLUGIN_TYPE} ${formatsources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(${formatgroup} ${libs} ${XDR_LIBRARY} openbabel); install(TARGETS ${formatgroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${formatgroup} PROPERTIES; OUTPUT_NAME ${formatgroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(formatgroup); else(MSVC); foreach(format ${formats}); add_library(${format} ${PLUGIN_TYPE} ${format}.cpp; ${${format}_additional_sources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(${format} ${libs} openbabel); install(TARGETS ${format}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${format} PROPERTIES; OUTPUT_NAME ${format}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(format); endif(MSVC). if(NOT MINIMAL_BUILD); if(MSVC); set(xmlsources """"); foreach(format ${formats_xml}); set(xmlsources ${xmlsources} xml/${format}.cpp); endforeach(format); add_library(formats_xml ${PLUGIN_TYPE} ${xmlsources} xml/xml.cpp); target_link_libraries(formats_xml ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS formats_xml; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}",MatchSource.DOCS,src/formats/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt:1246,Deployability,install,install,1246,"""""); foreach(format ${${formatgroup}}); set(formatsources ${formatsources} ${format}.cpp ${${format}_additional_sources}); endforeach(format); add_library(${formatgroup} ${PLUGIN_TYPE} ${formatsources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(${formatgroup} ${libs} ${XDR_LIBRARY} openbabel); install(TARGETS ${formatgroup}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${formatgroup} PROPERTIES; OUTPUT_NAME ${formatgroup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(formatgroup); else(MSVC); foreach(format ${formats}); add_library(${format} ${PLUGIN_TYPE} ${format}.cpp; ${${format}_additional_sources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(${format} ${libs} openbabel); install(TARGETS ${format}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${format} PROPERTIES; OUTPUT_NAME ${format}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(format); endif(MSVC). if(NOT MINIMAL_BUILD); if(MSVC); set(xmlsources """"); foreach(format ${formats_xml}); set(xmlsources ${xmlsources} xml/${format}.cpp); endforeach(format); add_library(formats_xml ${PLUGIN_TYPE} ${xmlsources} xml/xml.cpp); target_link_libraries(formats_xml ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS formats_xml; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(formats_xml PROPERTIES; OUTPUT_NAME formats_xml; PREFIX """"; SUFFIX ${MODULE_EXTENSION}). if(WITH_JSON); set(jsonsources """"); foreach(format ${formats_json}); set(jsonsources ${jsonsources} json/${format}.cpp); endforeach(format); add_library(formats_json ${PLUGIN_TYPE} ${jsonsources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.",MatchSource.DOCS,src/formats/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt:1842,Deployability,install,install,1842,"roup}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(formatgroup); else(MSVC); foreach(format ${formats}); add_library(${format} ${PLUGIN_TYPE} ${format}.cpp; ${${format}_additional_sources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(${format} ${libs} openbabel); install(TARGETS ${format}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${format} PROPERTIES; OUTPUT_NAME ${format}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(format); endif(MSVC). if(NOT MINIMAL_BUILD); if(MSVC); set(xmlsources """"); foreach(format ${formats_xml}); set(xmlsources ${xmlsources} xml/${format}.cpp); endforeach(format); add_library(formats_xml ${PLUGIN_TYPE} ${xmlsources} xml/xml.cpp); target_link_libraries(formats_xml ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS formats_xml; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(formats_xml PROPERTIES; OUTPUT_NAME formats_xml; PREFIX """"; SUFFIX ${MODULE_EXTENSION}). if(WITH_JSON); set(jsonsources """"); foreach(format ${formats_json}); set(jsonsources ${jsonsources} json/${format}.cpp); endforeach(format); add_library(formats_json ${PLUGIN_TYPE} ${jsonsources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(formats_json ${libs} ${JSON_LIBRARY} openbabel); install(TARGETS formats_json; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(formats_json PROPERTIES; OUTPUT_NAME formats_json; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endif(). else(MSVC); foreach(format ${formats_xml}); add_library(${format} ${PLUGIN_TYPE} xml/${format}.cpp xml/xml.cpp); target_link_libraries(${format} ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS ${format",MatchSource.DOCS,src/formats/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt:2443,Deployability,install,install,2443,"f(NOT MINIMAL_BUILD); if(MSVC); set(xmlsources """"); foreach(format ${formats_xml}); set(xmlsources ${xmlsources} xml/${format}.cpp); endforeach(format); add_library(formats_xml ${PLUGIN_TYPE} ${xmlsources} xml/xml.cpp); target_link_libraries(formats_xml ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS formats_xml; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(formats_xml PROPERTIES; OUTPUT_NAME formats_xml; PREFIX """"; SUFFIX ${MODULE_EXTENSION}). if(WITH_JSON); set(jsonsources """"); foreach(format ${formats_json}); set(jsonsources ${jsonsources} json/${format}.cpp); endforeach(format); add_library(formats_json ${PLUGIN_TYPE} ${jsonsources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(formats_json ${libs} ${JSON_LIBRARY} openbabel); install(TARGETS formats_json; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(formats_json PROPERTIES; OUTPUT_NAME formats_json; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endif(). else(MSVC); foreach(format ${formats_xml}); add_library(${format} ${PLUGIN_TYPE} xml/${format}.cpp xml/xml.cpp); target_link_libraries(${format} ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS ${format}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${format} PROPERTIES; OUTPUT_NAME ${format}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(format). if(WITH_JSON); foreach(format ${formats_json}); add_library(${format} ${PLUGIN_TYPE} json/${format}.cpp; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(${format} ${libs} openbabel); install(TARGETS ${format}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINAT",MatchSource.DOCS,src/formats/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt:2914,Deployability,install,install,2914,"xml/xml.cpp); target_link_libraries(formats_xml ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS formats_xml; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(formats_xml PROPERTIES; OUTPUT_NAME formats_xml; PREFIX """"; SUFFIX ${MODULE_EXTENSION}). if(WITH_JSON); set(jsonsources """"); foreach(format ${formats_json}); set(jsonsources ${jsonsources} json/${format}.cpp); endforeach(format); add_library(formats_json ${PLUGIN_TYPE} ${jsonsources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(formats_json ${libs} ${JSON_LIBRARY} openbabel); install(TARGETS formats_json; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(formats_json PROPERTIES; OUTPUT_NAME formats_json; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endif(). else(MSVC); foreach(format ${formats_xml}); add_library(${format} ${PLUGIN_TYPE} xml/${format}.cpp xml/xml.cpp); target_link_libraries(${format} ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS ${format}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${format} PROPERTIES; OUTPUT_NAME ${format}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(format). if(WITH_JSON); foreach(format ${formats_json}); add_library(${format} ${PLUGIN_TYPE} json/${format}.cpp; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(${format} ${libs} openbabel); install(TARGETS ${format}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${format} PROPERTIES; OUTPUT_NAME ${format}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(format); endif(); endif(MSVC); endif(NOT MINIMAL_BUILD); ",MatchSource.DOCS,src/formats/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt:3418,Deployability,install,install,3418,"xml/xml.cpp); target_link_libraries(formats_xml ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS formats_xml; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(formats_xml PROPERTIES; OUTPUT_NAME formats_xml; PREFIX """"; SUFFIX ${MODULE_EXTENSION}). if(WITH_JSON); set(jsonsources """"); foreach(format ${formats_json}); set(jsonsources ${jsonsources} json/${format}.cpp); endforeach(format); add_library(formats_json ${PLUGIN_TYPE} ${jsonsources}; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(formats_json ${libs} ${JSON_LIBRARY} openbabel); install(TARGETS formats_json; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(formats_json PROPERTIES; OUTPUT_NAME formats_json; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endif(). else(MSVC); foreach(format ${formats_xml}); add_library(${format} ${PLUGIN_TYPE} xml/${format}.cpp xml/xml.cpp); target_link_libraries(${format} ${libs} ${LIBXML2_LIBRARIES} openbabel); install(TARGETS ${format}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${format} PROPERTIES; OUTPUT_NAME ${format}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(format). if(WITH_JSON); foreach(format ${formats_json}); add_library(${format} ${PLUGIN_TYPE} json/${format}.cpp; ""${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h""); target_link_libraries(${format} ${libs} openbabel); install(TARGETS ${format}; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}; ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR}); set_target_properties(${format} PROPERTIES; OUTPUT_NAME ${format}; PREFIX """"; SUFFIX ${MODULE_EXTENSION}); endforeach(format); endif(); endif(MSVC); endif(NOT MINIMAL_BUILD); ",MatchSource.DOCS,src/formats/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/GUI/CMakeLists.txt:279,Deployability,install,install,279,set(SRCS; OBGUI.cpp stdwx.cpp optswx.cpp OBGUI.rc); include_directories(.); add_executable(obgui WIN32 ${SRCS} ${HDRS}); if(WIN32); set(wxWidgets_LIBRARIES ${wxWidgets_LIBRARIES} comctl32.lib); endif(WIN32) ; target_link_libraries(obgui ${BABEL_LIBRARY} ${wxWidgets_LIBRARIES}); install(TARGETS obgui ; 	 RUNTIME DESTINATION bin; 	 LIBRARY DESTINATION lib; 	 ARCHIVE DESTINATION lib; ); ,MatchSource.DOCS,src/GUI/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/GUI/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/libinchi/CMakeLists.txt:609,Deployability,install,install,609,"project(inchi); set(INCHI_MAJ_VER 0); set(INCHI_MIN_VER 4); set(INCHI_PATCH_VER 1). file(GLOB inchi_srcs ""*.c""). # inchi code has lots of warnings, so let's ignore them; add_compile_options(-w). if(NOT WIN32); set(libs ${libs} c m); endif(NOT WIN32). include_directories(${openbabel_SOURCE_DIR}/include/inchi); add_library(inchi ${BUILD_TYPE} ${inchi_srcs}); target_link_libraries(inchi ${libs}); set_target_properties(inchi PROPERTIES; VERSION ${INCHI_MAJ_VER}.${INCHI_MIN_VER}.${INCHI_PATCH_VER}; SOVERSION ${INCHI_MAJ_VER}; DEFINE_SYMBOL _USRDLL; ); export(TARGETS inchi APPEND FILE ""${OB_EXPORTS_FILE}""). install(TARGETS inchi; EXPORT openbabel-targets; RUNTIME DESTINATION ${BIN_INSTALL_DIR}; LIBRARY DESTINATION ${LIB_INSTALL_DIR}; ARCHIVE DESTINATION ${LIB_INSTALL_DIR}; ); ",MatchSource.DOCS,src/formats/libinchi/CMakeLists.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/src/formats/libinchi/CMakeLists.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/README-UNIX.txt:47,Testability,test,tests,47,Adapted from Peter MR's 2003-08-06 DOS/Windows tests; by Geoff Hutchison 2003-11-07. Run test.sh to drive the whole test suite.; Uses the roundtrip program in the program above to ensure the files; are identical. (For some definition of identical.). tests for various CML input and output options:; 1: CML1; 2: CML2; a: use array format. ,MatchSource.DOCS,test/cmltest/README-UNIX.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/README-UNIX.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/README-UNIX.txt:89,Testability,test,test,89,Adapted from Peter MR's 2003-08-06 DOS/Windows tests; by Geoff Hutchison 2003-11-07. Run test.sh to drive the whole test suite.; Uses the roundtrip program in the program above to ensure the files; are identical. (For some definition of identical.). tests for various CML input and output options:; 1: CML1; 2: CML2; a: use array format. ,MatchSource.DOCS,test/cmltest/README-UNIX.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/README-UNIX.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/README-UNIX.txt:116,Testability,test,test,116,Adapted from Peter MR's 2003-08-06 DOS/Windows tests; by Geoff Hutchison 2003-11-07. Run test.sh to drive the whole test suite.; Uses the roundtrip program in the program above to ensure the files; are identical. (For some definition of identical.). tests for various CML input and output options:; 1: CML1; 2: CML2; a: use array format. ,MatchSource.DOCS,test/cmltest/README-UNIX.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/README-UNIX.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/README-UNIX.txt:250,Testability,test,tests,250,Adapted from Peter MR's 2003-08-06 DOS/Windows tests; by Geoff Hutchison 2003-11-07. Run test.sh to drive the whole test suite.; Uses the roundtrip program in the program above to ensure the files; are identical. (For some definition of identical.). tests for various CML input and output options:; 1: CML1; 2: CML2; a: use array format. ,MatchSource.DOCS,test/cmltest/README-UNIX.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/README-UNIX.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/readme.txt:0,Testability,test,tests,0,"tests for various CML input and output options:; 1: CML1; 2: CML2; a: use array format. run test.bat to run all tests. Peter MR, 2003-08-06. ",MatchSource.DOCS,test/cmltest/readme.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/readme.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/readme.txt:92,Testability,test,test,92,"tests for various CML input and output options:; 1: CML1; 2: CML2; a: use array format. run test.bat to run all tests. Peter MR, 2003-08-06. ",MatchSource.DOCS,test/cmltest/readme.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/readme.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/readme.txt:112,Testability,test,tests,112,"tests for various CML input and output options:; 1: CML1; 2: CML2; a: use array format. run test.bat to run all tests. Peter MR, 2003-08-06. ",MatchSource.DOCS,test/cmltest/readme.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/cmltest/readme.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/Samples.sdf.txt:375,Testability,test,test,375,"* Input_File: Samples.sdf""; This file is produced using the NIST program wInChI-1.exe and edited:; The structures which are not convertable using OpenBabel v2.1 are moved; to the end and the InChIs invalidated with a lowercase initial 'i'. ; An empty InChI is put in their place, which causes the molecule not to be compared. ; The input structures file is unchanged.; .; To test InChI use:; inchiwrite Samples.sdf Samples.txt; ; Structure: 1; InChI=1S/4C5H5.2Fe/c4*1-2-4-5-3-1;;/h4*1-5H;;/q;;2*-1;;+2; AuxInfo=1/0/N:12,14,15,17,16;18,19,22,20,21;1,3,4,6,5;7,8,11,9,10;13;2/E:4*(1,2,3,4,5);;/CRV:2*1.3,2.3,3.3,4.3,5.3;3-1;2-1;;/rA:22nC5Fe+2C5C4-C5C5C5C4-C5C5C5CFeCCCCCCCCC/rB:s1;d1s2;s1s2;s2s4;s2s3d5;s2;s2s7;s2s8;s2d9;s2d7s10;;s12;s12s13;s12s13;s13s15;s13s14s16;s13;s13s18;s13s19;s13s20;s13s18s21;/rC:8.4529,-17.2639,0;9.5359,-11.9699,0;7.8254,-15.2493,0;10.4796,-17.256,0;11.2545,-15.2364,0;9.5392,-13.9965,0;11.3819,-8.5463,0;10.7543,-6.5318,0;8.5739,-6.5392,0;7.9574,-8.5592,0;9.6776,-9.7992,0;16.6151,-17.0901,0;17.6981,-11.796,0;15.9876,-15.0756,0;18.6419,-17.0822,0;19.4168,-15.0627,0;17.7014,-13.8227,0;19.5441,-8.3725,0;18.9165,-6.358,0;16.7361,-6.3655,0;16.1196,-8.3855,0;17.8398,-9.6254,0;; Structure: 2; InChI=1S/2C5H9NO4.2Na/c2*6-3(5(9)10)1-2-4(7)8;;/h2*3H,1-2,6H2,(H,7,8)(H,9,10);;/q;;2*+1/p-2; AuxInfo=1/1/N:6,4,7,1,2,10,3,9,5,8;17,15,18,12,13,21,14,20,16,19;11;22/E:2*(7,8)(9,10);;/rA:22nCCOCOCCOO-NNa+CCOCOCCO-ONNa+/rB:;d1;s1;d2;s4;s2s6;s2;s1;s7;;;;d12;s12;d13;s15;s13s17;s13;s12;s18;;/rC:11.6222,-9.0456,0;16.135,-9.0456,0;11.6222,-7.7446,0;12.7551,-9.6937,0;16.1351,-7.7446,0;13.8833,-9.0456,0;15.0115,-9.8646,0;17.2679,-9.6937,0;10.1294,-10.06,0;15.0114,-11.1654,0;6.6791,-8.7803,0;11.2606,-17.8137,0;15.7687,-17.8137,0;11.2606,-16.5127,0;12.3935,-18.4664,0;15.7688,-16.5127,0;13.5217,-17.8137,0;14.6451,-18.6374,0;16.9016,-18.4665,0;9.8852,-18.7106,0;14.6451,-19.9382,0;6.1719,-17.2712,0;; Structure: 3; InChI=1S/C18H30/c1-16(2,3)13-10-14(17(4,5)6)12-15(11-13)18(7,8)9/h10-12H,1-9",MatchSource.DOCS,test/inchi/Samples.sdf.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/Samples.sdf.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/SamplesFail.txt:191,Availability,failure,failures,191,"* Input_File: Samples.sdf; This file is produced using the NIST program wInChI-1.exe and edited.; All the structures with non-empty InChIs fail with OpenBabel v2.2.99. . To demonstrate InChI failures use:; inchiwrite Samples.sdf SamplesFail.txt; ; Structure: 1; InChI=; Structure: 2; InChI=; Structure: 3; InChI=; Structure: 4; InChI=; Structure: 5; InChI=; Structure: 6; InChI=; Structure: 7; InChI=; Structure: 8; InChI=; Structure: 9; InChI=. Structure: 10; CH2DT This structure contains CHDT and CH2T. The fourth H is supposed to be; implicit. OpenBabel does not add implicit hydrogen if there is explicit hydrogen ; already present on the same atom. The structure does not represent good practice.; InChI=1S/2CH4/h2*1H4/i2*1TD; AuxInfo=1/0/N:1;5/rA:8nCH.i2HH.i3CH.i2HH.i3/rB:s1;s1;s1;;s5;s5;s5;/rC:4.2375,-1.625,0;5.1577,-1.0937,0;3.3173,-1.0938,0;4.2375,-2.6875,0;7.4833,-1.4375,0;8.4035,-.9062,0;6.5632,-.9063,0;7.4833,-2.5,0;. Structure: 11; cumulenes Not currently supported by OpenBabel; inChI=1S/2C6H8.2C5H8.2C4H8/c2*1-3-5-6-4-2;2*1-3-5-4-2;2*1-3-4-2/h2*3-4H,1-2H3;2*3-4H,1-2H3;2*3-4H,1-2H3/b4-3-;;;;4-3-;/t;;5-;;;/m..1.../s1; AuxInfo=1/0/N:10,11,6,9,7,8;21,22,17,20,18,19;15,16,12,14,13;4,5,1,3,2;25,26,24,23;29,30,28,27/E:2*(1,2)(3,4)(5,6);2*(1,2)(3,4);2*(1,2)(3,4)/it:;;im;;;/rA:30nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC/rB:d1;d2;s1;s3;;d6;d7;d8;s6;s9;;d12;d13;P12;P14;;d17;d18;d19;P17;N20;;d23;N24;N23;;d27;P28;N27;/rC:-.8212,-1.0385,0;.4993,-1.0377,0;1.6963,-1.0752,0;-1.4822,.1047,0;2.2623,-2.1306,0;5.5792,.0917,0;6.6417,.0917,0;7.7042,.0917,0;8.7667,.0917,0;5.0479,-.8285,0;9.2979,-.8285,0;-.5403,-4.2367,0;.7793,-4.1878,0;1.9769,-4.1817,0;-1.2425,-3.1182,0;2.5809,-5.2158,0;5.55,-2.6875,0;6.6125,-2.6875,0;7.675,-2.6875,0;8.7375,-2.6875,0;5.0187,-3.6077,0;9.2688,-3.6077,0;-1.725,2.125,0;-.6625,2.125,0;-.1312,3.0452,0;-2.2563,3.0452,0;2.8917,2.0292,0;3.9542,2.0292,0;4.4854,2.9493,0;2.3604,2.9493,0;. Structure: 12; cuneane Not currently supported by OpenBabel; InChI=1S/C8H8/c1-2-5(1)6-3",MatchSource.DOCS,test/inchi/SamplesFail.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/SamplesFail.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/SamplesTechMan.sdf.txt:524,Availability,failure,failures,524,"* Input_File: SamplesTechMan.sdf""; This file is produced using the NIST program wInChI-1.exe and edited:; The structures which are not convertable using OpenBabel v2.1 are moved; to the end and the InChIs invalidated with a lowercase initial 'i'. ; An empty InChI is put in their place, which causes the molecule not to be compared. ; The input structures file is unchanged.; .; To test InChI use:; inchiwrite SamplesTechMan.sdf SamplesTechMan.txt; There will be several warnings from the InChI code, but there should be no failures.; (The problematic molecules have been isolated.); ; Structure: 1; InChI=1S/2C4H6/c2*1-3-4-2/h2*3-4H,1-2H2; AuxInfo=1/0/N:1,4,2,3;5,8,6,7/E:2*(1,2)(3,4)/rA:8nCCCCC.2CCC.2/rB:d1;s2;d3;;s5;d6;s7;/rC:5.6324,-8.3849,0;6.9624,-8.3849,0;7.5662,-9.4686,0;9.2343,-9.4686,0;5.452,-11.1351,0;6.782,-11.1351,0;7.3858,-12.2188,0;9.054,-12.2188,0;; Structure: 2; InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H; AuxInfo=1/0/N:1,2,3,4,5,6/E:(1,2,3,4,5,6)/rA:6nCCCCCC/rB:s1;d1;d2;s3;s4d5;/rC:5.6378,-4.0013,0;5.6378,-5.3313,0;4.4859,-3.3363,0;4.4859,-5.9963,0;3.3341,-4.0013,0;3.3341,-5.3313,0;; Structure: 3; InChI=1S/C6H4O2/c7-5-1-2-6(8)4-3-5/h1-4H; AuxInfo=1/0/N:2,4,3,5,1,6,7,8/E:(1,2,3,4)(5,6)(7,8)/rA:8nCCCCCCOO/rB:s1;s1;d2;d3;s4s5;d1;d6;/rC:8.1557,-4.8523,0;7.4908,-6.0041,0;7.4908,-3.7005,0;6.1608,-6.0041,0;6.1608,-3.7005,0;5.4958,-4.8523,0;9.4857,-4.8523,0;4.1658,-4.8523,0;; Structure: 4; InChI=1S/2C10H6S2/c2*1-7-3-11-5-9(7)2-10-6-12-4-8(1)10/h2*1-6H; AuxInfo=1/0/N:2,5,9,11,7,10,4,1,6,3,8,12;14,17,21,23,19,22,16,13,18,15,20,24/E:2*(1,2)(3,4,5,6)(7,8,9,10)(11,12)/CRV:2*11.4/rA:24nCCCCCCCSCCCSCCCCCCC-S+CCCS/rB:s1;s1;d2;s3;s4d5;s6;d7;s4d8;d3;d1;s10s11;;s13;s13;d14;s15;s16d17;s18;s19;s16d20;d15;d13;s22s23;/rC:8.2376,-5.553,0;6.9261,-6.3102,0;8.2376,-4.0387,0;5.6147,-5.553,0;6.9261,-3.2816,0;5.6147,-4.0387,0;4.1746,-3.5708,0;3.2845,-4.7959,0;4.1746,-6.021,0;9.6777,-3.5708,0;9.6777,-6.021,0;10.5678,-4.7959,0;8.3165,-9.9826,0;7.005,-10.7398,0;8.3165,-8.4683,0;5.6936,-9.9826,0;7.00",MatchSource.DOCS,test/inchi/SamplesTechMan.sdf.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/SamplesTechMan.sdf.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/SamplesTechMan.sdf.txt:382,Testability,test,test,382,"* Input_File: SamplesTechMan.sdf""; This file is produced using the NIST program wInChI-1.exe and edited:; The structures which are not convertable using OpenBabel v2.1 are moved; to the end and the InChIs invalidated with a lowercase initial 'i'. ; An empty InChI is put in their place, which causes the molecule not to be compared. ; The input structures file is unchanged.; .; To test InChI use:; inchiwrite SamplesTechMan.sdf SamplesTechMan.txt; There will be several warnings from the InChI code, but there should be no failures.; (The problematic molecules have been isolated.); ; Structure: 1; InChI=1S/2C4H6/c2*1-3-4-2/h2*3-4H,1-2H2; AuxInfo=1/0/N:1,4,2,3;5,8,6,7/E:2*(1,2)(3,4)/rA:8nCCCCC.2CCC.2/rB:d1;s2;d3;;s5;d6;s7;/rC:5.6324,-8.3849,0;6.9624,-8.3849,0;7.5662,-9.4686,0;9.2343,-9.4686,0;5.452,-11.1351,0;6.782,-11.1351,0;7.3858,-12.2188,0;9.054,-12.2188,0;; Structure: 2; InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H; AuxInfo=1/0/N:1,2,3,4,5,6/E:(1,2,3,4,5,6)/rA:6nCCCCCC/rB:s1;d1;d2;s3;s4d5;/rC:5.6378,-4.0013,0;5.6378,-5.3313,0;4.4859,-3.3363,0;4.4859,-5.9963,0;3.3341,-4.0013,0;3.3341,-5.3313,0;; Structure: 3; InChI=1S/C6H4O2/c7-5-1-2-6(8)4-3-5/h1-4H; AuxInfo=1/0/N:2,4,3,5,1,6,7,8/E:(1,2,3,4)(5,6)(7,8)/rA:8nCCCCCCOO/rB:s1;s1;d2;d3;s4s5;d1;d6;/rC:8.1557,-4.8523,0;7.4908,-6.0041,0;7.4908,-3.7005,0;6.1608,-6.0041,0;6.1608,-3.7005,0;5.4958,-4.8523,0;9.4857,-4.8523,0;4.1658,-4.8523,0;; Structure: 4; InChI=1S/2C10H6S2/c2*1-7-3-11-5-9(7)2-10-6-12-4-8(1)10/h2*1-6H; AuxInfo=1/0/N:2,5,9,11,7,10,4,1,6,3,8,12;14,17,21,23,19,22,16,13,18,15,20,24/E:2*(1,2)(3,4,5,6)(7,8,9,10)(11,12)/CRV:2*11.4/rA:24nCCCCCCCSCCCSCCCCCCC-S+CCCS/rB:s1;s1;d2;s3;s4d5;s6;d7;s4d8;d3;d1;s10s11;;s13;s13;d14;s15;s16d17;s18;s19;s16d20;d15;d13;s22s23;/rC:8.2376,-5.553,0;6.9261,-6.3102,0;8.2376,-4.0387,0;5.6147,-5.553,0;6.9261,-3.2816,0;5.6147,-4.0387,0;4.1746,-3.5708,0;3.2845,-4.7959,0;4.1746,-6.021,0;9.6777,-3.5708,0;9.6777,-6.021,0;10.5678,-4.7959,0;8.3165,-9.9826,0;7.005,-10.7398,0;8.3165,-8.4683,0;5.6936,-9.9826,0;7.00",MatchSource.DOCS,test/inchi/SamplesTechMan.sdf.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/SamplesTechMan.sdf.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/SamplesTechManFail.txt:199,Availability,failure,failures,199,"* Input_File: SamplesTechMan.sdf""; This file is produced using the NIST program wInChI-1.exe and edited.; All the structures with non-empty InChIs fail with OpenBabel v2.2.99. . To demonstrate InChI failures use:; inchiwrite SamplesTechMan.sdf SamplesTechManFail.txt; ; ; Structure: 1; InChI=; Structure: 2; InChI=; Structure: 3; InChI=; Structure: 4; InChI=; Structure: 5; InChI=; Structure: 6; InChI=; Structure: 7; InChI=; Structure: 8; InChI=; Structure: 9; InChI=; Structure: 10; InChI=; Structure: 11; InChI=; Structure: 12; InChI=; Structure: 13; InChI=; Structure: 14; InChI=; Structure: 15; InChI=; Structure: 16; InChI=; Structure: 17; InChI=; Structure: 18; InChI=; Structure: 19; InChI=; Structure: 20; InChI=; Structure: 21; InChI=; Structure: 22; InChI=; Structure: 23; InChI=; Structure: 24; InChI=; Structure: 25; InChI=. Structure: 26; Differences in /b layer; InChI=1S/2C4H8O2.2C3H8GeO2.2C3H8N2S.2C3H8O2Si/c4*1-3(5)4(2)6;2*1-4-5(2)3-6;2*1-3(4)6(2)5/h4*5-6H,1-2H3;2*3H2,1-2H3;2*4-5H,1-2H3/p+2/b4-3-;;4-3-;;5-4-;;6-3-;; AuxInfo=1/1/N:28,30,27,29,26,25;4,6,3,5,2,1;42,40,41,39,37,38;18,16,17,15,13,14;44,47,45,48,46,43;20,23,21,24,22,19;36,34,35,31,32,33;12,10,11,7,8,9/E:2*(1,2)(3,4)(5,6);;;;;;/CRV:;;;;2*5+1,6-1;;/rA:48nOOCCCCOOSiCCCOOGeCCCSCCN+CNOOCCCCOOSiCCCOOGeCCCSCCN+CN/rB:;n2;P3;p1d3;N5;;;n8;P9;p7d9;N11;;;n14;P15;p13d15;N17;;;s19;n21;P22;p20d22;;;n26;P27;n25d27;P29;;;n32;P33;n31d33;P35;;;n38;P39;n37d39;P41;;;s43;n45;P46;n44d46;/rC:6.3919,-7.5719,0;3.3239,-7.5719,0;3.9923,-8.7295,0;3.3239,-9.8872,0;5.7235,-8.7295,0;6.3919,-9.8872,0;11.9937,-7.6169,0;8.8129,-7.6169,0;9.4813,-8.7746,0;8.8129,-9.9323,0;11.3253,-8.7746,0;11.9937,-9.9323,0;17.8885,-7.3352,0;14.7641,-7.3352,0;15.4325,-8.4928,0;14.7641,-9.6505,0;17.2201,-8.4928,0;17.8885,-9.6505,0;22.0014,-6.3344,0;24.0088,-7.3464,0;20.828,-7.3464,0;21.4964,-8.5041,0;20.828,-9.6618,0;23.3404,-8.5041,0;6.3468,-11.9451,0;3.2788,-11.9451,0;3.9472,-13.1028,0;3.2788,-14.2604,0;5.6784,-13.1028,0;6.3468,-14.2604,0;11.9486,-11.990",MatchSource.DOCS,test/inchi/SamplesTechManFail.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/inchi/SamplesTechManFail.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/pdb_ligands_sdf/pdbs.txt:68828,Testability,log,log,68828,c; 2x72 ret; 2x7c kz9; 2x7d egb; 2x7e x7e; 2x7f 824; 2x7g pvb; 2x7h pfn; 2x7s wzc; 2x7t wzb; 2x7u wza; 2x7w bcn; 2x8z x8z; 2x90 eal; 2x91 lpr; 2x92 x92; 2x93 x93; 2x94 x94; 2x95 x95; 2x96 rx3; 2x97 rx4; 2x9d itc; 2x9e sve; 2x9f x9f; 2x9i bla; 2x9j bla; 2xa4 az5; 2xae 2xa; 2xal i6p; 2xam adp; 2xam i6p; 2xan 5my; 2xan anp; 2xao 5my; 2xar i6p; 2xat clm; 2xb5 i7t; 2xb7 gui; 2xb8 xnw; 2xb9 xnw; 2xba 571; 2xbj xbj; 2xbl m7p; 2xbp atp; 2xbv xbv; 2xbw 455; 2xbx rr8; 2xc3 rt8; 2xca dgt; 2xca doc; 2xcf bbq; 2xch ckg; 2xck mh4; 2xd6 xd6; 2xd9 xd9; 2xda jps; 2xe2 oes; 2xe7 adp; 2xe8 acp; 2xef ar8; 2xeg ci9; 2xei ark; 2xej okd; 2xfh cl6; 2xg4 xc2; 2xg5 ec2; 2xg5 ec5; 2xgp 8fg; 2xgq 8ag; 2xgz pep; 2xh0 pep; 2xh2 2pg; 2xh4 2pg; 2xh5 x37; 2xh7 2pg; 2xhi 8og; 2xhm k26; 2xhr c0p; 2xi3 gtp; 2xi4 aft; 2xi4 pge; 2xik j60; 2xir 00j; 2xj1 xj1; 2xj2 985; 2xj7 gc2; 2xjx xjx; 2xk3 xk3; 2xk4 ol2; 2xk6 eqh; 2xk7 30e; 2xk8 5r1; 2xk9 xk9; 2xkc 4vq; 2xkd t3m; 2xke wi2; 2xkf bx1; 2xkr pg4; 2xkw p1b; 2xm1 ltm; 2xm2 log; 2xm8 b4w; 2xm9 lwh; 2xml oga; 2xmy cdk; 2xn3 id8; 2xn5 fun; 2xne ash; 2xng a0h; 2xnm wgz; 2xnn 430; 2xno ed8; 2xnp wcx; 2xo8 ad9; 2xog sfb; 2xov bng; 2xp3 b21; 2xp4 g14; 2xp5 4ff; 2xp6 4g2; 2xp7 4f8; 2xp8 12p; 2xp8 4fy; 2xp9 4g8; 2xpa 4g5; 2xpb 4ge; 2xpc 051; 2xpk z0m; 2xpv miy; 2xpw otc; 2xq0 bes; 2xqj vx; 2xrf ura; 2xrl dxt; 2xru 400; 2xsh dc5; 2xsi 9ne; 2xsi myr; 2xtk azm; 2xtu bng; 2xtv mc3; 2xtz gsp; 2xu3 btb; 2xu3 xu3; 2xuc xrg; 2xud dme; 2xuf tz4; 2xuj tz5; 2xum oga; 2xuz eb4; 2xv1 eca; 2xvd as6; 2xvn kls; 2xvq 9ds; 2xvu 9dn; 2xvv 9dn; 2xvv myr; 2xvw 9nr; 2xvw myr; 2xw0 9nf; 2xw1 9nv; 2xwd lgs; 2xwe amf; 2xwo slm; 2xx2 13c; 2xx3 adp; 2xx3 tae; 2xx4 13i; 2xx5 13n; 2xxz 8xq; 2xy9 3es; 2xya 7l4; 2xyd 3es; 2xyj wlm; 2xyn vx6; 2xyu q9g; 2xyw 08s; 2xyx z00; 2xzg vh1; 2xzi kdm; 2xzj kfn; 2xzw atp; 2y00 y00; 2y02 whj; 2y03 5fw; 2y04 68h; 2y05 ral; 2y0j axc; 2y1d 34f; 2y1f 34f; 2y1f ndp; 2y1g fm5; 2y1o t26; 2y1w 849; 2y1w sfg; 2y1x 845; 2y1x sah; 2y2b mhi; 2y2f yi1; 2y2v me2; 2y33 un9,MatchSource.DOCS,test/pdb_ligands_sdf/pdbs.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/pdb_ligands_sdf/pdbs.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/pdb_ligands_sdf/pdbs.txt:124434,Testability,log,log,124434,p; 4alw hy7; 4alx 1pe; 4alx izn; 4am8 pao; 4ami g90; 4amj cvd; 4aml gyu; 4amv f6r; 4an2 acp; 4an2 eui; 4an3 5y0; 4an3 atp; 4an9 2p7; 4an9 acp; 4anb acp; 4anb yqy; 4anm wul; 4anp 3qi; 4anq vgh; 4ans vgh; 4anu em7; 4anv 751; 4anw o92; 4anx 534; 4aoa ik2; 4aof 7l0; 4aoi 4k0; 4aoj v4z; 4aot gw8; 4ap7 f47; 4app n53; 4apu a2k; 4aq3 398; 4aqc 88a; 4aqd bal; 4aqh tb7; 4aqk adp; 4aqk i6p; 4aql txc; 4ara c56; 4arb c57; 4ark adp; 4ark m3k; 4as7 6lx; 4as9 4qs; 4asa 59c; 4asb 8to; 4ase av9; 4asf 62u; 4asg 814; 4ask k0i; 4asx 6oj; 4at1 atp; 4at3 lti; 4at4 t6e; 4at5 muj; 4atj bho; 4att hnv; 4au8 z3r; 4aua 4au; 4auj hnw; 4aux xtc; 4av4 fvq; 4av5 fyz; 4avg sl6; 4avh fk9; 4avi xns; 4avj j73; 4avl tmp; 4avs n7p; 4avv ghe; 4avx itp; 4aw0 atp; 4aw0 mjf; 4aw1 21o; 4aw1 atp; 4aw2 22e; 4aw3 myv; 4aw5 30k; 4awf xi7; 4awg ci3; 4awi aq2; 4awk ci1; 4awm kdh; 4ax9 n5n; 4axa rkd; 4axb fp1; 4axd anp; 4axe adp; 4axf 4my; 4axf anp; 4axx 3pg; 4axx adp; 4ayt lmt; 4ayu n8p; 4az0 s61; 4az3 s35; 4az5 ngw; 4az6 oan; 4az7 log; 4azb oan; 4azc ngw; 4aze 3ra; 4azf 3ra; 4azg oan; 4azh log; 4azi oan; 4azm t4b; 4azr a9m; 4azt sam; 4b05 32d; 4b0b 54f; 4b0c c9h; 4b0g vek; 4b0i kbp; 4b0j 3mq; 4b0o 15f; 4b0p mf5; 4b1f krh; 4b1h ar6; 4b1i a8p; 4b1j a1r; 4b1r itc; 4b1y 1pe; 4b1y p6g; 4b2h c3f; 4b2i lz1; 4b2j rbf; 4b2k rbf; 4b2l tr7; 4b2m rbf; 4b32 03v; 4b33 1np; 4b34 abv; 4b35 4me; 4b3a tac; 4b3c 5h1; 4b3d 5mi; 4b4l 1pe; 4b6c b5u; 4b6e 10l; 4b6f 20l; 4b6l 9zp; 4b6o 3dq; 4b6q bz5; 4b6s 2hn; 4b71 djl; 4b72 2fb; 4b73 4va; 4b74 1lh; 4b75 4va; 4b76 pw1; 4b77 54m; 4b7d qle; 4b7e oga; 4b7k oga; 4b7p 9un; 4b7s qle; 4b7t cwt; 4b7u bcn; 4b7z q4q; 4b80 a36; 4b81 zn4; 4b82 b3z; 4b83 b3v; 4b84 z5k; 4b85 b3w; 4b8l a0p; 4b8m vx6; 4b8u ibk; 4b98 pxg; 4b99 r4l; 4b9d ck7; 4b9z acr; 4bad hm6; 4bae rwx; 4bal hm6; 4bar ikx; 4bb2 str; 4bb3 kka; 4bb4 32w; 4bb5 hd2; 4bb6 hd1; 4bbe 3o4; 4bbf o19; 4bbg v02; 4bbj pc; 4bbm tc0; 4bbx lkf; 4bby fad; 4bbz 4oj; 4bc4 xul; 4bc5 5fx; 4bc6 xzn; 4bc7 1do; 4bc7 fad; 4bca fad; 4bcd tdv; 4bcf t6q; 4bcg t3c,MatchSource.DOCS,test/pdb_ligands_sdf/pdbs.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/pdb_ligands_sdf/pdbs.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/pdb_ligands_sdf/pdbs.txt:124494,Testability,log,log,124494,d; 4aml gyu; 4amv f6r; 4an2 acp; 4an2 eui; 4an3 5y0; 4an3 atp; 4an9 2p7; 4an9 acp; 4anb acp; 4anb yqy; 4anm wul; 4anp 3qi; 4anq vgh; 4ans vgh; 4anu em7; 4anv 751; 4anw o92; 4anx 534; 4aoa ik2; 4aof 7l0; 4aoi 4k0; 4aoj v4z; 4aot gw8; 4ap7 f47; 4app n53; 4apu a2k; 4aq3 398; 4aqc 88a; 4aqd bal; 4aqh tb7; 4aqk adp; 4aqk i6p; 4aql txc; 4ara c56; 4arb c57; 4ark adp; 4ark m3k; 4as7 6lx; 4as9 4qs; 4asa 59c; 4asb 8to; 4ase av9; 4asf 62u; 4asg 814; 4ask k0i; 4asx 6oj; 4at1 atp; 4at3 lti; 4at4 t6e; 4at5 muj; 4atj bho; 4att hnv; 4au8 z3r; 4aua 4au; 4auj hnw; 4aux xtc; 4av4 fvq; 4av5 fyz; 4avg sl6; 4avh fk9; 4avi xns; 4avj j73; 4avl tmp; 4avs n7p; 4avv ghe; 4avx itp; 4aw0 atp; 4aw0 mjf; 4aw1 21o; 4aw1 atp; 4aw2 22e; 4aw3 myv; 4aw5 30k; 4awf xi7; 4awg ci3; 4awi aq2; 4awk ci1; 4awm kdh; 4ax9 n5n; 4axa rkd; 4axb fp1; 4axd anp; 4axe adp; 4axf 4my; 4axf anp; 4axx 3pg; 4axx adp; 4ayt lmt; 4ayu n8p; 4az0 s61; 4az3 s35; 4az5 ngw; 4az6 oan; 4az7 log; 4azb oan; 4azc ngw; 4aze 3ra; 4azf 3ra; 4azg oan; 4azh log; 4azi oan; 4azm t4b; 4azr a9m; 4azt sam; 4b05 32d; 4b0b 54f; 4b0c c9h; 4b0g vek; 4b0i kbp; 4b0j 3mq; 4b0o 15f; 4b0p mf5; 4b1f krh; 4b1h ar6; 4b1i a8p; 4b1j a1r; 4b1r itc; 4b1y 1pe; 4b1y p6g; 4b2h c3f; 4b2i lz1; 4b2j rbf; 4b2k rbf; 4b2l tr7; 4b2m rbf; 4b32 03v; 4b33 1np; 4b34 abv; 4b35 4me; 4b3a tac; 4b3c 5h1; 4b3d 5mi; 4b4l 1pe; 4b6c b5u; 4b6e 10l; 4b6f 20l; 4b6l 9zp; 4b6o 3dq; 4b6q bz5; 4b6s 2hn; 4b71 djl; 4b72 2fb; 4b73 4va; 4b74 1lh; 4b75 4va; 4b76 pw1; 4b77 54m; 4b7d qle; 4b7e oga; 4b7k oga; 4b7p 9un; 4b7s qle; 4b7t cwt; 4b7u bcn; 4b7z q4q; 4b80 a36; 4b81 zn4; 4b82 b3z; 4b83 b3v; 4b84 z5k; 4b85 b3w; 4b8l a0p; 4b8m vx6; 4b8u ibk; 4b98 pxg; 4b99 r4l; 4b9d ck7; 4b9z acr; 4bad hm6; 4bae rwx; 4bal hm6; 4bar ikx; 4bb2 str; 4bb3 kka; 4bb4 32w; 4bb5 hd2; 4bb6 hd1; 4bbe 3o4; 4bbf o19; 4bbg v02; 4bbj pc; 4bbm tc0; 4bbx lkf; 4bby fad; 4bbz 4oj; 4bc4 xul; 4bc5 5fx; 4bc6 xzn; 4bc7 1do; 4bc7 fad; 4bca fad; 4bcd tdv; 4bcf t6q; 4bcg t3c; 4bch t7z; 4bci t3e; 4bcj t9n; 4bcq tjf; 4bcr wy1; 4bda vfb,MatchSource.DOCS,test/pdb_ligands_sdf/pdbs.txt,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/test/pdb_ligands_sdf/pdbs.txt
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:2017,Availability,avail,available,2017,"frequently in a lot of software names.; 1.3 Is it Open Babel or OpenBabel?; Your choice. It's probably easier to call it Open Babel since ; that's what it is--an open version of Babel. But if you like ; one-word, mixed-case project names, then go for OpenBabel. In that ; case, the space is just too small to be printed. ;-); 1.4 How does this relate to the original Babel and OELib, the; ""next"" Babel?; The original Babel was written by Pat Walters and Matt Stahl, based; on the ""convert"" program by Ajay Shah, and is; still a remarkable application. Both Pat and Matt have moved on to; other work. The original Babel is hosted by Smog.com on a ; Babel homepage, by the Computational Chemistry List (CCL) and of course by Open Babel at SourceForge.net. Along the way, the two original authors started a rewrite of Babel; into C++ they called OBabel, which was never really publicly; released. But Matt used some of these ideas in OELib, which was generously; released under the GNU GPL by his employer, OpenEye Software, and the last known; version of this OELib is still available from our file repository. OpenEye decided that for their purposes, OELib needed a rewrite,; (now called OEChem; but this would be closed-source to include some advanced; algorithms. So the GPL'ed version of OELib would not be maintained.; Instead, the free version of OELib was renamed and has become ""Open; Babel"" with the blessing of Matt and other contributors. Open Babel has evolved quite a lot in since 2001, when it was born.; 1.5 What's the latest version?; As of this writing, the latest version is 2.0, which represents a stable version for widespread use and development.; 1.6 Can I use Open Babel code in a personal project?; One common misconception about the GNU GPL license for Open Babel; is that it requires users to release any code that uses the Open Babel; library. This is completely untrue. There are no restrictions on use; of Open Babel code for personal projects, regardless of where you work ",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:7566,Availability,avail,available,7566,"ixed very quickly.; If you're inclined to write code, the GPL is an excellent option ; for the academic. You're the original copyright holder, so you can do ; whatever you want with the code, in addition to selling it. But if ; you've also licensed it under the GPL, no one can distribute it ; proprietarily (i.e., closed-source) without your agreement. ; Fellow acadmics can use it ; directly, learn from it, improve it and contribute back to you. Isn't ; that why many of us went into science?; Once licensed under the GPL, the code must remain free to ; interested parties. If someone modifies it, that code must still ; remain under the GPL, free for all.; 3.3 What's in it for an open-source software project?; Certainly the answers for closed-source software and academics ; also apply for you. Beyond that, if your code is compatible with the ; GPL, you can directly use Open Babel and all of the API. This is ; already happening with the Ghemical molecular editor, available under ; the GPL and many others There's a lot of; code in Open Babel beyond file translation and more to come. Why; reinvent the wheel?; 3.4 Why is this covered under the GPL instead of license X?; The short answer is that OpenEye Scientific Software employs Matt ; Stahl, one of the authors of the original Babel. They released a ; library called OELib under the GPL that did many things that Babel ; did. Later they decided to release the next version of OELib as a ; closed-source project--their choice for their code. We took the ; version of OELib still under GPL and went from there.; If you'd like to see Open Babel licensed differently, we'd suggest ; asking OpenEye if they'd consider releasing the old code under a new ; license, e.g. the LGPL. At that point, we'd consider whether Open ; Babel should be relicensed or not. Obviously all copyright holders ; must agree to the new license.; It's worth noting that since OpenEye is developing a; closed-source library called OEChem; and implies one reason for ",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:1828,Deployability,release,released,1828,"ster development of other open source scientific software.; 1.2 How does this relate to BabelChat, BabelFish, Babel IM, etc. ...?; It doesn't. Not surprisingly, ""babel"" is used frequently in a lot of software names.; 1.3 Is it Open Babel or OpenBabel?; Your choice. It's probably easier to call it Open Babel since ; that's what it is--an open version of Babel. But if you like ; one-word, mixed-case project names, then go for OpenBabel. In that ; case, the space is just too small to be printed. ;-); 1.4 How does this relate to the original Babel and OELib, the; ""next"" Babel?; The original Babel was written by Pat Walters and Matt Stahl, based; on the ""convert"" program by Ajay Shah, and is; still a remarkable application. Both Pat and Matt have moved on to; other work. The original Babel is hosted by Smog.com on a ; Babel homepage, by the Computational Chemistry List (CCL) and of course by Open Babel at SourceForge.net. Along the way, the two original authors started a rewrite of Babel; into C++ they called OBabel, which was never really publicly; released. But Matt used some of these ideas in OELib, which was generously; released under the GNU GPL by his employer, OpenEye Software, and the last known; version of this OELib is still available from our file repository. OpenEye decided that for their purposes, OELib needed a rewrite,; (now called OEChem; but this would be closed-source to include some advanced; algorithms. So the GPL'ed version of OELib would not be maintained.; Instead, the free version of OELib was renamed and has become ""Open; Babel"" with the blessing of Matt and other contributors. Open Babel has evolved quite a lot in since 2001, when it was born.; 1.5 What's the latest version?; As of this writing, the latest version is 2.0, which represents a stable version for widespread use and development.; 1.6 Can I use Open Babel code in a personal project?; One common misconception about the GNU GPL license for Open Babel; is that it requires users to releas",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:1904,Deployability,release,released,1904,"frequently in a lot of software names.; 1.3 Is it Open Babel or OpenBabel?; Your choice. It's probably easier to call it Open Babel since ; that's what it is--an open version of Babel. But if you like ; one-word, mixed-case project names, then go for OpenBabel. In that ; case, the space is just too small to be printed. ;-); 1.4 How does this relate to the original Babel and OELib, the; ""next"" Babel?; The original Babel was written by Pat Walters and Matt Stahl, based; on the ""convert"" program by Ajay Shah, and is; still a remarkable application. Both Pat and Matt have moved on to; other work. The original Babel is hosted by Smog.com on a ; Babel homepage, by the Computational Chemistry List (CCL) and of course by Open Babel at SourceForge.net. Along the way, the two original authors started a rewrite of Babel; into C++ they called OBabel, which was never really publicly; released. But Matt used some of these ideas in OELib, which was generously; released under the GNU GPL by his employer, OpenEye Software, and the last known; version of this OELib is still available from our file repository. OpenEye decided that for their purposes, OELib needed a rewrite,; (now called OEChem; but this would be closed-source to include some advanced; algorithms. So the GPL'ed version of OELib would not be maintained.; Instead, the free version of OELib was renamed and has become ""Open; Babel"" with the blessing of Matt and other contributors. Open Babel has evolved quite a lot in since 2001, when it was born.; 1.5 What's the latest version?; As of this writing, the latest version is 2.0, which represents a stable version for widespread use and development.; 1.6 Can I use Open Babel code in a personal project?; One common misconception about the GNU GPL license for Open Babel; is that it requires users to release any code that uses the Open Babel; library. This is completely untrue. There are no restrictions on use; of Open Babel code for personal projects, regardless of where you work ",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:2761,Deployability,release,release,2761," the two original authors started a rewrite of Babel; into C++ they called OBabel, which was never really publicly; released. But Matt used some of these ideas in OELib, which was generously; released under the GNU GPL by his employer, OpenEye Software, and the last known; version of this OELib is still available from our file repository. OpenEye decided that for their purposes, OELib needed a rewrite,; (now called OEChem; but this would be closed-source to include some advanced; algorithms. So the GPL'ed version of OELib would not be maintained.; Instead, the free version of OELib was renamed and has become ""Open; Babel"" with the blessing of Matt and other contributors. Open Babel has evolved quite a lot in since 2001, when it was born.; 1.5 What's the latest version?; As of this writing, the latest version is 2.0, which represents a stable version for widespread use and development.; 1.6 Can I use Open Babel code in a personal project?; One common misconception about the GNU GPL license for Open Babel; is that it requires users to release any code that uses the Open Babel; library. This is completely untrue. There are no restrictions on use; of Open Babel code for personal projects, regardless of where you work (academia, industry, ... wherever).; However, if you intend on releasing a software; package that uses Open Babel code, the GPL requires that your package; be released under the GNU GPL license. The distinction is between; use and distribution. See section 3 of this FAQ; for more on the licensing issues and why you might want to contribute.; Features, Formats, Roadmap:; 2.1 Why don't you support file format X?; The file formats currently supported are some of the more common ; file formats and, admittedly, those we use in our work. If you'd like ; to see other file formats added, we need one of:. documentation on the file format; working code to read the file format or translate it; example files in the new file format and in some other format. The latter ob",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:3104,Deployability,release,released,3104,"e decided that for their purposes, OELib needed a rewrite,; (now called OEChem; but this would be closed-source to include some advanced; algorithms. So the GPL'ed version of OELib would not be maintained.; Instead, the free version of OELib was renamed and has become ""Open; Babel"" with the blessing of Matt and other contributors. Open Babel has evolved quite a lot in since 2001, when it was born.; 1.5 What's the latest version?; As of this writing, the latest version is 2.0, which represents a stable version for widespread use and development.; 1.6 Can I use Open Babel code in a personal project?; One common misconception about the GNU GPL license for Open Babel; is that it requires users to release any code that uses the Open Babel; library. This is completely untrue. There are no restrictions on use; of Open Babel code for personal projects, regardless of where you work (academia, industry, ... wherever).; However, if you intend on releasing a software; package that uses Open Babel code, the GPL requires that your package; be released under the GNU GPL license. The distinction is between; use and distribution. See section 3 of this FAQ; for more on the licensing issues and why you might want to contribute.; Features, Formats, Roadmap:; 2.1 Why don't you support file format X?; The file formats currently supported are some of the more common ; file formats and, admittedly, those we use in our work. If you'd like ; to see other file formats added, we need one of:. documentation on the file format; working code to read the file format or translate it; example files in the new file format and in some other format. The latter obviously is the easiest with text file formats. Binary ; files take some time to reverse engineer without documentation or ; working code. Also consider pointing developers to this FAQ and the ; ""What's in it for me?"" section.; 2.2 What doesn't Open Babel support yet?; Lots of things. See the proposed; roadmap for examples of things we'd like to ",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:6534,Deployability,patch,patch,6534,"you contribute a ; small amount of code under the GPL to read/write your files, ; everything else is handled by Open Babel.; It's a win-win for everyone. The community benefits by having ; feature-rich translation code and open file formats. Your company and ; its programs benefit by the ability to read just about every format ; imaginable. Users benefit by using the programs they need for the ; tasks they need.; 3.2 What's in it for me as an academic?; If you're an academic developer, you certainly should read the ; previous answer too. It takes little work on your part to interface ; with Open Babel and you get a lot in return.; But even if you're just an academic user, there's a lot of reasons ; to contribute. Most of us deal with a variety of file formats in our ; work. So it's useful to translate these cleanly. If a format isn't ; currently supported by Open Babel, see question 2.1 above. If you ; find bugs please report them. Since it's open source, you can patch ; the code yourself, recompile and have the problem fixed very quickly.; If you're inclined to write code, the GPL is an excellent option ; for the academic. You're the original copyright holder, so you can do ; whatever you want with the code, in addition to selling it. But if ; you've also licensed it under the GPL, no one can distribute it ; proprietarily (i.e., closed-source) without your agreement. ; Fellow acadmics can use it ; directly, learn from it, improve it and contribute back to you. Isn't ; that why many of us went into science?; Once licensed under the GPL, the code must remain free to ; interested parties. If someone modifies it, that code must still ; remain under the GPL, free for all.; 3.3 What's in it for an open-source software project?; Certainly the answers for closed-source software and academics ; also apply for you. Beyond that, if your code is compatible with the ; GPL, you can directly use Open Babel and all of the API. This is ; already happening with the Ghemical molecula",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:7896,Deployability,release,released,7896,"agreement. ; Fellow acadmics can use it ; directly, learn from it, improve it and contribute back to you. Isn't ; that why many of us went into science?; Once licensed under the GPL, the code must remain free to ; interested parties. If someone modifies it, that code must still ; remain under the GPL, free for all.; 3.3 What's in it for an open-source software project?; Certainly the answers for closed-source software and academics ; also apply for you. Beyond that, if your code is compatible with the ; GPL, you can directly use Open Babel and all of the API. This is ; already happening with the Ghemical molecular editor, available under ; the GPL and many others There's a lot of; code in Open Babel beyond file translation and more to come. Why; reinvent the wheel?; 3.4 Why is this covered under the GPL instead of license X?; The short answer is that OpenEye Scientific Software employs Matt ; Stahl, one of the authors of the original Babel. They released a ; library called OELib under the GPL that did many things that Babel ; did. Later they decided to release the next version of OELib as a ; closed-source project--their choice for their code. We took the ; version of OELib still under GPL and went from there.; If you'd like to see Open Babel licensed differently, we'd suggest ; asking OpenEye if they'd consider releasing the old code under a new ; license, e.g. the LGPL. At that point, we'd consider whether Open ; Babel should be relicensed or not. Obviously all copyright holders ; must agree to the new license.; It's worth noting that since OpenEye is developing a; closed-source library called OEChem; and implies one reason for purchase is in closed-source development; products. So we think it's highly unlikely that OpenEye would allow; Open Babel to become a competitor by relicensing under the LGPL.; Where can I read more about the GNU GPL?; The Free Software Foundation maintains a FAQ list about the; GNU GPL. The FAQ attempts to; address common questions in an e",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:8005,Deployability,release,release,8005,"learn from it, improve it and contribute back to you. Isn't ; that why many of us went into science?; Once licensed under the GPL, the code must remain free to ; interested parties. If someone modifies it, that code must still ; remain under the GPL, free for all.; 3.3 What's in it for an open-source software project?; Certainly the answers for closed-source software and academics ; also apply for you. Beyond that, if your code is compatible with the ; GPL, you can directly use Open Babel and all of the API. This is ; already happening with the Ghemical molecular editor, available under ; the GPL and many others There's a lot of; code in Open Babel beyond file translation and more to come. Why; reinvent the wheel?; 3.4 Why is this covered under the GPL instead of license X?; The short answer is that OpenEye Scientific Software employs Matt ; Stahl, one of the authors of the original Babel. They released a ; library called OELib under the GPL that did many things that Babel ; did. Later they decided to release the next version of OELib as a ; closed-source project--their choice for their code. We took the ; version of OELib still under GPL and went from there.; If you'd like to see Open Babel licensed differently, we'd suggest ; asking OpenEye if they'd consider releasing the old code under a new ; license, e.g. the LGPL. At that point, we'd consider whether Open ; Babel should be relicensed or not. Obviously all copyright holders ; must agree to the new license.; It's worth noting that since OpenEye is developing a; closed-source library called OEChem; and implies one reason for purchase is in closed-source development; products. So we think it's highly unlikely that OpenEye would allow; Open Babel to become a competitor by relicensing under the LGPL.; Where can I read more about the GNU GPL?; The Free Software Foundation maintains a FAQ list about the; GNU GPL. The FAQ attempts to; address common questions in an easy-to-read (i.e., not in legal; language) form.; . ",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:4642,Integrability,interface,interface,4642,"e to read the file format or translate it; example files in the new file format and in some other format. The latter obviously is the easiest with text file formats. Binary ; files take some time to reverse engineer without documentation or ; working code. Also consider pointing developers to this FAQ and the ; ""What's in it for me?"" section.; 2.2 What doesn't Open Babel support yet?; Lots of things. See the proposed; roadmap for examples of things we'd like to see in future; versions.; 2.3 What sorts of features will be added in the future?; It's an open project, so if features are suggested or donated, ; they'll be considered as much as anything else on the drawing board. ; Some things are pretty clear from the roadmap.; What's in it for me to contribute?; 3.1 What's in it for my chemistry software company?; If your product is closed-source or otherwise incompatible with ; the GPL, you cannot link directly to the code library. You can, however, ; distribute Open Babel in unmodified form with your products to use the; command-line interface. This is fairly easy because the Open Babel; babel program allow reading from the standard input and writing to the; standard output (functioning as a POSIX pipe).; If you decide to distribute binaries, you; should either offer users the source if they want, or point them to; the Open Babel website. Note that if you modify the source, you; obviously can't point back to the Open Babel website -- the GPL; requires that you distribute the changed source. (Or you can convince; us to incorporate the changes and point back to us.); What's not to like with this deal? You can have Open Babel ; translate foreign file formats for you and can point users at the ; website for distribution. You don't need to write tons of code for ; all these formats and bug reports can be passed back to us.; Of course, there's one catch. You'll most likely need to add ; feature-rich support for your file formats. So if you contribute a ; small amount of cod",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:6137,Integrability,interface,interface,6137,"e the changes and point back to us.); What's not to like with this deal? You can have Open Babel ; translate foreign file formats for you and can point users at the ; website for distribution. You don't need to write tons of code for ; all these formats and bug reports can be passed back to us.; Of course, there's one catch. You'll most likely need to add ; feature-rich support for your file formats. So if you contribute a ; small amount of code under the GPL to read/write your files, ; everything else is handled by Open Babel.; It's a win-win for everyone. The community benefits by having ; feature-rich translation code and open file formats. Your company and ; its programs benefit by the ability to read just about every format ; imaginable. Users benefit by using the programs they need for the ; tasks they need.; 3.2 What's in it for me as an academic?; If you're an academic developer, you certainly should read the ; previous answer too. It takes little work on your part to interface ; with Open Babel and you get a lot in return.; But even if you're just an academic user, there's a lot of reasons ; to contribute. Most of us deal with a variety of file formats in our ; work. So it's useful to translate these cleanly. If a format isn't ; currently supported by Open Babel, see question 2.1 above. If you ; find bugs please report them. Since it's open source, you can patch ; the code yourself, recompile and have the problem fixed very quickly.; If you're inclined to write code, the GPL is an excellent option ; for the academic. You're the original copyright holder, so you can do ; whatever you want with the code, in addition to selling it. But if ; you've also licensed it under the GPL, no one can distribute it ; proprietarily (i.e., closed-source) without your agreement. ; Fellow acadmics can use it ; directly, learn from it, improve it and contribute back to you. Isn't ; that why many of us went into science?; Once licensed under the GPL, the code must remain free t",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:1748,Modifiability,rewrite,rewrite,1748,"ster development of other open source scientific software.; 1.2 How does this relate to BabelChat, BabelFish, Babel IM, etc. ...?; It doesn't. Not surprisingly, ""babel"" is used frequently in a lot of software names.; 1.3 Is it Open Babel or OpenBabel?; Your choice. It's probably easier to call it Open Babel since ; that's what it is--an open version of Babel. But if you like ; one-word, mixed-case project names, then go for OpenBabel. In that ; case, the space is just too small to be printed. ;-); 1.4 How does this relate to the original Babel and OELib, the; ""next"" Babel?; The original Babel was written by Pat Walters and Matt Stahl, based; on the ""convert"" program by Ajay Shah, and is; still a remarkable application. Both Pat and Matt have moved on to; other work. The original Babel is hosted by Smog.com on a ; Babel homepage, by the Computational Chemistry List (CCL) and of course by Open Babel at SourceForge.net. Along the way, the two original authors started a rewrite of Babel; into C++ they called OBabel, which was never really publicly; released. But Matt used some of these ideas in OELib, which was generously; released under the GNU GPL by his employer, OpenEye Software, and the last known; version of this OELib is still available from our file repository. OpenEye decided that for their purposes, OELib needed a rewrite,; (now called OEChem; but this would be closed-source to include some advanced; algorithms. So the GPL'ed version of OELib would not be maintained.; Instead, the free version of OELib was renamed and has become ""Open; Babel"" with the blessing of Matt and other contributors. Open Babel has evolved quite a lot in since 2001, when it was born.; 1.5 What's the latest version?; As of this writing, the latest version is 2.0, which represents a stable version for widespread use and development.; 1.6 Can I use Open Babel code in a personal project?; One common misconception about the GNU GPL license for Open Babel; is that it requires users to releas",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:2109,Modifiability,rewrite,rewrite,2109,"ut if you like ; one-word, mixed-case project names, then go for OpenBabel. In that ; case, the space is just too small to be printed. ;-); 1.4 How does this relate to the original Babel and OELib, the; ""next"" Babel?; The original Babel was written by Pat Walters and Matt Stahl, based; on the ""convert"" program by Ajay Shah, and is; still a remarkable application. Both Pat and Matt have moved on to; other work. The original Babel is hosted by Smog.com on a ; Babel homepage, by the Computational Chemistry List (CCL) and of course by Open Babel at SourceForge.net. Along the way, the two original authors started a rewrite of Babel; into C++ they called OBabel, which was never really publicly; released. But Matt used some of these ideas in OELib, which was generously; released under the GNU GPL by his employer, OpenEye Software, and the last known; version of this OELib is still available from our file repository. OpenEye decided that for their purposes, OELib needed a rewrite,; (now called OEChem; but this would be closed-source to include some advanced; algorithms. So the GPL'ed version of OELib would not be maintained.; Instead, the free version of OELib was renamed and has become ""Open; Babel"" with the blessing of Matt and other contributors. Open Babel has evolved quite a lot in since 2001, when it was born.; 1.5 What's the latest version?; As of this writing, the latest version is 2.0, which represents a stable version for widespread use and development.; 1.6 Can I use Open Babel code in a personal project?; One common misconception about the GNU GPL license for Open Babel; is that it requires users to release any code that uses the Open Babel; library. This is completely untrue. There are no restrictions on use; of Open Babel code for personal projects, regardless of where you work (academia, industry, ... wherever).; However, if you intend on releasing a software; package that uses Open Babel code, the GPL requires that your package; be released under the GNU GPL",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:2407,Modifiability,evolve,evolved,2407,"convert"" program by Ajay Shah, and is; still a remarkable application. Both Pat and Matt have moved on to; other work. The original Babel is hosted by Smog.com on a ; Babel homepage, by the Computational Chemistry List (CCL) and of course by Open Babel at SourceForge.net. Along the way, the two original authors started a rewrite of Babel; into C++ they called OBabel, which was never really publicly; released. But Matt used some of these ideas in OELib, which was generously; released under the GNU GPL by his employer, OpenEye Software, and the last known; version of this OELib is still available from our file repository. OpenEye decided that for their purposes, OELib needed a rewrite,; (now called OEChem; but this would be closed-source to include some advanced; algorithms. So the GPL'ed version of OELib would not be maintained.; Instead, the free version of OELib was renamed and has become ""Open; Babel"" with the blessing of Matt and other contributors. Open Babel has evolved quite a lot in since 2001, when it was born.; 1.5 What's the latest version?; As of this writing, the latest version is 2.0, which represents a stable version for widespread use and development.; 1.6 Can I use Open Babel code in a personal project?; One common misconception about the GNU GPL license for Open Babel; is that it requires users to release any code that uses the Open Babel; library. This is completely untrue. There are no restrictions on use; of Open Babel code for personal projects, regardless of where you work (academia, industry, ... wherever).; However, if you intend on releasing a software; package that uses Open Babel code, the GPL requires that your package; be released under the GNU GPL license. The distinction is between; use and distribution. See section 3 of this FAQ; for more on the licensing issues and why you might want to contribute.; Features, Formats, Roadmap:; 2.1 Why don't you support file format X?; The file formats currently supported are some of the more common ",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:94,Usability,simpl,simply,94,". Open Babel: Frequently Asked Questions. FAQ; $Date$; General:; 1.1 What is Open Babel?; Put simply, Open Babel is a free, open-source version of the Babel ; chemistry file translation program. Open Babel is a project designed to pick up where Babel left off, as; a cross-platform program and library designed to interconvert between; many file formats used in molecular modeling, computational; chemistry, and many related areas.; Open Babel includes two components, a command-line utility and a; C++ library. The command-line utility is intended to be used as a; replacement for the original babel program, to translate between; various chemical file formats. The C++ library includes all of the; file-translation code as well as a wide variety of utilities to; foster development of other open source scientific software.; 1.2 How does this relate to BabelChat, BabelFish, Babel IM, etc. ...?; It doesn't. Not surprisingly, ""babel"" is used frequently in a lot of software names.; 1.3 Is it Open Babel or OpenBabel?; Your choice. It's probably easier to call it Open Babel since ; that's what it is--an open version of Babel. But if you like ; one-word, mixed-case project names, then go for OpenBabel. In that ; case, the space is just too small to be printed. ;-); 1.4 How does this relate to the original Babel and OELib, the; ""next"" Babel?; The original Babel was written by Pat Walters and Matt Stahl, based; on the ""convert"" program by Ajay Shah, and is; still a remarkable application. Both Pat and Matt have moved on to; other work. The original Babel is hosted by Smog.com on a ; Babel homepage, by the Computational Chemistry List (CCL) and of course by Open Babel at SourceForge.net. Along the way, the two original authors started a rewrite of Babel; into C++ they called OBabel, which was never really publicly; released. But Matt used some of these ideas in OELib, which was generously; released under the GNU GPL by his employer, OpenEye Software, and the last known; version of this",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:4302,Usability,clear,clear,4302,"ormats, Roadmap:; 2.1 Why don't you support file format X?; The file formats currently supported are some of the more common ; file formats and, admittedly, those we use in our work. If you'd like ; to see other file formats added, we need one of:. documentation on the file format; working code to read the file format or translate it; example files in the new file format and in some other format. The latter obviously is the easiest with text file formats. Binary ; files take some time to reverse engineer without documentation or ; working code. Also consider pointing developers to this FAQ and the ; ""What's in it for me?"" section.; 2.2 What doesn't Open Babel support yet?; Lots of things. See the proposed; roadmap for examples of things we'd like to see in future; versions.; 2.3 What sorts of features will be added in the future?; It's an open project, so if features are suggested or donated, ; they'll be considered as much as anything else on the drawing board. ; Some things are pretty clear from the roadmap.; What's in it for me to contribute?; 3.1 What's in it for my chemistry software company?; If your product is closed-source or otherwise incompatible with ; the GPL, you cannot link directly to the code library. You can, however, ; distribute Open Babel in unmodified form with your products to use the; command-line interface. This is fairly easy because the Open Babel; babel program allow reading from the standard input and writing to the; standard output (functioning as a POSIX pipe).; If you decide to distribute binaries, you; should either offer users the source if they want, or point them to; the Open Babel website. Note that if you modify the source, you; obviously can't point back to the Open Babel website -- the GPL; requires that you distribute the changed source. (Or you can convince; us to incorporate the changes and point back to us.); What's not to like with this deal? You can have Open Babel ; translate foreign file formats for you and can point use",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html:6988,Usability,learn,learn,6988," me as an academic?; If you're an academic developer, you certainly should read the ; previous answer too. It takes little work on your part to interface ; with Open Babel and you get a lot in return.; But even if you're just an academic user, there's a lot of reasons ; to contribute. Most of us deal with a variety of file formats in our ; work. So it's useful to translate these cleanly. If a format isn't ; currently supported by Open Babel, see question 2.1 above. If you ; find bugs please report them. Since it's open source, you can patch ; the code yourself, recompile and have the problem fixed very quickly.; If you're inclined to write code, the GPL is an excellent option ; for the academic. You're the original copyright holder, so you can do ; whatever you want with the code, in addition to selling it. But if ; you've also licensed it under the GPL, no one can distribute it ; proprietarily (i.e., closed-source) without your agreement. ; Fellow acadmics can use it ; directly, learn from it, improve it and contribute back to you. Isn't ; that why many of us went into science?; Once licensed under the GPL, the code must remain free to ; interested parties. If someone modifies it, that code must still ; remain under the GPL, free for all.; 3.3 What's in it for an open-source software project?; Certainly the answers for closed-source software and academics ; also apply for you. Beyond that, if your code is compatible with the ; GPL, you can directly use Open Babel and all of the API. This is ; already happening with the Ghemical molecular editor, available under ; the GPL and many others There's a lot of; code in Open Babel beyond file translation and more to come. Why; reinvent the wheel?; 3.4 Why is this covered under the GPL instead of license X?; The short answer is that OpenEye Scientific Software employs Matt ; Stahl, one of the authors of the original Babel. They released a ; library called OELib under the GPL that did many things that Babel ; did. Later they ",MatchSource.DOCS,doc/FAQ.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/FAQ.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1117,Availability,error,errors,1117,"psis. obabel [-H help-options]; obabel [OPTIONS] [-i input-type | -: ""SMILES-string""] infile [-o output-type] -O outfile. Description. obabel is a cross-platform program designed to interconvert between many; file formats used in molecular modeling and computational chemistry and; related areas. Open Babel is also a complete programmers toolkit for developing chemistry; software. For more information, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ;",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1151,Availability,error,errorlevel,1151,"NS] [-i input-type | -: ""SMILES-string""] infile [-o output-type] -O outfile. Description. obabel is a cross-platform program designed to interconvert between many; file formats used in molecular modeling and computational chemistry and; related areas. Open Babel is also a complete programmers toolkit for developing chemistry; software. For more information, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple i",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1185,Availability,error,errors,1185,"ned to interconvert between many; file formats used in molecular modeling and computational chemistry and; related areas. Open Babel is also a complete programmers toolkit for developing chemistry; software. For more information, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o fo",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1230,Availability,error,errors,1230,"ned to interconvert between many; file formats used in molecular modeling and computational chemistry and; related areas. Open Babel is also a complete programmers toolkit for developing chemistry; software. For more information, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o fo",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1507,Availability,avail,available,1507,"n, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o format-ID. Specifies output format, see below for the available formats. -p ; Add Hydrogens appropriate for pH (use transforms in phmodel.txt). --property. Add or replace a property (e.g., in an MDL SD file). -s SMARTS. Convert o",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1788,Availability,avail,available,1788,"ticular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o format-ID. Specifies output format, see below for the available formats. -p ; Add Hydrogens appropriate for pH (use transforms in phmodel.txt). --property. Add or replace a property (e.g., in an MDL SD file). -s SMARTS. Convert only molecules matching the SMARTS pattern specified. --separate. Separate disconnected fragments into individual molecular records. -t ; All input files describe a single molecule. --title title. Add or replace molecular title. -x options. Format-specific output ",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:2338,Availability,avail,available,2338,"clude “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o format-ID. Specifies output format, see below for the available formats. -p ; Add Hydrogens appropriate for pH (use transforms in phmodel.txt). --property. Add or replace a property (e.g., in an MDL SD file). -s SMARTS. Convert only molecules matching the SMARTS pattern specified. --separate. Separate disconnected fragments into individual molecular records. -t ; All input files describe a single molecule. --title title. Add or replace molecular title. -x options. Format-specific output options. See -H format-ID for options; allowed by a particular format. -v SMARTS. Convert only molecules NOT matching SMARTS pattern specified. -V ; Output version number and exit. -z ; Compress the output with gzip. File Formats. The following formats are currently supported by Open Babel:. acr -- Carine ASCI Crystal; alc -- Alchemy format; arc -- Accelrys/MSI Biosym/Insight II CAR format [Read-only]; bgf -- MSI BGF format; box -- Dock 3.5 Box format; bs -- Ball and Stick format; c3d1 -- Chem3D Cartesian 1 format; c3d2 -- Chem3D Cartesian 2 f",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:4267,Availability,checkpoint,checkpoint,4267,em3D Cartesian 1 format; c3d2 -- Chem3D Cartesian 2 format; caccrt -- Cacao Cartesian format; cache -- CAChe MolStruct format [Write-only]; cacint -- Cacao Internal format [Write-only]; can -- Canonical SMILES format; car -- Accelrys/MSI Biosym/Insight II CAR format [Read-only]; ccc -- CCC format [Read-only]; cdx -- ChemDraw binary format [Read-only]; cdxml -- ChemDraw CDXML format; cht -- Chemtool format [Write-only]; cif -- Crystallographic Information File; cml -- Chemical Markup Language; cmlr -- CML Reaction format; com -- Gaussian Cartesian Input [Write-only]; copy -- Copies raw text [Write-only]; crk2d -- Chemical Resource Kit 2D diagram format; crk3d -- Chemical Resource Kit 3D format; csr -- Accelrys/MSI Quanta CSR format [Write-only]; cssr -- CSD CSSR format [Write-only]; ct -- ChemDraw Connection Table format; dmol -- DMol3 coordinates format; ent -- Protein Data Bank format; fa -- FASTA format [Write-only]; fasta -- FASTA format [Write-only]; fch -- Gaussian formatted checkpoint file format [Read-only]; fchk -- Gaussian formatted checkpoint file format [Read-only]; fck -- Gaussian formatted checkpoint file format [Read-only]; feat -- Feature format; fh -- Fenske-Hall Z-Matrix format [Write-only]; fix -- SMILES FIX format [Write-only]; fpt -- Fingerprint format [Write-only]; fract -- Free Form Fractional format; fs -- Open Babel FastSearching database; fsa -- FASTA format [Write-only]; g03 -- Gaussian 98/03 Output [Read-only]; g98 -- Gaussian 98/03 Output [Read-only]; gam -- GAMESS Output [Read-only]; gamin -- GAMESS Input [Write-only]; gamout -- GAMESS Output [Read-only]; gau -- Gaussian Cartesian Input [Write-only]; gjc -- Gaussian Cartesian Input [Write-only]; gjf -- Gaussian Cartesian Input [Write-only]; gpr -- Ghemical format; gr96 -- GROMOS96 format [Write-only]; gzmat -- Gaussian Z-Matrix Input; hin -- HyperChem HIN format; inchi -- IUPAC InChI [Write-only]; inp -- GAMESS Input [Write-only]; ins -- ShelX format [Read-only]; jin -- Jaguar input forma,MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:4330,Availability,checkpoint,checkpoint,4330,crt -- Cacao Cartesian format; cache -- CAChe MolStruct format [Write-only]; cacint -- Cacao Internal format [Write-only]; can -- Canonical SMILES format; car -- Accelrys/MSI Biosym/Insight II CAR format [Read-only]; ccc -- CCC format [Read-only]; cdx -- ChemDraw binary format [Read-only]; cdxml -- ChemDraw CDXML format; cht -- Chemtool format [Write-only]; cif -- Crystallographic Information File; cml -- Chemical Markup Language; cmlr -- CML Reaction format; com -- Gaussian Cartesian Input [Write-only]; copy -- Copies raw text [Write-only]; crk2d -- Chemical Resource Kit 2D diagram format; crk3d -- Chemical Resource Kit 3D format; csr -- Accelrys/MSI Quanta CSR format [Write-only]; cssr -- CSD CSSR format [Write-only]; ct -- ChemDraw Connection Table format; dmol -- DMol3 coordinates format; ent -- Protein Data Bank format; fa -- FASTA format [Write-only]; fasta -- FASTA format [Write-only]; fch -- Gaussian formatted checkpoint file format [Read-only]; fchk -- Gaussian formatted checkpoint file format [Read-only]; fck -- Gaussian formatted checkpoint file format [Read-only]; feat -- Feature format; fh -- Fenske-Hall Z-Matrix format [Write-only]; fix -- SMILES FIX format [Write-only]; fpt -- Fingerprint format [Write-only]; fract -- Free Form Fractional format; fs -- Open Babel FastSearching database; fsa -- FASTA format [Write-only]; g03 -- Gaussian 98/03 Output [Read-only]; g98 -- Gaussian 98/03 Output [Read-only]; gam -- GAMESS Output [Read-only]; gamin -- GAMESS Input [Write-only]; gamout -- GAMESS Output [Read-only]; gau -- Gaussian Cartesian Input [Write-only]; gjc -- Gaussian Cartesian Input [Write-only]; gjf -- Gaussian Cartesian Input [Write-only]; gpr -- Ghemical format; gr96 -- GROMOS96 format [Write-only]; gzmat -- Gaussian Z-Matrix Input; hin -- HyperChem HIN format; inchi -- IUPAC InChI [Write-only]; inp -- GAMESS Input [Write-only]; ins -- ShelX format [Read-only]; jin -- Jaguar input format [Write-only]; jout -- Jaguar output format [Read-only]; mdl -,MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:4392,Availability,checkpoint,checkpoint,4392, [Write-only]; cacint -- Cacao Internal format [Write-only]; can -- Canonical SMILES format; car -- Accelrys/MSI Biosym/Insight II CAR format [Read-only]; ccc -- CCC format [Read-only]; cdx -- ChemDraw binary format [Read-only]; cdxml -- ChemDraw CDXML format; cht -- Chemtool format [Write-only]; cif -- Crystallographic Information File; cml -- Chemical Markup Language; cmlr -- CML Reaction format; com -- Gaussian Cartesian Input [Write-only]; copy -- Copies raw text [Write-only]; crk2d -- Chemical Resource Kit 2D diagram format; crk3d -- Chemical Resource Kit 3D format; csr -- Accelrys/MSI Quanta CSR format [Write-only]; cssr -- CSD CSSR format [Write-only]; ct -- ChemDraw Connection Table format; dmol -- DMol3 coordinates format; ent -- Protein Data Bank format; fa -- FASTA format [Write-only]; fasta -- FASTA format [Write-only]; fch -- Gaussian formatted checkpoint file format [Read-only]; fchk -- Gaussian formatted checkpoint file format [Read-only]; fck -- Gaussian formatted checkpoint file format [Read-only]; feat -- Feature format; fh -- Fenske-Hall Z-Matrix format [Write-only]; fix -- SMILES FIX format [Write-only]; fpt -- Fingerprint format [Write-only]; fract -- Free Form Fractional format; fs -- Open Babel FastSearching database; fsa -- FASTA format [Write-only]; g03 -- Gaussian 98/03 Output [Read-only]; g98 -- Gaussian 98/03 Output [Read-only]; gam -- GAMESS Output [Read-only]; gamin -- GAMESS Input [Write-only]; gamout -- GAMESS Output [Read-only]; gau -- Gaussian Cartesian Input [Write-only]; gjc -- Gaussian Cartesian Input [Write-only]; gjf -- Gaussian Cartesian Input [Write-only]; gpr -- Ghemical format; gr96 -- GROMOS96 format [Write-only]; gzmat -- Gaussian Z-Matrix Input; hin -- HyperChem HIN format; inchi -- IUPAC InChI [Write-only]; inp -- GAMESS Input [Write-only]; ins -- ShelX format [Read-only]; jin -- Jaguar input format [Write-only]; jout -- Jaguar output format [Read-only]; mdl -- MDL MOL format; mmd -- MacroModel format; mmod -- MacroModel,MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1305,Integrability,message,messages,1305,"ned to interconvert between many; file formats used in molecular modeling and computational chemistry and; related areas. Open Babel is also a complete programmers toolkit for developing chemistry; software. For more information, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o fo",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1343,Integrability,message,messages,1343,"ned to interconvert between many; file formats used in molecular modeling and computational chemistry and; related areas. Open Babel is also a complete programmers toolkit for developing chemistry; software. For more information, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o fo",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1394,Integrability,message,messages,1394,"ned to interconvert between many; file formats used in molecular modeling and computational chemistry and; related areas. Open Babel is also a complete programmers toolkit for developing chemistry; software. For more information, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o fo",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:3366,Performance,cache,cache,3366,,MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1332,Security,audit,audit,1332,"ned to interconvert between many; file formats used in molecular modeling and computational chemistry and; related areas. Open Babel is also a complete programmers toolkit for developing chemistry; software. For more information, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o fo",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:1338,Testability,log,log,1338,"ned to interconvert between many; file formats used in molecular modeling and computational chemistry and; related areas. Open Babel is also a complete programmers toolkit for developing chemistry; software. For more information, se the Open Babel web pages; <http://openbabel.org/>. Options. If only input and output files are given, Open Babel will guess the file; type from the filename extension. -a options. Format-specific input options. See -H format-ID for options allowed; by a particular format. --addtotitle. Append text to the current molecule title. --addformula. Append the molecular formula after the current molecule title. -b ; Convert dative bonds: e.g., [N+]([O-])=O to N(=O)=O. -c ; Center atomic coordinates at (0,0,0). -C ; Combine molecules in first file with others having the same name. -e ; Continue after errors. -d ; Delete Hydrogens. ---errorlevel 2. Filter the level of errors and warnings displayed:; 1 = critical errors only; 2 = include warnings too (default); 3 = include informational messages too; 4 = include “audit log” messages of changes to data; 5 = include debugging messages too. -f # ; For multiple entry input, start import with molecule # as the first; entry. -F ; Output the available fingerprint types. -h ; Add hydrogens. -H ; Output usage information. -H format-ID. Output formatting information and options for format specified. -Hall. Output formatting information and options for all formats. -i<format-ID>. Specifies input format, see below for the available formats. -j. --join. Join all input molecules into a single output molecule entry. -k ; Translate computational chemistry modeling keywords (e.g., GAMESS; and Gaussian). -m ; Produce multiple output files, to allow:. - ; Splitting one input file - put each molecule into consecutively; numbered output files. - ; Batch conversion - convert each of multiple input files; into a specified output format. -l # ; For multiple entry input, stop import with molecule # as the last; entry. -o fo",MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:6452,Testability,test,test,6452,ad-only]; gam -- GAMESS Output [Read-only]; gamin -- GAMESS Input [Write-only]; gamout -- GAMESS Output [Read-only]; gau -- Gaussian Cartesian Input [Write-only]; gjc -- Gaussian Cartesian Input [Write-only]; gjf -- Gaussian Cartesian Input [Write-only]; gpr -- Ghemical format; gr96 -- GROMOS96 format [Write-only]; gzmat -- Gaussian Z-Matrix Input; hin -- HyperChem HIN format; inchi -- IUPAC InChI [Write-only]; inp -- GAMESS Input [Write-only]; ins -- ShelX format [Read-only]; jin -- Jaguar input format [Write-only]; jout -- Jaguar output format [Read-only]; mdl -- MDL MOL format; mmd -- MacroModel format; mmod -- MacroModel format; mol -- MDL MOL format; mol2 -- Sybyl Mol2 format; molreport -- Open Babel molecule report [Write-only]; moo -- MOPAC Output format [Read-only]; mop -- MOPAC Cartesian format; mopcrt -- MOPAC Cartesian format; mopin -- MOPAC Internal; mopout -- MOPAC Output format [Read-only]; mpc -- MOPAC Cartesian format; mpd -- Sybyl descriptor format [Write-only]; mpqc -- MPQC output format [Read-only]; mpqcin -- MPQC simplified input format [Write-only]; nw -- NWChem input format [Write-only]; nwo -- NWChem output format [Read-only]; pc -- PubChem format [Read-only]; pcm -- PCModel format; pdb -- Protein Data Bank format; pov -- POV-Ray input format [Write-only]; pqs -- Parallel Quantum Solutions format; prep -- Amber Prep format [Read-only]; qcin -- Q-Chem input format [Write-only]; qcout -- Q-Chem output format [Read-only]; report -- Open Babel report format [Write-only]; res -- ShelX format [Read-only]; rxn -- MDL RXN format; sd -- MDL MOL format; sdf -- MDL MOL format; smi -- SMILES format; sy2 -- Sybyl Mol2 format; tdd -- Thermo format; test -- Test format [Write-only]; therm -- Thermo format; tmol -- TurboMole Coordinate format; txyz -- Tinker MM2 format [Write-only]; unixyz -- UniChem XYZ format; vmol -- ViewMol format; xed -- XED format [Write-only]; xml -- General XML format [Read-only]; xyz -- XYZ cartesian coordinates format; yob -- YASARA.,MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html:5815,Usability,simpl,simplified,5815,ad-only]; gam -- GAMESS Output [Read-only]; gamin -- GAMESS Input [Write-only]; gamout -- GAMESS Output [Read-only]; gau -- Gaussian Cartesian Input [Write-only]; gjc -- Gaussian Cartesian Input [Write-only]; gjf -- Gaussian Cartesian Input [Write-only]; gpr -- Ghemical format; gr96 -- GROMOS96 format [Write-only]; gzmat -- Gaussian Z-Matrix Input; hin -- HyperChem HIN format; inchi -- IUPAC InChI [Write-only]; inp -- GAMESS Input [Write-only]; ins -- ShelX format [Read-only]; jin -- Jaguar input format [Write-only]; jout -- Jaguar output format [Read-only]; mdl -- MDL MOL format; mmd -- MacroModel format; mmod -- MacroModel format; mol -- MDL MOL format; mol2 -- Sybyl Mol2 format; molreport -- Open Babel molecule report [Write-only]; moo -- MOPAC Output format [Read-only]; mop -- MOPAC Cartesian format; mopcrt -- MOPAC Cartesian format; mopin -- MOPAC Internal; mopout -- MOPAC Output format [Read-only]; mpc -- MOPAC Cartesian format; mpd -- Sybyl descriptor format [Write-only]; mpqc -- MPQC output format [Read-only]; mpqcin -- MPQC simplified input format [Write-only]; nw -- NWChem input format [Write-only]; nwo -- NWChem output format [Read-only]; pc -- PubChem format [Read-only]; pcm -- PCModel format; pdb -- Protein Data Bank format; pov -- POV-Ray input format [Write-only]; pqs -- Parallel Quantum Solutions format; prep -- Amber Prep format [Read-only]; qcin -- Q-Chem input format [Write-only]; qcout -- Q-Chem output format [Read-only]; report -- Open Babel report format [Write-only]; res -- ShelX format [Read-only]; rxn -- MDL RXN format; sd -- MDL MOL format; sdf -- MDL MOL format; smi -- SMILES format; sy2 -- Sybyl Mol2 format; tdd -- Thermo format; test -- Test format [Write-only]; therm -- Thermo format; tmol -- TurboMole Coordinate format; txyz -- Tinker MM2 format [Write-only]; unixyz -- UniChem XYZ format; vmol -- ViewMol format; xed -- XED format [Write-only]; xml -- General XML format [Read-only]; xyz -- XYZ cartesian coordinates format; yob -- YASARA.,MatchSource.DOCS,doc/obabel.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obabel.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obconformer.html:148,Performance,optimiz,optimization,148,". obconformer. Table of Contents; Name. obconformer -- generate conformer coordinates. Synopsis. obconformer # of conformers to test # of geometry; optimization steps filename [forcefield]. Description. The obconformer tool can be used as part of a conformational study ; by generating random conformers using a Monte Carlo search. The best; conformer out of the batch of conformers will be output, after; taking the supplied number of geometry optimization steps. By default,; obconformer uses the MMFF94 force field. Examples. Generate the best conformer (out of 250) of baseconformer.sdf and write; it to rotamer1.sdf after 100 geometry optimization steps.; obconformer 250 100 baseconformer.sdf >rotamer1.sdf. See Also. obabel(1); , obenergy(1); , obfit(1); , obgrep(1); , obminimize(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Examples; See Also; Authors; Copyright. ",MatchSource.DOCS,doc/obconformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obconformer.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obconformer.html:445,Performance,optimiz,optimization,445,". obconformer. Table of Contents; Name. obconformer -- generate conformer coordinates. Synopsis. obconformer # of conformers to test # of geometry; optimization steps filename [forcefield]. Description. The obconformer tool can be used as part of a conformational study ; by generating random conformers using a Monte Carlo search. The best; conformer out of the batch of conformers will be output, after; taking the supplied number of geometry optimization steps. By default,; obconformer uses the MMFF94 force field. Examples. Generate the best conformer (out of 250) of baseconformer.sdf and write; it to rotamer1.sdf after 100 geometry optimization steps.; obconformer 250 100 baseconformer.sdf >rotamer1.sdf. See Also. obabel(1); , obenergy(1); , obfit(1); , obgrep(1); , obminimize(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Examples; See Also; Authors; Copyright. ",MatchSource.DOCS,doc/obconformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obconformer.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obconformer.html:640,Performance,optimiz,optimization,640,". obconformer. Table of Contents; Name. obconformer -- generate conformer coordinates. Synopsis. obconformer # of conformers to test # of geometry; optimization steps filename [forcefield]. Description. The obconformer tool can be used as part of a conformational study ; by generating random conformers using a Monte Carlo search. The best; conformer out of the batch of conformers will be output, after; taking the supplied number of geometry optimization steps. By default,; obconformer uses the MMFF94 force field. Examples. Generate the best conformer (out of 250) of baseconformer.sdf and write; it to rotamer1.sdf after 100 geometry optimization steps.; obconformer 250 100 baseconformer.sdf >rotamer1.sdf. See Also. obabel(1); , obenergy(1); , obfit(1); , obgrep(1); , obminimize(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Examples; See Also; Authors; Copyright. ",MatchSource.DOCS,doc/obconformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obconformer.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obconformer.html:128,Testability,test,test,128,". obconformer. Table of Contents; Name. obconformer -- generate conformer coordinates. Synopsis. obconformer # of conformers to test # of geometry; optimization steps filename [forcefield]. Description. The obconformer tool can be used as part of a conformational study ; by generating random conformers using a Monte Carlo search. The best; conformer out of the batch of conformers will be output, after; taking the supplied number of geometry optimization steps. By default,; obconformer uses the MMFF94 force field. Examples. Generate the best conformer (out of 250) of baseconformer.sdf and write; it to rotamer1.sdf after 100 geometry optimization steps.; obconformer 250 100 baseconformer.sdf >rotamer1.sdf. See Also. obabel(1); , obenergy(1); , obfit(1); , obgrep(1); , obminimize(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Examples; See Also; Authors; Copyright. ",MatchSource.DOCS,doc/obconformer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obconformer.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:337,Availability,avail,available,337,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:506,Availability,avail,available,506,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:63,Energy Efficiency,energy,energy,63,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:185,Energy Efficiency,energy,energy,185,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:399,Energy Efficiency,energy,energy,399,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:554,Energy Efficiency,energy,energy,554,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:635,Energy Efficiency,energy,energy,635,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:760,Energy Efficiency,energy,energy,760,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:835,Energy Efficiency,energy,energy,835,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:589,Testability,test,test,589,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:610,Testability,test,test,610,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:670,Testability,test,test,670,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:735,Testability,test,test,735,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:795,Testability,test,test,795,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html:869,Testability,test,test,869,". obenergy. Table of Contents; Name. obenergy -- calculate the energy for a molecule. Synopsis. obenergy [OPTIONS] filename. Description. The obenergy tool can be used to calculate the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obenergy will give all options including the; available forcefields. -v ; Verbose: print out all individual energy interactions. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obenergy. Calculate the energy for the molecule(s) in file test.mol2:; obenergy test.mol2. Calculate the energy for the molecule(s) in file test.mol2 using the; Ghemical forcefield:; obenergy -ff Ghemical test.mol2. Calculate the energy for the molecule(s) in file test.mol2 and print out; all individual energy interactions:; obenergy -v test.mol2. See Also. obabel(1); , obminimize(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obenergy program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examp",MatchSource.DOCS,doc/obenergy.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obenergy.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html:767,Testability,test,testmv,767,". obfit. Table of Contents; Name. obfit -- superimpose two molecules based on a pattern. Synopsis. obfit SMARTS-pattern fixed-file outfile. Description. Superimpose two molecules using a quaternion fit. The atoms used to fit; the two molecules are defined by the SMARTS pattern given by the user. It; is useful to align congeneric series of molecules on a common structural; scaffold for 3D-QSAR studies. It can also be useful for displaying the; results of conformational generation. Any molecules matching the supplied SMARTS pattern will be rotated and; translated to provide the smallest possible RMSD between the matching; regions. If a molecule does not match the SMARTS pattern, it will be output; with no transformation. Examples. Align all the molecules in ‘testmv.sdf’ on a single molecule of; ‘testref.sdf’ by superimposing them on its N-methylpiperidyl portion (and outputting a new SD file to the standard output):. obfit '[nh]1c2c(=O)n(C)c(=O)n(C)c2cc1' testref.sdf testmv.sdf. See Also. obabel(1); , obchiral(1); , obgrep(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. A guide for constructing SMARTS patterns can be found at:; <http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>. Authors. The obfit program was contributed by Fabien Fontaine. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, ",MatchSource.DOCS,doc/obfit.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html:805,Testability,test,testref,805,". obfit. Table of Contents; Name. obfit -- superimpose two molecules based on a pattern. Synopsis. obfit SMARTS-pattern fixed-file outfile. Description. Superimpose two molecules using a quaternion fit. The atoms used to fit; the two molecules are defined by the SMARTS pattern given by the user. It; is useful to align congeneric series of molecules on a common structural; scaffold for 3D-QSAR studies. It can also be useful for displaying the; results of conformational generation. Any molecules matching the supplied SMARTS pattern will be rotated and; translated to provide the smallest possible RMSD between the matching; regions. If a molecule does not match the SMARTS pattern, it will be output; with no transformation. Examples. Align all the molecules in ‘testmv.sdf’ on a single molecule of; ‘testref.sdf’ by superimposing them on its N-methylpiperidyl portion (and outputting a new SD file to the standard output):. obfit '[nh]1c2c(=O)n(C)c(=O)n(C)c2cc1' testref.sdf testmv.sdf. See Also. obabel(1); , obchiral(1); , obgrep(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. A guide for constructing SMARTS patterns can be found at:; <http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>. Authors. The obfit program was contributed by Fabien Fontaine. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, ",MatchSource.DOCS,doc/obfit.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html:968,Testability,test,testref,968,". obfit. Table of Contents; Name. obfit -- superimpose two molecules based on a pattern. Synopsis. obfit SMARTS-pattern fixed-file outfile. Description. Superimpose two molecules using a quaternion fit. The atoms used to fit; the two molecules are defined by the SMARTS pattern given by the user. It; is useful to align congeneric series of molecules on a common structural; scaffold for 3D-QSAR studies. It can also be useful for displaying the; results of conformational generation. Any molecules matching the supplied SMARTS pattern will be rotated and; translated to provide the smallest possible RMSD between the matching; regions. If a molecule does not match the SMARTS pattern, it will be output; with no transformation. Examples. Align all the molecules in ‘testmv.sdf’ on a single molecule of; ‘testref.sdf’ by superimposing them on its N-methylpiperidyl portion (and outputting a new SD file to the standard output):. obfit '[nh]1c2c(=O)n(C)c(=O)n(C)c2cc1' testref.sdf testmv.sdf. See Also. obabel(1); , obchiral(1); , obgrep(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. A guide for constructing SMARTS patterns can be found at:; <http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>. Authors. The obfit program was contributed by Fabien Fontaine. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, ",MatchSource.DOCS,doc/obfit.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html:980,Testability,test,testmv,980,". obfit. Table of Contents; Name. obfit -- superimpose two molecules based on a pattern. Synopsis. obfit SMARTS-pattern fixed-file outfile. Description. Superimpose two molecules using a quaternion fit. The atoms used to fit; the two molecules are defined by the SMARTS pattern given by the user. It; is useful to align congeneric series of molecules on a common structural; scaffold for 3D-QSAR studies. It can also be useful for displaying the; results of conformational generation. Any molecules matching the supplied SMARTS pattern will be rotated and; translated to provide the smallest possible RMSD between the matching; regions. If a molecule does not match the SMARTS pattern, it will be output; with no transformation. Examples. Align all the molecules in ‘testmv.sdf’ on a single molecule of; ‘testref.sdf’ by superimposing them on its N-methylpiperidyl portion (and outputting a new SD file to the standard output):. obfit '[nh]1c2c(=O)n(C)c(=O)n(C)c2cc1' testref.sdf testmv.sdf. See Also. obabel(1); , obchiral(1); , obgrep(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. A guide for constructing SMARTS patterns can be found at:; <http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>. Authors. The obfit program was contributed by Fabien Fontaine. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, ",MatchSource.DOCS,doc/obfit.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html:1131,Usability,guid,guide,1131," two molecules using a quaternion fit. The atoms used to fit; the two molecules are defined by the SMARTS pattern given by the user. It; is useful to align congeneric series of molecules on a common structural; scaffold for 3D-QSAR studies. It can also be useful for displaying the; results of conformational generation. Any molecules matching the supplied SMARTS pattern will be rotated and; translated to provide the smallest possible RMSD between the matching; regions. If a molecule does not match the SMARTS pattern, it will be output; with no transformation. Examples. Align all the molecules in ‘testmv.sdf’ on a single molecule of; ‘testref.sdf’ by superimposing them on its N-methylpiperidyl portion (and outputting a new SD file to the standard output):. obfit '[nh]1c2c(=O)n(C)c(=O)n(C)c2cc1' testref.sdf testmv.sdf. See Also. obabel(1); , obchiral(1); , obgrep(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. A guide for constructing SMARTS patterns can be found at:; <http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>. Authors. The obfit program was contributed by Fabien Fontaine. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more ",MatchSource.DOCS,doc/obfit.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obfit.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html:527,Availability,avail,available,527,". obgen. Table of Contents; Name. obgen -- generate 3D coordinates for a molecule. Synopsis. obgen [OPTIONS] filename. Description. The obgen tool will generate 3D coordinates for molecules in a file; (e.g. multi-molecule SMILES files). The resulting structure will be; optimized using the given forcefield and checked for the; lowest-energy conformer using a Monte Carlo search. ; Output will be sent to standard output in the SDF file format. Options. If no filename is given, obminimize will give all options including the; available forcefields. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obgen. Generate 3D coordinates for the molecule(s) in file test.smi:; obgen test.smi. Generate 3D coordinates for the molecule(s) in file test.smi using the ; UFF forcefield:; obgen -ff UFF test.smi. See Also. obabel(1); , obminimize(1); , obconformer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obgen program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007-2008 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examples; See Also; A",MatchSource.DOCS,doc/obgen.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html:636,Availability,avail,available,636,". obgen. Table of Contents; Name. obgen -- generate 3D coordinates for a molecule. Synopsis. obgen [OPTIONS] filename. Description. The obgen tool will generate 3D coordinates for molecules in a file; (e.g. multi-molecule SMILES files). The resulting structure will be; optimized using the given forcefield and checked for the; lowest-energy conformer using a Monte Carlo search. ; Output will be sent to standard output in the SDF file format. Options. If no filename is given, obminimize will give all options including the; available forcefields. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obgen. Generate 3D coordinates for the molecule(s) in file test.smi:; obgen test.smi. Generate 3D coordinates for the molecule(s) in file test.smi using the ; UFF forcefield:; obgen -ff UFF test.smi. See Also. obabel(1); , obminimize(1); , obconformer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obgen program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007-2008 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examples; See Also; A",MatchSource.DOCS,doc/obgen.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html:335,Energy Efficiency,energy,energy,335,". obgen. Table of Contents; Name. obgen -- generate 3D coordinates for a molecule. Synopsis. obgen [OPTIONS] filename. Description. The obgen tool will generate 3D coordinates for molecules in a file; (e.g. multi-molecule SMILES files). The resulting structure will be; optimized using the given forcefield and checked for the; lowest-energy conformer using a Monte Carlo search. ; Output will be sent to standard output in the SDF file format. Options. If no filename is given, obminimize will give all options including the; available forcefields. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obgen. Generate 3D coordinates for the molecule(s) in file test.smi:; obgen test.smi. Generate 3D coordinates for the molecule(s) in file test.smi using the ; UFF forcefield:; obgen -ff UFF test.smi. See Also. obabel(1); , obminimize(1); , obconformer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obgen program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007-2008 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examples; See Also; A",MatchSource.DOCS,doc/obgen.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html:270,Performance,optimiz,optimized,270,". obgen. Table of Contents; Name. obgen -- generate 3D coordinates for a molecule. Synopsis. obgen [OPTIONS] filename. Description. The obgen tool will generate 3D coordinates for molecules in a file; (e.g. multi-molecule SMILES files). The resulting structure will be; optimized using the given forcefield and checked for the; lowest-energy conformer using a Monte Carlo search. ; Output will be sent to standard output in the SDF file format. Options. If no filename is given, obminimize will give all options including the; available forcefields. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obgen. Generate 3D coordinates for the molecule(s) in file test.smi:; obgen test.smi. Generate 3D coordinates for the molecule(s) in file test.smi using the ; UFF forcefield:; obgen -ff UFF test.smi. See Also. obabel(1); , obminimize(1); , obconformer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obgen program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007-2008 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examples; See Also; A",MatchSource.DOCS,doc/obgen.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html:719,Testability,test,test,719,". obgen. Table of Contents; Name. obgen -- generate 3D coordinates for a molecule. Synopsis. obgen [OPTIONS] filename. Description. The obgen tool will generate 3D coordinates for molecules in a file; (e.g. multi-molecule SMILES files). The resulting structure will be; optimized using the given forcefield and checked for the; lowest-energy conformer using a Monte Carlo search. ; Output will be sent to standard output in the SDF file format. Options. If no filename is given, obminimize will give all options including the; available forcefields. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obgen. Generate 3D coordinates for the molecule(s) in file test.smi:; obgen test.smi. Generate 3D coordinates for the molecule(s) in file test.smi using the ; UFF forcefield:; obgen -ff UFF test.smi. See Also. obabel(1); , obminimize(1); , obconformer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obgen program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007-2008 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examples; See Also; A",MatchSource.DOCS,doc/obgen.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html:736,Testability,test,test,736,". obgen. Table of Contents; Name. obgen -- generate 3D coordinates for a molecule. Synopsis. obgen [OPTIONS] filename. Description. The obgen tool will generate 3D coordinates for molecules in a file; (e.g. multi-molecule SMILES files). The resulting structure will be; optimized using the given forcefield and checked for the; lowest-energy conformer using a Monte Carlo search. ; Output will be sent to standard output in the SDF file format. Options. If no filename is given, obminimize will give all options including the; available forcefields. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obgen. Generate 3D coordinates for the molecule(s) in file test.smi:; obgen test.smi. Generate 3D coordinates for the molecule(s) in file test.smi using the ; UFF forcefield:; obgen -ff UFF test.smi. See Also. obabel(1); , obminimize(1); , obconformer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obgen program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007-2008 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examples; See Also; A",MatchSource.DOCS,doc/obgen.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html:798,Testability,test,test,798,". obgen. Table of Contents; Name. obgen -- generate 3D coordinates for a molecule. Synopsis. obgen [OPTIONS] filename. Description. The obgen tool will generate 3D coordinates for molecules in a file; (e.g. multi-molecule SMILES files). The resulting structure will be; optimized using the given forcefield and checked for the; lowest-energy conformer using a Monte Carlo search. ; Output will be sent to standard output in the SDF file format. Options. If no filename is given, obminimize will give all options including the; available forcefields. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obgen. Generate 3D coordinates for the molecule(s) in file test.smi:; obgen test.smi. Generate 3D coordinates for the molecule(s) in file test.smi using the ; UFF forcefield:; obgen -ff UFF test.smi. See Also. obabel(1); , obminimize(1); , obconformer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obgen program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007-2008 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examples; See Also; A",MatchSource.DOCS,doc/obgen.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html:850,Testability,test,test,850,". obgen. Table of Contents; Name. obgen -- generate 3D coordinates for a molecule. Synopsis. obgen [OPTIONS] filename. Description. The obgen tool will generate 3D coordinates for molecules in a file; (e.g. multi-molecule SMILES files). The resulting structure will be; optimized using the given forcefield and checked for the; lowest-energy conformer using a Monte Carlo search. ; Output will be sent to standard output in the SDF file format. Options. If no filename is given, obminimize will give all options including the; available forcefields. -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obgen. Generate 3D coordinates for the molecule(s) in file test.smi:; obgen test.smi. Generate 3D coordinates for the molecule(s) in file test.smi using the ; UFF forcefield:; obgen -ff UFF test.smi. See Also. obabel(1); , obminimize(1); , obconformer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The obgen program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007-2008 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Options; Examples; See Also; A",MatchSource.DOCS,doc/obgen.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgen.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgrep.html:654,Availability,avail,available,654,". obgrep. Table of Contents; Name. obgrep -- an advanced molecular search program using SMARTS. Synopsis. obgrep [OPTIONS] ‘SMARTS-pattern’ filename. Description. The obgrep tool can be used to search for molecules inside multi-molecule; database files (e.g., SMILES, SDF, etc.) or across multiple files. Options. If only a filename is given, obgrep will attempt to guess the file type; from the filename extension. -c ; Print the number of matches. -f ; Full match, print matching-molecules only when the number of heavy; atoms is also equal to the number of atoms in the SMARTS pattern. -i format. Specifies input and output format, see obabel(1); for available formats. -n ; Only print the name of the molecules. -t # ; Print a molecule only if the pattern occurs # times inside the molecule. -v ; Invert the matching, print non-matching molecules. Examples. Note that in all examples, the SMARTS pattern is enclosed in single; quotes '...' to ensure it is not changed by the shell. Print all the molecules with a methylamine group:; obgrep 'CN' database.smi. Print all the molecules without a methylamine group:; obgrep -v 'CN' database.smi. Print the number of molecules without a methylamine group:; obgrep -v -c 'CN' database.smi. Print methylamine (if it exists in the file):; obgrep -f 'CN' database.smi. Print methylamine and/or methanol (if they exist):; obgrep -f 'C[N,O]' database.smi. Print all molecules with aromatic carbon in all SMILES files in the; directory (i.e., *.smi):; obgrep 'c' *.smi. See Also. obabel(1); , obfit(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. A guide for constructing SMARTS patterns can be found at:; <http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>. Authors. The obgrep program was contributed by Fabien Fontaine. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and addi",MatchSource.DOCS,doc/obgrep.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgrep.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgrep.html:1635,Usability,guid,guide,1635,"ats. -n ; Only print the name of the molecules. -t # ; Print a molecule only if the pattern occurs # times inside the molecule. -v ; Invert the matching, print non-matching molecules. Examples. Note that in all examples, the SMARTS pattern is enclosed in single; quotes '...' to ensure it is not changed by the shell. Print all the molecules with a methylamine group:; obgrep 'CN' database.smi. Print all the molecules without a methylamine group:; obgrep -v 'CN' database.smi. Print the number of molecules without a methylamine group:; obgrep -v -c 'CN' database.smi. Print methylamine (if it exists in the file):; obgrep -f 'CN' database.smi. Print methylamine and/or methanol (if they exist):; obgrep -f 'C[N,O]' database.smi. Print all molecules with aromatic carbon in all SMILES files in the; directory (i.e., *.smi):; obgrep 'c' *.smi. See Also. obabel(1); , obfit(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. A guide for constructing SMARTS patterns can be found at:; <http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>. Authors. The obgrep program was contributed by Fabien Fontaine. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more",MatchSource.DOCS,doc/obgrep.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgrep.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgui.html:87,Integrability,interface,interface,87,". man page(1) manual page. Table of Contents; Name. obgui -- Open Babel graphical user interface. Synopsis. obgui. Options. There are no command line options. Description. obgui is the Open Babel graphical user interface, an alternative to using; the command line with the same capabilities. See Also. obabel(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Table of Contents. Name; Synopsis; Options; Description; See Also; Authors. ",MatchSource.DOCS,doc/obgui.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgui.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgui.html:211,Integrability,interface,interface,211,". man page(1) manual page. Table of Contents; Name. obgui -- Open Babel graphical user interface. Synopsis. obgui. Options. There are no command line options. Description. obgui is the Open Babel graphical user interface, an alternative to using; the command line with the same capabilities. See Also. obabel(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Table of Contents. Name; Synopsis; Options; Description; See Also; Authors. ",MatchSource.DOCS,doc/obgui.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obgui.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:368,Availability,avail,available,368,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:682,Availability,avail,available,682,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:89,Energy Efficiency,energy,energy,89,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:214,Energy Efficiency,energy,energy,214,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:731,Energy Efficiency,energy,energy,731,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:813,Energy Efficiency,energy,energy,813,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:939,Energy Efficiency,energy,energy,939,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:1078,Energy Efficiency,energy,energy,1078,"ergy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope tha",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:53,Performance,optimiz,optimize,53,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:1016,Performance,optimiz,optimization,1016," of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundati",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:766,Testability,test,test,766,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:789,Testability,test,test,789,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:848,Testability,test,test,848,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:915,Testability,test,test,915,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:974,Testability,test,test,974,". obminimize. Table of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:1054,Testability,test,test,1054," of Contents; Name. obminimize -- optimize the geometry, minimize the energy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundati",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:1113,Testability,test,test,1113,"ergy for a molecule. Synopsis. obminimize [OPTIONS] filename. Description. The obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope tha",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html:1216,Testability,test,test,1216," obminimize tool can be used to minimize the energy for molecules; inside (multi-)molecule files (e.g., MOL2, etc.). Options. If no filename is given, obminimize will give all options including the; available forcefields. -n steps. Specify the maximum number of steps (default=2500). -cg ; Use conjugate gradients algorithm (default). -sd ; Use steepest descent algorithm. -c criteria. Set convergence criteria (default=1e-6). -ff forcefield. Select the forcefield. Examples. View the possible options, including available forcefields:; obminimize. Minimize the energy for the molecule(s) in file test.mol2:; obminimize test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the Ghemical; forcefield:; obminimize -ff Ghemical test.mol2. Minimize the energy for the molecule(s) in file test.mol2 by taking at; most 300 geometry optimization steps; obminimize -n 300 test.mol2. Minimize the energy for the molecule(s) in file test.mol2 using the; steepest descent algorithm and convergence criteria 1e-5:; obminimize -sd -c 1e-5 test.mol2. See Also. obabel(1); , obenergy(1); , obrotamer(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. The web pages for Open Babel Molecular Mechanics can be found at:; <http://openbabel.org/wiki/Molecular_mechanics>. Authors. The minimize program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2007 by Tim Vandermeersch. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warran",MatchSource.DOCS,doc/obminimize.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obminimize.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html:255,Energy Efficiency,charge,charge,255,". obprobe. Table of Contents; Name. obprobe -- create electrostatic probe grid. Synopsis. obprop [options] type pcharge filename. Description. The obprobe tool creates a grid around a molecule, placing a probe; atom with a specified atom type and partial charge at each point to; calculate the MMFF94 energy. This can be used for docking experiments; to test hydrogen-bond affinity, electrostatic potential, etc.; Output is sent to standard output using the Gaussian Cube format. Options. If no filename is given, obprobe will give all options including the; example probes. -s step size. Set the resolution of the grid (stepsize). -p padding. Set the padding -- extra distance on each side of the box formed by; the molecule. type. The MMFF94 atom type code of the probe atom. pchg. The partial charge on the probe atom.; . Examples. Probe the file pyridines.sdf using a carbonyl oxygen -- a hydrogen; bond acceptor with partial charge -0.57:. obprobe 7 -0.57 pyridines.sdf. Probe the file pyridines.sdf using a phenyl carbon atom -- a; hydrophobic atom with no partial charge:. obprobe 37 0.0 pyridines.sdf. See Also. obabel(1). The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. The obprobe program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2006-2008 by Tim Vandermeersch. Some portions Copyright (C) 2004-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of",MatchSource.DOCS,doc/obprobe.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html:301,Energy Efficiency,energy,energy,301,". obprobe. Table of Contents; Name. obprobe -- create electrostatic probe grid. Synopsis. obprop [options] type pcharge filename. Description. The obprobe tool creates a grid around a molecule, placing a probe; atom with a specified atom type and partial charge at each point to; calculate the MMFF94 energy. This can be used for docking experiments; to test hydrogen-bond affinity, electrostatic potential, etc.; Output is sent to standard output using the Gaussian Cube format. Options. If no filename is given, obprobe will give all options including the; example probes. -s step size. Set the resolution of the grid (stepsize). -p padding. Set the padding -- extra distance on each side of the box formed by; the molecule. type. The MMFF94 atom type code of the probe atom. pchg. The partial charge on the probe atom.; . Examples. Probe the file pyridines.sdf using a carbonyl oxygen -- a hydrogen; bond acceptor with partial charge -0.57:. obprobe 7 -0.57 pyridines.sdf. Probe the file pyridines.sdf using a phenyl carbon atom -- a; hydrophobic atom with no partial charge:. obprobe 37 0.0 pyridines.sdf. See Also. obabel(1). The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. The obprobe program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2006-2008 by Tim Vandermeersch. Some portions Copyright (C) 2004-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of",MatchSource.DOCS,doc/obprobe.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html:796,Energy Efficiency,charge,charge,796,". obprobe. Table of Contents; Name. obprobe -- create electrostatic probe grid. Synopsis. obprop [options] type pcharge filename. Description. The obprobe tool creates a grid around a molecule, placing a probe; atom with a specified atom type and partial charge at each point to; calculate the MMFF94 energy. This can be used for docking experiments; to test hydrogen-bond affinity, electrostatic potential, etc.; Output is sent to standard output using the Gaussian Cube format. Options. If no filename is given, obprobe will give all options including the; example probes. -s step size. Set the resolution of the grid (stepsize). -p padding. Set the padding -- extra distance on each side of the box formed by; the molecule. type. The MMFF94 atom type code of the probe atom. pchg. The partial charge on the probe atom.; . Examples. Probe the file pyridines.sdf using a carbonyl oxygen -- a hydrogen; bond acceptor with partial charge -0.57:. obprobe 7 -0.57 pyridines.sdf. Probe the file pyridines.sdf using a phenyl carbon atom -- a; hydrophobic atom with no partial charge:. obprobe 37 0.0 pyridines.sdf. See Also. obabel(1). The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. The obprobe program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2006-2008 by Tim Vandermeersch. Some portions Copyright (C) 2004-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of",MatchSource.DOCS,doc/obprobe.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html:930,Energy Efficiency,charge,charge,930,". obprobe. Table of Contents; Name. obprobe -- create electrostatic probe grid. Synopsis. obprop [options] type pcharge filename. Description. The obprobe tool creates a grid around a molecule, placing a probe; atom with a specified atom type and partial charge at each point to; calculate the MMFF94 energy. This can be used for docking experiments; to test hydrogen-bond affinity, electrostatic potential, etc.; Output is sent to standard output using the Gaussian Cube format. Options. If no filename is given, obprobe will give all options including the; example probes. -s step size. Set the resolution of the grid (stepsize). -p padding. Set the padding -- extra distance on each side of the box formed by; the molecule. type. The MMFF94 atom type code of the probe atom. pchg. The partial charge on the probe atom.; . Examples. Probe the file pyridines.sdf using a carbonyl oxygen -- a hydrogen; bond acceptor with partial charge -0.57:. obprobe 7 -0.57 pyridines.sdf. Probe the file pyridines.sdf using a phenyl carbon atom -- a; hydrophobic atom with no partial charge:. obprobe 37 0.0 pyridines.sdf. See Also. obabel(1). The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. The obprobe program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2006-2008 by Tim Vandermeersch. Some portions Copyright (C) 2004-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of",MatchSource.DOCS,doc/obprobe.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html:1071,Energy Efficiency,charge,charge,1071,"obe -- create electrostatic probe grid. Synopsis. obprop [options] type pcharge filename. Description. The obprobe tool creates a grid around a molecule, placing a probe; atom with a specified atom type and partial charge at each point to; calculate the MMFF94 energy. This can be used for docking experiments; to test hydrogen-bond affinity, electrostatic potential, etc.; Output is sent to standard output using the Gaussian Cube format. Options. If no filename is given, obprobe will give all options including the; example probes. -s step size. Set the resolution of the grid (stepsize). -p padding. Set the padding -- extra distance on each side of the box formed by; the molecule. type. The MMFF94 atom type code of the probe atom. pchg. The partial charge on the probe atom.; . Examples. Probe the file pyridines.sdf using a carbonyl oxygen -- a hydrogen; bond acceptor with partial charge -0.57:. obprobe 7 -0.57 pyridines.sdf. Probe the file pyridines.sdf using a phenyl carbon atom -- a; hydrophobic atom with no partial charge:. obprobe 37 0.0 pyridines.sdf. See Also. obabel(1). The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. The obprobe program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2006-2008 by Tim Vandermeersch. Some portions Copyright (C) 2004-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PART",MatchSource.DOCS,doc/obprobe.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html:354,Testability,test,test,354,". obprobe. Table of Contents; Name. obprobe -- create electrostatic probe grid. Synopsis. obprop [options] type pcharge filename. Description. The obprobe tool creates a grid around a molecule, placing a probe; atom with a specified atom type and partial charge at each point to; calculate the MMFF94 energy. This can be used for docking experiments; to test hydrogen-bond affinity, electrostatic potential, etc.; Output is sent to standard output using the Gaussian Cube format. Options. If no filename is given, obprobe will give all options including the; example probes. -s step size. Set the resolution of the grid (stepsize). -p padding. Set the padding -- extra distance on each side of the box formed by; the molecule. type. The MMFF94 atom type code of the probe atom. pchg. The partial charge on the probe atom.; . Examples. Probe the file pyridines.sdf using a carbonyl oxygen -- a hydrogen; bond acceptor with partial charge -0.57:. obprobe 7 -0.57 pyridines.sdf. Probe the file pyridines.sdf using a phenyl carbon atom -- a; hydrophobic atom with no partial charge:. obprobe 37 0.0 pyridines.sdf. See Also. obabel(1). The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. The obprobe program was contributed by Tim Vandermeersch. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2006-2008 by Tim Vandermeersch. Some portions Copyright (C) 2004-2008 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of",MatchSource.DOCS,doc/obprobe.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprobe.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprop.html:584,Testability,log,logP,584,". obprop. Table of Contents; Name. obprop -- print standard molecular properties. Synopsis. obprop filename. Description. The obprop program is a tool to print a set of standard molecular properties; for all molecules in a file. It also serves as example code for; using the Open Babel library (libopenbabel). Output format includes:. name [Name]. formula [Formula]. mol_weight [Molecular Weight]. exact_mass [Isotopic Mass]. canonical_SMILES [String]. num_atoms [Number]. num_bonds [Number]. num_residues [Number]. sequence [Residue Sequence]. num_rings [Number of Rings (by SSSR)]. logP [Number (octanol-water partition)]. PSA [Number (topological polar surface area)]; MR [Number (molar refractivity)]. $$$. The “$$$” is the separator between multiple molecular entries in a file. Examples. obprop pyridines.sdf. See Also. obabel(1); , obchiral(1); , obfit(1); , obgrep(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. The obprop program was contributed by Fabien Fontaine. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2003 by Fabien Fontaine. Some portions Copyright (C) 2004-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Examples; See Also; Authors; Copyright. ",MatchSource.DOCS,doc/obprop.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obprop.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obrotamer.html:331,Performance,perform,perform,331,". obrotamer. Table of Contents; Name. obrotamer -- generate conformer/rotamer coordinates. Synopsis. obrotamer filename. Description. The obrotamer tool can be used as part of a conformational search by generating; random isomers based on rotating dihedral angles. These rotamers; are not conformers -- that is, obrotamer does not perform geometry optimization; after generating the rotamer structure. The obminimize tool can; do geometry optimization using molecular mechanics. Examples. Generate a random rotational isomer of baseconformer.sdf and write it to; rotamer1.sdf:; obrotamer baseconformer.sdf >rotamer1.sdf. See Also. obabel(1); , obenergy(1); , obfit(1); , obgrep(1); , obminimize(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Examples; See Also; Authors; Copyright. ",MatchSource.DOCS,doc/obrotamer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obrotamer.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obrotamer.html:348,Performance,optimiz,optimization,348,". obrotamer. Table of Contents; Name. obrotamer -- generate conformer/rotamer coordinates. Synopsis. obrotamer filename. Description. The obrotamer tool can be used as part of a conformational search by generating; random isomers based on rotating dihedral angles. These rotamers; are not conformers -- that is, obrotamer does not perform geometry optimization; after generating the rotamer structure. The obminimize tool can; do geometry optimization using molecular mechanics. Examples. Generate a random rotational isomer of baseconformer.sdf and write it to; rotamer1.sdf:; obrotamer baseconformer.sdf >rotamer1.sdf. See Also. obabel(1); , obenergy(1); , obfit(1); , obgrep(1); , obminimize(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Examples; See Also; Authors; Copyright. ",MatchSource.DOCS,doc/obrotamer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obrotamer.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obrotamer.html:439,Performance,optimiz,optimization,439,". obrotamer. Table of Contents; Name. obrotamer -- generate conformer/rotamer coordinates. Synopsis. obrotamer filename. Description. The obrotamer tool can be used as part of a conformational search by generating; random isomers based on rotating dihedral angles. These rotamers; are not conformers -- that is, obrotamer does not perform geometry optimization; after generating the rotamer structure. The obminimize tool can; do geometry optimization using molecular mechanics. Examples. Generate a random rotational isomer of baseconformer.sdf and write it to; rotamer1.sdf:; obrotamer baseconformer.sdf >rotamer1.sdf. See Also. obabel(1); , obenergy(1); , obfit(1); , obgrep(1); , obminimize(1); , obrotate(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more details. Table of Contents. Name; Synopsis; Description; Examples; See Also; Authors; Copyright. ",MatchSource.DOCS,doc/obrotamer.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obrotamer.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obrotate.html:1945,Usability,guid,guide,1945,"ine the conformation of a large number of; molecules with a pyridyl scaffold and substituted with an aliphatic chain; at the 3-position, for example for docking or 3D-QSAR purposes. To set the value of the first dihedral angle to 90 degrees:; obrotate ‘c1ccncc1CCC’ pyridines.sdf 5 6 7 8 90. Here 6 and 7 define the bond to rotate in the SMARTS patter, i.e., c1-C; and atoms 5 and 8 define the particular dihedral angle to rotate. Since the atoms to define the dihedral do not need to be directly connected,; the nitrogen in the pyridine can be used:; obrotate ‘c1ccncc1CCC’ pyridines.sdf 4 6 7 8 90. Keep the pyridyl ring fixed and moves the aliphatic chain:; obrotate ‘c1ccncc1CCC’ pyridines.sdf 5 6 7 8 90. Keep the aliphatic chain fixed and move the pyridyl ring:; obrotate ‘c1ccncc1CCC’ pyridines.sdf 8 7 6 5 90. See Also. obabel(1); , obchiral(1); , obfit(1); , obgrep(1); , obprop(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. A guide for constructing SMARTS patterns can be found at:; <http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>. Authors. The obgrep program was contributed by Fabien Fontaine. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.; Some portions Copyright (C) 2001-2007 by Geoffrey R. Hutchison and other; contributors. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. This program is distributed in the hope that it will be useful, but; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY; or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public; License for more",MatchSource.DOCS,doc/obrotate.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obrotate.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html:501,Availability,robust,robust,501,". man page(1) manual page. Table of Contents; Name. obspectrophore -- SPECTROPHORE calculator. Synopsis. obspectrophore [options] -i input_file. obspectrophore [-u | -h]. Description. obspectrophore can be used to generate Spectrophores, which are onedimensional; descriptors generated from the property fields surrounding; the molecules. This technology allows the accurate description of molecules; in terms of their surface properties or fields. Comparison of molecules; property fields provides a robust structure-independent method of; aligning actives from different chemical classes. When applied to molecules; such as ligands and drugs, Spectrophores can be used as powerful; molecular descriptors in the fields of chemoinformatics, virtual screening,; and QSAR modeling. Options. -i file. Specifies the molecular input file from which Spectrophores are to; be calculated. The filetype is automatically detected from the file; extension. -n value. Specifies the kind of normalization that should be performed. Valid; values are (without quotes): No (default), ZeroMean, UnitStd and; ZeroMeanAndUnitStd. -a value. Specifies the required accuracy expressed as the angular stepsize.; Only the following discrete values are allowed: 1 | 2 | 5 | 10 | 15; | 20 (default) | 30 | 36 | 45 | 60. -s value. Specifies the kind of cages that should be used in terms of the; underlying pointgroup: P1 or P-1. Valid values are (without; quotes): No (default), Unique, Mirror and All. -r value. Specifies the required resolution expressed as a real positive number.; The default value is 3.0 Angstrom. Negative values or a value; equal to 0 generate an error message. -u ; Display implementation details. -h ; Display help message. See Also. obabel(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes an",MatchSource.DOCS,doc/obspectrophore.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html:1645,Availability,error,error,1645,"ligands and drugs, Spectrophores can be used as powerful; molecular descriptors in the fields of chemoinformatics, virtual screening,; and QSAR modeling. Options. -i file. Specifies the molecular input file from which Spectrophores are to; be calculated. The filetype is automatically detected from the file; extension. -n value. Specifies the kind of normalization that should be performed. Valid; values are (without quotes): No (default), ZeroMean, UnitStd and; ZeroMeanAndUnitStd. -a value. Specifies the required accuracy expressed as the angular stepsize.; Only the following discrete values are allowed: 1 | 2 | 5 | 10 | 15; | 20 (default) | 30 | 36 | 45 | 60. -s value. Specifies the kind of cages that should be used in terms of the; underlying pointgroup: P1 or P-1. Valid values are (without; quotes): No (default), Unique, Mirror and All. -r value. Specifies the required resolution expressed as a real positive number.; The default value is 3.0 Angstrom. Negative values or a value; equal to 0 generate an error message. -u ; Display implementation details. -h ; Display help message. See Also. obabel(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2005-2010 by Silicos NV. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. The algorithm in this software has been covered by patent WO2009146735.; However, Silicos NV and the inventors of the above mentioned patent; assure that no patent infringment claims will be issued against individuals; or institutions that use this software under the GNU General Public; L",MatchSource.DOCS,doc/obspectrophore.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html:674,Energy Efficiency,power,powerful,674,". man page(1) manual page. Table of Contents; Name. obspectrophore -- SPECTROPHORE calculator. Synopsis. obspectrophore [options] -i input_file. obspectrophore [-u | -h]. Description. obspectrophore can be used to generate Spectrophores, which are onedimensional; descriptors generated from the property fields surrounding; the molecules. This technology allows the accurate description of molecules; in terms of their surface properties or fields. Comparison of molecules; property fields provides a robust structure-independent method of; aligning actives from different chemical classes. When applied to molecules; such as ligands and drugs, Spectrophores can be used as powerful; molecular descriptors in the fields of chemoinformatics, virtual screening,; and QSAR modeling. Options. -i file. Specifies the molecular input file from which Spectrophores are to; be calculated. The filetype is automatically detected from the file; extension. -n value. Specifies the kind of normalization that should be performed. Valid; values are (without quotes): No (default), ZeroMean, UnitStd and; ZeroMeanAndUnitStd. -a value. Specifies the required accuracy expressed as the angular stepsize.; Only the following discrete values are allowed: 1 | 2 | 5 | 10 | 15; | 20 (default) | 30 | 36 | 45 | 60. -s value. Specifies the kind of cages that should be used in terms of the; underlying pointgroup: P1 or P-1. Valid values are (without; quotes): No (default), Unique, Mirror and All. -r value. Specifies the required resolution expressed as a real positive number.; The default value is 3.0 Angstrom. Negative values or a value; equal to 0 generate an error message. -u ; Display implementation details. -h ; Display help message. See Also. obabel(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes an",MatchSource.DOCS,doc/obspectrophore.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html:1651,Integrability,message,message,1651,"ligands and drugs, Spectrophores can be used as powerful; molecular descriptors in the fields of chemoinformatics, virtual screening,; and QSAR modeling. Options. -i file. Specifies the molecular input file from which Spectrophores are to; be calculated. The filetype is automatically detected from the file; extension. -n value. Specifies the kind of normalization that should be performed. Valid; values are (without quotes): No (default), ZeroMean, UnitStd and; ZeroMeanAndUnitStd. -a value. Specifies the required accuracy expressed as the angular stepsize.; Only the following discrete values are allowed: 1 | 2 | 5 | 10 | 15; | 20 (default) | 30 | 36 | 45 | 60. -s value. Specifies the kind of cages that should be used in terms of the; underlying pointgroup: P1 or P-1. Valid values are (without; quotes): No (default), Unique, Mirror and All. -r value. Specifies the required resolution expressed as a real positive number.; The default value is 3.0 Angstrom. Negative values or a value; equal to 0 generate an error message. -u ; Display implementation details. -h ; Display help message. See Also. obabel(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2005-2010 by Silicos NV. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. The algorithm in this software has been covered by patent WO2009146735.; However, Silicos NV and the inventors of the above mentioned patent; assure that no patent infringment claims will be issued against individuals; or institutions that use this software under the GNU General Public; L",MatchSource.DOCS,doc/obspectrophore.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html:1715,Integrability,message,message,1715,"the fields of chemoinformatics, virtual screening,; and QSAR modeling. Options. -i file. Specifies the molecular input file from which Spectrophores are to; be calculated. The filetype is automatically detected from the file; extension. -n value. Specifies the kind of normalization that should be performed. Valid; values are (without quotes): No (default), ZeroMean, UnitStd and; ZeroMeanAndUnitStd. -a value. Specifies the required accuracy expressed as the angular stepsize.; Only the following discrete values are allowed: 1 | 2 | 5 | 10 | 15; | 20 (default) | 30 | 36 | 45 | 60. -s value. Specifies the kind of cages that should be used in terms of the; underlying pointgroup: P1 or P-1. Valid values are (without; quotes): No (default), Unique, Mirror and All. -r value. Specifies the required resolution expressed as a real positive number.; The default value is 3.0 Angstrom. Negative values or a value; equal to 0 generate an error message. -u ; Display implementation details. -h ; Display help message. See Also. obabel(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes and additions. For more contributors to Open; Babel, see <http://openbabel.org/wiki/THANKS>. Copyright. Copyright (C) 2005-2010 by Silicos NV. This program is free software; you can redistribute it and/or modify it; under the terms of the GNU General Public License as published by the; Free Software Foundation version 2 of the License. The algorithm in this software has been covered by patent WO2009146735.; However, Silicos NV and the inventors of the above mentioned patent; assure that no patent infringment claims will be issued against individuals; or institutions that use this software under the GNU General Public; License. This program is distributed in the hope that it will be useful, but WITHOUT;",MatchSource.DOCS,doc/obspectrophore.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html:1007,Performance,perform,performed,1007,". man page(1) manual page. Table of Contents; Name. obspectrophore -- SPECTROPHORE calculator. Synopsis. obspectrophore [options] -i input_file. obspectrophore [-u | -h]. Description. obspectrophore can be used to generate Spectrophores, which are onedimensional; descriptors generated from the property fields surrounding; the molecules. This technology allows the accurate description of molecules; in terms of their surface properties or fields. Comparison of molecules; property fields provides a robust structure-independent method of; aligning actives from different chemical classes. When applied to molecules; such as ligands and drugs, Spectrophores can be used as powerful; molecular descriptors in the fields of chemoinformatics, virtual screening,; and QSAR modeling. Options. -i file. Specifies the molecular input file from which Spectrophores are to; be calculated. The filetype is automatically detected from the file; extension. -n value. Specifies the kind of normalization that should be performed. Valid; values are (without quotes): No (default), ZeroMean, UnitStd and; ZeroMeanAndUnitStd. -a value. Specifies the required accuracy expressed as the angular stepsize.; Only the following discrete values are allowed: 1 | 2 | 5 | 10 | 15; | 20 (default) | 30 | 36 | 45 | 60. -s value. Specifies the kind of cages that should be used in terms of the; underlying pointgroup: P1 or P-1. Valid values are (without; quotes): No (default), Unique, Mirror and All. -r value. Specifies the required resolution expressed as a real positive number.; The default value is 3.0 Angstrom. Negative values or a value; equal to 0 generate an error message. -u ; Display implementation details. -h ; Display help message. See Also. obabel(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes an",MatchSource.DOCS,doc/obspectrophore.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html:911,Safety,detect,detected,911,". man page(1) manual page. Table of Contents; Name. obspectrophore -- SPECTROPHORE calculator. Synopsis. obspectrophore [options] -i input_file. obspectrophore [-u | -h]. Description. obspectrophore can be used to generate Spectrophores, which are onedimensional; descriptors generated from the property fields surrounding; the molecules. This technology allows the accurate description of molecules; in terms of their surface properties or fields. Comparison of molecules; property fields provides a robust structure-independent method of; aligning actives from different chemical classes. When applied to molecules; such as ligands and drugs, Spectrophores can be used as powerful; molecular descriptors in the fields of chemoinformatics, virtual screening,; and QSAR modeling. Options. -i file. Specifies the molecular input file from which Spectrophores are to; be calculated. The filetype is automatically detected from the file; extension. -n value. Specifies the kind of normalization that should be performed. Valid; values are (without quotes): No (default), ZeroMean, UnitStd and; ZeroMeanAndUnitStd. -a value. Specifies the required accuracy expressed as the angular stepsize.; Only the following discrete values are allowed: 1 | 2 | 5 | 10 | 15; | 20 (default) | 30 | 36 | 45 | 60. -s value. Specifies the kind of cages that should be used in terms of the; underlying pointgroup: P1 or P-1. Valid values are (without; quotes): No (default), Unique, Mirror and All. -r value. Specifies the required resolution expressed as a real positive number.; The default value is 3.0 Angstrom. Negative values or a value; equal to 0 generate an error message. -u ; Display implementation details. -h ; Display help message. See Also. obabel(1); . The web pages for Open Babel can be found at: <http://openbabel.org/>. Authors. Open Babel is developed by a cast of many, including currrent maintainers; Geoff Hutchison, Chris Morley, Michael Banck, and innumerable others who; have contributed fixes an",MatchSource.DOCS,doc/obspectrophore.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/obspectrophore.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:3677,Availability,error,errors,3677," more than just OBMol objects! (reactions...); ...; }. Here's another example of setting up the OBConversion framework:. OBConversion conv(&cin,&cout);; if(conv.SetInAndOutFormats(""SMI"",""MOL"")); { ; OBMol mol;; if(conv.Read(&mol)); ...manipulate molecule ; ; conv->Write(&mol);; }. Some small changes are needed to the file format translator code modules themselves. In general, these are easy to see from the current code files, e.g., src/formats/xyzformat.cpp. If your format writes molecular records (as opposed to reactions), you will likely be able to derive from the OBMoleculeFormat class. For more information, see the OBConversion API documentation.; Top; Iterator Classes. To facilitate iteration through all atoms, bonds, residues, etc, without resorting to index access (which may change in the future) or the various OBMol::BeginAtom() and OBAtom::NextAtom() methods which may only be safely used by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class ",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:4017,Availability,error,error-prone,4017," easy to see from the current code files, e.g., src/formats/xyzformat.cpp. If your format writes molecular records (as opposed to reactions), you will likely be able to derive from the OBMoleculeFormat class. For more information, see the OBConversion API documentation.; Top; Iterator Classes. To facilitate iteration through all atoms, bonds, residues, etc, without resorting to index access (which may change in the future) or the various OBMol::BeginAtom() and OBAtom::NextAtom() methods which may only be safely used by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. ",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:4509,Availability,error,errors,4509,"ed by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of h",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:5140,Availability,error,errorMsg,5140,"r = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of hash-index access through the old obDataType class to OBGenericDataType, with named unsigned integers. In particular, this greatly facilitates the storage and manipulation of essentially an unlimited number of data types on a per-atom, per-bond, per-residue, or per-molecule basis. Code Changes; Very little needs to be done. If you have derived a subclass of OBGenericData, then you should also pick a new OBGenericDataType, using some of the undefined namespace. (We would prefer if you also let us know, so we can minimize conflicts or future compatibility problems.). if (mol.HasData(obUnitCell)); {; OBUnitCell *uc = (OBUnitCel",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:5151,Availability,error,errorMsg,5151,"r = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of hash-index access through the old obDataType class to OBGenericDataType, with named unsigned integers. In particular, this greatly facilitates the storage and manipulation of essentially an unlimited number of data types on a per-atom, per-bond, per-residue, or per-molecule basis. Code Changes; Very little needs to be done. If you have derived a subclass of OBGenericData, then you should also pick a new OBGenericDataType, using some of the undefined namespace. (We would prefer if you also let us know, so we can minimize conflicts or future compatibility problems.). if (mol.HasData(obUnitCell)); {; OBUnitCell *uc = (OBUnitCel",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:5255,Availability,error,errorMsg,5255," code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of hash-index access through the old obDataType class to OBGenericDataType, with named unsigned integers. In particular, this greatly facilitates the storage and manipulation of essentially an unlimited number of data types on a per-atom, per-bond, per-residue, or per-molecule basis. Code Changes; Very little needs to be done. If you have derived a subclass of OBGenericData, then you should also pick a new OBGenericDataType, using some of the undefined namespace. (We would prefer if you also let us know, so we can minimize conflicts or future compatibility problems.). if (mol.HasData(obUnitCell)); {; OBUnitCell *uc = (OBUnitCell*)mol.GetData(obUnitCell); ...; }. ... if (mol.HasData(""Author"")); ... . becom",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:5361,Availability,error,errorMsg,5361,"ore information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of hash-index access through the old obDataType class to OBGenericDataType, with named unsigned integers. In particular, this greatly facilitates the storage and manipulation of essentially an unlimited number of data types on a per-atom, per-bond, per-residue, or per-molecule basis. Code Changes; Very little needs to be done. If you have derived a subclass of OBGenericData, then you should also pick a new OBGenericDataType, using some of the undefined namespace. (We would prefer if you also let us know, so we can minimize conflicts or future compatibility problems.). if (mol.HasData(obUnitCell)); {; OBUnitCell *uc = (OBUnitCell*)mol.GetData(obUnitCell); ...; }. ... if (mol.HasData(""Author"")); ... . becomes... if (mol.HasData(OBGenericDataType::UnitCell)); {; OBUnitCell *uc = (OBUnitCell*)mol.GetData(OBGe",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:207,Deployability,release,release,207,". Open Babel: Migration from 1.x to 2.0. Migration from Open Babel 1.x; (a.k.a. What's New for Developers in Open Babel 2.0); $Date$; General:; Many things have changed internally in the new Open Babel 2.0; release, including a variety of new classes, methods, and; algorithms. For a full list of what's new, see the Release Notes and Change Log.; This document aims to outline major changes in the Open Babel; library which differ from previous versions. In general, major version numbers of Open Babel indicate major changes to the library which will break backwards-compatibility in at least some areas. For example 1.x to 2.x represents changes that are backwards-incompatible as well as several new interfaces. Changes between 2.0 and 2.1 will add but not break existing code; There are four main areas of updates:. OBFileFormat vs. OBConversion; Iterator Classes; Error Handling; Generic Data. OBFileFormat vs. OBConversion; By far the largest change between Open Babel 1.x and 2.0 is the; introduction of the OBConversion and OBFormat classes to handle; reading and writing chemical data, replacing the OBFileFormat; class. There are several main advantages to these new classes. Dynamic loading and unloading of file formats. This means that to write a new format, only one file (with the; format code) is needed. No other code changes are required.; In Open Babel 1.x, in addition to the file format code, 2 code; files, 2 header files, and extable.txt needed to be changed. Better support for formats which handle multiple molecules ""records"" in one file (e.g., CML, MDL Molfile, SMILES, etc.).; Batch conversion, splitting, and joining multiple molecule files.; Support for handling reaction data (e.g., MDL Rxn, CMLReact files) and other types of chemical data beyond simple molecular files. Code Changes; Example code for accessing OBConversion and OBFormat to translate files is included in all of the command-line programs babel, obgrep, obfit, etc. For example:. // old code; ifstream ",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:811,Deployability,update,updates,811,". Open Babel: Migration from 1.x to 2.0. Migration from Open Babel 1.x; (a.k.a. What's New for Developers in Open Babel 2.0); $Date$; General:; Many things have changed internally in the new Open Babel 2.0; release, including a variety of new classes, methods, and; algorithms. For a full list of what's new, see the Release Notes and Change Log.; This document aims to outline major changes in the Open Babel; library which differ from previous versions. In general, major version numbers of Open Babel indicate major changes to the library which will break backwards-compatibility in at least some areas. For example 1.x to 2.x represents changes that are backwards-incompatible as well as several new interfaces. Changes between 2.0 and 2.1 will add but not break existing code; There are four main areas of updates:. OBFileFormat vs. OBConversion; Iterator Classes; Error Handling; Generic Data. OBFileFormat vs. OBConversion; By far the largest change between Open Babel 1.x and 2.0 is the; introduction of the OBConversion and OBFormat classes to handle; reading and writing chemical data, replacing the OBFileFormat; class. There are several main advantages to these new classes. Dynamic loading and unloading of file formats. This means that to write a new format, only one file (with the; format code) is needed. No other code changes are required.; In Open Babel 1.x, in addition to the file format code, 2 code; files, 2 header files, and extable.txt needed to be changed. Better support for formats which handle multiple molecules ""records"" in one file (e.g., CML, MDL Molfile, SMILES, etc.).; Batch conversion, splitting, and joining multiple molecule files.; Support for handling reaction data (e.g., MDL Rxn, CMLReact files) and other types of chemical data beyond simple molecular files. Code Changes; Example code for accessing OBConversion and OBFormat to translate files is included in all of the command-line programs babel, obgrep, obfit, etc. For example:. // old code; ifstream ",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:3845,Deployability,update,updated,3845,"; if(conv.Read(&mol)); ...manipulate molecule ; ; conv->Write(&mol);; }. Some small changes are needed to the file format translator code modules themselves. In general, these are easy to see from the current code files, e.g., src/formats/xyzformat.cpp. If your format writes molecular records (as opposed to reactions), you will likely be able to derive from the OBMoleculeFormat class. For more information, see the OBConversion API documentation.; Top; Iterator Classes. To facilitate iteration through all atoms, bonds, residues, etc, without resorting to index access (which may change in the future) or the various OBMol::BeginAtom() and OBAtom::NextAtom() methods which may only be safely used by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr <",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:3965,Deployability,release,release,3965,"hanges are needed to the file format translator code modules themselves. In general, these are easy to see from the current code files, e.g., src/formats/xyzformat.cpp. If your format writes molecular records (as opposed to reactions), you will likely be able to derive from the OBMoleculeFormat class. For more information, see the OBConversion API documentation.; Top; Iterator Classes. To facilitate iteration through all atoms, bonds, residues, etc, without resorting to index access (which may change in the future) or the various OBMol::BeginAtom() and OBAtom::NextAtom() methods which may only be safely used by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of c",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:704,Integrability,interface,interfaces,704,". Open Babel: Migration from 1.x to 2.0. Migration from Open Babel 1.x; (a.k.a. What's New for Developers in Open Babel 2.0); $Date$; General:; Many things have changed internally in the new Open Babel 2.0; release, including a variety of new classes, methods, and; algorithms. For a full list of what's new, see the Release Notes and Change Log.; This document aims to outline major changes in the Open Babel; library which differ from previous versions. In general, major version numbers of Open Babel indicate major changes to the library which will break backwards-compatibility in at least some areas. For example 1.x to 2.x represents changes that are backwards-incompatible as well as several new interfaces. Changes between 2.0 and 2.1 will add but not break existing code; There are four main areas of updates:. OBFileFormat vs. OBConversion; Iterator Classes; Error Handling; Generic Data. OBFileFormat vs. OBConversion; By far the largest change between Open Babel 1.x and 2.0 is the; introduction of the OBConversion and OBFormat classes to handle; reading and writing chemical data, replacing the OBFileFormat; class. There are several main advantages to these new classes. Dynamic loading and unloading of file formats. This means that to write a new format, only one file (with the; format code) is needed. No other code changes are required.; In Open Babel 1.x, in addition to the file format code, 2 code; files, 2 header files, and extable.txt needed to be changed. Better support for formats which handle multiple molecules ""records"" in one file (e.g., CML, MDL Molfile, SMILES, etc.).; Batch conversion, splitting, and joining multiple molecule files.; Support for handling reaction data (e.g., MDL Rxn, CMLReact files) and other types of chemical data beyond simple molecular files. Code Changes; Example code for accessing OBConversion and OBFormat to translate files is included in all of the command-line programs babel, obgrep, obfit, etc. For example:. // old code; ifstream ",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:4527,Integrability,message,messages,4527,"ed by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of h",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:1195,Performance,load,loading,1195,"lease, including a variety of new classes, methods, and; algorithms. For a full list of what's new, see the Release Notes and Change Log.; This document aims to outline major changes in the Open Babel; library which differ from previous versions. In general, major version numbers of Open Babel indicate major changes to the library which will break backwards-compatibility in at least some areas. For example 1.x to 2.x represents changes that are backwards-incompatible as well as several new interfaces. Changes between 2.0 and 2.1 will add but not break existing code; There are four main areas of updates:. OBFileFormat vs. OBConversion; Iterator Classes; Error Handling; Generic Data. OBFileFormat vs. OBConversion; By far the largest change between Open Babel 1.x and 2.0 is the; introduction of the OBConversion and OBFormat classes to handle; reading and writing chemical data, replacing the OBFileFormat; class. There are several main advantages to these new classes. Dynamic loading and unloading of file formats. This means that to write a new format, only one file (with the; format code) is needed. No other code changes are required.; In Open Babel 1.x, in addition to the file format code, 2 code; files, 2 header files, and extable.txt needed to be changed. Better support for formats which handle multiple molecules ""records"" in one file (e.g., CML, MDL Molfile, SMILES, etc.).; Batch conversion, splitting, and joining multiple molecule files.; Support for handling reaction data (e.g., MDL Rxn, CMLReact files) and other types of chemical data beyond simple molecular files. Code Changes; Example code for accessing OBConversion and OBFormat to translate files is included in all of the command-line programs babel, obgrep, obfit, etc. For example:. // old code; ifstream ifs(filename);; ; io_type inFileType = extab.FilenameToType(FileIn);. if (extab.IsReadable(inFileType) && extab.IsWritable(SMI); {; OBMol mol(inFileType, SMI);; stringstream outstream;; fileFormat.ReadMolecule",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:3531,Safety,safe,safely,3531,"onv.GetFormat(""SMI"");; istream* pIn = &ifs ; stringstream newstream;; if(inFormat && outFormat); {; conv.SetInAndOutFormats(inFormat,outFormat);; conv.Convert(pIn,&newstream); // note works on more than just OBMol objects! (reactions...); ...; }. Here's another example of setting up the OBConversion framework:. OBConversion conv(&cin,&cout);; if(conv.SetInAndOutFormats(""SMI"",""MOL"")); { ; OBMol mol;; if(conv.Read(&mol)); ...manipulate molecule ; ; conv->Write(&mol);; }. Some small changes are needed to the file format translator code modules themselves. In general, these are easy to see from the current code files, e.g., src/formats/xyzformat.cpp. If your format writes molecular records (as opposed to reactions), you will likely be able to derive from the OBMoleculeFormat class. For more information, see the OBConversion API documentation.; Top; Iterator Classes. To facilitate iteration through all atoms, bonds, residues, etc, without resorting to index access (which may change in the future) or the various OBMol::BeginAtom() and OBAtom::NextAtom() methods which may only be safely used by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:1835,Security,access,accessing,1835,"g; Generic Data. OBFileFormat vs. OBConversion; By far the largest change between Open Babel 1.x and 2.0 is the; introduction of the OBConversion and OBFormat classes to handle; reading and writing chemical data, replacing the OBFileFormat; class. There are several main advantages to these new classes. Dynamic loading and unloading of file formats. This means that to write a new format, only one file (with the; format code) is needed. No other code changes are required.; In Open Babel 1.x, in addition to the file format code, 2 code; files, 2 header files, and extable.txt needed to be changed. Better support for formats which handle multiple molecules ""records"" in one file (e.g., CML, MDL Molfile, SMILES, etc.).; Batch conversion, splitting, and joining multiple molecule files.; Support for handling reaction data (e.g., MDL Rxn, CMLReact files) and other types of chemical data beyond simple molecular files. Code Changes; Example code for accessing OBConversion and OBFormat to translate files is included in all of the command-line programs babel, obgrep, obfit, etc. For example:. // old code; ifstream ifs(filename);; ; io_type inFileType = extab.FilenameToType(FileIn);. if (extab.IsReadable(inFileType) && extab.IsWritable(SMI); {; OBMol mol(inFileType, SMI);; stringstream outstream;; fileFormat.ReadMolecule(ifs, mol, filename);; fileFormat.WriteMolecule(outstream, mol);; ...; }. now becomes. // new code; ifstream ifs(filename);; ; OBConversion conv;; // Try ; OBFormat* inFormat = conv.FormatFromExt(filename);; OBFormat* outFormat = conv.GetFormat(""SMI"");; istream* pIn = &ifs ; stringstream newstream;; if(inFormat && outFormat); {; conv.SetInAndOutFormats(inFormat,outFormat);; conv.Convert(pIn,&newstream); // note works on more than just OBMol objects! (reactions...); ...; }. Here's another example of setting up the OBConversion framework:. OBConversion conv(&cin,&cout);; if(conv.SetInAndOutFormats(""SMI"",""MOL"")); { ; OBMol mol;; if(conv.Read(&mol)); ...manipulate molec",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:3408,Security,access,access,3408,"onv.GetFormat(""SMI"");; istream* pIn = &ifs ; stringstream newstream;; if(inFormat && outFormat); {; conv.SetInAndOutFormats(inFormat,outFormat);; conv.Convert(pIn,&newstream); // note works on more than just OBMol objects! (reactions...); ...; }. Here's another example of setting up the OBConversion framework:. OBConversion conv(&cin,&cout);; if(conv.SetInAndOutFormats(""SMI"",""MOL"")); { ; OBMol mol;; if(conv.Read(&mol)); ...manipulate molecule ; ; conv->Write(&mol);; }. Some small changes are needed to the file format translator code modules themselves. In general, these are easy to see from the current code files, e.g., src/formats/xyzformat.cpp. If your format writes molecular records (as opposed to reactions), you will likely be able to derive from the OBMoleculeFormat class. For more information, see the OBConversion API documentation.; Top; Iterator Classes. To facilitate iteration through all atoms, bonds, residues, etc, without resorting to index access (which may change in the future) or the various OBMol::BeginAtom() and OBAtom::NextAtom() methods which may only be safely used by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:4551,Security,audit,audit,4551,"ed by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of h",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:5540,Security,hash,hash-index,5540,"ly redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of hash-index access through the old obDataType class to OBGenericDataType, with named unsigned integers. In particular, this greatly facilitates the storage and manipulation of essentially an unlimited number of data types on a per-atom, per-bond, per-residue, or per-molecule basis. Code Changes; Very little needs to be done. If you have derived a subclass of OBGenericData, then you should also pick a new OBGenericDataType, using some of the undefined namespace. (We would prefer if you also let us know, so we can minimize conflicts or future compatibility problems.). if (mol.HasData(obUnitCell)); {; OBUnitCell *uc = (OBUnitCell*)mol.GetData(obUnitCell); ...; }. ... if (mol.HasData(""Author"")); ... . becomes... if (mol.HasData(OBGenericDataType::UnitCell)); {; OBUnitCell *uc = (OBUnitCell*)mol.GetData(OBGenericDataType::UnitCell); ...; }. // String access doesn't need to be changed at all; if (mol.HasData(""Author"")); ... . Top; . ",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:5551,Security,access,access,5551,"ly redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of hash-index access through the old obDataType class to OBGenericDataType, with named unsigned integers. In particular, this greatly facilitates the storage and manipulation of essentially an unlimited number of data types on a per-atom, per-bond, per-residue, or per-molecule basis. Code Changes; Very little needs to be done. If you have derived a subclass of OBGenericData, then you should also pick a new OBGenericDataType, using some of the undefined namespace. (We would prefer if you also let us know, so we can minimize conflicts or future compatibility problems.). if (mol.HasData(obUnitCell)); {; OBUnitCell *uc = (OBUnitCell*)mol.GetData(obUnitCell); ...; }. ... if (mol.HasData(""Author"")); ... . becomes... if (mol.HasData(OBGenericDataType::UnitCell)); {; OBUnitCell *uc = (OBUnitCell*)mol.GetData(OBGenericDataType::UnitCell); ...; }. // String access doesn't need to be changed at all; if (mol.HasData(""Author"")); ... . Top; . ",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:6397,Security,access,access,6397,"ly redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of hash-index access through the old obDataType class to OBGenericDataType, with named unsigned integers. In particular, this greatly facilitates the storage and manipulation of essentially an unlimited number of data types on a per-atom, per-bond, per-residue, or per-molecule basis. Code Changes; Very little needs to be done. If you have derived a subclass of OBGenericData, then you should also pick a new OBGenericDataType, using some of the undefined namespace. (We would prefer if you also let us know, so we can minimize conflicts or future compatibility problems.). if (mol.HasData(obUnitCell)); {; OBUnitCell *uc = (OBUnitCell*)mol.GetData(obUnitCell); ...; }. ... if (mol.HasData(""Author"")); ... . becomes... if (mol.HasData(OBGenericDataType::UnitCell)); {; OBUnitCell *uc = (OBUnitCell*)mol.GetData(OBGenericDataType::UnitCell); ...; }. // String access doesn't need to be changed at all; if (mol.HasData(""Author"")); ... . Top; . ",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:4505,Testability,log,log,4505,"ed by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of h",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:4557,Testability,log,log,4557,"ed by one method at once (e.g., if your code is multithreaded, or a method above your code or underneath your code uses these iterators, errors will occur). Therefore, it is highly recommended to use the new STL-style iterator classes introduced into Open Babel 2.0. Code Changes; No old code needs to be updated to work with Open Babel 2.0. However, the old iterator methods are deprecated and will disappear in some future release. The new methods are easier to use and less error-prone, so it is highly recommended to convert. For example:. // old code; #include ""mol.h"". OBAtom *atom;; OBAtom *nbr;; vector::iterator i;. for (nbr = atom->BeginNbrAtom(i);nbr;nbr = atom->NextNbrAtom(i)); ... becomes. // new code; #include ""obiter.h""; #include ""mol.h"". OBAtom *atom;; FOR_NBORS_OF_ATOM(nbr, atom); {; ... For more information, see the documentation for the OBMol class. Top; Error Handling. In order to allow users and developers to easily redirect, filter, and log errors, debugging messages, and internal ""audit log"" information when molecules are altered, the new OBMessageHandler class has been added. Code Changes; Rather than using std::cerr or std::cout or the old ThrowError() method, you should use the global obErrorLog object. ThrowError(""Requested Atom Out of Range"");; ...; ; std::cerr << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; std::cerr << "" found "" << vc.size() << "" expected "" << _ncols << ""."" << std::endl;. becomes... // new code; obErrorLog.ThrowError(__FUNCTION__, ""Requested Atom Out of Range"", obDebug);. ... stringstream errorMsg;; errorMsg << "" Could not parse line in type translation table types.txt -- incorect number of columns"";; errorMsg << "" found "" << vc.size() << "" expected "" << _ncols << ""."";; obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obInfo);. For more information, see the OBMessageHandler class.; Top; Generic Data. The OBGenericData class has some small modifications, notably the expansion of h",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html:1780,Usability,simpl,simple,1780,"ot break existing code; There are four main areas of updates:. OBFileFormat vs. OBConversion; Iterator Classes; Error Handling; Generic Data. OBFileFormat vs. OBConversion; By far the largest change between Open Babel 1.x and 2.0 is the; introduction of the OBConversion and OBFormat classes to handle; reading and writing chemical data, replacing the OBFileFormat; class. There are several main advantages to these new classes. Dynamic loading and unloading of file formats. This means that to write a new format, only one file (with the; format code) is needed. No other code changes are required.; In Open Babel 1.x, in addition to the file format code, 2 code; files, 2 header files, and extable.txt needed to be changed. Better support for formats which handle multiple molecules ""records"" in one file (e.g., CML, MDL Molfile, SMILES, etc.).; Batch conversion, splitting, and joining multiple molecule files.; Support for handling reaction data (e.g., MDL Rxn, CMLReact files) and other types of chemical data beyond simple molecular files. Code Changes; Example code for accessing OBConversion and OBFormat to translate files is included in all of the command-line programs babel, obgrep, obfit, etc. For example:. // old code; ifstream ifs(filename);; ; io_type inFileType = extab.FilenameToType(FileIn);. if (extab.IsReadable(inFileType) && extab.IsWritable(SMI); {; OBMol mol(inFileType, SMI);; stringstream outstream;; fileFormat.ReadMolecule(ifs, mol, filename);; fileFormat.WriteMolecule(outstream, mol);; ...; }. now becomes. // new code; ifstream ifs(filename);; ; OBConversion conv;; // Try ; OBFormat* inFormat = conv.FormatFromExt(filename);; OBFormat* outFormat = conv.GetFormat(""SMI"");; istream* pIn = &ifs ; stringstream newstream;; if(inFormat && outFormat); {; conv.SetInAndOutFormats(inFormat,outFormat);; conv.Convert(pIn,&newstream); // note works on more than just OBMol objects! (reactions...); ...; }. Here's another example of setting up the OBConversion framework:. OBCo",MatchSource.DOCS,doc/OBTwoMigration.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OBTwoMigration.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:1850,Availability,down,down,1850,"nverted if the output format allows multiple molecules.; Options; The options in the middle are those appropriate for the type of chemical object being converted (molecule or reaction) and the input and output formats. They are derived from the description text that is displayed with the -Hxxx option in the command line interface and with the ""Format info"" buttons here. You can switch off the display of any of the various types of option using the View menu, if the screen is getting too cluttered.; Multiple input files; You can select multiple input files in the input file dialog in the normal way (using the Control key in Windows). In the input filename box, each filename is displayed relative to the path shown just above the box, which is the path of the first file. You can display any of the files by moving the highlight with Tab/Shift Tab, Page Up/Down, the mouse wheel, or by double clicking.; Selecting one or more new file names normally removes those already present, but they can instead be appended by holding the Control key down when leaving the file selection dialog.; Files can be also be dragged and dropped (e.g. from Windows Explorer), adding the file when the Control key is pressed, replacing the existing files when it is not.; Normally each file is converted according to its extension and the input files do not have to be all the same, but if you want to use non-standard file names set the checkbox ""Use this format for all input files..."" ; If you want to combine multiple molecules (from one or more files) into a single molecule with disconnected parts, use option ""Join all input molecules...""; Wildcards in filenames; When an input filenames are typed in directly, any of them can contain the wildcard characters * and ? Typing Enter will replace these by a list of the matching files. The wildcarded names can be restored by typing Enter while holding down the Shift key. The original or the expanded versions will behave the same when the ""Convert"" button is",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:2696,Availability,down,down,2696," the mouse wheel, or by double clicking.; Selecting one or more new file names normally removes those already present, but they can instead be appended by holding the Control key down when leaving the file selection dialog.; Files can be also be dragged and dropped (e.g. from Windows Explorer), adding the file when the Control key is pressed, replacing the existing files when it is not.; Normally each file is converted according to its extension and the input files do not have to be all the same, but if you want to use non-standard file names set the checkbox ""Use this format for all input files..."" ; If you want to combine multiple molecules (from one or more files) into a single molecule with disconnected parts, use option ""Join all input molecules...""; Wildcards in filenames; When an input filenames are typed in directly, any of them can contain the wildcard characters * and ? Typing Enter will replace these by a list of the matching files. The wildcarded names can be restored by typing Enter while holding down the Shift key. The original or the expanded versions will behave the same when the ""Convert"" button is pressed.; By including the wildcard * in the both the input and output filenames you can carry out batch conversion. Suppose there were files first.smi, second.smi, third.smi. Using *.smi as the input filename and *.mol as the output filename would produce three files first.mol, second.mol and third.mol. If the output filename was NEW_*.mol the output files would be NEW_first.mol, etc. ; Local input; By checking the ""Input below..."" checkbox you can type the input text directly. The text box changes colour to remind you that it is this text and not the contents of any files that will be converted.; Output file; The output file name can be fully specified with a path, but if it is not, then it is considered to berelative to the input file path.; Graphical display; The chemical structures being converted can be displayed (as SVG) in an external program. By d",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:5507,Availability,error,error,5507," range of formats will usually not be required when OpenBabel is used regularly. You can restrict the choice offered in the dropdown boxes, which makes routine selection easier. Clicking ""Select set of formats"" on the View menu allows the formats to be displayed to be selected. Subsequently, clicking ""Use restricted set of formats"" on the View menu toggles this facility on and off.; Using a restricted set overcomes an irritating bug in the Windows version. In the file Open and Save dialogs the files displayed can be filtered by the current format, All Chemical Formats, or All Files. The All Chemical Formats filter will only display the first 30 possible formats (alphabetically). The All Files will indeed display all files and the conversion processes are unaffected.; Other features; Most of the interface parameters, such as the selected format and the window size and position are remembered between sessions.; Using the View menu, the input and output text boxes can be set not to wrap the text. At present you have to restart the program for this to take effect.; The message box at the top of the output text window receives program output on error and audit logging, and some progress reports. It can be expanded by dragging down the divider between the windows.; Example files; There are three chemical files in the executable folder to try out:; serotonin.mol which is has 3D atom coordinates;; oxamide.cml which is 2D and has a large number of properties that will be seen when converting to sdf.; FourSmallMols.cml which (unsurprisingly) contains four molecules with no atom coordinates and can be used to illustrate the handling of multiple molecules. Setting the output format to smi (which is easy to see), you can convert only the second and third molecules by entering 2 and 3 in the appropriate option boxes. Or convert only molecules with C-O single bonds by entering CO in the SMARTS option box. Please report bugs or suggestions for improvement to the OpenBabel website. ",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:5590,Availability,down,down,5590," range of formats will usually not be required when OpenBabel is used regularly. You can restrict the choice offered in the dropdown boxes, which makes routine selection easier. Clicking ""Select set of formats"" on the View menu allows the formats to be displayed to be selected. Subsequently, clicking ""Use restricted set of formats"" on the View menu toggles this facility on and off.; Using a restricted set overcomes an irritating bug in the Windows version. In the file Open and Save dialogs the files displayed can be filtered by the current format, All Chemical Formats, or All Files. The All Chemical Formats filter will only display the first 30 possible formats (alphabetically). The All Files will indeed display all files and the conversion processes are unaffected.; Other features; Most of the interface parameters, such as the selected format and the window size and position are remembered between sessions.; Using the View menu, the input and output text boxes can be set not to wrap the text. At present you have to restart the program for this to take effect.; The message box at the top of the output text window receives program output on error and audit logging, and some progress reports. It can be expanded by dragging down the divider between the windows.; Example files; There are three chemical files in the executable folder to try out:; serotonin.mol which is has 3D atom coordinates;; oxamide.cml which is 2D and has a large number of properties that will be seen when converting to sdf.; FourSmallMols.cml which (unsurprisingly) contains four molecules with no atom coordinates and can be used to illustrate the handling of multiple molecules. Setting the output format to smi (which is easy to see), you can convert only the second and third molecules by entering 2 and 3 in the appropriate option boxes. Or convert only molecules with C-O single bonds by entering CO in the SMARTS option box. Please report bugs or suggestions for improvement to the OpenBabel website. ",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:4700,Deployability,toggle,toggles,4700,"his Firefox but it can be changed from an item on the View menu. (For instance, Opera and Chrome work ok.) When ""Display in firefox"" (under the output file name) is checked, the structures will be shown in a new Firefox tab. With multiple molecules the display can be zoomed (mousewheel) and panned (dragging with mouse button depressed). Up to 100 molecules are easily handled but with more the system may be slow to manipulate. It may also be slow to generate, especially if 2D atom coordinates have to be calculated (e.g.from SMILES). A new Firefox tab is opened each time Convert is pressed.; Using a restricted set of formats; It is probable that most of the large range of formats will usually not be required when OpenBabel is used regularly. You can restrict the choice offered in the dropdown boxes, which makes routine selection easier. Clicking ""Select set of formats"" on the View menu allows the formats to be displayed to be selected. Subsequently, clicking ""Use restricted set of formats"" on the View menu toggles this facility on and off.; Using a restricted set overcomes an irritating bug in the Windows version. In the file Open and Save dialogs the files displayed can be filtered by the current format, All Chemical Formats, or All Files. The All Chemical Formats filter will only display the first 30 possible formats (alphabetically). The All Files will indeed display all files and the conversion processes are unaffected.; Other features; Most of the interface parameters, such as the selected format and the window size and position are remembered between sessions.; Using the View menu, the input and output text boxes can be set not to wrap the text. At present you have to restart the program for this to take effect.; The message box at the top of the output text window receives program output on error and audit logging, and some progress reports. It can be expanded by dragging down the divider between the windows.; Example files; There are three chemical files in th",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:164,Integrability,interface,interface,164,". OpenBabelGUI Help. OpenBabelGUI HelpBasic operation; OpenBabel converts chemical objects (currently molecules or reactions) from one file format to another. This interface is an alternative to a command line and has the same capabilities.; - Select the type of the type of the input file from the dropdown list.; - Click the ""..."" button and select the file. Its contents are displayed in the textbox below.; - Choose the output format and file in a similar way. You can merely display the; output without saving it by not selecting an output file or by checking ""Output below only.."".; - Click the ""Convert"" button.; The message window below the button gives the number of molecules converted, and the contents of the output file are displayed.; By default, all the molecules in an input file are converted if the output format allows multiple molecules.; Options; The options in the middle are those appropriate for the type of chemical object being converted (molecule or reaction) and the input and output formats. They are derived from the description text that is displayed with the -Hxxx option in the command line interface and with the ""Format info"" buttons here. You can switch off the display of any of the various types of option using the View menu, if the screen is getting too cluttered.; Multiple input files; You can select multiple input files in the input file dialog in the normal way (using the Control key in Windows). In the input filename box, each filename is displayed relative to the path shown just above the box, which is the path of the first file. You can display any of the files by moving the highlight with Tab/Shift Tab, Page Up/Down, the mouse wheel, or by double clicking.; Selecting one or more new file names normally removes those already present, but they can instead be appended by holding the Control key down when leaving the file selection dialog.; Files can be also be dragged and dropped (e.g. from Windows Explorer), adding the file when the Control k",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:624,Integrability,message,message,624,". OpenBabelGUI Help. OpenBabelGUI HelpBasic operation; OpenBabel converts chemical objects (currently molecules or reactions) from one file format to another. This interface is an alternative to a command line and has the same capabilities.; - Select the type of the type of the input file from the dropdown list.; - Click the ""..."" button and select the file. Its contents are displayed in the textbox below.; - Choose the output format and file in a similar way. You can merely display the; output without saving it by not selecting an output file or by checking ""Output below only.."".; - Click the ""Convert"" button.; The message window below the button gives the number of molecules converted, and the contents of the output file are displayed.; By default, all the molecules in an input file are converted if the output format allows multiple molecules.; Options; The options in the middle are those appropriate for the type of chemical object being converted (molecule or reaction) and the input and output formats. They are derived from the description text that is displayed with the -Hxxx option in the command line interface and with the ""Format info"" buttons here. You can switch off the display of any of the various types of option using the View menu, if the screen is getting too cluttered.; Multiple input files; You can select multiple input files in the input file dialog in the normal way (using the Control key in Windows). In the input filename box, each filename is displayed relative to the path shown just above the box, which is the path of the first file. You can display any of the files by moving the highlight with Tab/Shift Tab, Page Up/Down, the mouse wheel, or by double clicking.; Selecting one or more new file names normally removes those already present, but they can instead be appended by holding the Control key down when leaving the file selection dialog.; Files can be also be dragged and dropped (e.g. from Windows Explorer), adding the file when the Control k",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:1124,Integrability,interface,interface,1124,"ntly molecules or reactions) from one file format to another. This interface is an alternative to a command line and has the same capabilities.; - Select the type of the type of the input file from the dropdown list.; - Click the ""..."" button and select the file. Its contents are displayed in the textbox below.; - Choose the output format and file in a similar way. You can merely display the; output without saving it by not selecting an output file or by checking ""Output below only.."".; - Click the ""Convert"" button.; The message window below the button gives the number of molecules converted, and the contents of the output file are displayed.; By default, all the molecules in an input file are converted if the output format allows multiple molecules.; Options; The options in the middle are those appropriate for the type of chemical object being converted (molecule or reaction) and the input and output formats. They are derived from the description text that is displayed with the -Hxxx option in the command line interface and with the ""Format info"" buttons here. You can switch off the display of any of the various types of option using the View menu, if the screen is getting too cluttered.; Multiple input files; You can select multiple input files in the input file dialog in the normal way (using the Control key in Windows). In the input filename box, each filename is displayed relative to the path shown just above the box, which is the path of the first file. You can display any of the files by moving the highlight with Tab/Shift Tab, Page Up/Down, the mouse wheel, or by double clicking.; Selecting one or more new file names normally removes those already present, but they can instead be appended by holding the Control key down when leaving the file selection dialog.; Files can be also be dragged and dropped (e.g. from Windows Explorer), adding the file when the Control key is pressed, replacing the existing files when it is not.; Normally each file is converted acc",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:4501,Integrability,rout,routine,4501,"h, but if it is not, then it is considered to berelative to the input file path.; Graphical display; The chemical structures being converted can be displayed (as SVG) in an external program. By default this Firefox but it can be changed from an item on the View menu. (For instance, Opera and Chrome work ok.) When ""Display in firefox"" (under the output file name) is checked, the structures will be shown in a new Firefox tab. With multiple molecules the display can be zoomed (mousewheel) and panned (dragging with mouse button depressed). Up to 100 molecules are easily handled but with more the system may be slow to manipulate. It may also be slow to generate, especially if 2D atom coordinates have to be calculated (e.g.from SMILES). A new Firefox tab is opened each time Convert is pressed.; Using a restricted set of formats; It is probable that most of the large range of formats will usually not be required when OpenBabel is used regularly. You can restrict the choice offered in the dropdown boxes, which makes routine selection easier. Clicking ""Select set of formats"" on the View menu allows the formats to be displayed to be selected. Subsequently, clicking ""Use restricted set of formats"" on the View menu toggles this facility on and off.; Using a restricted set overcomes an irritating bug in the Windows version. In the file Open and Save dialogs the files displayed can be filtered by the current format, All Chemical Formats, or All Files. The All Chemical Formats filter will only display the first 30 possible formats (alphabetically). The All Files will indeed display all files and the conversion processes are unaffected.; Other features; Most of the interface parameters, such as the selected format and the window size and position are remembered between sessions.; Using the View menu, the input and output text boxes can be set not to wrap the text. At present you have to restart the program for this to take effect.; The message box at the top of the output text windo",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:5155,Integrability,interface,interface,5155,"d (e.g.from SMILES). A new Firefox tab is opened each time Convert is pressed.; Using a restricted set of formats; It is probable that most of the large range of formats will usually not be required when OpenBabel is used regularly. You can restrict the choice offered in the dropdown boxes, which makes routine selection easier. Clicking ""Select set of formats"" on the View menu allows the formats to be displayed to be selected. Subsequently, clicking ""Use restricted set of formats"" on the View menu toggles this facility on and off.; Using a restricted set overcomes an irritating bug in the Windows version. In the file Open and Save dialogs the files displayed can be filtered by the current format, All Chemical Formats, or All Files. The All Chemical Formats filter will only display the first 30 possible formats (alphabetically). The All Files will indeed display all files and the conversion processes are unaffected.; Other features; Most of the interface parameters, such as the selected format and the window size and position are remembered between sessions.; Using the View menu, the input and output text boxes can be set not to wrap the text. At present you have to restart the program for this to take effect.; The message box at the top of the output text window receives program output on error and audit logging, and some progress reports. It can be expanded by dragging down the divider between the windows.; Example files; There are three chemical files in the executable folder to try out:; serotonin.mol which is has 3D atom coordinates;; oxamide.cml which is 2D and has a large number of properties that will be seen when converting to sdf.; FourSmallMols.cml which (unsurprisingly) contains four molecules with no atom coordinates and can be used to illustrate the handling of multiple molecules. Setting the output format to smi (which is easy to see), you can convert only the second and third molecules by entering 2 and 3 in the appropriate option boxes. Or convert onl",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:5343,Integrability,wrap,wrap,5343,"t is probable that most of the large range of formats will usually not be required when OpenBabel is used regularly. You can restrict the choice offered in the dropdown boxes, which makes routine selection easier. Clicking ""Select set of formats"" on the View menu allows the formats to be displayed to be selected. Subsequently, clicking ""Use restricted set of formats"" on the View menu toggles this facility on and off.; Using a restricted set overcomes an irritating bug in the Windows version. In the file Open and Save dialogs the files displayed can be filtered by the current format, All Chemical Formats, or All Files. The All Chemical Formats filter will only display the first 30 possible formats (alphabetically). The All Files will indeed display all files and the conversion processes are unaffected.; Other features; Most of the interface parameters, such as the selected format and the window size and position are remembered between sessions.; Using the View menu, the input and output text boxes can be set not to wrap the text. At present you have to restart the program for this to take effect.; The message box at the top of the output text window receives program output on error and audit logging, and some progress reports. It can be expanded by dragging down the divider between the windows.; Example files; There are three chemical files in the executable folder to try out:; serotonin.mol which is has 3D atom coordinates;; oxamide.cml which is 2D and has a large number of properties that will be seen when converting to sdf.; FourSmallMols.cml which (unsurprisingly) contains four molecules with no atom coordinates and can be used to illustrate the handling of multiple molecules. Setting the output format to smi (which is easy to see), you can convert only the second and third molecules by entering 2 and 3 in the appropriate option boxes. Or convert only molecules with C-O single bonds by entering CO in the SMARTS option box. Please report bugs or suggestions for imp",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:5431,Integrability,message,message,5431," range of formats will usually not be required when OpenBabel is used regularly. You can restrict the choice offered in the dropdown boxes, which makes routine selection easier. Clicking ""Select set of formats"" on the View menu allows the formats to be displayed to be selected. Subsequently, clicking ""Use restricted set of formats"" on the View menu toggles this facility on and off.; Using a restricted set overcomes an irritating bug in the Windows version. In the file Open and Save dialogs the files displayed can be filtered by the current format, All Chemical Formats, or All Files. The All Chemical Formats filter will only display the first 30 possible formats (alphabetically). The All Files will indeed display all files and the conversion processes are unaffected.; Other features; Most of the interface parameters, such as the selected format and the window size and position are remembered between sessions.; Using the View menu, the input and output text boxes can be set not to wrap the text. At present you have to restart the program for this to take effect.; The message box at the top of the output text window receives program output on error and audit logging, and some progress reports. It can be expanded by dragging down the divider between the windows.; Example files; There are three chemical files in the executable folder to try out:; serotonin.mol which is has 3D atom coordinates;; oxamide.cml which is 2D and has a large number of properties that will be seen when converting to sdf.; FourSmallMols.cml which (unsurprisingly) contains four molecules with no atom coordinates and can be used to illustrate the handling of multiple molecules. Setting the output format to smi (which is easy to see), you can convert only the second and third molecules by entering 2 and 3 in the appropriate option boxes. Or convert only molecules with C-O single bonds by entering CO in the SMARTS option box. Please report bugs or suggestions for improvement to the OpenBabel website. ",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:5517,Security,audit,audit,5517," range of formats will usually not be required when OpenBabel is used regularly. You can restrict the choice offered in the dropdown boxes, which makes routine selection easier. Clicking ""Select set of formats"" on the View menu allows the formats to be displayed to be selected. Subsequently, clicking ""Use restricted set of formats"" on the View menu toggles this facility on and off.; Using a restricted set overcomes an irritating bug in the Windows version. In the file Open and Save dialogs the files displayed can be filtered by the current format, All Chemical Formats, or All Files. The All Chemical Formats filter will only display the first 30 possible formats (alphabetically). The All Files will indeed display all files and the conversion processes are unaffected.; Other features; Most of the interface parameters, such as the selected format and the window size and position are remembered between sessions.; Using the View menu, the input and output text boxes can be set not to wrap the text. At present you have to restart the program for this to take effect.; The message box at the top of the output text window receives program output on error and audit logging, and some progress reports. It can be expanded by dragging down the divider between the windows.; Example files; There are three chemical files in the executable folder to try out:; serotonin.mol which is has 3D atom coordinates;; oxamide.cml which is 2D and has a large number of properties that will be seen when converting to sdf.; FourSmallMols.cml which (unsurprisingly) contains four molecules with no atom coordinates and can be used to illustrate the handling of multiple molecules. Setting the output format to smi (which is easy to see), you can convert only the second and third molecules by entering 2 and 3 in the appropriate option boxes. Or convert only molecules with C-O single bonds by entering CO in the SMARTS option box. Please report bugs or suggestions for improvement to the OpenBabel website. ",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html:5523,Testability,log,logging,5523," range of formats will usually not be required when OpenBabel is used regularly. You can restrict the choice offered in the dropdown boxes, which makes routine selection easier. Clicking ""Select set of formats"" on the View menu allows the formats to be displayed to be selected. Subsequently, clicking ""Use restricted set of formats"" on the View menu toggles this facility on and off.; Using a restricted set overcomes an irritating bug in the Windows version. In the file Open and Save dialogs the files displayed can be filtered by the current format, All Chemical Formats, or All Files. The All Chemical Formats filter will only display the first 30 possible formats (alphabetically). The All Files will indeed display all files and the conversion processes are unaffected.; Other features; Most of the interface parameters, such as the selected format and the window size and position are remembered between sessions.; Using the View menu, the input and output text boxes can be set not to wrap the text. At present you have to restart the program for this to take effect.; The message box at the top of the output text window receives program output on error and audit logging, and some progress reports. It can be expanded by dragging down the divider between the windows.; Example files; There are three chemical files in the executable folder to try out:; serotonin.mol which is has 3D atom coordinates;; oxamide.cml which is 2D and has a large number of properties that will be seen when converting to sdf.; FourSmallMols.cml which (unsurprisingly) contains four molecules with no atom coordinates and can be used to illustrate the handling of multiple molecules. Setting the output format to smi (which is easy to see), you can convert only the second and third molecules by entering 2 and 3 in the appropriate option boxes. Or convert only molecules with C-O single bonds by entering CO in the SMARTS option box. Please report bugs or suggestions for improvement to the OpenBabel website. ",MatchSource.DOCS,doc/OpenBabelGUI.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/doc/OpenBabelGUI.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html:451,Availability,avail,available,451,". Open Babel: Python Scripting. Using the openbabel module with Python. The openbabel module is designed to allow Python scripts to use the C++ Open Babel library. The wrapper is generated using the SWIG package and provides access to almost all of the Open Babel interfaces via Python, including the base; classes OBMol, OBAtom, OBBond, and OBResidue, as well as the conversion framework OBConversion. As such, essentially any call in the C++ API is available to Python scripts with very little difference in syntax. This guide is designed to give examples of common Python syntax for the openbabel module and pointers to the appropriate sections of the API documentation. The example script below creates atoms and bonds one-by-one using the OBMol, OBAtom, and OBBond classes. from openbabel import openbabel. mol = openbabel.OBMol(); print 'Should print 0 (atoms)'; print mol.NumAtoms(). a = mol.NewAtom(); a.SetAtomicNum(6) # carbon atom; a.SetVector(0.0, 1.0, 2.0) # coordinates. b = mol.NewAtom(); mol.AddBond(1, 2, 1) # atoms indexed from 1; print 'Should print 2 (atoms)'; print mol.NumAtoms(); print 'Should print 1 (bond)'; print mol.NumBonds(). mol.Clear();. More commonly, Open Babel can be used to read in molecules using the OBConversion framework. The following script reads in molecular information (a SMI file) from a string, adds hydrogens, and writes out an MDL file as a string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.SetInAndOutFormats(""smi"", ""mdl""). obConversion.ReadString(mol, ""C1=CC=CS1""). print 'Should print 5 (atoms)'; print mol.NumAtoms(). mol.AddHydrogens(); print 'Should print 9 (atoms) after adding hydrogens'; print mol.NumAtoms(). outMDL = obConversion.WriteString(mol). The following script writes out a file using a filename, rather than reading and writing to a Python string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.S",MatchSource.DOCS,scripts/python/Examples.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html:168,Integrability,wrap,wrapper,168,". Open Babel: Python Scripting. Using the openbabel module with Python. The openbabel module is designed to allow Python scripts to use the C++ Open Babel library. The wrapper is generated using the SWIG package and provides access to almost all of the Open Babel interfaces via Python, including the base; classes OBMol, OBAtom, OBBond, and OBResidue, as well as the conversion framework OBConversion. As such, essentially any call in the C++ API is available to Python scripts with very little difference in syntax. This guide is designed to give examples of common Python syntax for the openbabel module and pointers to the appropriate sections of the API documentation. The example script below creates atoms and bonds one-by-one using the OBMol, OBAtom, and OBBond classes. from openbabel import openbabel. mol = openbabel.OBMol(); print 'Should print 0 (atoms)'; print mol.NumAtoms(). a = mol.NewAtom(); a.SetAtomicNum(6) # carbon atom; a.SetVector(0.0, 1.0, 2.0) # coordinates. b = mol.NewAtom(); mol.AddBond(1, 2, 1) # atoms indexed from 1; print 'Should print 2 (atoms)'; print mol.NumAtoms(); print 'Should print 1 (bond)'; print mol.NumBonds(). mol.Clear();. More commonly, Open Babel can be used to read in molecules using the OBConversion framework. The following script reads in molecular information (a SMI file) from a string, adds hydrogens, and writes out an MDL file as a string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.SetInAndOutFormats(""smi"", ""mdl""). obConversion.ReadString(mol, ""C1=CC=CS1""). print 'Should print 5 (atoms)'; print mol.NumAtoms(). mol.AddHydrogens(); print 'Should print 9 (atoms) after adding hydrogens'; print mol.NumAtoms(). outMDL = obConversion.WriteString(mol). The following script writes out a file using a filename, rather than reading and writing to a Python string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.S",MatchSource.DOCS,scripts/python/Examples.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html:264,Integrability,interface,interfaces,264,". Open Babel: Python Scripting. Using the openbabel module with Python. The openbabel module is designed to allow Python scripts to use the C++ Open Babel library. The wrapper is generated using the SWIG package and provides access to almost all of the Open Babel interfaces via Python, including the base; classes OBMol, OBAtom, OBBond, and OBResidue, as well as the conversion framework OBConversion. As such, essentially any call in the C++ API is available to Python scripts with very little difference in syntax. This guide is designed to give examples of common Python syntax for the openbabel module and pointers to the appropriate sections of the API documentation. The example script below creates atoms and bonds one-by-one using the OBMol, OBAtom, and OBBond classes. from openbabel import openbabel. mol = openbabel.OBMol(); print 'Should print 0 (atoms)'; print mol.NumAtoms(). a = mol.NewAtom(); a.SetAtomicNum(6) # carbon atom; a.SetVector(0.0, 1.0, 2.0) # coordinates. b = mol.NewAtom(); mol.AddBond(1, 2, 1) # atoms indexed from 1; print 'Should print 2 (atoms)'; print mol.NumAtoms(); print 'Should print 1 (bond)'; print mol.NumBonds(). mol.Clear();. More commonly, Open Babel can be used to read in molecules using the OBConversion framework. The following script reads in molecular information (a SMI file) from a string, adds hydrogens, and writes out an MDL file as a string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.SetInAndOutFormats(""smi"", ""mdl""). obConversion.ReadString(mol, ""C1=CC=CS1""). print 'Should print 5 (atoms)'; print mol.NumAtoms(). mol.AddHydrogens(); print 'Should print 9 (atoms) after adding hydrogens'; print mol.NumAtoms(). outMDL = obConversion.WriteString(mol). The following script writes out a file using a filename, rather than reading and writing to a Python string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.S",MatchSource.DOCS,scripts/python/Examples.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html:225,Security,access,access,225,". Open Babel: Python Scripting. Using the openbabel module with Python. The openbabel module is designed to allow Python scripts to use the C++ Open Babel library. The wrapper is generated using the SWIG package and provides access to almost all of the Open Babel interfaces via Python, including the base; classes OBMol, OBAtom, OBBond, and OBResidue, as well as the conversion framework OBConversion. As such, essentially any call in the C++ API is available to Python scripts with very little difference in syntax. This guide is designed to give examples of common Python syntax for the openbabel module and pointers to the appropriate sections of the API documentation. The example script below creates atoms and bonds one-by-one using the OBMol, OBAtom, and OBBond classes. from openbabel import openbabel. mol = openbabel.OBMol(); print 'Should print 0 (atoms)'; print mol.NumAtoms(). a = mol.NewAtom(); a.SetAtomicNum(6) # carbon atom; a.SetVector(0.0, 1.0, 2.0) # coordinates. b = mol.NewAtom(); mol.AddBond(1, 2, 1) # atoms indexed from 1; print 'Should print 2 (atoms)'; print mol.NumAtoms(); print 'Should print 1 (bond)'; print mol.NumBonds(). mol.Clear();. More commonly, Open Babel can be used to read in molecules using the OBConversion framework. The following script reads in molecular information (a SMI file) from a string, adds hydrogens, and writes out an MDL file as a string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.SetInAndOutFormats(""smi"", ""mdl""). obConversion.ReadString(mol, ""C1=CC=CS1""). print 'Should print 5 (atoms)'; print mol.NumAtoms(). mol.AddHydrogens(); print 'Should print 9 (atoms) after adding hydrogens'; print mol.NumAtoms(). outMDL = obConversion.WriteString(mol). The following script writes out a file using a filename, rather than reading and writing to a Python string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.S",MatchSource.DOCS,scripts/python/Examples.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html:523,Usability,guid,guide,523,". Open Babel: Python Scripting. Using the openbabel module with Python. The openbabel module is designed to allow Python scripts to use the C++ Open Babel library. The wrapper is generated using the SWIG package and provides access to almost all of the Open Babel interfaces via Python, including the base; classes OBMol, OBAtom, OBBond, and OBResidue, as well as the conversion framework OBConversion. As such, essentially any call in the C++ API is available to Python scripts with very little difference in syntax. This guide is designed to give examples of common Python syntax for the openbabel module and pointers to the appropriate sections of the API documentation. The example script below creates atoms and bonds one-by-one using the OBMol, OBAtom, and OBBond classes. from openbabel import openbabel. mol = openbabel.OBMol(); print 'Should print 0 (atoms)'; print mol.NumAtoms(). a = mol.NewAtom(); a.SetAtomicNum(6) # carbon atom; a.SetVector(0.0, 1.0, 2.0) # coordinates. b = mol.NewAtom(); mol.AddBond(1, 2, 1) # atoms indexed from 1; print 'Should print 2 (atoms)'; print mol.NumAtoms(); print 'Should print 1 (bond)'; print mol.NumBonds(). mol.Clear();. More commonly, Open Babel can be used to read in molecules using the OBConversion framework. The following script reads in molecular information (a SMI file) from a string, adds hydrogens, and writes out an MDL file as a string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.SetInAndOutFormats(""smi"", ""mdl""). obConversion.ReadString(mol, ""C1=CC=CS1""). print 'Should print 5 (atoms)'; print mol.NumAtoms(). mol.AddHydrogens(); print 'Should print 9 (atoms) after adding hydrogens'; print mol.NumAtoms(). outMDL = obConversion.WriteString(mol). The following script writes out a file using a filename, rather than reading and writing to a Python string. from openbabel import openbabel. mol = openbabel.OBMol(); obConversion = openbabel.OBConversion(); obConversion.S",MatchSource.DOCS,scripts/python/Examples.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/Examples.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:3781,Availability,avail,available,3781,"kref__' of 'Fingerprint' objects>list of weak references to the object (if defined); .  ; class Molecule(__builtin__.object);    ; Represent a Pybel Molecule.;  ; Required parameter:;    OBMol -- an Open Babel OBMol or any type of cinfony Molecule;  ; Attributes:;    atoms, charge, conformers, data, dim, energy, exactmass, formula, ;    molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; local",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:3857,Availability,avail,available,3857,"__builtin__.object);    ; Represent a Pybel Molecule.;  ; Required parameter:;    OBMol -- an Open Babel OBMol or any type of cinfony Molecule;  ; Attributes:;    atoms, charge, conformers, data, dim, energy, exactmass, formula, ;    molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    fo",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:4075,Availability,avail,available,4075,"formula, ;    molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called befo",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:4944,Availability,avail,available,4944,"cular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:5364,Availability,avail,available,5364,"   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers;",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:5843,Availability,avail,available,5843," list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers; get = conformers(self). data; get = data(self). dim; get = dim(self). energy; get = energy(self). exactmass; get = exactmass(self). formula; get = formula(self). molwt; get = molwt(self). spin; get = spin(self). sssr; get = sssr(self). title; get = _gettitle(self). set = _settitle(self, val). unitcell; get = unitcell(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Molecule' objects>list of weak references to the object (if defined); .  ; class MoleculeData(__builtin_",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:8673,Availability,avail,available,8673,"em__(self, key); __init__(self, obmol); __iter__(self); __len__(self); __repr__(self); __setitem__(self, key, value); clear(self); has_key(self, key); items(self); iteritems(self); keys(self); update(self, dictionary); values(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'MoleculeData' objects>list of weak references to the object (if defined); .  ; class Outputfile(__builtin__.object);    ; Represent a file to which *output* is to be sent.;  ; Although it's possible to write a single molecule to a file by; calling the write() method of a molecule, if multiple molecules; are to be written to the same file you should use the Outputfile; class.;  ; Required parameters:;    format - see the outformats variable for a list of available;             output formats;    filename;  ; Optional parameters:;    overwrite -- if the output file already exists, should it;                be overwritten? (default is False);                ; Methods:;    write(molecule);    close() ;  ; Methods defined here:; __init__(self, format, filename, overwrite=False); close(self)Close the Outputfile to further writing.; write(self, molecule)Write a molecule to the output file.;  ; Required parameters:;    molecule. Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Outputfile' objects>list of weak references to the object (if defined); .  ; class Smarts(__builtin__.object);    ; A Smarts Pattern Matcher;  ; Required parameters:;    smartspattern;  ; Methods:;    findall(molecule);  ; Example:; >>> mol = readstring(""smi"",""CCN(CC)CC"") # triethylamine; >>> smarts = Smarts(""[#6][#6]"") # Matches an ethyl group; >>> print smarts.findall(mol) ; [(1, 2), (4, 5), (6, 7)];  ; The numbers returned are the indices (starting from 1) of the atoms; that match the SMARTS pattern. In",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:10525,Availability,avail,available,10525,"CCN(CC)CC"") # triethylamine; >>> smarts = Smarts(""[#6][#6]"") # Matches an ethyl group; >>> print smarts.findall(mol) ; [(1, 2), (4, 5), (6, 7)];  ; The numbers returned are the indices (starting from 1) of the atoms; that match the SMARTS pattern. In this case, there are three matches; for each of the three ethyl groups in the molecule. ;  ; Methods defined here:; __init__(self, smartspattern)Initialise with a SMARTS pattern.; findall(self, molecule)Find all matches of the SMARTS pattern to a particular molecule.;  ; Required parameters:;    molecule. Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Smarts' objects>list of weak references to the object (if defined).  ; Functions;        ; readfile(format, filename)Iterate over the molecules in a file.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    filename;  ; You can access the first molecule in a file using the next() method; of the iterator:;     mol = readfile(""smi"", ""myfile.smi"").next();     ; You can make a list of the molecules in a file using:;     mols = list(readfile(""smi"", ""myfile.smi""));     ; You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"",""head.sdf""):; ...     atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; readstring(format, string)Read in a molecule from a string.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    string;  ; Example:; >>> input = ""C1=CC=CS1""; >>> mymol = readstring(""smi"",input); >>> len(mymol.atoms); 5.  ; Data;        ; descs = ['LogP', 'MR', 'TPSA']; forcefields = ['uff', 'mmff94', 'ghemical']; fps = ['FP2', 'FP3', 'FP4']; informats = {'acr': 'ACR format', 'adfout': 'ADF output format', 'alc': 'Alchemy format', 'arc': 'Accelrys/MSI Bios",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:11185,Availability,avail,available,11185,"ctproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Smarts' objects>list of weak references to the object (if defined).  ; Functions;        ; readfile(format, filename)Iterate over the molecules in a file.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    filename;  ; You can access the first molecule in a file using the next() method; of the iterator:;     mol = readfile(""smi"", ""myfile.smi"").next();     ; You can make a list of the molecules in a file using:;     mols = list(readfile(""smi"", ""myfile.smi""));     ; You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"",""head.sdf""):; ...     atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; readstring(format, string)Read in a molecule from a string.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    string;  ; Example:; >>> input = ""C1=CC=CS1""; >>> mymol = readstring(""smi"",input); >>> len(mymol.atoms); 5.  ; Data;        ; descs = ['LogP', 'MR', 'TPSA']; forcefields = ['uff', 'mmff94', 'ghemical']; fps = ['FP2', 'FP3', 'FP4']; informats = {'acr': 'ACR format', 'adfout': 'ADF output format', 'alc': 'Alchemy format', 'arc': 'Accelrys/MSI Biosym/Insight II CAR format', 'bgf': 'MSI BGF format', 'box': 'Dock 3.5 Box format', 'bs': 'Ball and Stick format', 'c3d1': 'Chem3D Cartesian 1 format', 'c3d2': 'Chem3D Cartesian 2 format', 'caccrt': 'Cacao Cartesian format', ...}; oasa = None; operations = ['Gen3D']; outformats = {'adf': 'ADF cartesian input format', 'alc': 'Alchemy format', 'bgf': 'MSI BGF format', 'box': 'Dock 3.5 Box format', 'bs': 'Ball and Stick format', 'c3d1': 'Chem3D Cartesian 1 format', 'c3d2': 'Chem3D Cartesian 2 format', 'cac': 'CAChe MolStruct format', 'caccrt': 'Cacao Cartesian format', 'cache': 'CAChe MolStruct format', ...}. ",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:4156,Deployability,update,update,4156," more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; ",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:4347,Deployability,update,update,4347,"er the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generate",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:4357,Deployability,update,update,4357,"er the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generate",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:8014,Deployability,update,update,8014,"the object (if defined); .  ; class MoleculeData(__builtin__.object);    ; Store molecule data in a dictionary-type object;  ; Required parameters:;   obmol -- an Open Babel OBMol ;  ; Methods and accessor methods are like those of a dictionary except; that the data is retrieved on-the-fly from the underlying OBMol.;  ; Example:; >>> mol = readfile(""sdf"", 'head.sdf').next(); >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0041  25.10.2001', 'NSC': '1'}; >>> print len(data), data.keys(), data.has_key(""NSC""); 2 ['Comment', 'NSC'] True; >>> print data['Comment']; CORINA 2.61 0041  25.10.2001; >>> data['Comment'] = 'This is a new comment'; >>> for k,v in data.iteritems():; ...    print k, ""-->"", v; Comment --> This is a new comment; NSC --> 1; >>> del data['NSC']; >>> print len(data), data.keys(), data.has_key(""NSC""); 1 ['Comment'] False ;  ; Methods defined here:; __contains__(self, key); __delitem__(self, key); __getitem__(self, key); __init__(self, obmol); __iter__(self); __len__(self); __repr__(self); __setitem__(self, key, value); clear(self); has_key(self, key); items(self); iteritems(self); keys(self); update(self, dictionary); values(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'MoleculeData' objects>list of weak references to the object (if defined); .  ; class Outputfile(__builtin__.object);    ; Represent a file to which *output* is to be sent.;  ; Although it's possible to write a single molecule to a file by; calling the write() method of a molecule, if multiple molecules; are to be written to the same file you should use the Outputfile; class.;  ; Required parameters:;    format - see the outformats variable for a list of available;             output formats;    filename;  ; Optional parameters:;    overwrite -- if the output file already exists, should it;                be overwritten? (default is False);               ",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:3019,Energy Efficiency,charge,charge,3019,"bject);    ; A Molecular Fingerprint.;  ; Required parameters:;    fingerprint -- a vector calculated by OBFingerprint.FindFingerprint();  ; Attributes:;    fp -- the underlying fingerprint object;    bits -- a list of bits set in the Fingerprint;  ; Methods:;    The ""|"" operator can be used to calculate the Tanimoto coeff. For example,;    given two Fingerprints 'a', and 'b', the Tanimoto coefficient is given by:;       tanimoto = a | b ;  ; Methods defined here:; __init__(self, fingerprint); __or__(self, other); __str__(self). Properties defined here:; bits; get = bits(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Fingerprint' objects>list of weak references to the object (if defined); .  ; class Molecule(__builtin__.object);    ; Represent a Pybel Molecule.;  ; Required parameter:;    OBMol -- an Open Babel OBMol or any type of cinfony Molecule;  ; Attributes:;    atoms, charge, conformers, data, dim, energy, exactmass, formula, ;    molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (defaul",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:3050,Energy Efficiency,energy,energy,3050,"bject);    ; A Molecular Fingerprint.;  ; Required parameters:;    fingerprint -- a vector calculated by OBFingerprint.FindFingerprint();  ; Attributes:;    fp -- the underlying fingerprint object;    bits -- a list of bits set in the Fingerprint;  ; Methods:;    The ""|"" operator can be used to calculate the Tanimoto coeff. For example,;    given two Fingerprints 'a', and 'b', the Tanimoto coefficient is given by:;       tanimoto = a | b ;  ; Methods defined here:; __init__(self, fingerprint); __or__(self, other); __str__(self). Properties defined here:; bits; get = bits(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Fingerprint' objects>list of weak references to the object (if defined); .  ; class Molecule(__builtin__.object);    ; Represent a Pybel Molecule.;  ; Required parameter:;    OBMol -- an Open Babel OBMol or any type of cinfony Molecule;  ; Attributes:;    atoms, charge, conformers, data, dim, energy, exactmass, formula, ;    molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (defaul",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:6305,Energy Efficiency,charge,charge,6305,"elds variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers; get = conformers(self). data; get = data(self). dim; get = dim(self). energy; get = energy(self). exactmass; get = exactmass(self). formula; get = formula(self). molwt; get = molwt(self). spin; get = spin(self). sssr; get = sssr(self). title; get = _gettitle(self). set = _settitle(self, val). unitcell; get = unitcell(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Molecule' objects>list of weak references to the object (if defined); .  ; class MoleculeData(__builtin__.object);    ; Store molecule data in a dictionary-type object;  ; Required parameters:;   obmol -- an Open Babel OBMol ;  ; Methods and accessor methods are like those of a dictionary except; that the data is retrieved on-the-fly from the underlying OBMol.;  ; Example:; >>> mol = readfile(""sdf"", 'head.sdf').next(); >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:6319,Energy Efficiency,charge,charge,6319,"elds variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers; get = conformers(self). data; get = data(self). dim; get = dim(self). energy; get = energy(self). exactmass; get = exactmass(self). formula; get = formula(self). molwt; get = molwt(self). spin; get = spin(self). sssr; get = sssr(self). title; get = _gettitle(self). set = _settitle(self, val). unitcell; get = unitcell(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Molecule' objects>list of weak references to the object (if defined); .  ; class MoleculeData(__builtin__.object);    ; Store molecule data in a dictionary-type object;  ; Required parameters:;   obmol -- an Open Babel OBMol ;  ; Methods and accessor methods are like those of a dictionary except; that the data is retrieved on-the-fly from the underlying OBMol.;  ; Example:; >>> mol = readfile(""sdf"", 'head.sdf').next(); >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:6415,Energy Efficiency,energy,energy,6415,"inates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers; get = conformers(self). data; get = data(self). dim; get = dim(self). energy; get = energy(self). exactmass; get = exactmass(self). formula; get = formula(self). molwt; get = molwt(self). spin; get = spin(self). sssr; get = sssr(self). title; get = _gettitle(self). set = _settitle(self, val). unitcell; get = unitcell(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Molecule' objects>list of weak references to the object (if defined); .  ; class MoleculeData(__builtin__.object);    ; Store molecule data in a dictionary-type object;  ; Required parameters:;   obmol -- an Open Babel OBMol ;  ; Methods and accessor methods are like those of a dictionary except; that the data is retrieved on-the-fly from the underlying OBMol.;  ; Example:; >>> mol = readfile(""sdf"", 'head.sdf').next(); >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0041  25.10.2001', 'NSC': '1'}; >>> print len(data), data.keys(), data.has_key(""NSC""); 2 ['Comment', 'NSC'] Tru",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:6429,Energy Efficiency,energy,energy,6429,"inates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers; get = conformers(self). data; get = data(self). dim; get = dim(self). energy; get = energy(self). exactmass; get = exactmass(self). formula; get = formula(self). molwt; get = molwt(self). spin; get = spin(self). sssr; get = sssr(self). title; get = _gettitle(self). set = _settitle(self, val). unitcell; get = unitcell(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Molecule' objects>list of weak references to the object (if defined); .  ; class MoleculeData(__builtin__.object);    ; Store molecule data in a dictionary-type object;  ; Required parameters:;   obmol -- an Open Babel OBMol ;  ; Methods and accessor methods are like those of a dictionary except; that the data is retrieved on-the-fly from the underlying OBMol.;  ; Example:; >>> mol = readfile(""sdf"", 'head.sdf').next(); >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0041  25.10.2001', 'NSC': '1'}; >>> print len(data), data.keys(), data.has_key(""NSC""); 2 ['Comment', 'NSC'] Tru",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:94,Modifiability,variab,variables,94,". Python: module pybel.  ;  pybel; pybel - A Python module for accessing OpenBabel;  ; Global variables:;   ob - the underlying SWIG bindings for OpenBabel;   informats - a dictionary of supported input formats;   outformats - a dictionary of supported output formats;   descs - a list of supported descriptors;   fps - a list of supported fingerprint types;   forcefields - a list of supported forcefields.  ; Modules;        ; Image; math; openbabel; os; ImageTk; tempfile; Tkinter.  ; Classes;        . __builtin__.object. Atom; Fingerprint; Molecule; MoleculeData; Outputfile; Smarts.  ; class Atom(__builtin__.object);    ; Represent a Pybel atom.;  ; Required parameter:;    OBAtom -- an Open Babel OBAtom;     ; Attributes:;    atomicmass, atomicnum, cidx, coords, coordidx, exactmass,;    formalcharge, heavyvalence, heterovalence, hyb, idx,;    implicitvalence, isotope, partialcharge, spin, type,;    valence, vector.;  ; (refer to the Open Babel library documentation for more info).;  ; The original Open Babel atom can be accessed using the attribute:;    OBAtom ;  ; Methods defined here:; __init__(self, OBAtom); __str__(self). Properties defined here:; atomicmass; get = atomicmass(self). atomicnum; get = atomicnum(self). cidx; get = cidx(self). coordidx; get = coordidx(self). coords; get = coords(self). exactmass; get = exactmass(self). formalcharge; get = formalcharge(self). heavyvalence; get = heavyvalence(self). heterovalence; get = heterovalence(self). hyb; get = hyb(self). idx; get = idx(self). implicitvalence; get = implicitvalence(self). isotope; get = isotope(self). partialcharge; get = partialcharge(self). spin; get = spin(self). type; get = type(self). valence; get = valence(self). vector; get = vector(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Atom' objects>list of weak references to the object (if defined); .  ; class Fingerprint(__bu",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:1841,Modifiability,variab,variables,1841,"itvalence, isotope, partialcharge, spin, type,;    valence, vector.;  ; (refer to the Open Babel library documentation for more info).;  ; The original Open Babel atom can be accessed using the attribute:;    OBAtom ;  ; Methods defined here:; __init__(self, OBAtom); __str__(self). Properties defined here:; atomicmass; get = atomicmass(self). atomicnum; get = atomicnum(self). cidx; get = cidx(self). coordidx; get = coordidx(self). coords; get = coords(self). exactmass; get = exactmass(self). formalcharge; get = formalcharge(self). heavyvalence; get = heavyvalence(self). heterovalence; get = heterovalence(self). hyb; get = hyb(self). idx; get = idx(self). implicitvalence; get = implicitvalence(self). isotope; get = isotope(self). partialcharge; get = partialcharge(self). spin; get = spin(self). type; get = type(self). valence; get = valence(self). vector; get = vector(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Atom' objects>list of weak references to the object (if defined); .  ; class Fingerprint(__builtin__.object);    ; A Molecular Fingerprint.;  ; Required parameters:;    fingerprint -- a vector calculated by OBFingerprint.FindFingerprint();  ; Attributes:;    fp -- the underlying fingerprint object;    bits -- a list of bits set in the Fingerprint;  ; Methods:;    The ""|"" operator can be used to calculate the Tanimoto coeff. For example,;    given two Fingerprints 'a', and 'b', the Tanimoto coefficient is given by:;       tanimoto = a | b ;  ; Methods defined here:; __init__(self, fingerprint); __or__(self, other); __str__(self). Properties defined here:; bits; get = bits(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Fingerprint' objects>list of weak references to the object (if defined); .  ; class Molecule(__builtin__.",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:2689,Modifiability,variab,variables,2689,"self). vector; get = vector(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Atom' objects>list of weak references to the object (if defined); .  ; class Fingerprint(__builtin__.object);    ; A Molecular Fingerprint.;  ; Required parameters:;    fingerprint -- a vector calculated by OBFingerprint.FindFingerprint();  ; Attributes:;    fp -- the underlying fingerprint object;    bits -- a list of bits set in the Fingerprint;  ; Methods:;    The ""|"" operator can be used to calculate the Tanimoto coeff. For example,;    given two Fingerprints 'a', and 'b', the Tanimoto coefficient is given by:;       tanimoto = a | b ;  ; Methods defined here:; __init__(self, fingerprint); __or__(self, other); __str__(self). Properties defined here:; bits; get = bits(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Fingerprint' objects>list of weak references to the object (if defined); .  ; class Molecule(__builtin__.object);    ; Represent a Pybel Molecule.;  ; Required parameter:;    OBMol -- an Open Babel OBMol or any type of cinfony Molecule;  ; Attributes:;    atoms, charge, conformers, data, dim, energy, exactmass, formula, ;    molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:3834,Modifiability,variab,variable,3834,"__builtin__.object);    ; Represent a Pybel Molecule.;  ; Required parameter:;    OBMol -- an Open Babel OBMol or any type of cinfony Molecule;  ; Attributes:;    atoms, charge, conformers, data, dim, energy, exactmass, formula, ;    molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    fo",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:4049,Modifiability,variab,variable,4049,"formula, ;    molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called befo",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:4903,Modifiability,variab,variable,4903,"cular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:5323,Modifiability,variab,variable,5323,"   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers;",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:5820,Modifiability,variab,variable,5820," list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers; get = conformers(self). data; get = data(self). dim; get = dim(self). energy; get = energy(self). exactmass; get = exactmass(self). formula; get = formula(self). molwt; get = molwt(self). spin; get = spin(self). sssr; get = sssr(self). title; get = _gettitle(self). set = _settitle(self, val). unitcell; get = unitcell(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Molecule' objects>list of weak references to the object (if defined); .  ; class MoleculeData(__builtin_",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:6765,Modifiability,variab,variables,6765,":;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers; get = conformers(self). data; get = data(self). dim; get = dim(self). energy; get = energy(self). exactmass; get = exactmass(self). formula; get = formula(self). molwt; get = molwt(self). spin; get = spin(self). sssr; get = sssr(self). title; get = _gettitle(self). set = _settitle(self, val). unitcell; get = unitcell(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Molecule' objects>list of weak references to the object (if defined); .  ; class MoleculeData(__builtin__.object);    ; Store molecule data in a dictionary-type object;  ; Required parameters:;   obmol -- an Open Babel OBMol ;  ; Methods and accessor methods are like those of a dictionary except; that the data is retrieved on-the-fly from the underlying OBMol.;  ; Example:; >>> mol = readfile(""sdf"", 'head.sdf').next(); >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0041  25.10.2001', 'NSC': '1'}; >>> print len(data), data.keys(), data.has_key(""NSC""); 2 ['Comment', 'NSC'] True; >>> print data['Comment']; CORINA 2.61 0041  25.10.2001; >>> data['Comment'] = 'This is a new comment'; >>> for k,v in data.iteritems():; ...    print k, ""-->"", v; Comment --> This is a new comment; NSC --> 1; >>> del data['NSC']; >>> print len(data), data.keys(), data.has_key(""NSC""); 1 ['Comment'] False ;  ; Methods defined here:; __contains__(self, key",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:8148,Modifiability,variab,variables,8148,"m the underlying OBMol.;  ; Example:; >>> mol = readfile(""sdf"", 'head.sdf').next(); >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0041  25.10.2001', 'NSC': '1'}; >>> print len(data), data.keys(), data.has_key(""NSC""); 2 ['Comment', 'NSC'] True; >>> print data['Comment']; CORINA 2.61 0041  25.10.2001; >>> data['Comment'] = 'This is a new comment'; >>> for k,v in data.iteritems():; ...    print k, ""-->"", v; Comment --> This is a new comment; NSC --> 1; >>> del data['NSC']; >>> print len(data), data.keys(), data.has_key(""NSC""); 1 ['Comment'] False ;  ; Methods defined here:; __contains__(self, key); __delitem__(self, key); __getitem__(self, key); __init__(self, obmol); __iter__(self); __len__(self); __repr__(self); __setitem__(self, key, value); clear(self); has_key(self, key); items(self); iteritems(self); keys(self); update(self, dictionary); values(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'MoleculeData' objects>list of weak references to the object (if defined); .  ; class Outputfile(__builtin__.object);    ; Represent a file to which *output* is to be sent.;  ; Although it's possible to write a single molecule to a file by; calling the write() method of a molecule, if multiple molecules; are to be written to the same file you should use the Outputfile; class.;  ; Required parameters:;    format - see the outformats variable for a list of available;             output formats;    filename;  ; Optional parameters:;    overwrite -- if the output file already exists, should it;                be overwritten? (default is False);                ; Methods:;    write(molecule);    close() ;  ; Methods defined here:; __init__(self, format, filename, overwrite=False); close(self)Close the Outputfile to further writing.; write(self, molecule)Write a molecule to the output file.;  ; Required parameters:;    molecule. Data and other attribu",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:8650,Modifiability,variab,variable,8650,"em__(self, key); __init__(self, obmol); __iter__(self); __len__(self); __repr__(self); __setitem__(self, key, value); clear(self); has_key(self, key); items(self); iteritems(self); keys(self); update(self, dictionary); values(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'MoleculeData' objects>list of weak references to the object (if defined); .  ; class Outputfile(__builtin__.object);    ; Represent a file to which *output* is to be sent.;  ; Although it's possible to write a single molecule to a file by; calling the write() method of a molecule, if multiple molecules; are to be written to the same file you should use the Outputfile; class.;  ; Required parameters:;    format - see the outformats variable for a list of available;             output formats;    filename;  ; Optional parameters:;    overwrite -- if the output file already exists, should it;                be overwritten? (default is False);                ; Methods:;    write(molecule);    close() ;  ; Methods defined here:; __init__(self, format, filename, overwrite=False); close(self)Close the Outputfile to further writing.; write(self, molecule)Write a molecule to the output file.;  ; Required parameters:;    molecule. Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Outputfile' objects>list of weak references to the object (if defined); .  ; class Smarts(__builtin__.object);    ; A Smarts Pattern Matcher;  ; Required parameters:;    smartspattern;  ; Methods:;    findall(molecule);  ; Example:; >>> mol = readstring(""smi"",""CCN(CC)CC"") # triethylamine; >>> smarts = Smarts(""[#6][#6]"") # Matches an ethyl group; >>> print smarts.findall(mol) ; [(1, 2), (4, 5), (6, 7)];  ; The numbers returned are the indices (starting from 1) of the atoms; that match the SMARTS pattern. In",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:9244,Modifiability,variab,variables,9244,"e object (if defined); .  ; class Outputfile(__builtin__.object);    ; Represent a file to which *output* is to be sent.;  ; Although it's possible to write a single molecule to a file by; calling the write() method of a molecule, if multiple molecules; are to be written to the same file you should use the Outputfile; class.;  ; Required parameters:;    format - see the outformats variable for a list of available;             output formats;    filename;  ; Optional parameters:;    overwrite -- if the output file already exists, should it;                be overwritten? (default is False);                ; Methods:;    write(molecule);    close() ;  ; Methods defined here:; __init__(self, format, filename, overwrite=False); close(self)Close the Outputfile to further writing.; write(self, molecule)Write a molecule to the output file.;  ; Required parameters:;    molecule. Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Outputfile' objects>list of weak references to the object (if defined); .  ; class Smarts(__builtin__.object);    ; A Smarts Pattern Matcher;  ; Required parameters:;    smartspattern;  ; Methods:;    findall(molecule);  ; Example:; >>> mol = readstring(""smi"",""CCN(CC)CC"") # triethylamine; >>> smarts = Smarts(""[#6][#6]"") # Matches an ethyl group; >>> print smarts.findall(mol) ; [(1, 2), (4, 5), (6, 7)];  ; The numbers returned are the indices (starting from 1) of the atoms; that match the SMARTS pattern. In this case, there are three matches; for each of the three ethyl groups in the molecule. ;  ; Methods defined here:; __init__(self, smartspattern)Initialise with a SMARTS pattern.; findall(self, molecule)Find all matches of the SMARTS pattern to a particular molecule.;  ; Required parameters:;    molecule. Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attr",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:10224,Modifiability,variab,variables,10224," variables (if defined); __weakref__ = <attribute '__weakref__' of 'Outputfile' objects>list of weak references to the object (if defined); .  ; class Smarts(__builtin__.object);    ; A Smarts Pattern Matcher;  ; Required parameters:;    smartspattern;  ; Methods:;    findall(molecule);  ; Example:; >>> mol = readstring(""smi"",""CCN(CC)CC"") # triethylamine; >>> smarts = Smarts(""[#6][#6]"") # Matches an ethyl group; >>> print smarts.findall(mol) ; [(1, 2), (4, 5), (6, 7)];  ; The numbers returned are the indices (starting from 1) of the atoms; that match the SMARTS pattern. In this case, there are three matches; for each of the three ethyl groups in the molecule. ;  ; Methods defined here:; __init__(self, smartspattern)Initialise with a SMARTS pattern.; findall(self, molecule)Find all matches of the SMARTS pattern to a particular molecule.;  ; Required parameters:;    molecule. Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Smarts' objects>list of weak references to the object (if defined).  ; Functions;        ; readfile(format, filename)Iterate over the molecules in a file.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    filename;  ; You can access the first molecule in a file using the next() method; of the iterator:;     mol = readfile(""smi"", ""myfile.smi"").next();     ; You can make a list of the molecules in a file using:;     mols = list(readfile(""smi"", ""myfile.smi""));     ; You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"",""head.sdf""):; ...     atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; readstring(format, string)Read in a molecule from a string.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    string;  ; Example",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:10502,Modifiability,variab,variable,10502,"CCN(CC)CC"") # triethylamine; >>> smarts = Smarts(""[#6][#6]"") # Matches an ethyl group; >>> print smarts.findall(mol) ; [(1, 2), (4, 5), (6, 7)];  ; The numbers returned are the indices (starting from 1) of the atoms; that match the SMARTS pattern. In this case, there are three matches; for each of the three ethyl groups in the molecule. ;  ; Methods defined here:; __init__(self, smartspattern)Initialise with a SMARTS pattern.; findall(self, molecule)Find all matches of the SMARTS pattern to a particular molecule.;  ; Required parameters:;    molecule. Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Smarts' objects>list of weak references to the object (if defined).  ; Functions;        ; readfile(format, filename)Iterate over the molecules in a file.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    filename;  ; You can access the first molecule in a file using the next() method; of the iterator:;     mol = readfile(""smi"", ""myfile.smi"").next();     ; You can make a list of the molecules in a file using:;     mols = list(readfile(""smi"", ""myfile.smi""));     ; You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"",""head.sdf""):; ...     atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; readstring(format, string)Read in a molecule from a string.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    string;  ; Example:; >>> input = ""C1=CC=CS1""; >>> mymol = readstring(""smi"",input); >>> len(mymol.atoms); 5.  ; Data;        ; descs = ['LogP', 'MR', 'TPSA']; forcefields = ['uff', 'mmff94', 'ghemical']; fps = ['FP2', 'FP3', 'FP4']; informats = {'acr': 'ACR format', 'adfout': 'ADF output format', 'alc': 'Alchemy format', 'arc': 'Accelrys/MSI Bios",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:11162,Modifiability,variab,variable,11162,"ctproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Smarts' objects>list of weak references to the object (if defined).  ; Functions;        ; readfile(format, filename)Iterate over the molecules in a file.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    filename;  ; You can access the first molecule in a file using the next() method; of the iterator:;     mol = readfile(""smi"", ""myfile.smi"").next();     ; You can make a list of the molecules in a file using:;     mols = list(readfile(""smi"", ""myfile.smi""));     ; You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"",""head.sdf""):; ...     atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; readstring(format, string)Read in a molecule from a string.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    string;  ; Example:; >>> input = ""C1=CC=CS1""; >>> mymol = readstring(""smi"",input); >>> len(mymol.atoms); 5.  ; Data;        ; descs = ['LogP', 'MR', 'TPSA']; forcefields = ['uff', 'mmff94', 'ghemical']; fps = ['FP2', 'FP3', 'FP4']; informats = {'acr': 'ACR format', 'adfout': 'ADF output format', 'alc': 'Alchemy format', 'arc': 'Accelrys/MSI Biosym/Insight II CAR format', 'bgf': 'MSI BGF format', 'box': 'Dock 3.5 Box format', 'bs': 'Ball and Stick format', 'c3d1': 'Chem3D Cartesian 1 format', 'c3d2': 'Chem3D Cartesian 2 format', 'caccrt': 'Cacao Cartesian format', ...}; oasa = None; operations = ['Gen3D']; outformats = {'adf': 'ADF cartesian input format', 'alc': 'Alchemy format', 'bgf': 'MSI BGF format', 'box': 'Dock 3.5 Box format', 'bs': 'Ball and Stick format', 'c3d1': 'Chem3D Cartesian 1 format', 'c3d2': 'Chem3D Cartesian 2 format', 'cac': 'CAChe MolStruct format', 'caccrt': 'Cacao Cartesian format', 'cache': 'CAChe MolStruct format', ...}. ",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:4793,Performance,optimiz,optimize,4793,"all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional pa",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:5077,Performance,optimiz,optimization,5077,"he;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (default is None);   update -- update the coordinates of the atoms to those;             determined by the structure diagram generator;             (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (d",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:5489,Performance,optimiz,optimization,5489,"  (default is False);   usecoords -- don't calculate 2D coordinates, just use;                the current coordinates (default is False);  ; OASA is used for 2D coordinate generation and depiction. Tkinter and; Python Imaging Library are required for image display.; localopt(self, forcefield='mmff94', steps=500)Locally optimize the coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 500;  ; If the molecule does not have any coordinates, make3D() is; called before the optimization. Note that the molecule needs; to have explicit hydrogens. If not, call addh().; make3D(self, forcefield='mmff94', steps=50)Generate 3D coordinates.;  ; Optional parameters:;    forcefield -- default is ""mmff94"". See the forcefields variable;                  for a list of available forcefields.;    steps -- default is 50;  ; Once coordinates are generated, hydrogens are added and a quick; local optimization is carried out with 50 steps and the; MMFF94 forcefield. Call localopt() if you want; to improve the coordinates further.; removeh(self)Remove hydrogens.; write(self, format='smi', filename=None, overwrite=False)Write the molecule to a file or return a string.;  ; Optional parameters:;    format -- see the informats variable for a list of available;              output formats (default is ""smi"");    filename -- default is None;    overwite -- if the output file already exists, should it;                be overwritten? (default is False);  ; If a filename is specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers; get = conformers(self). data; get = data(self). dim; get = dim(self). energy; get = energy(self). exactmass; get = exactmass(se",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:12145,Performance,cache,cache,12145,"ctproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Smarts' objects>list of weak references to the object (if defined).  ; Functions;        ; readfile(format, filename)Iterate over the molecules in a file.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    filename;  ; You can access the first molecule in a file using the next() method; of the iterator:;     mol = readfile(""smi"", ""myfile.smi"").next();     ; You can make a list of the molecules in a file using:;     mols = list(readfile(""smi"", ""myfile.smi""));     ; You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"",""head.sdf""):; ...     atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; readstring(format, string)Read in a molecule from a string.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    string;  ; Example:; >>> input = ""C1=CC=CS1""; >>> mymol = readstring(""smi"",input); >>> len(mymol.atoms); 5.  ; Data;        ; descs = ['LogP', 'MR', 'TPSA']; forcefields = ['uff', 'mmff94', 'ghemical']; fps = ['FP2', 'FP3', 'FP4']; informats = {'acr': 'ACR format', 'adfout': 'ADF output format', 'alc': 'Alchemy format', 'arc': 'Accelrys/MSI Biosym/Insight II CAR format', 'bgf': 'MSI BGF format', 'box': 'Dock 3.5 Box format', 'bs': 'Ball and Stick format', 'c3d1': 'Chem3D Cartesian 1 format', 'c3d2': 'Chem3D Cartesian 2 format', 'caccrt': 'Cacao Cartesian format', ...}; oasa = None; operations = ['Gen3D']; outformats = {'adf': 'ADF cartesian input format', 'alc': 'Alchemy format', 'bgf': 'MSI BGF format', 'box': 'Dock 3.5 Box format', 'bs': 'Ball and Stick format', 'c3d1': 'Chem3D Cartesian 1 format', 'c3d2': 'Chem3D Cartesian 2 format', 'cac': 'CAChe MolStruct format', 'caccrt': 'Cacao Cartesian format', 'cache': 'CAChe MolStruct format', ...}. ",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:63,Security,access,accessing,63,". Python: module pybel.  ;  pybel; pybel - A Python module for accessing OpenBabel;  ; Global variables:;   ob - the underlying SWIG bindings for OpenBabel;   informats - a dictionary of supported input formats;   outformats - a dictionary of supported output formats;   descs - a list of supported descriptors;   fps - a list of supported fingerprint types;   forcefields - a list of supported forcefields.  ; Modules;        ; Image; math; openbabel; os; ImageTk; tempfile; Tkinter.  ; Classes;        . __builtin__.object. Atom; Fingerprint; Molecule; MoleculeData; Outputfile; Smarts.  ; class Atom(__builtin__.object);    ; Represent a Pybel atom.;  ; Required parameter:;    OBAtom -- an Open Babel OBAtom;     ; Attributes:;    atomicmass, atomicnum, cidx, coords, coordidx, exactmass,;    formalcharge, heavyvalence, heterovalence, hyb, idx,;    implicitvalence, isotope, partialcharge, spin, type,;    valence, vector.;  ; (refer to the Open Babel library documentation for more info).;  ; The original Open Babel atom can be accessed using the attribute:;    OBAtom ;  ; Methods defined here:; __init__(self, OBAtom); __str__(self). Properties defined here:; atomicmass; get = atomicmass(self). atomicnum; get = atomicnum(self). cidx; get = cidx(self). coordidx; get = coordidx(self). coords; get = coords(self). exactmass; get = exactmass(self). formalcharge; get = formalcharge(self). heavyvalence; get = heavyvalence(self). heterovalence; get = heterovalence(self). hyb; get = hyb(self). idx; get = idx(self). implicitvalence; get = implicitvalence(self). isotope; get = isotope(self). partialcharge; get = partialcharge(self). spin; get = spin(self). type; get = type(self). valence; get = valence(self). vector; get = vector(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Atom' objects>list of weak references to the object (if defined); .  ; class Fingerprint(__bu",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:1035,Security,access,accessed,1035,"sing OpenBabel;  ; Global variables:;   ob - the underlying SWIG bindings for OpenBabel;   informats - a dictionary of supported input formats;   outformats - a dictionary of supported output formats;   descs - a list of supported descriptors;   fps - a list of supported fingerprint types;   forcefields - a list of supported forcefields.  ; Modules;        ; Image; math; openbabel; os; ImageTk; tempfile; Tkinter.  ; Classes;        . __builtin__.object. Atom; Fingerprint; Molecule; MoleculeData; Outputfile; Smarts.  ; class Atom(__builtin__.object);    ; Represent a Pybel atom.;  ; Required parameter:;    OBAtom -- an Open Babel OBAtom;     ; Attributes:;    atomicmass, atomicnum, cidx, coords, coordidx, exactmass,;    formalcharge, heavyvalence, heterovalence, hyb, idx,;    implicitvalence, isotope, partialcharge, spin, type,;    valence, vector.;  ; (refer to the Open Babel library documentation for more info).;  ; The original Open Babel atom can be accessed using the attribute:;    OBAtom ;  ; Methods defined here:; __init__(self, OBAtom); __str__(self). Properties defined here:; atomicmass; get = atomicmass(self). atomicnum; get = atomicnum(self). cidx; get = cidx(self). coordidx; get = coordidx(self). coords; get = coords(self). exactmass; get = exactmass(self). formalcharge; get = formalcharge(self). heavyvalence; get = heavyvalence(self). heterovalence; get = heterovalence(self). hyb; get = hyb(self). idx; get = idx(self). implicitvalence; get = implicitvalence(self). isotope; get = isotope(self). partialcharge; get = partialcharge(self). spin; get = spin(self). type; get = type(self). valence; get = valence(self). vector; get = vector(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Atom' objects>list of weak references to the object (if defined); .  ; class Fingerprint(__builtin__.object);    ; A Molecular Fingerprint.;  ; Required paramet",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:3331,Security,access,accessed,3331," coeff. For example,;    given two Fingerprints 'a', and 'b', the Tanimoto coefficient is given by:;       tanimoto = a | b ;  ; Methods defined here:; __init__(self, fingerprint); __or__(self, other); __str__(self). Properties defined here:; bits; get = bits(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Fingerprint' objects>list of weak references to the object (if defined); .  ; class Molecule(__builtin__.object);    ; Represent a Pybel Molecule.;  ; Required parameter:;    OBMol -- an Open Babel OBMol or any type of cinfony Molecule;  ; Attributes:;    atoms, charge, conformers, data, dim, energy, exactmass, formula, ;    molwt, spin, sssr, title, unitcell.; (refer to the Open Babel library documentation for more info).;  ; Methods:;    addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(), removeh(),;    write() ;   ; The underlying Open Babel molecule can be accessed using the attribute:;    OBMol ;  ; Methods defined here:; __init__(self, OBMol); __iter__(self)Iterate over the Atoms of the Molecule.;  ; This allows constructions such as the following:;    for atom in mymol:;        print atom; __str__(self); addh(self)Add hydrogens.; calcdesc(self, descnames=[])Calculate descriptor values.;  ; Optional parameter:;    descnames -- a list of names of descriptors;  ; If descnames is not specified, all available descriptors are; calculated. See the descs variable for a list of available; descriptors.; calcfp(self, fptype='FP2')Calculate a molecular fingerprint.;  ; Optional parameters:;    fptype -- the fingerprint type (default is ""FP2""). See the;              fps variable for a list of of available fingerprint;              types.; draw(self, show=True, filename=None, update=False, usecoords=False)Create a 2D depiction of the molecule.;  ; Optional parameters:;   show -- display on screen (default is True);   filename -- write to file (de",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:7074,Security,access,accessor,7074,"specified, the result is written to a file.; Otherwise, a string is returned containing the result.;  ; To write multiple molecules to the same file you should use; the Outputfile class. Properties defined here:; atoms; get = atoms(self). charge; get = charge(self). conformers; get = conformers(self). data; get = data(self). dim; get = dim(self). energy; get = energy(self). exactmass; get = exactmass(self). formula; get = formula(self). molwt; get = molwt(self). spin; get = spin(self). sssr; get = sssr(self). title; get = _gettitle(self). set = _settitle(self, val). unitcell; get = unitcell(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Molecule' objects>list of weak references to the object (if defined); .  ; class MoleculeData(__builtin__.object);    ; Store molecule data in a dictionary-type object;  ; Required parameters:;   obmol -- an Open Babel OBMol ;  ; Methods and accessor methods are like those of a dictionary except; that the data is retrieved on-the-fly from the underlying OBMol.;  ; Example:; >>> mol = readfile(""sdf"", 'head.sdf').next(); >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0041  25.10.2001', 'NSC': '1'}; >>> print len(data), data.keys(), data.has_key(""NSC""); 2 ['Comment', 'NSC'] True; >>> print data['Comment']; CORINA 2.61 0041  25.10.2001; >>> data['Comment'] = 'This is a new comment'; >>> for k,v in data.iteritems():; ...    print k, ""-->"", v; Comment --> This is a new comment; NSC --> 1; >>> del data['NSC']; >>> print len(data), data.keys(), data.has_key(""NSC""); 1 ['Comment'] False ;  ; Methods defined here:; __contains__(self, key); __delitem__(self, key); __getitem__(self, key); __init__(self, obmol); __iter__(self); __len__(self); __repr__(self); __setitem__(self, key, value); clear(self); has_key(self, key); items(self); iteritems(self); keys(self); update(self, dictionary); values(self). Data and oth",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:10587,Security,access,access,10587,"CCN(CC)CC"") # triethylamine; >>> smarts = Smarts(""[#6][#6]"") # Matches an ethyl group; >>> print smarts.findall(mol) ; [(1, 2), (4, 5), (6, 7)];  ; The numbers returned are the indices (starting from 1) of the atoms; that match the SMARTS pattern. In this case, there are three matches; for each of the three ethyl groups in the molecule. ;  ; Methods defined here:; __init__(self, smartspattern)Initialise with a SMARTS pattern.; findall(self, molecule)Find all matches of the SMARTS pattern to a particular molecule.;  ; Required parameters:;    molecule. Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'Smarts' objects>list of weak references to the object (if defined).  ; Functions;        ; readfile(format, filename)Iterate over the molecules in a file.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    filename;  ; You can access the first molecule in a file using the next() method; of the iterator:;     mol = readfile(""smi"", ""myfile.smi"").next();     ; You can make a list of the molecules in a file using:;     mols = list(readfile(""smi"", ""myfile.smi""));     ; You can iterate over the molecules in a file as shown in the; following code snippet:; >>> atomtotal = 0; >>> for mol in readfile(""sdf"",""head.sdf""):; ...     atomtotal += len(mol.atoms); ...; >>> print atomtotal; 43; readstring(format, string)Read in a molecule from a string.;  ; Required parameters:;    format - see the informats variable for a list of available;             input formats;    string;  ; Example:; >>> input = ""C1=CC=CS1""; >>> mymol = readstring(""smi"",input); >>> len(mymol.atoms); 5.  ; Data;        ; descs = ['LogP', 'MR', 'TPSA']; forcefields = ['uff', 'mmff94', 'ghemical']; fps = ['FP2', 'FP3', 'FP4']; informats = {'acr': 'ACR format', 'adfout': 'ADF output format', 'alc': 'Alchemy format', 'arc': 'Accelrys/MSI Bios",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html:7939,Usability,clear,clear,7939,"the object (if defined); .  ; class MoleculeData(__builtin__.object);    ; Store molecule data in a dictionary-type object;  ; Required parameters:;   obmol -- an Open Babel OBMol ;  ; Methods and accessor methods are like those of a dictionary except; that the data is retrieved on-the-fly from the underlying OBMol.;  ; Example:; >>> mol = readfile(""sdf"", 'head.sdf').next(); >>> data = mol.data; >>> print data; {'Comment': 'CORINA 2.61 0041  25.10.2001', 'NSC': '1'}; >>> print len(data), data.keys(), data.has_key(""NSC""); 2 ['Comment', 'NSC'] True; >>> print data['Comment']; CORINA 2.61 0041  25.10.2001; >>> data['Comment'] = 'This is a new comment'; >>> for k,v in data.iteritems():; ...    print k, ""-->"", v; Comment --> This is a new comment; NSC --> 1; >>> del data['NSC']; >>> print len(data), data.keys(), data.has_key(""NSC""); 1 ['Comment'] False ;  ; Methods defined here:; __contains__(self, key); __delitem__(self, key); __getitem__(self, key); __init__(self, obmol); __iter__(self); __len__(self); __repr__(self); __setitem__(self, key, value); clear(self); has_key(self, key); items(self); iteritems(self); keys(self); update(self, dictionary); values(self). Data and other attributes defined here:; __dict__ = <dictproxy object>dictionary for instance variables (if defined); __weakref__ = <attribute '__weakref__' of 'MoleculeData' objects>list of weak references to the object (if defined); .  ; class Outputfile(__builtin__.object);    ; Represent a file to which *output* is to be sent.;  ; Although it's possible to write a single molecule to a file by; calling the write() method of a molecule, if multiple molecules; are to be written to the same file you should use the Outputfile; class.;  ; Required parameters:;    format - see the outformats variable for a list of available;             output formats;    filename;  ; Optional parameters:;    overwrite -- if the output file already exists, should it;                be overwritten? (default is False);               ",MatchSource.DOCS,scripts/python/pybelapi.html,openbabel,openbabel,openbabel-3-1-1,http://openbabel.org/,https://github.com/openbabel/openbabel/tree/openbabel-3-1-1/scripts/python/pybelapi.html
